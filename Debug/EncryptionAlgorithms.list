
EncryptionAlgorithms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cf0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000264c  08003eb4  08003eb4  00013eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006500  08006500  000200b0  2**0
                  CONTENTS
  4 .ARM          00000008  08006500  08006500  00016500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006508  08006508  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006508  08006508  00016508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800650c  0800650c  0001650c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  08006510  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000062c  200000b0  080065c0  000200b0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200006dc  080065c0  000206dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015818  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003134  00000000  00000000  000358f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d0  00000000  00000000  00038a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f80  00000000  00000000  00039b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000225e5  00000000  00000000  0003aa80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001671c  00000000  00000000  0005d065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d9c6a  00000000  00000000  00073781  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014d3eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048ac  00000000  00000000  0014d43c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	200000b0 	.word	0x200000b0
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003e9c 	.word	0x08003e9c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	200000b4 	.word	0x200000b4
 8000200:	08003e9c 	.word	0x08003e9c

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000224:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000228:	f000 b974 	b.w	8000514 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	4604      	mov	r4, r0
 800024c:	468e      	mov	lr, r1
 800024e:	2b00      	cmp	r3, #0
 8000250:	d14d      	bne.n	80002ee <__udivmoddi4+0xaa>
 8000252:	428a      	cmp	r2, r1
 8000254:	4694      	mov	ip, r2
 8000256:	d969      	bls.n	800032c <__udivmoddi4+0xe8>
 8000258:	fab2 f282 	clz	r2, r2
 800025c:	b152      	cbz	r2, 8000274 <__udivmoddi4+0x30>
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	f1c2 0120 	rsb	r1, r2, #32
 8000266:	fa20 f101 	lsr.w	r1, r0, r1
 800026a:	fa0c fc02 	lsl.w	ip, ip, r2
 800026e:	ea41 0e03 	orr.w	lr, r1, r3
 8000272:	4094      	lsls	r4, r2
 8000274:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000278:	0c21      	lsrs	r1, r4, #16
 800027a:	fbbe f6f8 	udiv	r6, lr, r8
 800027e:	fa1f f78c 	uxth.w	r7, ip
 8000282:	fb08 e316 	mls	r3, r8, r6, lr
 8000286:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028a:	fb06 f107 	mul.w	r1, r6, r7
 800028e:	4299      	cmp	r1, r3
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x64>
 8000292:	eb1c 0303 	adds.w	r3, ip, r3
 8000296:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800029a:	f080 811f 	bcs.w	80004dc <__udivmoddi4+0x298>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 811c 	bls.w	80004dc <__udivmoddi4+0x298>
 80002a4:	3e02      	subs	r6, #2
 80002a6:	4463      	add	r3, ip
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b0:	fb08 3310 	mls	r3, r8, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 f707 	mul.w	r7, r0, r7
 80002bc:	42a7      	cmp	r7, r4
 80002be:	d90a      	bls.n	80002d6 <__udivmoddi4+0x92>
 80002c0:	eb1c 0404 	adds.w	r4, ip, r4
 80002c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002c8:	f080 810a 	bcs.w	80004e0 <__udivmoddi4+0x29c>
 80002cc:	42a7      	cmp	r7, r4
 80002ce:	f240 8107 	bls.w	80004e0 <__udivmoddi4+0x29c>
 80002d2:	4464      	add	r4, ip
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002da:	1be4      	subs	r4, r4, r7
 80002dc:	2600      	movs	r6, #0
 80002de:	b11d      	cbz	r5, 80002e8 <__udivmoddi4+0xa4>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c5 4300 	strd	r4, r3, [r5]
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xc2>
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	f000 80ef 	beq.w	80004d6 <__udivmoddi4+0x292>
 80002f8:	2600      	movs	r6, #0
 80002fa:	e9c5 0100 	strd	r0, r1, [r5]
 80002fe:	4630      	mov	r0, r6
 8000300:	4631      	mov	r1, r6
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f683 	clz	r6, r3
 800030a:	2e00      	cmp	r6, #0
 800030c:	d14a      	bne.n	80003a4 <__udivmoddi4+0x160>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd4>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80f9 	bhi.w	800050a <__udivmoddi4+0x2c6>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	469e      	mov	lr, r3
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa4>
 8000326:	e9c5 4e00 	strd	r4, lr, [r5]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa4>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xec>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 8092 	bne.w	800045e <__udivmoddi4+0x21a>
 800033a:	eba1 010c 	sub.w	r1, r1, ip
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f fe8c 	uxth.w	lr, ip
 8000346:	2601      	movs	r6, #1
 8000348:	0c20      	lsrs	r0, r4, #16
 800034a:	fbb1 f3f7 	udiv	r3, r1, r7
 800034e:	fb07 1113 	mls	r1, r7, r3, r1
 8000352:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000356:	fb0e f003 	mul.w	r0, lr, r3
 800035a:	4288      	cmp	r0, r1
 800035c:	d908      	bls.n	8000370 <__udivmoddi4+0x12c>
 800035e:	eb1c 0101 	adds.w	r1, ip, r1
 8000362:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x12a>
 8000368:	4288      	cmp	r0, r1
 800036a:	f200 80cb 	bhi.w	8000504 <__udivmoddi4+0x2c0>
 800036e:	4643      	mov	r3, r8
 8000370:	1a09      	subs	r1, r1, r0
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb1 f0f7 	udiv	r0, r1, r7
 8000378:	fb07 1110 	mls	r1, r7, r0, r1
 800037c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000380:	fb0e fe00 	mul.w	lr, lr, r0
 8000384:	45a6      	cmp	lr, r4
 8000386:	d908      	bls.n	800039a <__udivmoddi4+0x156>
 8000388:	eb1c 0404 	adds.w	r4, ip, r4
 800038c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000390:	d202      	bcs.n	8000398 <__udivmoddi4+0x154>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f200 80bb 	bhi.w	800050e <__udivmoddi4+0x2ca>
 8000398:	4608      	mov	r0, r1
 800039a:	eba4 040e 	sub.w	r4, r4, lr
 800039e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a2:	e79c      	b.n	80002de <__udivmoddi4+0x9a>
 80003a4:	f1c6 0720 	rsb	r7, r6, #32
 80003a8:	40b3      	lsls	r3, r6
 80003aa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ae:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b2:	fa20 f407 	lsr.w	r4, r0, r7
 80003b6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ba:	431c      	orrs	r4, r3
 80003bc:	40f9      	lsrs	r1, r7
 80003be:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c2:	fa00 f306 	lsl.w	r3, r0, r6
 80003c6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ca:	0c20      	lsrs	r0, r4, #16
 80003cc:	fa1f fe8c 	uxth.w	lr, ip
 80003d0:	fb09 1118 	mls	r1, r9, r8, r1
 80003d4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d8:	fb08 f00e 	mul.w	r0, r8, lr
 80003dc:	4288      	cmp	r0, r1
 80003de:	fa02 f206 	lsl.w	r2, r2, r6
 80003e2:	d90b      	bls.n	80003fc <__udivmoddi4+0x1b8>
 80003e4:	eb1c 0101 	adds.w	r1, ip, r1
 80003e8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003ec:	f080 8088 	bcs.w	8000500 <__udivmoddi4+0x2bc>
 80003f0:	4288      	cmp	r0, r1
 80003f2:	f240 8085 	bls.w	8000500 <__udivmoddi4+0x2bc>
 80003f6:	f1a8 0802 	sub.w	r8, r8, #2
 80003fa:	4461      	add	r1, ip
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f9 	udiv	r0, r1, r9
 8000404:	fb09 1110 	mls	r1, r9, r0, r1
 8000408:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800040c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000410:	458e      	cmp	lr, r1
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x1e2>
 8000414:	eb1c 0101 	adds.w	r1, ip, r1
 8000418:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800041c:	d26c      	bcs.n	80004f8 <__udivmoddi4+0x2b4>
 800041e:	458e      	cmp	lr, r1
 8000420:	d96a      	bls.n	80004f8 <__udivmoddi4+0x2b4>
 8000422:	3802      	subs	r0, #2
 8000424:	4461      	add	r1, ip
 8000426:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042a:	fba0 9402 	umull	r9, r4, r0, r2
 800042e:	eba1 010e 	sub.w	r1, r1, lr
 8000432:	42a1      	cmp	r1, r4
 8000434:	46c8      	mov	r8, r9
 8000436:	46a6      	mov	lr, r4
 8000438:	d356      	bcc.n	80004e8 <__udivmoddi4+0x2a4>
 800043a:	d053      	beq.n	80004e4 <__udivmoddi4+0x2a0>
 800043c:	b15d      	cbz	r5, 8000456 <__udivmoddi4+0x212>
 800043e:	ebb3 0208 	subs.w	r2, r3, r8
 8000442:	eb61 010e 	sbc.w	r1, r1, lr
 8000446:	fa01 f707 	lsl.w	r7, r1, r7
 800044a:	fa22 f306 	lsr.w	r3, r2, r6
 800044e:	40f1      	lsrs	r1, r6
 8000450:	431f      	orrs	r7, r3
 8000452:	e9c5 7100 	strd	r7, r1, [r5]
 8000456:	2600      	movs	r6, #0
 8000458:	4631      	mov	r1, r6
 800045a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045e:	f1c2 0320 	rsb	r3, r2, #32
 8000462:	40d8      	lsrs	r0, r3
 8000464:	fa0c fc02 	lsl.w	ip, ip, r2
 8000468:	fa21 f303 	lsr.w	r3, r1, r3
 800046c:	4091      	lsls	r1, r2
 800046e:	4301      	orrs	r1, r0
 8000470:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000474:	fa1f fe8c 	uxth.w	lr, ip
 8000478:	fbb3 f0f7 	udiv	r0, r3, r7
 800047c:	fb07 3610 	mls	r6, r7, r0, r3
 8000480:	0c0b      	lsrs	r3, r1, #16
 8000482:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000486:	fb00 f60e 	mul.w	r6, r0, lr
 800048a:	429e      	cmp	r6, r3
 800048c:	fa04 f402 	lsl.w	r4, r4, r2
 8000490:	d908      	bls.n	80004a4 <__udivmoddi4+0x260>
 8000492:	eb1c 0303 	adds.w	r3, ip, r3
 8000496:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800049a:	d22f      	bcs.n	80004fc <__udivmoddi4+0x2b8>
 800049c:	429e      	cmp	r6, r3
 800049e:	d92d      	bls.n	80004fc <__udivmoddi4+0x2b8>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4463      	add	r3, ip
 80004a4:	1b9b      	subs	r3, r3, r6
 80004a6:	b289      	uxth	r1, r1
 80004a8:	fbb3 f6f7 	udiv	r6, r3, r7
 80004ac:	fb07 3316 	mls	r3, r7, r6, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb06 f30e 	mul.w	r3, r6, lr
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x28a>
 80004bc:	eb1c 0101 	adds.w	r1, ip, r1
 80004c0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004c4:	d216      	bcs.n	80004f4 <__udivmoddi4+0x2b0>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d914      	bls.n	80004f4 <__udivmoddi4+0x2b0>
 80004ca:	3e02      	subs	r6, #2
 80004cc:	4461      	add	r1, ip
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d4:	e738      	b.n	8000348 <__udivmoddi4+0x104>
 80004d6:	462e      	mov	r6, r5
 80004d8:	4628      	mov	r0, r5
 80004da:	e705      	b.n	80002e8 <__udivmoddi4+0xa4>
 80004dc:	4606      	mov	r6, r0
 80004de:	e6e3      	b.n	80002a8 <__udivmoddi4+0x64>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6f8      	b.n	80002d6 <__udivmoddi4+0x92>
 80004e4:	454b      	cmp	r3, r9
 80004e6:	d2a9      	bcs.n	800043c <__udivmoddi4+0x1f8>
 80004e8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ec:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f0:	3801      	subs	r0, #1
 80004f2:	e7a3      	b.n	800043c <__udivmoddi4+0x1f8>
 80004f4:	4646      	mov	r6, r8
 80004f6:	e7ea      	b.n	80004ce <__udivmoddi4+0x28a>
 80004f8:	4620      	mov	r0, r4
 80004fa:	e794      	b.n	8000426 <__udivmoddi4+0x1e2>
 80004fc:	4640      	mov	r0, r8
 80004fe:	e7d1      	b.n	80004a4 <__udivmoddi4+0x260>
 8000500:	46d0      	mov	r8, sl
 8000502:	e77b      	b.n	80003fc <__udivmoddi4+0x1b8>
 8000504:	3b02      	subs	r3, #2
 8000506:	4461      	add	r1, ip
 8000508:	e732      	b.n	8000370 <__udivmoddi4+0x12c>
 800050a:	4630      	mov	r0, r6
 800050c:	e709      	b.n	8000322 <__udivmoddi4+0xde>
 800050e:	4464      	add	r4, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e742      	b.n	800039a <__udivmoddi4+0x156>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <RsaTest>:
	}
}


void RsaTest(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b09a      	sub	sp, #104	; 0x68
 800051c:	af00      	add	r7, sp, #0
	yarrowInit(&contextYarrow);
 800051e:	4812      	ldr	r0, [pc, #72]	; (8000568 <RsaTest+0x50>)
 8000520:	f001 fbe2 	bl	8001ce8 <yarrowInit>
	yarrowSeed(&contextYarrow, seed, sizeof(seed));
 8000524:	2240      	movs	r2, #64	; 0x40
 8000526:	4911      	ldr	r1, [pc, #68]	; (800056c <RsaTest+0x54>)
 8000528:	480f      	ldr	r0, [pc, #60]	; (8000568 <RsaTest+0x50>)
 800052a:	f001 fc02 	bl	8001d32 <yarrowSeed>

	RsaInit();
 800052e:	f000 f823 	bl	8000578 <RsaInit>
	uint32_t size ;
	size = strlen(input);
 8000532:	480f      	ldr	r0, [pc, #60]	; (8000570 <RsaTest+0x58>)
 8000534:	f7ff fe66 	bl	8000204 <strlen>
 8000538:	6678      	str	r0, [r7, #100]	; 0x64
	uint8_t buf[100];
	itoa(size, buf, 10);
 800053a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800053c:	4639      	mov	r1, r7
 800053e:	220a      	movs	r2, #10
 8000540:	4618      	mov	r0, r3
 8000542:	f003 fb43 	bl	8003bcc <itoa>
	HAL_UART_Transmit(&huart2, buf, strlen(buf), HAL_MAX_DELAY);
 8000546:	463b      	mov	r3, r7
 8000548:	4618      	mov	r0, r3
 800054a:	f7ff fe5b 	bl	8000204 <strlen>
 800054e:	4603      	mov	r3, r0
 8000550:	b29a      	uxth	r2, r3
 8000552:	4639      	mov	r1, r7
 8000554:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000558:	4806      	ldr	r0, [pc, #24]	; (8000574 <RsaTest+0x5c>)
 800055a:	f002 ff80 	bl	800345e <HAL_UART_Transmit>
//	RsaPKCS1();
//	RsaPSS();

}
 800055e:	bf00      	nop
 8000560:	3768      	adds	r7, #104	; 0x68
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	200000d0 	.word	0x200000d0
 800056c:	20000000 	.word	0x20000000
 8000570:	08005c60 	.word	0x08005c60
 8000574:	20000684 	.word	0x20000684

08000578 <RsaInit>:

void RsaInit(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	RsaKeysInit();
 800057c:	f000 f802 	bl	8000584 <RsaKeysInit>
}
 8000580:	bf00      	nop
 8000582:	bd80      	pop	{r7, pc}

08000584 <RsaKeysInit>:
	memset(sig, 0, sizeof(sig));
	sigLen = 0;
}

void RsaKeysInit(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	/*------------1024---------------*/
	mpiImport(&rsaPrivateKeys[0].n, n1, sizeof(n1), MPI_FORMAT_BIG_ENDIAN);
 8000588:	2301      	movs	r3, #1
 800058a:	2240      	movs	r2, #64	; 0x40
 800058c:	497d      	ldr	r1, [pc, #500]	; (8000784 <RsaKeysInit+0x200>)
 800058e:	487e      	ldr	r0, [pc, #504]	; (8000788 <RsaKeysInit+0x204>)
 8000590:	f000 f9c2 	bl	8000918 <mpiImport>
	mpiImport(&rsaPrivateKeys[0].e, e, sizeof(e), MPI_FORMAT_BIG_ENDIAN);
 8000594:	2301      	movs	r3, #1
 8000596:	2203      	movs	r2, #3
 8000598:	497c      	ldr	r1, [pc, #496]	; (800078c <RsaKeysInit+0x208>)
 800059a:	487d      	ldr	r0, [pc, #500]	; (8000790 <RsaKeysInit+0x20c>)
 800059c:	f000 f9bc 	bl	8000918 <mpiImport>
	mpiImport(&rsaPrivateKeys[0].d, d1, sizeof(d1), MPI_FORMAT_BIG_ENDIAN);
 80005a0:	2301      	movs	r3, #1
 80005a2:	2240      	movs	r2, #64	; 0x40
 80005a4:	497b      	ldr	r1, [pc, #492]	; (8000794 <RsaKeysInit+0x210>)
 80005a6:	487c      	ldr	r0, [pc, #496]	; (8000798 <RsaKeysInit+0x214>)
 80005a8:	f000 f9b6 	bl	8000918 <mpiImport>
	mpiImport(&rsaPrivateKeys[0].p, p1, sizeof(p1), MPI_FORMAT_BIG_ENDIAN);
 80005ac:	2301      	movs	r3, #1
 80005ae:	2220      	movs	r2, #32
 80005b0:	497a      	ldr	r1, [pc, #488]	; (800079c <RsaKeysInit+0x218>)
 80005b2:	487b      	ldr	r0, [pc, #492]	; (80007a0 <RsaKeysInit+0x21c>)
 80005b4:	f000 f9b0 	bl	8000918 <mpiImport>
	mpiImport(&rsaPrivateKeys[0].q, q1, sizeof(q1), MPI_FORMAT_BIG_ENDIAN);
 80005b8:	2301      	movs	r3, #1
 80005ba:	2220      	movs	r2, #32
 80005bc:	4979      	ldr	r1, [pc, #484]	; (80007a4 <RsaKeysInit+0x220>)
 80005be:	487a      	ldr	r0, [pc, #488]	; (80007a8 <RsaKeysInit+0x224>)
 80005c0:	f000 f9aa 	bl	8000918 <mpiImport>
	mpiImport(&rsaPrivateKeys[0].dp, dp1, sizeof(dp1), MPI_FORMAT_BIG_ENDIAN);
 80005c4:	2301      	movs	r3, #1
 80005c6:	2220      	movs	r2, #32
 80005c8:	4978      	ldr	r1, [pc, #480]	; (80007ac <RsaKeysInit+0x228>)
 80005ca:	4879      	ldr	r0, [pc, #484]	; (80007b0 <RsaKeysInit+0x22c>)
 80005cc:	f000 f9a4 	bl	8000918 <mpiImport>
	mpiImport(&rsaPrivateKeys[0].dq, dq1, sizeof(dq1), MPI_FORMAT_BIG_ENDIAN);
 80005d0:	2301      	movs	r3, #1
 80005d2:	2220      	movs	r2, #32
 80005d4:	4977      	ldr	r1, [pc, #476]	; (80007b4 <RsaKeysInit+0x230>)
 80005d6:	4878      	ldr	r0, [pc, #480]	; (80007b8 <RsaKeysInit+0x234>)
 80005d8:	f000 f99e 	bl	8000918 <mpiImport>
	mpiImport(&rsaPrivateKeys[0].qinv, qinv1, sizeof(qinv1), MPI_FORMAT_BIG_ENDIAN);
 80005dc:	2301      	movs	r3, #1
 80005de:	2220      	movs	r2, #32
 80005e0:	4976      	ldr	r1, [pc, #472]	; (80007bc <RsaKeysInit+0x238>)
 80005e2:	4877      	ldr	r0, [pc, #476]	; (80007c0 <RsaKeysInit+0x23c>)
 80005e4:	f000 f998 	bl	8000918 <mpiImport>

	mpiImport(&rsaPublicKeys[0].n, n1, sizeof(n1), MPI_FORMAT_BIG_ENDIAN);
 80005e8:	2301      	movs	r3, #1
 80005ea:	2240      	movs	r2, #64	; 0x40
 80005ec:	4965      	ldr	r1, [pc, #404]	; (8000784 <RsaKeysInit+0x200>)
 80005ee:	4875      	ldr	r0, [pc, #468]	; (80007c4 <RsaKeysInit+0x240>)
 80005f0:	f000 f992 	bl	8000918 <mpiImport>
	mpiImport(&rsaPublicKeys[0].e, e, sizeof(e), MPI_FORMAT_BIG_ENDIAN);
 80005f4:	2301      	movs	r3, #1
 80005f6:	2203      	movs	r2, #3
 80005f8:	4964      	ldr	r1, [pc, #400]	; (800078c <RsaKeysInit+0x208>)
 80005fa:	4873      	ldr	r0, [pc, #460]	; (80007c8 <RsaKeysInit+0x244>)
 80005fc:	f000 f98c 	bl	8000918 <mpiImport>

	/*------------2048---------------*/
	mpiImport(&rsaPrivateKeys[1].n, n2, sizeof(n2), MPI_FORMAT_BIG_ENDIAN);
 8000600:	2301      	movs	r3, #1
 8000602:	2281      	movs	r2, #129	; 0x81
 8000604:	4971      	ldr	r1, [pc, #452]	; (80007cc <RsaKeysInit+0x248>)
 8000606:	4872      	ldr	r0, [pc, #456]	; (80007d0 <RsaKeysInit+0x24c>)
 8000608:	f000 f986 	bl	8000918 <mpiImport>
	mpiImport(&rsaPrivateKeys[1].e, e, sizeof(e), MPI_FORMAT_BIG_ENDIAN);
 800060c:	2301      	movs	r3, #1
 800060e:	2203      	movs	r2, #3
 8000610:	495e      	ldr	r1, [pc, #376]	; (800078c <RsaKeysInit+0x208>)
 8000612:	4870      	ldr	r0, [pc, #448]	; (80007d4 <RsaKeysInit+0x250>)
 8000614:	f000 f980 	bl	8000918 <mpiImport>
	mpiImport(&rsaPrivateKeys[1].d, d2, sizeof(d2), MPI_FORMAT_BIG_ENDIAN);
 8000618:	2301      	movs	r3, #1
 800061a:	2280      	movs	r2, #128	; 0x80
 800061c:	496e      	ldr	r1, [pc, #440]	; (80007d8 <RsaKeysInit+0x254>)
 800061e:	486f      	ldr	r0, [pc, #444]	; (80007dc <RsaKeysInit+0x258>)
 8000620:	f000 f97a 	bl	8000918 <mpiImport>
	mpiImport(&rsaPrivateKeys[1].p, p2, sizeof(p2), MPI_FORMAT_BIG_ENDIAN);
 8000624:	2301      	movs	r3, #1
 8000626:	2241      	movs	r2, #65	; 0x41
 8000628:	496d      	ldr	r1, [pc, #436]	; (80007e0 <RsaKeysInit+0x25c>)
 800062a:	486e      	ldr	r0, [pc, #440]	; (80007e4 <RsaKeysInit+0x260>)
 800062c:	f000 f974 	bl	8000918 <mpiImport>
	mpiImport(&rsaPrivateKeys[1].q, q2, sizeof(q2), MPI_FORMAT_BIG_ENDIAN);
 8000630:	2301      	movs	r3, #1
 8000632:	2241      	movs	r2, #65	; 0x41
 8000634:	496c      	ldr	r1, [pc, #432]	; (80007e8 <RsaKeysInit+0x264>)
 8000636:	486d      	ldr	r0, [pc, #436]	; (80007ec <RsaKeysInit+0x268>)
 8000638:	f000 f96e 	bl	8000918 <mpiImport>
	mpiImport(&rsaPrivateKeys[1].dp, dp2, sizeof(dp2), MPI_FORMAT_BIG_ENDIAN);
 800063c:	2301      	movs	r3, #1
 800063e:	2240      	movs	r2, #64	; 0x40
 8000640:	496b      	ldr	r1, [pc, #428]	; (80007f0 <RsaKeysInit+0x26c>)
 8000642:	486c      	ldr	r0, [pc, #432]	; (80007f4 <RsaKeysInit+0x270>)
 8000644:	f000 f968 	bl	8000918 <mpiImport>
	mpiImport(&rsaPrivateKeys[1].dq, dq2, sizeof(dq2), MPI_FORMAT_BIG_ENDIAN);
 8000648:	2301      	movs	r3, #1
 800064a:	2241      	movs	r2, #65	; 0x41
 800064c:	496a      	ldr	r1, [pc, #424]	; (80007f8 <RsaKeysInit+0x274>)
 800064e:	486b      	ldr	r0, [pc, #428]	; (80007fc <RsaKeysInit+0x278>)
 8000650:	f000 f962 	bl	8000918 <mpiImport>
	mpiImport(&rsaPrivateKeys[1].qinv, qinv2, sizeof(qinv2), MPI_FORMAT_BIG_ENDIAN);
 8000654:	2301      	movs	r3, #1
 8000656:	2240      	movs	r2, #64	; 0x40
 8000658:	4969      	ldr	r1, [pc, #420]	; (8000800 <RsaKeysInit+0x27c>)
 800065a:	486a      	ldr	r0, [pc, #424]	; (8000804 <RsaKeysInit+0x280>)
 800065c:	f000 f95c 	bl	8000918 <mpiImport>

	mpiImport(&rsaPublicKeys[1].n, n2, sizeof(n2), MPI_FORMAT_BIG_ENDIAN);
 8000660:	2301      	movs	r3, #1
 8000662:	2281      	movs	r2, #129	; 0x81
 8000664:	4959      	ldr	r1, [pc, #356]	; (80007cc <RsaKeysInit+0x248>)
 8000666:	4868      	ldr	r0, [pc, #416]	; (8000808 <RsaKeysInit+0x284>)
 8000668:	f000 f956 	bl	8000918 <mpiImport>
	mpiImport(&rsaPublicKeys[1].e, e, sizeof(e), MPI_FORMAT_BIG_ENDIAN);
 800066c:	2301      	movs	r3, #1
 800066e:	2203      	movs	r2, #3
 8000670:	4946      	ldr	r1, [pc, #280]	; (800078c <RsaKeysInit+0x208>)
 8000672:	4866      	ldr	r0, [pc, #408]	; (800080c <RsaKeysInit+0x288>)
 8000674:	f000 f950 	bl	8000918 <mpiImport>

	/*------------3072---------------*/
	mpiImport(&rsaPrivateKeys[2].n, n3, sizeof(n3), MPI_FORMAT_BIG_ENDIAN);
 8000678:	2301      	movs	r3, #1
 800067a:	f240 1281 	movw	r2, #385	; 0x181
 800067e:	4964      	ldr	r1, [pc, #400]	; (8000810 <RsaKeysInit+0x28c>)
 8000680:	4864      	ldr	r0, [pc, #400]	; (8000814 <RsaKeysInit+0x290>)
 8000682:	f000 f949 	bl	8000918 <mpiImport>
	mpiImport(&rsaPrivateKeys[2].e, e, sizeof(e), MPI_FORMAT_BIG_ENDIAN);
 8000686:	2301      	movs	r3, #1
 8000688:	2203      	movs	r2, #3
 800068a:	4940      	ldr	r1, [pc, #256]	; (800078c <RsaKeysInit+0x208>)
 800068c:	4862      	ldr	r0, [pc, #392]	; (8000818 <RsaKeysInit+0x294>)
 800068e:	f000 f943 	bl	8000918 <mpiImport>
	mpiImport(&rsaPrivateKeys[2].d, d3, sizeof(d3), MPI_FORMAT_BIG_ENDIAN);
 8000692:	2301      	movs	r3, #1
 8000694:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000698:	4960      	ldr	r1, [pc, #384]	; (800081c <RsaKeysInit+0x298>)
 800069a:	4861      	ldr	r0, [pc, #388]	; (8000820 <RsaKeysInit+0x29c>)
 800069c:	f000 f93c 	bl	8000918 <mpiImport>
	mpiImport(&rsaPrivateKeys[2].p, p3, sizeof(p3), MPI_FORMAT_BIG_ENDIAN);
 80006a0:	2301      	movs	r3, #1
 80006a2:	22c1      	movs	r2, #193	; 0xc1
 80006a4:	495f      	ldr	r1, [pc, #380]	; (8000824 <RsaKeysInit+0x2a0>)
 80006a6:	4860      	ldr	r0, [pc, #384]	; (8000828 <RsaKeysInit+0x2a4>)
 80006a8:	f000 f936 	bl	8000918 <mpiImport>
	mpiImport(&rsaPrivateKeys[2].q, q3, sizeof(q3), MPI_FORMAT_BIG_ENDIAN);
 80006ac:	2301      	movs	r3, #1
 80006ae:	22c1      	movs	r2, #193	; 0xc1
 80006b0:	495e      	ldr	r1, [pc, #376]	; (800082c <RsaKeysInit+0x2a8>)
 80006b2:	485f      	ldr	r0, [pc, #380]	; (8000830 <RsaKeysInit+0x2ac>)
 80006b4:	f000 f930 	bl	8000918 <mpiImport>
	mpiImport(&rsaPrivateKeys[2].dp, dp3, sizeof(dp3), MPI_FORMAT_BIG_ENDIAN);
 80006b8:	2301      	movs	r3, #1
 80006ba:	22c0      	movs	r2, #192	; 0xc0
 80006bc:	495d      	ldr	r1, [pc, #372]	; (8000834 <RsaKeysInit+0x2b0>)
 80006be:	485e      	ldr	r0, [pc, #376]	; (8000838 <RsaKeysInit+0x2b4>)
 80006c0:	f000 f92a 	bl	8000918 <mpiImport>
	mpiImport(&rsaPrivateKeys[2].dq, dq3, sizeof(dq3), MPI_FORMAT_BIG_ENDIAN);
 80006c4:	2301      	movs	r3, #1
 80006c6:	22c0      	movs	r2, #192	; 0xc0
 80006c8:	495c      	ldr	r1, [pc, #368]	; (800083c <RsaKeysInit+0x2b8>)
 80006ca:	485d      	ldr	r0, [pc, #372]	; (8000840 <RsaKeysInit+0x2bc>)
 80006cc:	f000 f924 	bl	8000918 <mpiImport>
	mpiImport(&rsaPrivateKeys[2].qinv, qinv3, sizeof(qinv3), MPI_FORMAT_BIG_ENDIAN);
 80006d0:	2301      	movs	r3, #1
 80006d2:	22c0      	movs	r2, #192	; 0xc0
 80006d4:	495b      	ldr	r1, [pc, #364]	; (8000844 <RsaKeysInit+0x2c0>)
 80006d6:	485c      	ldr	r0, [pc, #368]	; (8000848 <RsaKeysInit+0x2c4>)
 80006d8:	f000 f91e 	bl	8000918 <mpiImport>

	mpiImport(&rsaPublicKeys[2].n, n3, sizeof(n3), MPI_FORMAT_BIG_ENDIAN);
 80006dc:	2301      	movs	r3, #1
 80006de:	f240 1281 	movw	r2, #385	; 0x181
 80006e2:	494b      	ldr	r1, [pc, #300]	; (8000810 <RsaKeysInit+0x28c>)
 80006e4:	4859      	ldr	r0, [pc, #356]	; (800084c <RsaKeysInit+0x2c8>)
 80006e6:	f000 f917 	bl	8000918 <mpiImport>
	mpiImport(&rsaPublicKeys[2].e, e, sizeof(e), MPI_FORMAT_BIG_ENDIAN);
 80006ea:	2301      	movs	r3, #1
 80006ec:	2203      	movs	r2, #3
 80006ee:	4927      	ldr	r1, [pc, #156]	; (800078c <RsaKeysInit+0x208>)
 80006f0:	4857      	ldr	r0, [pc, #348]	; (8000850 <RsaKeysInit+0x2cc>)
 80006f2:	f000 f911 	bl	8000918 <mpiImport>

	/*------------4096---------------*/
	mpiImport(&rsaPrivateKeys[3].n, n4, sizeof(n4), MPI_FORMAT_BIG_ENDIAN);
 80006f6:	2301      	movs	r3, #1
 80006f8:	f240 12ff 	movw	r2, #511	; 0x1ff
 80006fc:	4955      	ldr	r1, [pc, #340]	; (8000854 <RsaKeysInit+0x2d0>)
 80006fe:	4856      	ldr	r0, [pc, #344]	; (8000858 <RsaKeysInit+0x2d4>)
 8000700:	f000 f90a 	bl	8000918 <mpiImport>
	mpiImport(&rsaPrivateKeys[3].e, e, sizeof(e), MPI_FORMAT_BIG_ENDIAN);
 8000704:	2301      	movs	r3, #1
 8000706:	2203      	movs	r2, #3
 8000708:	4920      	ldr	r1, [pc, #128]	; (800078c <RsaKeysInit+0x208>)
 800070a:	4854      	ldr	r0, [pc, #336]	; (800085c <RsaKeysInit+0x2d8>)
 800070c:	f000 f904 	bl	8000918 <mpiImport>
	mpiImport(&rsaPrivateKeys[3].d, d4, sizeof(d4), MPI_FORMAT_BIG_ENDIAN);
 8000710:	2301      	movs	r3, #1
 8000712:	f240 12ff 	movw	r2, #511	; 0x1ff
 8000716:	4952      	ldr	r1, [pc, #328]	; (8000860 <RsaKeysInit+0x2dc>)
 8000718:	4852      	ldr	r0, [pc, #328]	; (8000864 <RsaKeysInit+0x2e0>)
 800071a:	f000 f8fd 	bl	8000918 <mpiImport>
	mpiImport(&rsaPrivateKeys[3].p, p4, sizeof(p4), MPI_FORMAT_BIG_ENDIAN);
 800071e:	2301      	movs	r3, #1
 8000720:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000724:	4950      	ldr	r1, [pc, #320]	; (8000868 <RsaKeysInit+0x2e4>)
 8000726:	4851      	ldr	r0, [pc, #324]	; (800086c <RsaKeysInit+0x2e8>)
 8000728:	f000 f8f6 	bl	8000918 <mpiImport>
	mpiImport(&rsaPrivateKeys[3].q, q4, sizeof(q4), MPI_FORMAT_BIG_ENDIAN);
 800072c:	2301      	movs	r3, #1
 800072e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000732:	494f      	ldr	r1, [pc, #316]	; (8000870 <RsaKeysInit+0x2ec>)
 8000734:	484f      	ldr	r0, [pc, #316]	; (8000874 <RsaKeysInit+0x2f0>)
 8000736:	f000 f8ef 	bl	8000918 <mpiImport>
	mpiImport(&rsaPrivateKeys[3].dp, dp4, sizeof(dp4), MPI_FORMAT_BIG_ENDIAN);
 800073a:	2301      	movs	r3, #1
 800073c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000740:	494d      	ldr	r1, [pc, #308]	; (8000878 <RsaKeysInit+0x2f4>)
 8000742:	484e      	ldr	r0, [pc, #312]	; (800087c <RsaKeysInit+0x2f8>)
 8000744:	f000 f8e8 	bl	8000918 <mpiImport>
	mpiImport(&rsaPrivateKeys[3].dq, dq4, sizeof(dq4), MPI_FORMAT_BIG_ENDIAN);
 8000748:	2301      	movs	r3, #1
 800074a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800074e:	494c      	ldr	r1, [pc, #304]	; (8000880 <RsaKeysInit+0x2fc>)
 8000750:	484c      	ldr	r0, [pc, #304]	; (8000884 <RsaKeysInit+0x300>)
 8000752:	f000 f8e1 	bl	8000918 <mpiImport>
	mpiImport(&rsaPrivateKeys[3].qinv, qinv4, sizeof(qinv4), MPI_FORMAT_BIG_ENDIAN);
 8000756:	2301      	movs	r3, #1
 8000758:	f44f 7280 	mov.w	r2, #256	; 0x100
 800075c:	494a      	ldr	r1, [pc, #296]	; (8000888 <RsaKeysInit+0x304>)
 800075e:	484b      	ldr	r0, [pc, #300]	; (800088c <RsaKeysInit+0x308>)
 8000760:	f000 f8da 	bl	8000918 <mpiImport>

	mpiImport(&rsaPublicKeys[3].n, n4, sizeof(n4), MPI_FORMAT_BIG_ENDIAN);
 8000764:	2301      	movs	r3, #1
 8000766:	f240 12ff 	movw	r2, #511	; 0x1ff
 800076a:	493a      	ldr	r1, [pc, #232]	; (8000854 <RsaKeysInit+0x2d0>)
 800076c:	4848      	ldr	r0, [pc, #288]	; (8000890 <RsaKeysInit+0x30c>)
 800076e:	f000 f8d3 	bl	8000918 <mpiImport>
	mpiImport(&rsaPublicKeys[3].e, e, sizeof(e), MPI_FORMAT_BIG_ENDIAN);
 8000772:	2301      	movs	r3, #1
 8000774:	2203      	movs	r2, #3
 8000776:	4905      	ldr	r1, [pc, #20]	; (800078c <RsaKeysInit+0x208>)
 8000778:	4846      	ldr	r0, [pc, #280]	; (8000894 <RsaKeysInit+0x310>)
 800077a:	f000 f8cd 	bl	8000918 <mpiImport>
}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	08003eb8 	.word	0x08003eb8
 8000788:	20000400 	.word	0x20000400
 800078c:	08003eb4 	.word	0x08003eb4
 8000790:	2000040c 	.word	0x2000040c
 8000794:	08003ef8 	.word	0x08003ef8
 8000798:	20000418 	.word	0x20000418
 800079c:	08003f38 	.word	0x08003f38
 80007a0:	20000424 	.word	0x20000424
 80007a4:	08003f58 	.word	0x08003f58
 80007a8:	20000430 	.word	0x20000430
 80007ac:	08003f78 	.word	0x08003f78
 80007b0:	2000043c 	.word	0x2000043c
 80007b4:	08003f98 	.word	0x08003f98
 80007b8:	20000448 	.word	0x20000448
 80007bc:	08003fb8 	.word	0x08003fb8
 80007c0:	20000454 	.word	0x20000454
 80007c4:	20000590 	.word	0x20000590
 80007c8:	2000059c 	.word	0x2000059c
 80007cc:	08003fd8 	.word	0x08003fd8
 80007d0:	20000464 	.word	0x20000464
 80007d4:	20000470 	.word	0x20000470
 80007d8:	0800405c 	.word	0x0800405c
 80007dc:	2000047c 	.word	0x2000047c
 80007e0:	080040dc 	.word	0x080040dc
 80007e4:	20000488 	.word	0x20000488
 80007e8:	08004120 	.word	0x08004120
 80007ec:	20000494 	.word	0x20000494
 80007f0:	08004164 	.word	0x08004164
 80007f4:	200004a0 	.word	0x200004a0
 80007f8:	080041a4 	.word	0x080041a4
 80007fc:	200004ac 	.word	0x200004ac
 8000800:	080041e8 	.word	0x080041e8
 8000804:	200004b8 	.word	0x200004b8
 8000808:	200005a8 	.word	0x200005a8
 800080c:	200005b4 	.word	0x200005b4
 8000810:	08004228 	.word	0x08004228
 8000814:	200004c8 	.word	0x200004c8
 8000818:	200004d4 	.word	0x200004d4
 800081c:	080043ac 	.word	0x080043ac
 8000820:	200004e0 	.word	0x200004e0
 8000824:	0800452c 	.word	0x0800452c
 8000828:	200004ec 	.word	0x200004ec
 800082c:	080045f0 	.word	0x080045f0
 8000830:	200004f8 	.word	0x200004f8
 8000834:	080046b4 	.word	0x080046b4
 8000838:	20000504 	.word	0x20000504
 800083c:	08004774 	.word	0x08004774
 8000840:	20000510 	.word	0x20000510
 8000844:	08004834 	.word	0x08004834
 8000848:	2000051c 	.word	0x2000051c
 800084c:	200005c0 	.word	0x200005c0
 8000850:	200005cc 	.word	0x200005cc
 8000854:	080048f4 	.word	0x080048f4
 8000858:	2000052c 	.word	0x2000052c
 800085c:	20000538 	.word	0x20000538
 8000860:	08004af4 	.word	0x08004af4
 8000864:	20000544 	.word	0x20000544
 8000868:	08004cf4 	.word	0x08004cf4
 800086c:	20000550 	.word	0x20000550
 8000870:	08004df4 	.word	0x08004df4
 8000874:	2000055c 	.word	0x2000055c
 8000878:	08004ef4 	.word	0x08004ef4
 800087c:	20000568 	.word	0x20000568
 8000880:	08004ff4 	.word	0x08004ff4
 8000884:	20000574 	.word	0x20000574
 8000888:	080050f4 	.word	0x080050f4
 800088c:	20000580 	.word	0x20000580
 8000890:	200005d8 	.word	0x200005d8
 8000894:	200005e4 	.word	0x200005e4

08000898 <mpiGrow>:
 * @param[in] size Desired size in words
 * @return Error code
 **/

error_t mpiGrow(Mpi *r, uint_t size)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	6039      	str	r1, [r7, #0]
   uint_t *data;

   //Ensure the parameter is valid
   size = MAX(size, 1);
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	2b01      	cmp	r3, #1
 80008a6:	bf38      	it	cc
 80008a8:	2301      	movcc	r3, #1
 80008aa:	603b      	str	r3, [r7, #0]

   //Check the current size
   if(r->size >= size)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	685b      	ldr	r3, [r3, #4]
 80008b0:	683a      	ldr	r2, [r7, #0]
 80008b2:	429a      	cmp	r2, r3
 80008b4:	d801      	bhi.n	80008ba <mpiGrow+0x22>
      return NO_ERROR;
 80008b6:	2300      	movs	r3, #0
 80008b8:	e02a      	b.n	8000910 <mpiGrow+0x78>

   //Allocate a memory buffer
   data = cryptoAllocMem(size * MPI_INT_SIZE);
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	009b      	lsls	r3, r3, #2
 80008be:	4618      	mov	r0, r3
 80008c0:	f001 f846 	bl	8001950 <osAllocMem>
 80008c4:	60f8      	str	r0, [r7, #12]
   //Failed to allocate memory?
   if(data == NULL)
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d101      	bne.n	80008d0 <mpiGrow+0x38>
      return ERROR_OUT_OF_MEMORY;
 80008cc:	2364      	movs	r3, #100	; 0x64
 80008ce:	e01f      	b.n	8000910 <mpiGrow+0x78>

   //Clear buffer contents
   osMemset(data, 0, size * MPI_INT_SIZE);
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	009b      	lsls	r3, r3, #2
 80008d4:	461a      	mov	r2, r3
 80008d6:	2100      	movs	r1, #0
 80008d8:	68f8      	ldr	r0, [r7, #12]
 80008da:	f003 f999 	bl	8003c10 <memset>

   //Any data to copy?
   if(r->size > 0)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	685b      	ldr	r3, [r3, #4]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d00d      	beq.n	8000902 <mpiGrow+0x6a>
   {
      //Copy original data
      osMemcpy(data, r->data, r->size * MPI_INT_SIZE);
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	6899      	ldr	r1, [r3, #8]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	009b      	lsls	r3, r3, #2
 80008f0:	461a      	mov	r2, r3
 80008f2:	68f8      	ldr	r0, [r7, #12]
 80008f4:	f003 f97e 	bl	8003bf4 <memcpy>
      //Free previously allocated memory
      cryptoFreeMem(r->data);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	689b      	ldr	r3, [r3, #8]
 80008fc:	4618      	mov	r0, r3
 80008fe:	f001 f835 	bl	800196c <osFreeMem>
   }

   //Update the size of the multiple precision integer
   r->size = size;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	683a      	ldr	r2, [r7, #0]
 8000906:	605a      	str	r2, [r3, #4]
   r->data = data;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	68fa      	ldr	r2, [r7, #12]
 800090c:	609a      	str	r2, [r3, #8]

   //Successful operation
   return NO_ERROR;
 800090e:	2300      	movs	r3, #0
}
 8000910:	4618      	mov	r0, r3
 8000912:	3710      	adds	r7, #16
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}

08000918 <mpiImport>:
 * @param[in] format Input format
 * @return Error code
 **/

error_t mpiImport(Mpi *r, const uint8_t *data, uint_t length, MpiFormat format)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b086      	sub	sp, #24
 800091c:	af00      	add	r7, sp, #0
 800091e:	60f8      	str	r0, [r7, #12]
 8000920:	60b9      	str	r1, [r7, #8]
 8000922:	607a      	str	r2, [r7, #4]
 8000924:	70fb      	strb	r3, [r7, #3]
   error_t error;
   uint_t i;

   //Check input format
   if(format == MPI_FORMAT_LITTLE_ENDIAN)
 8000926:	78fb      	ldrb	r3, [r7, #3]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d14d      	bne.n	80009c8 <mpiImport+0xb0>
   {
      //Skip trailing zeroes
      while(length > 0 && data[length - 1] == 0)
 800092c:	e002      	b.n	8000934 <mpiImport+0x1c>
      {
         length--;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	3b01      	subs	r3, #1
 8000932:	607b      	str	r3, [r7, #4]
      while(length > 0 && data[length - 1] == 0)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d006      	beq.n	8000948 <mpiImport+0x30>
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	3b01      	subs	r3, #1
 800093e:	68ba      	ldr	r2, [r7, #8]
 8000940:	4413      	add	r3, r2
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d0f2      	beq.n	800092e <mpiImport+0x16>
      }

      //Ajust the size of the multiple precision integer
      error = mpiGrow(r, (length + MPI_INT_SIZE - 1) / MPI_INT_SIZE);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	3303      	adds	r3, #3
 800094c:	089b      	lsrs	r3, r3, #2
 800094e:	4619      	mov	r1, r3
 8000950:	68f8      	ldr	r0, [r7, #12]
 8000952:	f7ff ffa1 	bl	8000898 <mpiGrow>
 8000956:	4603      	mov	r3, r0
 8000958:	82fb      	strh	r3, [r7, #22]

      //Check status code
      if(!error)
 800095a:	8afb      	ldrh	r3, [r7, #22]
 800095c:	2b00      	cmp	r3, #0
 800095e:	f040 808a 	bne.w	8000a76 <mpiImport+0x15e>
      {
         //Clear the contents of the multiple precision integer
         osMemset(r->data, 0, r->size * MPI_INT_SIZE);
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	6898      	ldr	r0, [r3, #8]
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	685b      	ldr	r3, [r3, #4]
 800096a:	009b      	lsls	r3, r3, #2
 800096c:	461a      	mov	r2, r3
 800096e:	2100      	movs	r1, #0
 8000970:	f003 f94e 	bl	8003c10 <memset>
         //Set sign
         r->sign = 1;
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	2201      	movs	r2, #1
 8000978:	601a      	str	r2, [r3, #0]

         //Import data
         for(i = 0; i < length; i++, data++)
 800097a:	2300      	movs	r3, #0
 800097c:	613b      	str	r3, [r7, #16]
 800097e:	e01e      	b.n	80009be <mpiImport+0xa6>
         {
            r->data[i / MPI_INT_SIZE] |= *data << ((i % MPI_INT_SIZE) * 8);
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	689a      	ldr	r2, [r3, #8]
 8000984:	693b      	ldr	r3, [r7, #16]
 8000986:	f023 0303 	bic.w	r3, r3, #3
 800098a:	4413      	add	r3, r2
 800098c:	681a      	ldr	r2, [r3, #0]
 800098e:	68bb      	ldr	r3, [r7, #8]
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	4619      	mov	r1, r3
 8000994:	693b      	ldr	r3, [r7, #16]
 8000996:	f003 0303 	and.w	r3, r3, #3
 800099a:	00db      	lsls	r3, r3, #3
 800099c:	fa01 f303 	lsl.w	r3, r1, r3
 80009a0:	4618      	mov	r0, r3
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	6899      	ldr	r1, [r3, #8]
 80009a6:	693b      	ldr	r3, [r7, #16]
 80009a8:	f023 0303 	bic.w	r3, r3, #3
 80009ac:	440b      	add	r3, r1
 80009ae:	4302      	orrs	r2, r0
 80009b0:	601a      	str	r2, [r3, #0]
         for(i = 0; i < length; i++, data++)
 80009b2:	693b      	ldr	r3, [r7, #16]
 80009b4:	3301      	adds	r3, #1
 80009b6:	613b      	str	r3, [r7, #16]
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	3301      	adds	r3, #1
 80009bc:	60bb      	str	r3, [r7, #8]
 80009be:	693a      	ldr	r2, [r7, #16]
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	429a      	cmp	r2, r3
 80009c4:	d3dc      	bcc.n	8000980 <mpiImport+0x68>
 80009c6:	e056      	b.n	8000a76 <mpiImport+0x15e>
         }
      }
   }
   else if(format == MPI_FORMAT_BIG_ENDIAN)
 80009c8:	78fb      	ldrb	r3, [r7, #3]
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d151      	bne.n	8000a72 <mpiImport+0x15a>
   {
      //Skip leading zeroes
      while(length > 1 && *data == 0)
 80009ce:	e005      	b.n	80009dc <mpiImport+0xc4>
      {
         data++;
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	3301      	adds	r3, #1
 80009d4:	60bb      	str	r3, [r7, #8]
         length--;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	3b01      	subs	r3, #1
 80009da:	607b      	str	r3, [r7, #4]
      while(length > 1 && *data == 0)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d903      	bls.n	80009ea <mpiImport+0xd2>
 80009e2:	68bb      	ldr	r3, [r7, #8]
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d0f2      	beq.n	80009d0 <mpiImport+0xb8>
      }

      //Ajust the size of the multiple precision integer
      error = mpiGrow(r, (length + MPI_INT_SIZE - 1) / MPI_INT_SIZE);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	3303      	adds	r3, #3
 80009ee:	089b      	lsrs	r3, r3, #2
 80009f0:	4619      	mov	r1, r3
 80009f2:	68f8      	ldr	r0, [r7, #12]
 80009f4:	f7ff ff50 	bl	8000898 <mpiGrow>
 80009f8:	4603      	mov	r3, r0
 80009fa:	82fb      	strh	r3, [r7, #22]

      //Check status code
      if(!error)
 80009fc:	8afb      	ldrh	r3, [r7, #22]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d139      	bne.n	8000a76 <mpiImport+0x15e>
      {
         //Clear the contents of the multiple precision integer
         osMemset(r->data, 0, r->size * MPI_INT_SIZE);
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	6898      	ldr	r0, [r3, #8]
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	009b      	lsls	r3, r3, #2
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	2100      	movs	r1, #0
 8000a10:	f003 f8fe 	bl	8003c10 <memset>
         //Set sign
         r->sign = 1;
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	2201      	movs	r2, #1
 8000a18:	601a      	str	r2, [r3, #0]

         //Start from the least significant byte
         data += length - 1;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	3b01      	subs	r3, #1
 8000a1e:	68ba      	ldr	r2, [r7, #8]
 8000a20:	4413      	add	r3, r2
 8000a22:	60bb      	str	r3, [r7, #8]

         //Import data
         for(i = 0; i < length; i++, data--)
 8000a24:	2300      	movs	r3, #0
 8000a26:	613b      	str	r3, [r7, #16]
 8000a28:	e01e      	b.n	8000a68 <mpiImport+0x150>
         {
            r->data[i / MPI_INT_SIZE] |= *data << ((i % MPI_INT_SIZE) * 8);
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	689a      	ldr	r2, [r3, #8]
 8000a2e:	693b      	ldr	r3, [r7, #16]
 8000a30:	f023 0303 	bic.w	r3, r3, #3
 8000a34:	4413      	add	r3, r2
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	693b      	ldr	r3, [r7, #16]
 8000a40:	f003 0303 	and.w	r3, r3, #3
 8000a44:	00db      	lsls	r3, r3, #3
 8000a46:	fa01 f303 	lsl.w	r3, r1, r3
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	6899      	ldr	r1, [r3, #8]
 8000a50:	693b      	ldr	r3, [r7, #16]
 8000a52:	f023 0303 	bic.w	r3, r3, #3
 8000a56:	440b      	add	r3, r1
 8000a58:	4302      	orrs	r2, r0
 8000a5a:	601a      	str	r2, [r3, #0]
         for(i = 0; i < length; i++, data--)
 8000a5c:	693b      	ldr	r3, [r7, #16]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	613b      	str	r3, [r7, #16]
 8000a62:	68bb      	ldr	r3, [r7, #8]
 8000a64:	3b01      	subs	r3, #1
 8000a66:	60bb      	str	r3, [r7, #8]
 8000a68:	693a      	ldr	r2, [r7, #16]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	d3dc      	bcc.n	8000a2a <mpiImport+0x112>
 8000a70:	e001      	b.n	8000a76 <mpiImport+0x15e>
      }
   }
   else
   {
      //Report an error
      error = ERROR_INVALID_PARAMETER;
 8000a72:	2302      	movs	r3, #2
 8000a74:	82fb      	strh	r3, [r7, #22]
   }

   //Return status code
   return error;
 8000a76:	8afb      	ldrh	r3, [r7, #22]
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3718      	adds	r7, #24
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <sha256Init>:
 * @brief Initialize SHA-256 message digest context
 * @param[in] context Pointer to the SHA-256 context to initialize
 **/

__weak_func void sha256Init(Sha256Context *context)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
   //Set initial hash value
   context->h[0] = 0x6A09E667;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	4a13      	ldr	r2, [pc, #76]	; (8000ad8 <sha256Init+0x58>)
 8000a8c:	601a      	str	r2, [r3, #0]
   context->h[1] = 0xBB67AE85;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	4a12      	ldr	r2, [pc, #72]	; (8000adc <sha256Init+0x5c>)
 8000a92:	605a      	str	r2, [r3, #4]
   context->h[2] = 0x3C6EF372;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	4a12      	ldr	r2, [pc, #72]	; (8000ae0 <sha256Init+0x60>)
 8000a98:	609a      	str	r2, [r3, #8]
   context->h[3] = 0xA54FF53A;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4a11      	ldr	r2, [pc, #68]	; (8000ae4 <sha256Init+0x64>)
 8000a9e:	60da      	str	r2, [r3, #12]
   context->h[4] = 0x510E527F;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	4a11      	ldr	r2, [pc, #68]	; (8000ae8 <sha256Init+0x68>)
 8000aa4:	611a      	str	r2, [r3, #16]
   context->h[5] = 0x9B05688C;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4a10      	ldr	r2, [pc, #64]	; (8000aec <sha256Init+0x6c>)
 8000aaa:	615a      	str	r2, [r3, #20]
   context->h[6] = 0x1F83D9AB;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	4a10      	ldr	r2, [pc, #64]	; (8000af0 <sha256Init+0x70>)
 8000ab0:	619a      	str	r2, [r3, #24]
   context->h[7] = 0x5BE0CD19;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4a0f      	ldr	r2, [pc, #60]	; (8000af4 <sha256Init+0x74>)
 8000ab6:	61da      	str	r2, [r3, #28]

   //Number of bytes in the buffer
   context->size = 0;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2200      	movs	r2, #0
 8000abc:	661a      	str	r2, [r3, #96]	; 0x60
   //Total length of the message
   context->totalSize = 0;
 8000abe:	6879      	ldr	r1, [r7, #4]
 8000ac0:	f04f 0200 	mov.w	r2, #0
 8000ac4:	f04f 0300 	mov.w	r3, #0
 8000ac8:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
}
 8000acc:	bf00      	nop
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr
 8000ad8:	6a09e667 	.word	0x6a09e667
 8000adc:	bb67ae85 	.word	0xbb67ae85
 8000ae0:	3c6ef372 	.word	0x3c6ef372
 8000ae4:	a54ff53a 	.word	0xa54ff53a
 8000ae8:	510e527f 	.word	0x510e527f
 8000aec:	9b05688c 	.word	0x9b05688c
 8000af0:	1f83d9ab 	.word	0x1f83d9ab
 8000af4:	5be0cd19 	.word	0x5be0cd19

08000af8 <sha256Update>:
 * @param[in] data Pointer to the buffer being hashed
 * @param[in] length Length of the buffer
 **/

__weak_func void sha256Update(Sha256Context *context, const void *data, size_t length)
{
 8000af8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000afc:	b086      	sub	sp, #24
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	60f8      	str	r0, [r7, #12]
 8000b02:	60b9      	str	r1, [r7, #8]
 8000b04:	607a      	str	r2, [r7, #4]
   size_t n;

   //Process the incoming data
   while(length > 0)
 8000b06:	e039      	b.n	8000b7c <sha256Update+0x84>
   {
      //The buffer can hold at most 64 bytes
      n = MIN(length, 64 - context->size);
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b0c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8000b10:	687a      	ldr	r2, [r7, #4]
 8000b12:	4293      	cmp	r3, r2
 8000b14:	bf28      	it	cs
 8000b16:	4613      	movcs	r3, r2
 8000b18:	617b      	str	r3, [r7, #20]

      //Copy the data to the buffer
      osMemcpy(context->buffer + context->size, data, n);
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	f103 0220 	add.w	r2, r3, #32
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b24:	4413      	add	r3, r2
 8000b26:	697a      	ldr	r2, [r7, #20]
 8000b28:	68b9      	ldr	r1, [r7, #8]
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f003 f862 	bl	8003bf4 <memcpy>

      //Update the SHA-256 context
      context->size += n;
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	441a      	add	r2, r3
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	661a      	str	r2, [r3, #96]	; 0x60
      context->totalSize += n;
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8000b42:	6979      	ldr	r1, [r7, #20]
 8000b44:	2000      	movs	r0, #0
 8000b46:	460c      	mov	r4, r1
 8000b48:	4605      	mov	r5, r0
 8000b4a:	eb12 0804 	adds.w	r8, r2, r4
 8000b4e:	eb43 0905 	adc.w	r9, r3, r5
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	e9c3 891a 	strd	r8, r9, [r3, #104]	; 0x68
      //Advance the data pointer
      data = (uint8_t *) data + n;
 8000b58:	68ba      	ldr	r2, [r7, #8]
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	60bb      	str	r3, [r7, #8]
      //Remaining bytes to process
      length -= n;
 8000b60:	687a      	ldr	r2, [r7, #4]
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	1ad3      	subs	r3, r2, r3
 8000b66:	607b      	str	r3, [r7, #4]

      //Process message in 16-word blocks
      if(context->size == 64)
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b6c:	2b40      	cmp	r3, #64	; 0x40
 8000b6e:	d105      	bne.n	8000b7c <sha256Update+0x84>
      {
         //Transform the 16-word block
         sha256ProcessBlock(context);
 8000b70:	68f8      	ldr	r0, [r7, #12]
 8000b72:	f000 f871 	bl	8000c58 <sha256ProcessBlock>
         //Empty the buffer
         context->size = 0;
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	2200      	movs	r2, #0
 8000b7a:	661a      	str	r2, [r3, #96]	; 0x60
   while(length > 0)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d1c2      	bne.n	8000b08 <sha256Update+0x10>
      }
   }
}
 8000b82:	bf00      	nop
 8000b84:	bf00      	nop
 8000b86:	3718      	adds	r7, #24
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08000b90 <sha256Final>:
 * @param[in] context Pointer to the SHA-256 context
 * @param[out] digest Calculated digest (optional parameter)
 **/

__weak_func void sha256Final(Sha256Context *context, uint8_t *digest)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	6039      	str	r1, [r7, #0]
   uint_t i;
   size_t paddingSize;
   uint64_t totalSize;

   //Length of the original message (before padding)
   totalSize = context->totalSize * 8;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8000ba0:	f04f 0200 	mov.w	r2, #0
 8000ba4:	f04f 0300 	mov.w	r3, #0
 8000ba8:	00cb      	lsls	r3, r1, #3
 8000baa:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000bae:	00c2      	lsls	r2, r0, #3
 8000bb0:	e9c7 2302 	strd	r2, r3, [r7, #8]

   //Pad the message so that its length is congruent to 56 modulo 64
   if(context->size < 56)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bb8:	2b37      	cmp	r3, #55	; 0x37
 8000bba:	d805      	bhi.n	8000bc8 <sha256Final+0x38>
   {
      paddingSize = 56 - context->size;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bc0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8000bc4:	613b      	str	r3, [r7, #16]
 8000bc6:	e004      	b.n	8000bd2 <sha256Final+0x42>
   }
   else
   {
      paddingSize = 64 + 56 - context->size;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bcc:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 8000bd0:	613b      	str	r3, [r7, #16]
   }

   //Append padding
   sha256Update(context, padding, paddingSize);
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	491f      	ldr	r1, [pc, #124]	; (8000c54 <sha256Final+0xc4>)
 8000bd6:	6878      	ldr	r0, [r7, #4]
 8000bd8:	f7ff ff8e 	bl	8000af8 <sha256Update>

   //Append the length of the original message
   context->w[14] = htobe32((uint32_t) (totalSize >> 32));
 8000bdc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000be0:	f04f 0200 	mov.w	r2, #0
 8000be4:	f04f 0300 	mov.w	r3, #0
 8000be8:	000a      	movs	r2, r1
 8000bea:	2300      	movs	r3, #0
 8000bec:	4613      	mov	r3, r2
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f000 fd92 	bl	8001718 <swapInt32>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	659a      	str	r2, [r3, #88]	; 0x58
   context->w[15] = htobe32((uint32_t) totalSize);
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f000 fd8b 	bl	8001718 <swapInt32>
 8000c02:	4602      	mov	r2, r0
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	65da      	str	r2, [r3, #92]	; 0x5c

   //Calculate the message digest
   sha256ProcessBlock(context);
 8000c08:	6878      	ldr	r0, [r7, #4]
 8000c0a:	f000 f825 	bl	8000c58 <sha256ProcessBlock>

   //Convert from host byte order to big-endian byte order
   for(i = 0; i < 8; i++)
 8000c0e:	2300      	movs	r3, #0
 8000c10:	617b      	str	r3, [r7, #20]
 8000c12:	e00e      	b.n	8000c32 <sha256Final+0xa2>
   {
      context->h[i] = htobe32(context->h[i]);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	697a      	ldr	r2, [r7, #20]
 8000c18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f000 fd7b 	bl	8001718 <swapInt32>
 8000c22:	4601      	mov	r1, r0
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	697a      	ldr	r2, [r7, #20]
 8000c28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   for(i = 0; i < 8; i++)
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	617b      	str	r3, [r7, #20]
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	2b07      	cmp	r3, #7
 8000c36:	d9ed      	bls.n	8000c14 <sha256Final+0x84>
   }

   //Copy the resulting digest
   if(digest != NULL)
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d005      	beq.n	8000c4a <sha256Final+0xba>
   {
      osMemcpy(digest, context->digest, SHA256_DIGEST_SIZE);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2220      	movs	r2, #32
 8000c42:	4619      	mov	r1, r3
 8000c44:	6838      	ldr	r0, [r7, #0]
 8000c46:	f002 ffd5 	bl	8003bf4 <memcpy>
   }
}
 8000c4a:	bf00      	nop
 8000c4c:	3718      	adds	r7, #24
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	080051f4 	.word	0x080051f4

08000c58 <sha256ProcessBlock>:
 * @brief Process message in 16-word blocks
 * @param[in] context Pointer to the SHA-256 context
 **/

__weak_func void sha256ProcessBlock(Sha256Context *context)
{
 8000c58:	b590      	push	{r4, r7, lr}
 8000c5a:	b08f      	sub	sp, #60	; 0x3c
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
   uint_t t;
   uint32_t temp1;
   uint32_t temp2;

   //Initialize the 8 working registers
   uint32_t a = context->h[0];
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	633b      	str	r3, [r7, #48]	; 0x30
   uint32_t b = context->h[1];
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
   uint32_t c = context->h[2];
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	689b      	ldr	r3, [r3, #8]
 8000c70:	62bb      	str	r3, [r7, #40]	; 0x28
   uint32_t d = context->h[3];
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	68db      	ldr	r3, [r3, #12]
 8000c76:	627b      	str	r3, [r7, #36]	; 0x24
   uint32_t e = context->h[4];
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	691b      	ldr	r3, [r3, #16]
 8000c7c:	623b      	str	r3, [r7, #32]
   uint32_t f = context->h[5];
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	695b      	ldr	r3, [r3, #20]
 8000c82:	61fb      	str	r3, [r7, #28]
   uint32_t g = context->h[6];
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	699b      	ldr	r3, [r3, #24]
 8000c88:	61bb      	str	r3, [r7, #24]
   uint32_t h = context->h[7];
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	69db      	ldr	r3, [r3, #28]
 8000c8e:	617b      	str	r3, [r7, #20]

   //Process message in 16-word blocks
   uint32_t *w = context->w;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	3320      	adds	r3, #32
 8000c94:	613b      	str	r3, [r7, #16]

   //Convert from big-endian byte order to host byte order
   for(t = 0; t < 16; t++)
 8000c96:	2300      	movs	r3, #0
 8000c98:	637b      	str	r3, [r7, #52]	; 0x34
 8000c9a:	e010      	b.n	8000cbe <sha256ProcessBlock+0x66>
   {
      w[t] = betoh32(w[t]);
 8000c9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	693a      	ldr	r2, [r7, #16]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	6819      	ldr	r1, [r3, #0]
 8000ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	18d4      	adds	r4, r2, r3
 8000cae:	4608      	mov	r0, r1
 8000cb0:	f000 fd32 	bl	8001718 <swapInt32>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	6023      	str	r3, [r4, #0]
   for(t = 0; t < 16; t++)
 8000cb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cba:	3301      	adds	r3, #1
 8000cbc:	637b      	str	r3, [r7, #52]	; 0x34
 8000cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cc0:	2b0f      	cmp	r3, #15
 8000cc2:	d9eb      	bls.n	8000c9c <sha256ProcessBlock+0x44>
   }

   //SHA-256 hash computation (alternate method)
   for(t = 0; t < 64; t++)
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	637b      	str	r3, [r7, #52]	; 0x34
 8000cc8:	e0aa      	b.n	8000e20 <sha256ProcessBlock+0x1c8>
   {
      //Prepare the message schedule
      if(t >= 16)
 8000cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ccc:	2b0f      	cmp	r3, #15
 8000cce:	d956      	bls.n	8000d7e <sha256ProcessBlock+0x126>
      {
         W(t) += SIGMA4(W(t + 14)) + W(t + 9) + SIGMA3(W(t + 1));
 8000cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cd2:	f003 030f 	and.w	r3, r3, #15
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	693a      	ldr	r2, [r7, #16]
 8000cda:	4413      	add	r3, r2
 8000cdc:	6819      	ldr	r1, [r3, #0]
 8000cde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ce0:	330e      	adds	r3, #14
 8000ce2:	f003 030f 	and.w	r3, r3, #15
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	693a      	ldr	r2, [r7, #16]
 8000cea:	4413      	add	r3, r2
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	ea4f 4273 	mov.w	r2, r3, ror #17
 8000cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cf4:	330e      	adds	r3, #14
 8000cf6:	f003 030f 	and.w	r3, r3, #15
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	6938      	ldr	r0, [r7, #16]
 8000cfe:	4403      	add	r3, r0
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8000d06:	405a      	eors	r2, r3
 8000d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d0a:	330e      	adds	r3, #14
 8000d0c:	f003 030f 	and.w	r3, r3, #15
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	6938      	ldr	r0, [r7, #16]
 8000d14:	4403      	add	r3, r0
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	0a9b      	lsrs	r3, r3, #10
 8000d1a:	405a      	eors	r2, r3
 8000d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d1e:	3309      	adds	r3, #9
 8000d20:	f003 030f 	and.w	r3, r3, #15
 8000d24:	009b      	lsls	r3, r3, #2
 8000d26:	6938      	ldr	r0, [r7, #16]
 8000d28:	4403      	add	r3, r0
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	441a      	add	r2, r3
 8000d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d30:	3301      	adds	r3, #1
 8000d32:	f003 030f 	and.w	r3, r3, #15
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	6938      	ldr	r0, [r7, #16]
 8000d3a:	4403      	add	r3, r0
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8000d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d44:	3301      	adds	r3, #1
 8000d46:	f003 030f 	and.w	r3, r3, #15
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	693c      	ldr	r4, [r7, #16]
 8000d4e:	4423      	add	r3, r4
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8000d56:	4058      	eors	r0, r3
 8000d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	f003 030f 	and.w	r3, r3, #15
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	693c      	ldr	r4, [r7, #16]
 8000d64:	4423      	add	r3, r4
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	08db      	lsrs	r3, r3, #3
 8000d6a:	4043      	eors	r3, r0
 8000d6c:	441a      	add	r2, r3
 8000d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d70:	f003 030f 	and.w	r3, r3, #15
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	6938      	ldr	r0, [r7, #16]
 8000d78:	4403      	add	r3, r0
 8000d7a:	440a      	add	r2, r1
 8000d7c:	601a      	str	r2, [r3, #0]
      }

      //Calculate T1 and T2
      temp1 = h + SIGMA2(e) + CH(e, f, g) + k[t] + W(t);
 8000d7e:	6a3b      	ldr	r3, [r7, #32]
 8000d80:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8000d84:	6a3b      	ldr	r3, [r7, #32]
 8000d86:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8000d8a:	405a      	eors	r2, r3
 8000d8c:	6a3b      	ldr	r3, [r7, #32]
 8000d8e:	ea4f 6373 	mov.w	r3, r3, ror #25
 8000d92:	405a      	eors	r2, r3
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	441a      	add	r2, r3
 8000d98:	6a39      	ldr	r1, [r7, #32]
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	4019      	ands	r1, r3
 8000d9e:	6a3b      	ldr	r3, [r7, #32]
 8000da0:	43d8      	mvns	r0, r3
 8000da2:	69bb      	ldr	r3, [r7, #24]
 8000da4:	4003      	ands	r3, r0
 8000da6:	430b      	orrs	r3, r1
 8000da8:	441a      	add	r2, r3
 8000daa:	4939      	ldr	r1, [pc, #228]	; (8000e90 <sha256ProcessBlock+0x238>)
 8000dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000db2:	441a      	add	r2, r3
 8000db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000db6:	f003 030f 	and.w	r3, r3, #15
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	6939      	ldr	r1, [r7, #16]
 8000dbe:	440b      	add	r3, r1
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4413      	add	r3, r2
 8000dc4:	60fb      	str	r3, [r7, #12]
      temp2 = SIGMA1(a) + MAJ(a, b, c);
 8000dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dc8:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8000dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dce:	ea4f 3373 	mov.w	r3, r3, ror #13
 8000dd2:	405a      	eors	r2, r3
 8000dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dd6:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8000dda:	405a      	eors	r2, r3
 8000ddc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000de0:	4319      	orrs	r1, r3
 8000de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000de4:	4019      	ands	r1, r3
 8000de6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dea:	4003      	ands	r3, r0
 8000dec:	430b      	orrs	r3, r1
 8000dee:	4413      	add	r3, r2
 8000df0:	60bb      	str	r3, [r7, #8]

      //Update the working registers
      h = g;
 8000df2:	69bb      	ldr	r3, [r7, #24]
 8000df4:	617b      	str	r3, [r7, #20]
      g = f;
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	61bb      	str	r3, [r7, #24]
      f = e;
 8000dfa:	6a3b      	ldr	r3, [r7, #32]
 8000dfc:	61fb      	str	r3, [r7, #28]
      e = d + temp1;
 8000dfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	4413      	add	r3, r2
 8000e04:	623b      	str	r3, [r7, #32]
      d = c;
 8000e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e08:	627b      	str	r3, [r7, #36]	; 0x24
      c = b;
 8000e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e0c:	62bb      	str	r3, [r7, #40]	; 0x28
      b = a;
 8000e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e10:	62fb      	str	r3, [r7, #44]	; 0x2c
      a = temp1 + temp2;
 8000e12:	68fa      	ldr	r2, [r7, #12]
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	4413      	add	r3, r2
 8000e18:	633b      	str	r3, [r7, #48]	; 0x30
   for(t = 0; t < 64; t++)
 8000e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	637b      	str	r3, [r7, #52]	; 0x34
 8000e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e22:	2b3f      	cmp	r3, #63	; 0x3f
 8000e24:	f67f af51 	bls.w	8000cca <sha256ProcessBlock+0x72>
   }

   //Update the hash value
   context->h[0] += a;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e2e:	441a      	add	r2, r3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	601a      	str	r2, [r3, #0]
   context->h[1] += b;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	685a      	ldr	r2, [r3, #4]
 8000e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e3a:	441a      	add	r2, r3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	605a      	str	r2, [r3, #4]
   context->h[2] += c;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	689a      	ldr	r2, [r3, #8]
 8000e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e46:	441a      	add	r2, r3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
   context->h[3] += d;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	68da      	ldr	r2, [r3, #12]
 8000e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e52:	441a      	add	r2, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	60da      	str	r2, [r3, #12]
   context->h[4] += e;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	691a      	ldr	r2, [r3, #16]
 8000e5c:	6a3b      	ldr	r3, [r7, #32]
 8000e5e:	441a      	add	r2, r3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	611a      	str	r2, [r3, #16]
   context->h[5] += f;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	695a      	ldr	r2, [r3, #20]
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	441a      	add	r2, r3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	615a      	str	r2, [r3, #20]
   context->h[6] += g;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	699a      	ldr	r2, [r3, #24]
 8000e74:	69bb      	ldr	r3, [r7, #24]
 8000e76:	441a      	add	r2, r3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	619a      	str	r2, [r3, #24]
   context->h[7] += h;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	69da      	ldr	r2, [r3, #28]
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	441a      	add	r2, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	61da      	str	r2, [r3, #28]
}
 8000e88:	bf00      	nop
 8000e8a:	373c      	adds	r7, #60	; 0x3c
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd90      	pop	{r4, r7, pc}
 8000e90:	08005234 	.word	0x08005234

08000e94 <aesInit>:
 * @return Error code
 **/

__weak_func error_t aesInit(AesContext *context, const uint8_t *key,
   size_t keyLen)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b089      	sub	sp, #36	; 0x24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	60f8      	str	r0, [r7, #12]
 8000e9c:	60b9      	str	r1, [r7, #8]
 8000e9e:	607a      	str	r2, [r7, #4]
   uint_t i;
   uint32_t temp;
   size_t keyScheduleSize;

   //Check parameters
   if(context == NULL || key == NULL)
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d002      	beq.n	8000eac <aesInit+0x18>
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d101      	bne.n	8000eb0 <aesInit+0x1c>
      return ERROR_INVALID_PARAMETER;
 8000eac:	2302      	movs	r3, #2
 8000eae:	e1a9      	b.n	8001204 <aesInit+0x370>

   //Check the length of the key
   if(keyLen == 16)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2b10      	cmp	r3, #16
 8000eb4:	d103      	bne.n	8000ebe <aesInit+0x2a>
   {
      //10 rounds are required for 128-bit key
      context->nr = 10;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	220a      	movs	r2, #10
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	e00f      	b.n	8000ede <aesInit+0x4a>
   }
   else if(keyLen == 24)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2b18      	cmp	r3, #24
 8000ec2:	d103      	bne.n	8000ecc <aesInit+0x38>
   {
      //12 rounds are required for 192-bit key
      context->nr = 12;
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	220c      	movs	r2, #12
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	e008      	b.n	8000ede <aesInit+0x4a>
   }
   else if(keyLen == 32)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2b20      	cmp	r3, #32
 8000ed0:	d103      	bne.n	8000eda <aesInit+0x46>
   {
      //14 rounds are required for 256-bit key
      context->nr = 14;
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	220e      	movs	r2, #14
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	e001      	b.n	8000ede <aesInit+0x4a>
   }
   else
   {
      //Report an error
      return ERROR_INVALID_KEY_LENGTH;
 8000eda:	23e8      	movs	r3, #232	; 0xe8
 8000edc:	e192      	b.n	8001204 <aesInit+0x370>
   }

   //Determine the number of 32-bit words in the key
   keyLen /= 4;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	089b      	lsrs	r3, r3, #2
 8000ee2:	607b      	str	r3, [r7, #4]

   //Copy the original key
   for(i = 0; i < keyLen; i++)
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	61fb      	str	r3, [r7, #28]
 8000ee8:	e026      	b.n	8000f38 <aesInit+0xa4>
   {
      context->ek[i] = LOAD32LE(key + (i * 4));
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	68ba      	ldr	r2, [r7, #8]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	68ba      	ldr	r2, [r7, #8]
 8000efc:	4413      	add	r3, r2
 8000efe:	3301      	adds	r3, #1
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	021b      	lsls	r3, r3, #8
 8000f04:	ea41 0203 	orr.w	r2, r1, r3
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	68b9      	ldr	r1, [r7, #8]
 8000f0e:	440b      	add	r3, r1
 8000f10:	3302      	adds	r3, #2
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	041b      	lsls	r3, r3, #16
 8000f16:	431a      	orrs	r2, r3
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	68b9      	ldr	r1, [r7, #8]
 8000f1e:	440b      	add	r3, r1
 8000f20:	3303      	adds	r3, #3
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	061b      	lsls	r3, r3, #24
 8000f26:	431a      	orrs	r2, r3
 8000f28:	68f9      	ldr	r1, [r7, #12]
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	440b      	add	r3, r1
 8000f30:	605a      	str	r2, [r3, #4]
   for(i = 0; i < keyLen; i++)
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	3301      	adds	r3, #1
 8000f36:	61fb      	str	r3, [r7, #28]
 8000f38:	69fa      	ldr	r2, [r7, #28]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	d3d4      	bcc.n	8000eea <aesInit+0x56>
   }

   //The size of the key schedule depends on the number of rounds
   keyScheduleSize = 4 * (context->nr + 1);
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	3301      	adds	r3, #1
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	61bb      	str	r3, [r7, #24]

   //Generate the key schedule (encryption)
   for(i = keyLen; i < keyScheduleSize; i++)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	61fb      	str	r3, [r7, #28]
 8000f4e:	e0c4      	b.n	80010da <aesInit+0x246>
   {
      //Save previous word
      temp = context->ek[i - 1];
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	3b01      	subs	r3, #1
 8000f54:	68fa      	ldr	r2, [r7, #12]
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	4413      	add	r3, r2
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	617b      	str	r3, [r7, #20]

      //Apply transformation
      if((i % keyLen) == 0)
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	687a      	ldr	r2, [r7, #4]
 8000f62:	fbb3 f2f2 	udiv	r2, r3, r2
 8000f66:	6879      	ldr	r1, [r7, #4]
 8000f68:	fb01 f202 	mul.w	r2, r1, r2
 8000f6c:	1a9b      	subs	r3, r3, r2
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d14e      	bne.n	8001010 <aesInit+0x17c>
      {
         context->ek[i] = sbox[(temp >> 8) & 0xFF];
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	0a1b      	lsrs	r3, r3, #8
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	4a66      	ldr	r2, [pc, #408]	; (8001114 <aesInit+0x280>)
 8000f7a:	5cd3      	ldrb	r3, [r2, r3]
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	68fa      	ldr	r2, [r7, #12]
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	4413      	add	r3, r2
 8000f86:	6059      	str	r1, [r3, #4]
         context->ek[i] |= (sbox[(temp >> 16) & 0xFF] << 8);
 8000f88:	68fa      	ldr	r2, [r7, #12]
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	4413      	add	r3, r2
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	697a      	ldr	r2, [r7, #20]
 8000f94:	0c12      	lsrs	r2, r2, #16
 8000f96:	b2d2      	uxtb	r2, r2
 8000f98:	495e      	ldr	r1, [pc, #376]	; (8001114 <aesInit+0x280>)
 8000f9a:	5c8a      	ldrb	r2, [r1, r2]
 8000f9c:	0212      	lsls	r2, r2, #8
 8000f9e:	431a      	orrs	r2, r3
 8000fa0:	68f9      	ldr	r1, [r7, #12]
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	440b      	add	r3, r1
 8000fa8:	605a      	str	r2, [r3, #4]
         context->ek[i] |= (sbox[(temp >> 24) & 0xFF] << 16);
 8000faa:	68fa      	ldr	r2, [r7, #12]
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	4413      	add	r3, r2
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	697a      	ldr	r2, [r7, #20]
 8000fb6:	0e12      	lsrs	r2, r2, #24
 8000fb8:	4956      	ldr	r1, [pc, #344]	; (8001114 <aesInit+0x280>)
 8000fba:	5c8a      	ldrb	r2, [r1, r2]
 8000fbc:	0412      	lsls	r2, r2, #16
 8000fbe:	431a      	orrs	r2, r3
 8000fc0:	68f9      	ldr	r1, [r7, #12]
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	440b      	add	r3, r1
 8000fc8:	605a      	str	r2, [r3, #4]
         context->ek[i] |= (sbox[temp & 0xFF] << 24);
 8000fca:	68fa      	ldr	r2, [r7, #12]
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	4413      	add	r3, r2
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	697a      	ldr	r2, [r7, #20]
 8000fd6:	b2d2      	uxtb	r2, r2
 8000fd8:	494e      	ldr	r1, [pc, #312]	; (8001114 <aesInit+0x280>)
 8000fda:	5c8a      	ldrb	r2, [r1, r2]
 8000fdc:	0612      	lsls	r2, r2, #24
 8000fde:	431a      	orrs	r2, r3
 8000fe0:	68f9      	ldr	r1, [r7, #12]
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	440b      	add	r3, r1
 8000fe8:	605a      	str	r2, [r3, #4]
         context->ek[i] ^= rcon[i / keyLen];
 8000fea:	68fa      	ldr	r2, [r7, #12]
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	4413      	add	r3, r2
 8000ff2:	685a      	ldr	r2, [r3, #4]
 8000ff4:	69f9      	ldr	r1, [r7, #28]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ffc:	4946      	ldr	r1, [pc, #280]	; (8001118 <aesInit+0x284>)
 8000ffe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001002:	405a      	eors	r2, r3
 8001004:	68f9      	ldr	r1, [r7, #12]
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	440b      	add	r3, r1
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	e04f      	b.n	80010b0 <aesInit+0x21c>
      }
      else if(keyLen > 6 && (i % keyLen) == 4)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2b06      	cmp	r3, #6
 8001014:	d946      	bls.n	80010a4 <aesInit+0x210>
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	fbb3 f2f2 	udiv	r2, r3, r2
 800101e:	6879      	ldr	r1, [r7, #4]
 8001020:	fb01 f202 	mul.w	r2, r1, r2
 8001024:	1a9b      	subs	r3, r3, r2
 8001026:	2b04      	cmp	r3, #4
 8001028:	d13c      	bne.n	80010a4 <aesInit+0x210>
      {
         context->ek[i] = sbox[temp & 0xFF];
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	b2db      	uxtb	r3, r3
 800102e:	4a39      	ldr	r2, [pc, #228]	; (8001114 <aesInit+0x280>)
 8001030:	5cd3      	ldrb	r3, [r2, r3]
 8001032:	4619      	mov	r1, r3
 8001034:	68fa      	ldr	r2, [r7, #12]
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	4413      	add	r3, r2
 800103c:	6059      	str	r1, [r3, #4]
         context->ek[i] |= (sbox[(temp >> 8) & 0xFF] << 8);
 800103e:	68fa      	ldr	r2, [r7, #12]
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	4413      	add	r3, r2
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	697a      	ldr	r2, [r7, #20]
 800104a:	0a12      	lsrs	r2, r2, #8
 800104c:	b2d2      	uxtb	r2, r2
 800104e:	4931      	ldr	r1, [pc, #196]	; (8001114 <aesInit+0x280>)
 8001050:	5c8a      	ldrb	r2, [r1, r2]
 8001052:	0212      	lsls	r2, r2, #8
 8001054:	431a      	orrs	r2, r3
 8001056:	68f9      	ldr	r1, [r7, #12]
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	440b      	add	r3, r1
 800105e:	605a      	str	r2, [r3, #4]
         context->ek[i] |= (sbox[(temp >> 16) & 0xFF] << 16);
 8001060:	68fa      	ldr	r2, [r7, #12]
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	4413      	add	r3, r2
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	697a      	ldr	r2, [r7, #20]
 800106c:	0c12      	lsrs	r2, r2, #16
 800106e:	b2d2      	uxtb	r2, r2
 8001070:	4928      	ldr	r1, [pc, #160]	; (8001114 <aesInit+0x280>)
 8001072:	5c8a      	ldrb	r2, [r1, r2]
 8001074:	0412      	lsls	r2, r2, #16
 8001076:	431a      	orrs	r2, r3
 8001078:	68f9      	ldr	r1, [r7, #12]
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	440b      	add	r3, r1
 8001080:	605a      	str	r2, [r3, #4]
         context->ek[i] |= (sbox[(temp >> 24) & 0xFF] << 24);
 8001082:	68fa      	ldr	r2, [r7, #12]
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	4413      	add	r3, r2
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	697a      	ldr	r2, [r7, #20]
 800108e:	0e12      	lsrs	r2, r2, #24
 8001090:	4920      	ldr	r1, [pc, #128]	; (8001114 <aesInit+0x280>)
 8001092:	5c8a      	ldrb	r2, [r1, r2]
 8001094:	0612      	lsls	r2, r2, #24
 8001096:	431a      	orrs	r2, r3
 8001098:	68f9      	ldr	r1, [r7, #12]
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	440b      	add	r3, r1
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	e005      	b.n	80010b0 <aesInit+0x21c>
      }
      else
      {
         context->ek[i] = temp;
 80010a4:	68fa      	ldr	r2, [r7, #12]
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	4413      	add	r3, r2
 80010ac:	697a      	ldr	r2, [r7, #20]
 80010ae:	605a      	str	r2, [r3, #4]
      }

      //Update the key schedule
      context->ek[i] ^= context->ek[i - keyLen];
 80010b0:	68fa      	ldr	r2, [r7, #12]
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	4413      	add	r3, r2
 80010b8:	685a      	ldr	r2, [r3, #4]
 80010ba:	69f9      	ldr	r1, [r7, #28]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	1acb      	subs	r3, r1, r3
 80010c0:	68f9      	ldr	r1, [r7, #12]
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	440b      	add	r3, r1
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	405a      	eors	r2, r3
 80010ca:	68f9      	ldr	r1, [r7, #12]
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	440b      	add	r3, r1
 80010d2:	605a      	str	r2, [r3, #4]
   for(i = keyLen; i < keyScheduleSize; i++)
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	3301      	adds	r3, #1
 80010d8:	61fb      	str	r3, [r7, #28]
 80010da:	69fa      	ldr	r2, [r7, #28]
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	429a      	cmp	r2, r3
 80010e0:	f4ff af36 	bcc.w	8000f50 <aesInit+0xbc>
   }

   //Generate the key schedule (decryption)
   for(i = 0; i < keyScheduleSize; i++)
 80010e4:	2300      	movs	r3, #0
 80010e6:	61fb      	str	r3, [r7, #28]
 80010e8:	e086      	b.n	80011f8 <aesInit+0x364>
   {
      //Apply the InvMixColumns transformation to all round keys but the first
      //and the last
      if(i < 4 || i >= (keyScheduleSize - 4))
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	2b03      	cmp	r3, #3
 80010ee:	d904      	bls.n	80010fa <aesInit+0x266>
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	3b04      	subs	r3, #4
 80010f4:	69fa      	ldr	r2, [r7, #28]
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d310      	bcc.n	800111c <aesInit+0x288>
      {
         context->dk[i] = context->ek[i];
 80010fa:	68fa      	ldr	r2, [r7, #12]
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	4413      	add	r3, r2
 8001102:	685a      	ldr	r2, [r3, #4]
 8001104:	68f9      	ldr	r1, [r7, #12]
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	333c      	adds	r3, #60	; 0x3c
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	440b      	add	r3, r1
 800110e:	605a      	str	r2, [r3, #4]
 8001110:	e06f      	b.n	80011f2 <aesInit+0x35e>
 8001112:	bf00      	nop
 8001114:	08005334 	.word	0x08005334
 8001118:	08005c34 	.word	0x08005c34
      }
      else
      {
         context->dk[i] = td[sbox[context->ek[i] & 0xFF]];
 800111c:	68fa      	ldr	r2, [r7, #12]
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	4413      	add	r3, r2
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	b2db      	uxtb	r3, r3
 8001128:	4a39      	ldr	r2, [pc, #228]	; (8001210 <aesInit+0x37c>)
 800112a:	5cd3      	ldrb	r3, [r2, r3]
 800112c:	461a      	mov	r2, r3
 800112e:	4b39      	ldr	r3, [pc, #228]	; (8001214 <aesInit+0x380>)
 8001130:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001134:	68f9      	ldr	r1, [r7, #12]
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	333c      	adds	r3, #60	; 0x3c
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	440b      	add	r3, r1
 800113e:	605a      	str	r2, [r3, #4]
         temp = td[sbox[(context->ek[i] >> 8) & 0xFF]];
 8001140:	68fa      	ldr	r2, [r7, #12]
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	4413      	add	r3, r2
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	0a1b      	lsrs	r3, r3, #8
 800114c:	b2db      	uxtb	r3, r3
 800114e:	4a30      	ldr	r2, [pc, #192]	; (8001210 <aesInit+0x37c>)
 8001150:	5cd3      	ldrb	r3, [r2, r3]
 8001152:	461a      	mov	r2, r3
 8001154:	4b2f      	ldr	r3, [pc, #188]	; (8001214 <aesInit+0x380>)
 8001156:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800115a:	617b      	str	r3, [r7, #20]
         context->dk[i] ^= ROL32(temp, 8);
 800115c:	68fa      	ldr	r2, [r7, #12]
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	333c      	adds	r3, #60	; 0x3c
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	4413      	add	r3, r2
 8001166:	685a      	ldr	r2, [r3, #4]
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	ea4f 6333 	mov.w	r3, r3, ror #24
 800116e:	405a      	eors	r2, r3
 8001170:	68f9      	ldr	r1, [r7, #12]
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	333c      	adds	r3, #60	; 0x3c
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	440b      	add	r3, r1
 800117a:	605a      	str	r2, [r3, #4]
         temp = td[sbox[(context->ek[i] >> 16) & 0xFF]];
 800117c:	68fa      	ldr	r2, [r7, #12]
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	4413      	add	r3, r2
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	0c1b      	lsrs	r3, r3, #16
 8001188:	b2db      	uxtb	r3, r3
 800118a:	4a21      	ldr	r2, [pc, #132]	; (8001210 <aesInit+0x37c>)
 800118c:	5cd3      	ldrb	r3, [r2, r3]
 800118e:	461a      	mov	r2, r3
 8001190:	4b20      	ldr	r3, [pc, #128]	; (8001214 <aesInit+0x380>)
 8001192:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001196:	617b      	str	r3, [r7, #20]
         context->dk[i] ^= ROL32(temp, 16);
 8001198:	68fa      	ldr	r2, [r7, #12]
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	333c      	adds	r3, #60	; 0x3c
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	4413      	add	r3, r2
 80011a2:	685a      	ldr	r2, [r3, #4]
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	ea4f 4333 	mov.w	r3, r3, ror #16
 80011aa:	405a      	eors	r2, r3
 80011ac:	68f9      	ldr	r1, [r7, #12]
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	333c      	adds	r3, #60	; 0x3c
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	440b      	add	r3, r1
 80011b6:	605a      	str	r2, [r3, #4]
         temp = td[sbox[(context->ek[i] >> 24) & 0xFF]];
 80011b8:	68fa      	ldr	r2, [r7, #12]
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	4413      	add	r3, r2
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	0e1b      	lsrs	r3, r3, #24
 80011c4:	4a12      	ldr	r2, [pc, #72]	; (8001210 <aesInit+0x37c>)
 80011c6:	5cd3      	ldrb	r3, [r2, r3]
 80011c8:	461a      	mov	r2, r3
 80011ca:	4b12      	ldr	r3, [pc, #72]	; (8001214 <aesInit+0x380>)
 80011cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011d0:	617b      	str	r3, [r7, #20]
         context->dk[i] ^= ROL32(temp, 24);
 80011d2:	68fa      	ldr	r2, [r7, #12]
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	333c      	adds	r3, #60	; 0x3c
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	4413      	add	r3, r2
 80011dc:	685a      	ldr	r2, [r3, #4]
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	ea4f 2333 	mov.w	r3, r3, ror #8
 80011e4:	405a      	eors	r2, r3
 80011e6:	68f9      	ldr	r1, [r7, #12]
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	333c      	adds	r3, #60	; 0x3c
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	440b      	add	r3, r1
 80011f0:	605a      	str	r2, [r3, #4]
   for(i = 0; i < keyScheduleSize; i++)
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	3301      	adds	r3, #1
 80011f6:	61fb      	str	r3, [r7, #28]
 80011f8:	69fa      	ldr	r2, [r7, #28]
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	f4ff af74 	bcc.w	80010ea <aesInit+0x256>
      }
   }

   //No error to report
   return NO_ERROR;
 8001202:	2300      	movs	r3, #0
}
 8001204:	4618      	mov	r0, r3
 8001206:	3724      	adds	r7, #36	; 0x24
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	08005334 	.word	0x08005334
 8001214:	08005834 	.word	0x08005834

08001218 <aesEncryptBlock>:
 * @param[out] output Ciphertext block resulting from encryption
 **/

__weak_func void aesEncryptBlock(AesContext *context, const uint8_t *input,
   uint8_t *output)
{
 8001218:	b480      	push	{r7}
 800121a:	b08f      	sub	sp, #60	; 0x3c
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]
   uint32_t t2;
   uint32_t t3;
   uint32_t temp;

   //Copy the plaintext to the state array
   s0 = LOAD32LE(input + 0);
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	461a      	mov	r2, r3
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	3301      	adds	r3, #1
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	021b      	lsls	r3, r3, #8
 8001232:	431a      	orrs	r2, r3
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	3302      	adds	r3, #2
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	041b      	lsls	r3, r3, #16
 800123c:	431a      	orrs	r2, r3
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	3303      	adds	r3, #3
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	061b      	lsls	r3, r3, #24
 8001246:	4313      	orrs	r3, r2
 8001248:	633b      	str	r3, [r7, #48]	; 0x30
   s1 = LOAD32LE(input + 4);
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	3304      	adds	r3, #4
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	461a      	mov	r2, r3
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	3304      	adds	r3, #4
 8001256:	3301      	adds	r3, #1
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	021b      	lsls	r3, r3, #8
 800125c:	431a      	orrs	r2, r3
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	3304      	adds	r3, #4
 8001262:	3302      	adds	r3, #2
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	041b      	lsls	r3, r3, #16
 8001268:	431a      	orrs	r2, r3
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	3304      	adds	r3, #4
 800126e:	3303      	adds	r3, #3
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	061b      	lsls	r3, r3, #24
 8001274:	4313      	orrs	r3, r2
 8001276:	62fb      	str	r3, [r7, #44]	; 0x2c
   s2 = LOAD32LE(input + 8);
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	3308      	adds	r3, #8
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	461a      	mov	r2, r3
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	3308      	adds	r3, #8
 8001284:	3301      	adds	r3, #1
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	021b      	lsls	r3, r3, #8
 800128a:	431a      	orrs	r2, r3
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	3308      	adds	r3, #8
 8001290:	3302      	adds	r3, #2
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	041b      	lsls	r3, r3, #16
 8001296:	431a      	orrs	r2, r3
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	3308      	adds	r3, #8
 800129c:	3303      	adds	r3, #3
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	061b      	lsls	r3, r3, #24
 80012a2:	4313      	orrs	r3, r2
 80012a4:	62bb      	str	r3, [r7, #40]	; 0x28
   s3 = LOAD32LE(input + 12);
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	330c      	adds	r3, #12
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	461a      	mov	r2, r3
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	330c      	adds	r3, #12
 80012b2:	3301      	adds	r3, #1
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	021b      	lsls	r3, r3, #8
 80012b8:	431a      	orrs	r2, r3
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	330c      	adds	r3, #12
 80012be:	3302      	adds	r3, #2
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	041b      	lsls	r3, r3, #16
 80012c4:	431a      	orrs	r2, r3
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	330c      	adds	r3, #12
 80012ca:	3303      	adds	r3, #3
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	061b      	lsls	r3, r3, #24
 80012d0:	4313      	orrs	r3, r2
 80012d2:	627b      	str	r3, [r7, #36]	; 0x24

   //Initial round key addition
   s0 ^= context->ek[0];
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012da:	4053      	eors	r3, r2
 80012dc:	633b      	str	r3, [r7, #48]	; 0x30
   s1 ^= context->ek[1];
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012e4:	4053      	eors	r3, r2
 80012e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   s2 ^= context->ek[2];
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012ee:	4053      	eors	r3, r2
 80012f0:	62bb      	str	r3, [r7, #40]	; 0x28
   s3 ^= context->ek[3];
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	691b      	ldr	r3, [r3, #16]
 80012f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012f8:	4053      	eors	r3, r2
 80012fa:	627b      	str	r3, [r7, #36]	; 0x24

   //The number of rounds depends on the key length
   for(i = 1; i < context->nr; i++)
 80012fc:	2301      	movs	r3, #1
 80012fe:	637b      	str	r3, [r7, #52]	; 0x34
 8001300:	e0d9      	b.n	80014b6 <aesEncryptBlock+0x29e>
   {
      //Apply round function
      t0 = te[s0 & 0xFF];
 8001302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001304:	b2db      	uxtb	r3, r3
 8001306:	4aa2      	ldr	r2, [pc, #648]	; (8001590 <aesEncryptBlock+0x378>)
 8001308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800130c:	623b      	str	r3, [r7, #32]
      temp = te[(s1 >> 8) & 0xFF];
 800130e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001310:	0a1b      	lsrs	r3, r3, #8
 8001312:	b2db      	uxtb	r3, r3
 8001314:	4a9e      	ldr	r2, [pc, #632]	; (8001590 <aesEncryptBlock+0x378>)
 8001316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800131a:	613b      	str	r3, [r7, #16]
      t0 ^= ROL32(temp, 8);
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	ea4f 6333 	mov.w	r3, r3, ror #24
 8001322:	6a3a      	ldr	r2, [r7, #32]
 8001324:	4053      	eors	r3, r2
 8001326:	623b      	str	r3, [r7, #32]
      temp = te[(s2 >> 16) & 0xFF];
 8001328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800132a:	0c1b      	lsrs	r3, r3, #16
 800132c:	b2db      	uxtb	r3, r3
 800132e:	4a98      	ldr	r2, [pc, #608]	; (8001590 <aesEncryptBlock+0x378>)
 8001330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001334:	613b      	str	r3, [r7, #16]
      t0 ^= ROL32(temp, 16);
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	ea4f 4333 	mov.w	r3, r3, ror #16
 800133c:	6a3a      	ldr	r2, [r7, #32]
 800133e:	4053      	eors	r3, r2
 8001340:	623b      	str	r3, [r7, #32]
      temp = te[(s3 >> 24) & 0xFF];
 8001342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001344:	0e1b      	lsrs	r3, r3, #24
 8001346:	4a92      	ldr	r2, [pc, #584]	; (8001590 <aesEncryptBlock+0x378>)
 8001348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800134c:	613b      	str	r3, [r7, #16]
      t0 ^= ROL32(temp, 24);
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001354:	6a3a      	ldr	r2, [r7, #32]
 8001356:	4053      	eors	r3, r2
 8001358:	623b      	str	r3, [r7, #32]

      t1 = te[s1 & 0xFF];
 800135a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800135c:	b2db      	uxtb	r3, r3
 800135e:	4a8c      	ldr	r2, [pc, #560]	; (8001590 <aesEncryptBlock+0x378>)
 8001360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001364:	61fb      	str	r3, [r7, #28]
      temp = te[(s2 >> 8) & 0xFF];
 8001366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001368:	0a1b      	lsrs	r3, r3, #8
 800136a:	b2db      	uxtb	r3, r3
 800136c:	4a88      	ldr	r2, [pc, #544]	; (8001590 <aesEncryptBlock+0x378>)
 800136e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001372:	613b      	str	r3, [r7, #16]
      t1 ^= ROL32(temp, 8);
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	ea4f 6333 	mov.w	r3, r3, ror #24
 800137a:	69fa      	ldr	r2, [r7, #28]
 800137c:	4053      	eors	r3, r2
 800137e:	61fb      	str	r3, [r7, #28]
      temp = te[(s3 >> 16) & 0xFF];
 8001380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001382:	0c1b      	lsrs	r3, r3, #16
 8001384:	b2db      	uxtb	r3, r3
 8001386:	4a82      	ldr	r2, [pc, #520]	; (8001590 <aesEncryptBlock+0x378>)
 8001388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800138c:	613b      	str	r3, [r7, #16]
      t1 ^= ROL32(temp, 16);
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	ea4f 4333 	mov.w	r3, r3, ror #16
 8001394:	69fa      	ldr	r2, [r7, #28]
 8001396:	4053      	eors	r3, r2
 8001398:	61fb      	str	r3, [r7, #28]
      temp = te[(s0 >> 24) & 0xFF];
 800139a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800139c:	0e1b      	lsrs	r3, r3, #24
 800139e:	4a7c      	ldr	r2, [pc, #496]	; (8001590 <aesEncryptBlock+0x378>)
 80013a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013a4:	613b      	str	r3, [r7, #16]
      t1 ^= ROL32(temp, 24);
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	ea4f 2333 	mov.w	r3, r3, ror #8
 80013ac:	69fa      	ldr	r2, [r7, #28]
 80013ae:	4053      	eors	r3, r2
 80013b0:	61fb      	str	r3, [r7, #28]

      t2 = te[s2 & 0xFF];
 80013b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	4a76      	ldr	r2, [pc, #472]	; (8001590 <aesEncryptBlock+0x378>)
 80013b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013bc:	61bb      	str	r3, [r7, #24]
      temp = te[(s3 >> 8) & 0xFF];
 80013be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c0:	0a1b      	lsrs	r3, r3, #8
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	4a72      	ldr	r2, [pc, #456]	; (8001590 <aesEncryptBlock+0x378>)
 80013c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ca:	613b      	str	r3, [r7, #16]
      t2 ^= ROL32(temp, 8);
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	ea4f 6333 	mov.w	r3, r3, ror #24
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	4053      	eors	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
      temp = te[(s0 >> 16) & 0xFF];
 80013d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013da:	0c1b      	lsrs	r3, r3, #16
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	4a6c      	ldr	r2, [pc, #432]	; (8001590 <aesEncryptBlock+0x378>)
 80013e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013e4:	613b      	str	r3, [r7, #16]
      t2 ^= ROL32(temp, 16);
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	ea4f 4333 	mov.w	r3, r3, ror #16
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	4053      	eors	r3, r2
 80013f0:	61bb      	str	r3, [r7, #24]
      temp = te[(s1 >> 24) & 0xFF];
 80013f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013f4:	0e1b      	lsrs	r3, r3, #24
 80013f6:	4a66      	ldr	r2, [pc, #408]	; (8001590 <aesEncryptBlock+0x378>)
 80013f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013fc:	613b      	str	r3, [r7, #16]
      t2 ^= ROL32(temp, 24);
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4053      	eors	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]

      t3 = te[s3 & 0xFF];
 800140a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140c:	b2db      	uxtb	r3, r3
 800140e:	4a60      	ldr	r2, [pc, #384]	; (8001590 <aesEncryptBlock+0x378>)
 8001410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001414:	617b      	str	r3, [r7, #20]
      temp = te[(s0 >> 8) & 0xFF];
 8001416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001418:	0a1b      	lsrs	r3, r3, #8
 800141a:	b2db      	uxtb	r3, r3
 800141c:	4a5c      	ldr	r2, [pc, #368]	; (8001590 <aesEncryptBlock+0x378>)
 800141e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001422:	613b      	str	r3, [r7, #16]
      t3 ^= ROL32(temp, 8);
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	ea4f 6333 	mov.w	r3, r3, ror #24
 800142a:	697a      	ldr	r2, [r7, #20]
 800142c:	4053      	eors	r3, r2
 800142e:	617b      	str	r3, [r7, #20]
      temp = te[(s1 >> 16) & 0xFF];
 8001430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001432:	0c1b      	lsrs	r3, r3, #16
 8001434:	b2db      	uxtb	r3, r3
 8001436:	4a56      	ldr	r2, [pc, #344]	; (8001590 <aesEncryptBlock+0x378>)
 8001438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800143c:	613b      	str	r3, [r7, #16]
      t3 ^= ROL32(temp, 16);
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	ea4f 4333 	mov.w	r3, r3, ror #16
 8001444:	697a      	ldr	r2, [r7, #20]
 8001446:	4053      	eors	r3, r2
 8001448:	617b      	str	r3, [r7, #20]
      temp = te[(s2 >> 24) & 0xFF];
 800144a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800144c:	0e1b      	lsrs	r3, r3, #24
 800144e:	4a50      	ldr	r2, [pc, #320]	; (8001590 <aesEncryptBlock+0x378>)
 8001450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001454:	613b      	str	r3, [r7, #16]
      t3 ^= ROL32(temp, 24);
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	ea4f 2333 	mov.w	r3, r3, ror #8
 800145c:	697a      	ldr	r2, [r7, #20]
 800145e:	4053      	eors	r3, r2
 8001460:	617b      	str	r3, [r7, #20]

      //Round key addition
      s0 = t0 ^ context->ek[i * 4];
 8001462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	68fa      	ldr	r2, [r7, #12]
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	4413      	add	r3, r2
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	6a3a      	ldr	r2, [r7, #32]
 8001470:	4053      	eors	r3, r2
 8001472:	633b      	str	r3, [r7, #48]	; 0x30
      s1 = t1 ^ context->ek[i * 4 + 1];
 8001474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	3301      	adds	r3, #1
 800147a:	68fa      	ldr	r2, [r7, #12]
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	4413      	add	r3, r2
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	69fa      	ldr	r2, [r7, #28]
 8001484:	4053      	eors	r3, r2
 8001486:	62fb      	str	r3, [r7, #44]	; 0x2c
      s2 = t2 ^ context->ek[i * 4 + 2];
 8001488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	3302      	adds	r3, #2
 800148e:	68fa      	ldr	r2, [r7, #12]
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	4413      	add	r3, r2
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	4053      	eors	r3, r2
 800149a:	62bb      	str	r3, [r7, #40]	; 0x28
      s3 = t3 ^ context->ek[i * 4 + 3];
 800149c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	3303      	adds	r3, #3
 80014a2:	68fa      	ldr	r2, [r7, #12]
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	4413      	add	r3, r2
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	697a      	ldr	r2, [r7, #20]
 80014ac:	4053      	eors	r3, r2
 80014ae:	627b      	str	r3, [r7, #36]	; 0x24
   for(i = 1; i < context->nr; i++)
 80014b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014b2:	3301      	adds	r3, #1
 80014b4:	637b      	str	r3, [r7, #52]	; 0x34
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80014bc:	429a      	cmp	r2, r3
 80014be:	f4ff af20 	bcc.w	8001302 <aesEncryptBlock+0xea>
   }

   //The last round differs slightly from the first rounds
   t0 = sbox[s0 & 0xFF];
 80014c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	4a33      	ldr	r2, [pc, #204]	; (8001594 <aesEncryptBlock+0x37c>)
 80014c8:	5cd3      	ldrb	r3, [r2, r3]
 80014ca:	623b      	str	r3, [r7, #32]
   t0 |= sbox[(s1 >> 8) & 0xFF] << 8;
 80014cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ce:	0a1b      	lsrs	r3, r3, #8
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	4a30      	ldr	r2, [pc, #192]	; (8001594 <aesEncryptBlock+0x37c>)
 80014d4:	5cd3      	ldrb	r3, [r2, r3]
 80014d6:	021b      	lsls	r3, r3, #8
 80014d8:	461a      	mov	r2, r3
 80014da:	6a3b      	ldr	r3, [r7, #32]
 80014dc:	4313      	orrs	r3, r2
 80014de:	623b      	str	r3, [r7, #32]
   t0 |= sbox[(s2 >> 16) & 0xFF] << 16;
 80014e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014e2:	0c1b      	lsrs	r3, r3, #16
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	4a2b      	ldr	r2, [pc, #172]	; (8001594 <aesEncryptBlock+0x37c>)
 80014e8:	5cd3      	ldrb	r3, [r2, r3]
 80014ea:	041b      	lsls	r3, r3, #16
 80014ec:	461a      	mov	r2, r3
 80014ee:	6a3b      	ldr	r3, [r7, #32]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	623b      	str	r3, [r7, #32]
   t0 |= sbox[(s3 >> 24) & 0xFF] << 24;
 80014f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f6:	0e1b      	lsrs	r3, r3, #24
 80014f8:	4a26      	ldr	r2, [pc, #152]	; (8001594 <aesEncryptBlock+0x37c>)
 80014fa:	5cd3      	ldrb	r3, [r2, r3]
 80014fc:	061b      	lsls	r3, r3, #24
 80014fe:	461a      	mov	r2, r3
 8001500:	6a3b      	ldr	r3, [r7, #32]
 8001502:	4313      	orrs	r3, r2
 8001504:	623b      	str	r3, [r7, #32]

   t1 = sbox[s1 & 0xFF];
 8001506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001508:	b2db      	uxtb	r3, r3
 800150a:	4a22      	ldr	r2, [pc, #136]	; (8001594 <aesEncryptBlock+0x37c>)
 800150c:	5cd3      	ldrb	r3, [r2, r3]
 800150e:	61fb      	str	r3, [r7, #28]
   t1 |= sbox[(s2 >> 8) & 0xFF] << 8;
 8001510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001512:	0a1b      	lsrs	r3, r3, #8
 8001514:	b2db      	uxtb	r3, r3
 8001516:	4a1f      	ldr	r2, [pc, #124]	; (8001594 <aesEncryptBlock+0x37c>)
 8001518:	5cd3      	ldrb	r3, [r2, r3]
 800151a:	021b      	lsls	r3, r3, #8
 800151c:	461a      	mov	r2, r3
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	4313      	orrs	r3, r2
 8001522:	61fb      	str	r3, [r7, #28]
   t1 |= sbox[(s3 >> 16) & 0xFF] << 16;
 8001524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001526:	0c1b      	lsrs	r3, r3, #16
 8001528:	b2db      	uxtb	r3, r3
 800152a:	4a1a      	ldr	r2, [pc, #104]	; (8001594 <aesEncryptBlock+0x37c>)
 800152c:	5cd3      	ldrb	r3, [r2, r3]
 800152e:	041b      	lsls	r3, r3, #16
 8001530:	461a      	mov	r2, r3
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	4313      	orrs	r3, r2
 8001536:	61fb      	str	r3, [r7, #28]
   t1 |= sbox[(s0 >> 24) & 0xFF] << 24;
 8001538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800153a:	0e1b      	lsrs	r3, r3, #24
 800153c:	4a15      	ldr	r2, [pc, #84]	; (8001594 <aesEncryptBlock+0x37c>)
 800153e:	5cd3      	ldrb	r3, [r2, r3]
 8001540:	061b      	lsls	r3, r3, #24
 8001542:	461a      	mov	r2, r3
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	4313      	orrs	r3, r2
 8001548:	61fb      	str	r3, [r7, #28]

   t2 = sbox[s2 & 0xFF];
 800154a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800154c:	b2db      	uxtb	r3, r3
 800154e:	4a11      	ldr	r2, [pc, #68]	; (8001594 <aesEncryptBlock+0x37c>)
 8001550:	5cd3      	ldrb	r3, [r2, r3]
 8001552:	61bb      	str	r3, [r7, #24]
   t2 |= sbox[(s3 >> 8) & 0xFF] << 8;
 8001554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001556:	0a1b      	lsrs	r3, r3, #8
 8001558:	b2db      	uxtb	r3, r3
 800155a:	4a0e      	ldr	r2, [pc, #56]	; (8001594 <aesEncryptBlock+0x37c>)
 800155c:	5cd3      	ldrb	r3, [r2, r3]
 800155e:	021b      	lsls	r3, r3, #8
 8001560:	461a      	mov	r2, r3
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	4313      	orrs	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
   t2 |= sbox[(s0 >> 16) & 0xFF] << 16;
 8001568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800156a:	0c1b      	lsrs	r3, r3, #16
 800156c:	b2db      	uxtb	r3, r3
 800156e:	4a09      	ldr	r2, [pc, #36]	; (8001594 <aesEncryptBlock+0x37c>)
 8001570:	5cd3      	ldrb	r3, [r2, r3]
 8001572:	041b      	lsls	r3, r3, #16
 8001574:	461a      	mov	r2, r3
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	4313      	orrs	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
   t2 |= sbox[(s1 >> 24) & 0xFF] << 24;
 800157c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800157e:	0e1b      	lsrs	r3, r3, #24
 8001580:	4a04      	ldr	r2, [pc, #16]	; (8001594 <aesEncryptBlock+0x37c>)
 8001582:	5cd3      	ldrb	r3, [r2, r3]
 8001584:	061b      	lsls	r3, r3, #24
 8001586:	461a      	mov	r2, r3
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	4313      	orrs	r3, r2
 800158c:	e004      	b.n	8001598 <aesEncryptBlock+0x380>
 800158e:	bf00      	nop
 8001590:	08005434 	.word	0x08005434
 8001594:	08005334 	.word	0x08005334
 8001598:	61bb      	str	r3, [r7, #24]

   t3 = sbox[s3 & 0xFF];
 800159a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159c:	b2db      	uxtb	r3, r3
 800159e:	4a56      	ldr	r2, [pc, #344]	; (80016f8 <aesEncryptBlock+0x4e0>)
 80015a0:	5cd3      	ldrb	r3, [r2, r3]
 80015a2:	617b      	str	r3, [r7, #20]
   t3 |= sbox[(s0 >> 8) & 0xFF] << 8;
 80015a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015a6:	0a1b      	lsrs	r3, r3, #8
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	4a53      	ldr	r2, [pc, #332]	; (80016f8 <aesEncryptBlock+0x4e0>)
 80015ac:	5cd3      	ldrb	r3, [r2, r3]
 80015ae:	021b      	lsls	r3, r3, #8
 80015b0:	461a      	mov	r2, r3
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	617b      	str	r3, [r7, #20]
   t3 |= sbox[(s1 >> 16) & 0xFF] << 16;
 80015b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ba:	0c1b      	lsrs	r3, r3, #16
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	4a4e      	ldr	r2, [pc, #312]	; (80016f8 <aesEncryptBlock+0x4e0>)
 80015c0:	5cd3      	ldrb	r3, [r2, r3]
 80015c2:	041b      	lsls	r3, r3, #16
 80015c4:	461a      	mov	r2, r3
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	617b      	str	r3, [r7, #20]
   t3 |= sbox[(s2 >> 24) & 0xFF] << 24;
 80015cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ce:	0e1b      	lsrs	r3, r3, #24
 80015d0:	4a49      	ldr	r2, [pc, #292]	; (80016f8 <aesEncryptBlock+0x4e0>)
 80015d2:	5cd3      	ldrb	r3, [r2, r3]
 80015d4:	061b      	lsls	r3, r3, #24
 80015d6:	461a      	mov	r2, r3
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	4313      	orrs	r3, r2
 80015dc:	617b      	str	r3, [r7, #20]

   //Last round key addition
   s0 = t0 ^ context->ek[context->nr * 4];
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	68fa      	ldr	r2, [r7, #12]
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	4413      	add	r3, r2
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	6a3a      	ldr	r2, [r7, #32]
 80015ee:	4053      	eors	r3, r2
 80015f0:	633b      	str	r3, [r7, #48]	; 0x30
   s1 = t1 ^ context->ek[context->nr * 4 + 1];
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	3301      	adds	r3, #1
 80015fa:	68fa      	ldr	r2, [r7, #12]
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	4413      	add	r3, r2
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	69fa      	ldr	r2, [r7, #28]
 8001604:	4053      	eors	r3, r2
 8001606:	62fb      	str	r3, [r7, #44]	; 0x2c
   s2 = t2 ^ context->ek[context->nr * 4 + 2];
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	3302      	adds	r3, #2
 8001610:	68fa      	ldr	r2, [r7, #12]
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	4413      	add	r3, r2
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	4053      	eors	r3, r2
 800161c:	62bb      	str	r3, [r7, #40]	; 0x28
   s3 = t3 ^ context->ek[context->nr * 4 + 3];
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	3303      	adds	r3, #3
 8001626:	68fa      	ldr	r2, [r7, #12]
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	4413      	add	r3, r2
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	697a      	ldr	r2, [r7, #20]
 8001630:	4053      	eors	r3, r2
 8001632:	627b      	str	r3, [r7, #36]	; 0x24

   //The final state is then copied to the output
   STORE32LE(s0, output + 0);
 8001634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001636:	b2da      	uxtb	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	701a      	strb	r2, [r3, #0]
 800163c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800163e:	0a1a      	lsrs	r2, r3, #8
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	3301      	adds	r3, #1
 8001644:	b2d2      	uxtb	r2, r2
 8001646:	701a      	strb	r2, [r3, #0]
 8001648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800164a:	0c1a      	lsrs	r2, r3, #16
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3302      	adds	r3, #2
 8001650:	b2d2      	uxtb	r2, r2
 8001652:	701a      	strb	r2, [r3, #0]
 8001654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001656:	0e1a      	lsrs	r2, r3, #24
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3303      	adds	r3, #3
 800165c:	b2d2      	uxtb	r2, r2
 800165e:	701a      	strb	r2, [r3, #0]
   STORE32LE(s1, output + 4);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	3304      	adds	r3, #4
 8001664:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001666:	b2d2      	uxtb	r2, r2
 8001668:	701a      	strb	r2, [r3, #0]
 800166a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800166c:	0a1a      	lsrs	r2, r3, #8
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	3305      	adds	r3, #5
 8001672:	b2d2      	uxtb	r2, r2
 8001674:	701a      	strb	r2, [r3, #0]
 8001676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001678:	0c1a      	lsrs	r2, r3, #16
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	3306      	adds	r3, #6
 800167e:	b2d2      	uxtb	r2, r2
 8001680:	701a      	strb	r2, [r3, #0]
 8001682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001684:	0e1a      	lsrs	r2, r3, #24
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	3307      	adds	r3, #7
 800168a:	b2d2      	uxtb	r2, r2
 800168c:	701a      	strb	r2, [r3, #0]
   STORE32LE(s2, output + 8);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	3308      	adds	r3, #8
 8001692:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001694:	b2d2      	uxtb	r2, r2
 8001696:	701a      	strb	r2, [r3, #0]
 8001698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800169a:	0a1a      	lsrs	r2, r3, #8
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	3309      	adds	r3, #9
 80016a0:	b2d2      	uxtb	r2, r2
 80016a2:	701a      	strb	r2, [r3, #0]
 80016a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016a6:	0c1a      	lsrs	r2, r3, #16
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	330a      	adds	r3, #10
 80016ac:	b2d2      	uxtb	r2, r2
 80016ae:	701a      	strb	r2, [r3, #0]
 80016b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016b2:	0e1a      	lsrs	r2, r3, #24
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	330b      	adds	r3, #11
 80016b8:	b2d2      	uxtb	r2, r2
 80016ba:	701a      	strb	r2, [r3, #0]
   STORE32LE(s3, output + 12);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	330c      	adds	r3, #12
 80016c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016c2:	b2d2      	uxtb	r2, r2
 80016c4:	701a      	strb	r2, [r3, #0]
 80016c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c8:	0a1a      	lsrs	r2, r3, #8
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	330d      	adds	r3, #13
 80016ce:	b2d2      	uxtb	r2, r2
 80016d0:	701a      	strb	r2, [r3, #0]
 80016d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d4:	0c1a      	lsrs	r2, r3, #16
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	330e      	adds	r3, #14
 80016da:	b2d2      	uxtb	r2, r2
 80016dc:	701a      	strb	r2, [r3, #0]
 80016de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e0:	0e1a      	lsrs	r2, r3, #24
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	330f      	adds	r3, #15
 80016e6:	b2d2      	uxtb	r2, r2
 80016e8:	701a      	strb	r2, [r3, #0]
}
 80016ea:	bf00      	nop
 80016ec:	373c      	adds	r7, #60	; 0x3c
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	08005334 	.word	0x08005334

080016fc <aesDeinit>:
 * @brief Release AES context
 * @param[in] context Pointer to the AES context
 **/

__weak_func void aesDeinit(AesContext *context)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
   //Clear AES context
   osMemset(context, 0, sizeof(AesContext));
 8001704:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8001708:	2100      	movs	r1, #0
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f002 fa80 	bl	8003c10 <memset>
}
 8001710:	bf00      	nop
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <swapInt32>:
 * @param[in] value 32-bit value
 * @return 32-bit value with byte order swapped
 **/

uint32_t swapInt32(uint32_t value)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
   return SWAPINT32(value);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	061a      	lsls	r2, r3, #24
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	021b      	lsls	r3, r3, #8
 8001728:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800172c:	431a      	orrs	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	0a1b      	lsrs	r3, r3, #8
 8001732:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001736:	431a      	orrs	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	0e1b      	lsrs	r3, r3, #24
 800173c:	4313      	orrs	r3, r2
}
 800173e:	4618      	mov	r0, r3
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
	...

0800174c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b08a      	sub	sp, #40	; 0x28
 8001750:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001752:	f107 0314 	add.w	r3, r7, #20
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	605a      	str	r2, [r3, #4]
 800175c:	609a      	str	r2, [r3, #8]
 800175e:	60da      	str	r2, [r3, #12]
 8001760:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	613b      	str	r3, [r7, #16]
 8001766:	4b2d      	ldr	r3, [pc, #180]	; (800181c <MX_GPIO_Init+0xd0>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	4a2c      	ldr	r2, [pc, #176]	; (800181c <MX_GPIO_Init+0xd0>)
 800176c:	f043 0304 	orr.w	r3, r3, #4
 8001770:	6313      	str	r3, [r2, #48]	; 0x30
 8001772:	4b2a      	ldr	r3, [pc, #168]	; (800181c <MX_GPIO_Init+0xd0>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	f003 0304 	and.w	r3, r3, #4
 800177a:	613b      	str	r3, [r7, #16]
 800177c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	60fb      	str	r3, [r7, #12]
 8001782:	4b26      	ldr	r3, [pc, #152]	; (800181c <MX_GPIO_Init+0xd0>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	4a25      	ldr	r2, [pc, #148]	; (800181c <MX_GPIO_Init+0xd0>)
 8001788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800178c:	6313      	str	r3, [r2, #48]	; 0x30
 800178e:	4b23      	ldr	r3, [pc, #140]	; (800181c <MX_GPIO_Init+0xd0>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	60bb      	str	r3, [r7, #8]
 800179e:	4b1f      	ldr	r3, [pc, #124]	; (800181c <MX_GPIO_Init+0xd0>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	4a1e      	ldr	r2, [pc, #120]	; (800181c <MX_GPIO_Init+0xd0>)
 80017a4:	f043 0301 	orr.w	r3, r3, #1
 80017a8:	6313      	str	r3, [r2, #48]	; 0x30
 80017aa:	4b1c      	ldr	r3, [pc, #112]	; (800181c <MX_GPIO_Init+0xd0>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	60bb      	str	r3, [r7, #8]
 80017b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	607b      	str	r3, [r7, #4]
 80017ba:	4b18      	ldr	r3, [pc, #96]	; (800181c <MX_GPIO_Init+0xd0>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	4a17      	ldr	r2, [pc, #92]	; (800181c <MX_GPIO_Init+0xd0>)
 80017c0:	f043 0302 	orr.w	r3, r3, #2
 80017c4:	6313      	str	r3, [r2, #48]	; 0x30
 80017c6:	4b15      	ldr	r3, [pc, #84]	; (800181c <MX_GPIO_Init+0xd0>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	607b      	str	r3, [r7, #4]
 80017d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80017d2:	2200      	movs	r2, #0
 80017d4:	2120      	movs	r1, #32
 80017d6:	4812      	ldr	r0, [pc, #72]	; (8001820 <MX_GPIO_Init+0xd4>)
 80017d8:	f000 fe36 	bl	8002448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80017dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017e2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80017e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e8:	2300      	movs	r3, #0
 80017ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017ec:	f107 0314 	add.w	r3, r7, #20
 80017f0:	4619      	mov	r1, r3
 80017f2:	480c      	ldr	r0, [pc, #48]	; (8001824 <MX_GPIO_Init+0xd8>)
 80017f4:	f000 fc94 	bl	8002120 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80017f8:	2320      	movs	r3, #32
 80017fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017fc:	2301      	movs	r3, #1
 80017fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001804:	2300      	movs	r3, #0
 8001806:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001808:	f107 0314 	add.w	r3, r7, #20
 800180c:	4619      	mov	r1, r3
 800180e:	4804      	ldr	r0, [pc, #16]	; (8001820 <MX_GPIO_Init+0xd4>)
 8001810:	f000 fc86 	bl	8002120 <HAL_GPIO_Init>

}
 8001814:	bf00      	nop
 8001816:	3728      	adds	r7, #40	; 0x28
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	40023800 	.word	0x40023800
 8001820:	40020000 	.word	0x40020000
 8001824:	40020800 	.word	0x40020800

08001828 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800182c:	f000 fb20 	bl	8001e70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001830:	f000 f80c 	bl	800184c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001834:	f7ff ff8a 	bl	800174c <MX_GPIO_Init>
  MX_TIM6_Init();
 8001838:	f000 f940 	bl	8001abc <MX_TIM6_Init>
  MX_USART2_UART_Init();
 800183c:	f000 f9e2 	bl	8001c04 <MX_USART2_UART_Init>
  MX_TIM7_Init();
 8001840:	f000 f972 	bl	8001b28 <MX_TIM7_Init>





  RsaTest();
 8001844:	f7fe fe68 	bl	8000518 <RsaTest>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001848:	e7fe      	b.n	8001848 <main+0x20>
	...

0800184c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b094      	sub	sp, #80	; 0x50
 8001850:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001852:	f107 031c 	add.w	r3, r7, #28
 8001856:	2234      	movs	r2, #52	; 0x34
 8001858:	2100      	movs	r1, #0
 800185a:	4618      	mov	r0, r3
 800185c:	f002 f9d8 	bl	8003c10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001860:	f107 0308 	add.w	r3, r7, #8
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	60da      	str	r2, [r3, #12]
 800186e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001870:	2300      	movs	r3, #0
 8001872:	607b      	str	r3, [r7, #4]
 8001874:	4b2c      	ldr	r3, [pc, #176]	; (8001928 <SystemClock_Config+0xdc>)
 8001876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001878:	4a2b      	ldr	r2, [pc, #172]	; (8001928 <SystemClock_Config+0xdc>)
 800187a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800187e:	6413      	str	r3, [r2, #64]	; 0x40
 8001880:	4b29      	ldr	r3, [pc, #164]	; (8001928 <SystemClock_Config+0xdc>)
 8001882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001888:	607b      	str	r3, [r7, #4]
 800188a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800188c:	2300      	movs	r3, #0
 800188e:	603b      	str	r3, [r7, #0]
 8001890:	4b26      	ldr	r3, [pc, #152]	; (800192c <SystemClock_Config+0xe0>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a25      	ldr	r2, [pc, #148]	; (800192c <SystemClock_Config+0xe0>)
 8001896:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800189a:	6013      	str	r3, [r2, #0]
 800189c:	4b23      	ldr	r3, [pc, #140]	; (800192c <SystemClock_Config+0xe0>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018a4:	603b      	str	r3, [r7, #0]
 80018a6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018a8:	2302      	movs	r3, #2
 80018aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018ac:	2301      	movs	r3, #1
 80018ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018b0:	2310      	movs	r3, #16
 80018b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018b4:	2302      	movs	r3, #2
 80018b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018b8:	2300      	movs	r3, #0
 80018ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80018bc:	2308      	movs	r3, #8
 80018be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80018c0:	23b4      	movs	r3, #180	; 0xb4
 80018c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018c4:	2302      	movs	r3, #2
 80018c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80018c8:	2302      	movs	r3, #2
 80018ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80018cc:	2302      	movs	r3, #2
 80018ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018d0:	f107 031c 	add.w	r3, r7, #28
 80018d4:	4618      	mov	r0, r3
 80018d6:	f001 f96b 	bl	8002bb0 <HAL_RCC_OscConfig>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80018e0:	f000 f826 	bl	8001930 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80018e4:	f000 fdca 	bl	800247c <HAL_PWREx_EnableOverDrive>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80018ee:	f000 f81f 	bl	8001930 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018f2:	230f      	movs	r3, #15
 80018f4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018f6:	2302      	movs	r3, #2
 80018f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018fa:	2300      	movs	r3, #0
 80018fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80018fe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001902:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001904:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001908:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800190a:	f107 0308 	add.w	r3, r7, #8
 800190e:	2105      	movs	r1, #5
 8001910:	4618      	mov	r0, r3
 8001912:	f000 fe03 	bl	800251c <HAL_RCC_ClockConfig>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800191c:	f000 f808 	bl	8001930 <Error_Handler>
  }
}
 8001920:	bf00      	nop
 8001922:	3750      	adds	r7, #80	; 0x50
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40023800 	.word	0x40023800
 800192c:	40007000 	.word	0x40007000

08001930 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001934:	b672      	cpsid	i
}
 8001936:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001938:	e7fe      	b.n	8001938 <Error_Handler+0x8>

0800193a <osCreateMutex>:
 * @return The function returns TRUE if the mutex was successfully
 *   created. Otherwise, FALSE is returned
 **/

bool_t osCreateMutex(OsMutex *mutex)
{
 800193a:	b480      	push	{r7}
 800193c:	b083      	sub	sp, #12
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
   //The mutex was successfully created
   return TRUE;
 8001942:	2301      	movs	r3, #1
}
 8001944:	4618      	mov	r0, r3
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <osAllocMem>:
 * @return A pointer to the allocated memory block or NULL if
 *   there is insufficient memory available
 **/

__weak_func void *osAllocMem(size_t size)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
   void *p;

   //Allocate a memory block
   p = malloc(size);
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f002 f93b 	bl	8003bd4 <malloc>
 800195e:	4603      	mov	r3, r0
 8001960:	60fb      	str	r3, [r7, #12]
   //Debug message
   TRACE_DEBUG("Allocating %" PRIuSIZE " bytes at 0x%08" PRIXPTR "\r\n",
      size, (uintptr_t) p);

   //Return a pointer to the newly allocated memory block
   return p;
 8001962:	68fb      	ldr	r3, [r7, #12]
}
 8001964:	4618      	mov	r0, r3
 8001966:	3710      	adds	r7, #16
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <osFreeMem>:
 * @brief Release a previously allocated memory block
 * @param[in] p Previously allocated memory block to be freed
 **/

__weak_func void osFreeMem(void *p)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
   //Make sure the pointer is valid
   if(p != NULL)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d002      	beq.n	8001980 <osFreeMem+0x14>
   {
      //Debug message
      TRACE_DEBUG("Freeing memory at 0x%08" PRIXPTR "\r\n", (uintptr_t) p);

      //Free memory block
      free(p);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f002 f932 	bl	8003be4 <free>
   }
}
 8001980:	bf00      	nop
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	607b      	str	r3, [r7, #4]
 8001992:	4b10      	ldr	r3, [pc, #64]	; (80019d4 <HAL_MspInit+0x4c>)
 8001994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001996:	4a0f      	ldr	r2, [pc, #60]	; (80019d4 <HAL_MspInit+0x4c>)
 8001998:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800199c:	6453      	str	r3, [r2, #68]	; 0x44
 800199e:	4b0d      	ldr	r3, [pc, #52]	; (80019d4 <HAL_MspInit+0x4c>)
 80019a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019a6:	607b      	str	r3, [r7, #4]
 80019a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	603b      	str	r3, [r7, #0]
 80019ae:	4b09      	ldr	r3, [pc, #36]	; (80019d4 <HAL_MspInit+0x4c>)
 80019b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b2:	4a08      	ldr	r2, [pc, #32]	; (80019d4 <HAL_MspInit+0x4c>)
 80019b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019b8:	6413      	str	r3, [r2, #64]	; 0x40
 80019ba:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <HAL_MspInit+0x4c>)
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c2:	603b      	str	r3, [r7, #0]
 80019c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80019c6:	2007      	movs	r0, #7
 80019c8:	f000 fb76 	bl	80020b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019cc:	bf00      	nop
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40023800 	.word	0x40023800

080019d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019dc:	e7fe      	b.n	80019dc <NMI_Handler+0x4>

080019de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019de:	b480      	push	{r7}
 80019e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019e2:	e7fe      	b.n	80019e2 <HardFault_Handler+0x4>

080019e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019e8:	e7fe      	b.n	80019e8 <MemManage_Handler+0x4>

080019ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019ea:	b480      	push	{r7}
 80019ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019ee:	e7fe      	b.n	80019ee <BusFault_Handler+0x4>

080019f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019f4:	e7fe      	b.n	80019f4 <UsageFault_Handler+0x4>

080019f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019f6:	b480      	push	{r7}
 80019f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019fa:	bf00      	nop
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a08:	bf00      	nop
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr

08001a12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a12:	b480      	push	{r7}
 8001a14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a16:	bf00      	nop
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a24:	f000 fa76 	bl	8001f14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a28:	bf00      	nop
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a34:	4a14      	ldr	r2, [pc, #80]	; (8001a88 <_sbrk+0x5c>)
 8001a36:	4b15      	ldr	r3, [pc, #84]	; (8001a8c <_sbrk+0x60>)
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a40:	4b13      	ldr	r3, [pc, #76]	; (8001a90 <_sbrk+0x64>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d102      	bne.n	8001a4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a48:	4b11      	ldr	r3, [pc, #68]	; (8001a90 <_sbrk+0x64>)
 8001a4a:	4a12      	ldr	r2, [pc, #72]	; (8001a94 <_sbrk+0x68>)
 8001a4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a4e:	4b10      	ldr	r3, [pc, #64]	; (8001a90 <_sbrk+0x64>)
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4413      	add	r3, r2
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d207      	bcs.n	8001a6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a5c:	f002 f874 	bl	8003b48 <__errno>
 8001a60:	4603      	mov	r3, r0
 8001a62:	220c      	movs	r2, #12
 8001a64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a6a:	e009      	b.n	8001a80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a6c:	4b08      	ldr	r3, [pc, #32]	; (8001a90 <_sbrk+0x64>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a72:	4b07      	ldr	r3, [pc, #28]	; (8001a90 <_sbrk+0x64>)
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4413      	add	r3, r2
 8001a7a:	4a05      	ldr	r2, [pc, #20]	; (8001a90 <_sbrk+0x64>)
 8001a7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3718      	adds	r7, #24
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	20020000 	.word	0x20020000
 8001a8c:	00000400 	.word	0x00000400
 8001a90:	200005f0 	.word	0x200005f0
 8001a94:	200006e0 	.word	0x200006e0

08001a98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a9c:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <SystemInit+0x20>)
 8001a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aa2:	4a05      	ldr	r2, [pc, #20]	; (8001ab8 <SystemInit+0x20>)
 8001aa4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001aa8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001aac:	bf00      	nop
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	e000ed00 	.word	0xe000ed00

08001abc <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ac2:	463b      	mov	r3, r7
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001aca:	4b15      	ldr	r3, [pc, #84]	; (8001b20 <MX_TIM6_Init+0x64>)
 8001acc:	4a15      	ldr	r2, [pc, #84]	; (8001b24 <MX_TIM6_Init+0x68>)
 8001ace:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 45-1;
 8001ad0:	4b13      	ldr	r3, [pc, #76]	; (8001b20 <MX_TIM6_Init+0x64>)
 8001ad2:	222c      	movs	r2, #44	; 0x2c
 8001ad4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ad6:	4b12      	ldr	r3, [pc, #72]	; (8001b20 <MX_TIM6_Init+0x64>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001adc:	4b10      	ldr	r3, [pc, #64]	; (8001b20 <MX_TIM6_Init+0x64>)
 8001ade:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ae2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ae4:	4b0e      	ldr	r3, [pc, #56]	; (8001b20 <MX_TIM6_Init+0x64>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001aea:	480d      	ldr	r0, [pc, #52]	; (8001b20 <MX_TIM6_Init+0x64>)
 8001aec:	f001 fafe 	bl	80030ec <HAL_TIM_Base_Init>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001af6:	f7ff ff1b 	bl	8001930 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001afa:	2300      	movs	r3, #0
 8001afc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001afe:	2300      	movs	r3, #0
 8001b00:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001b02:	463b      	mov	r3, r7
 8001b04:	4619      	mov	r1, r3
 8001b06:	4806      	ldr	r0, [pc, #24]	; (8001b20 <MX_TIM6_Init+0x64>)
 8001b08:	f001 fbe0 	bl	80032cc <HAL_TIMEx_MasterConfigSynchronization>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001b12:	f7ff ff0d 	bl	8001930 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001b16:	bf00      	nop
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	200005f4 	.word	0x200005f4
 8001b24:	40001000 	.word	0x40001000

08001b28 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b2e:	463b      	mov	r3, r7
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001b36:	4b15      	ldr	r3, [pc, #84]	; (8001b8c <MX_TIM7_Init+0x64>)
 8001b38:	4a15      	ldr	r2, [pc, #84]	; (8001b90 <MX_TIM7_Init+0x68>)
 8001b3a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 45000-1;
 8001b3c:	4b13      	ldr	r3, [pc, #76]	; (8001b8c <MX_TIM7_Init+0x64>)
 8001b3e:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8001b42:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b44:	4b11      	ldr	r3, [pc, #68]	; (8001b8c <MX_TIM7_Init+0x64>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8001b4a:	4b10      	ldr	r3, [pc, #64]	; (8001b8c <MX_TIM7_Init+0x64>)
 8001b4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b50:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b52:	4b0e      	ldr	r3, [pc, #56]	; (8001b8c <MX_TIM7_Init+0x64>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001b58:	480c      	ldr	r0, [pc, #48]	; (8001b8c <MX_TIM7_Init+0x64>)
 8001b5a:	f001 fac7 	bl	80030ec <HAL_TIM_Base_Init>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001b64:	f7ff fee4 	bl	8001930 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001b70:	463b      	mov	r3, r7
 8001b72:	4619      	mov	r1, r3
 8001b74:	4805      	ldr	r0, [pc, #20]	; (8001b8c <MX_TIM7_Init+0x64>)
 8001b76:	f001 fba9 	bl	80032cc <HAL_TIMEx_MasterConfigSynchronization>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001b80:	f7ff fed6 	bl	8001930 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001b84:	bf00      	nop
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	2000063c 	.word	0x2000063c
 8001b90:	40001400 	.word	0x40001400

08001b94 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a15      	ldr	r2, [pc, #84]	; (8001bf8 <HAL_TIM_Base_MspInit+0x64>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d10e      	bne.n	8001bc4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	60fb      	str	r3, [r7, #12]
 8001baa:	4b14      	ldr	r3, [pc, #80]	; (8001bfc <HAL_TIM_Base_MspInit+0x68>)
 8001bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bae:	4a13      	ldr	r2, [pc, #76]	; (8001bfc <HAL_TIM_Base_MspInit+0x68>)
 8001bb0:	f043 0310 	orr.w	r3, r3, #16
 8001bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8001bb6:	4b11      	ldr	r3, [pc, #68]	; (8001bfc <HAL_TIM_Base_MspInit+0x68>)
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bba:	f003 0310 	and.w	r3, r3, #16
 8001bbe:	60fb      	str	r3, [r7, #12]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8001bc2:	e012      	b.n	8001bea <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM7)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a0d      	ldr	r2, [pc, #52]	; (8001c00 <HAL_TIM_Base_MspInit+0x6c>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d10d      	bne.n	8001bea <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60bb      	str	r3, [r7, #8]
 8001bd2:	4b0a      	ldr	r3, [pc, #40]	; (8001bfc <HAL_TIM_Base_MspInit+0x68>)
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd6:	4a09      	ldr	r2, [pc, #36]	; (8001bfc <HAL_TIM_Base_MspInit+0x68>)
 8001bd8:	f043 0320 	orr.w	r3, r3, #32
 8001bdc:	6413      	str	r3, [r2, #64]	; 0x40
 8001bde:	4b07      	ldr	r3, [pc, #28]	; (8001bfc <HAL_TIM_Base_MspInit+0x68>)
 8001be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be2:	f003 0320 	and.w	r3, r3, #32
 8001be6:	60bb      	str	r3, [r7, #8]
 8001be8:	68bb      	ldr	r3, [r7, #8]
}
 8001bea:	bf00      	nop
 8001bec:	3714      	adds	r7, #20
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	40001000 	.word	0x40001000
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	40001400 	.word	0x40001400

08001c04 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c08:	4b11      	ldr	r3, [pc, #68]	; (8001c50 <MX_USART2_UART_Init+0x4c>)
 8001c0a:	4a12      	ldr	r2, [pc, #72]	; (8001c54 <MX_USART2_UART_Init+0x50>)
 8001c0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c0e:	4b10      	ldr	r3, [pc, #64]	; (8001c50 <MX_USART2_UART_Init+0x4c>)
 8001c10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c16:	4b0e      	ldr	r3, [pc, #56]	; (8001c50 <MX_USART2_UART_Init+0x4c>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c1c:	4b0c      	ldr	r3, [pc, #48]	; (8001c50 <MX_USART2_UART_Init+0x4c>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c22:	4b0b      	ldr	r3, [pc, #44]	; (8001c50 <MX_USART2_UART_Init+0x4c>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c28:	4b09      	ldr	r3, [pc, #36]	; (8001c50 <MX_USART2_UART_Init+0x4c>)
 8001c2a:	220c      	movs	r2, #12
 8001c2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c2e:	4b08      	ldr	r3, [pc, #32]	; (8001c50 <MX_USART2_UART_Init+0x4c>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c34:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <MX_USART2_UART_Init+0x4c>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c3a:	4805      	ldr	r0, [pc, #20]	; (8001c50 <MX_USART2_UART_Init+0x4c>)
 8001c3c:	f001 fbc2 	bl	80033c4 <HAL_UART_Init>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c46:	f7ff fe73 	bl	8001930 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	20000684 	.word	0x20000684
 8001c54:	40004400 	.word	0x40004400

08001c58 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b08a      	sub	sp, #40	; 0x28
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c60:	f107 0314 	add.w	r3, r7, #20
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	605a      	str	r2, [r3, #4]
 8001c6a:	609a      	str	r2, [r3, #8]
 8001c6c:	60da      	str	r2, [r3, #12]
 8001c6e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a19      	ldr	r2, [pc, #100]	; (8001cdc <HAL_UART_MspInit+0x84>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d12b      	bne.n	8001cd2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	613b      	str	r3, [r7, #16]
 8001c7e:	4b18      	ldr	r3, [pc, #96]	; (8001ce0 <HAL_UART_MspInit+0x88>)
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	4a17      	ldr	r2, [pc, #92]	; (8001ce0 <HAL_UART_MspInit+0x88>)
 8001c84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c88:	6413      	str	r3, [r2, #64]	; 0x40
 8001c8a:	4b15      	ldr	r3, [pc, #84]	; (8001ce0 <HAL_UART_MspInit+0x88>)
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c92:	613b      	str	r3, [r7, #16]
 8001c94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c96:	2300      	movs	r3, #0
 8001c98:	60fb      	str	r3, [r7, #12]
 8001c9a:	4b11      	ldr	r3, [pc, #68]	; (8001ce0 <HAL_UART_MspInit+0x88>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	4a10      	ldr	r2, [pc, #64]	; (8001ce0 <HAL_UART_MspInit+0x88>)
 8001ca0:	f043 0301 	orr.w	r3, r3, #1
 8001ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca6:	4b0e      	ldr	r3, [pc, #56]	; (8001ce0 <HAL_UART_MspInit+0x88>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	60fb      	str	r3, [r7, #12]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001cb2:	230c      	movs	r3, #12
 8001cb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cc2:	2307      	movs	r3, #7
 8001cc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc6:	f107 0314 	add.w	r3, r7, #20
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4805      	ldr	r0, [pc, #20]	; (8001ce4 <HAL_UART_MspInit+0x8c>)
 8001cce:	f000 fa27 	bl	8002120 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001cd2:	bf00      	nop
 8001cd4:	3728      	adds	r7, #40	; 0x28
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	40004400 	.word	0x40004400
 8001ce0:	40023800 	.word	0x40023800
 8001ce4:	40020000 	.word	0x40020000

08001ce8 <yarrowInit>:
 * @param[in] context Pointer to the PRNG context to initialize
 * @return Error code
 **/

error_t yarrowInit(YarrowContext *context)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
   //Clear PRNG state
   osMemset(context, 0, sizeof(YarrowContext));
 8001cf0:	f44f 724c 	mov.w	r2, #816	; 0x330
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f001 ff8a 	bl	8003c10 <memset>

   //Create a mutex to prevent simultaneous access to the PRNG state
   if(!osCreateMutex(&context->mutex))
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff fe1b 	bl	800193a <osCreateMutex>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d101      	bne.n	8001d0e <yarrowInit+0x26>
   {
      //Failed to create mutex
      return ERROR_OUT_OF_RESOURCES;
 8001d0a:	2365      	movs	r3, #101	; 0x65
 8001d0c:	e00d      	b.n	8001d2a <yarrowInit+0x42>
   }

   //Initialize hash contexts
   sha256Init(&context->fastPool);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	3318      	adds	r3, #24
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7fe feb4 	bl	8000a80 <sha256Init>
   sha256Init(&context->slowPool);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	3398      	adds	r3, #152	; 0x98
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7fe feaf 	bl	8000a80 <sha256Init>

   //The PRNG is not ready to generate random data
   context->ready = FALSE;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	605a      	str	r2, [r3, #4]

   //Successful initialization
   return NO_ERROR;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <yarrowSeed>:
 * @param[in] length Length of the input data
 * @return Error code
 **/

error_t yarrowSeed(YarrowContext *context, const uint8_t *input, size_t length)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b084      	sub	sp, #16
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	60f8      	str	r0, [r7, #12]
 8001d3a:	60b9      	str	r1, [r7, #8]
 8001d3c:	607a      	str	r2, [r7, #4]
   //Check parameters
   if(length < sizeof(context->key))
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2b1f      	cmp	r3, #31
 8001d42:	d801      	bhi.n	8001d48 <yarrowSeed+0x16>
      return ERROR_INVALID_PARAMETER;
 8001d44:	2302      	movs	r3, #2
 8001d46:	e00a      	b.n	8001d5e <yarrowSeed+0x2c>

   //Add entropy to the fast pool
   sha256Update(&context->fastPool, input, length);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	3318      	adds	r3, #24
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	68b9      	ldr	r1, [r7, #8]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7fe fed1 	bl	8000af8 <sha256Update>
   //Reseed from the fast pool
   yarrowFastReseed(context);
 8001d56:	68f8      	ldr	r0, [r7, #12]
 8001d58:	f000 f805 	bl	8001d66 <yarrowFastReseed>

   //Successful processing
   return NO_ERROR;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <yarrowFastReseed>:
 * @brief Reseed from the fast pool
 * @param[in] context Pointer to the PRNG context
 **/

void yarrowFastReseed(YarrowContext *context)
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b084      	sub	sp, #16
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
   size_t i;

   //Erase AES context
   if(context->ready)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d005      	beq.n	8001d82 <yarrowFastReseed+0x1c>
   {
      aesDeinit(&context->cipherContext);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff fcbd 	bl	80016fc <aesDeinit>
   }

   //Reseeding from the fast pool use the current key and the hash of all
   //inputs to the fast pool since the last reseed, to generate a new key
   sha256Update(&context->fastPool, context->key, sizeof(context->key));
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f103 0018 	add.w	r0, r3, #24
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 8001d8e:	2220      	movs	r2, #32
 8001d90:	4619      	mov	r1, r3
 8001d92:	f7fe feb1 	bl	8000af8 <sha256Update>
   sha256Final(&context->fastPool, context->key);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f103 0218 	add.w	r2, r3, #24
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 8001da2:	4619      	mov	r1, r3
 8001da4:	4610      	mov	r0, r2
 8001da6:	f7fe fef3 	bl	8000b90 <sha256Final>

   //Set the new key
   aesInit(&context->cipherContext, context->key, sizeof(context->key));
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f503 708a 	add.w	r0, r3, #276	; 0x114
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 8001db6:	2220      	movs	r2, #32
 8001db8:	4619      	mov	r1, r3
 8001dba:	f7ff f86b 	bl	8000e94 <aesInit>

   //Define the new value of the counter
   osMemset(context->counter, 0, sizeof(context->counter));
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8001dc4:	2210      	movs	r2, #16
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f001 ff21 	bl	8003c10 <memset>
   aesEncryptBlock(&context->cipherContext, context->counter, context->counter);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f503 708a 	add.w	r0, r3, #276	; 0x114
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f503 7146 	add.w	r1, r3, #792	; 0x318
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8001de0:	461a      	mov	r2, r3
 8001de2:	f7ff fa19 	bl	8001218 <aesEncryptBlock>

   //Reset the hash context
   sha256Init(&context->fastPool);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	3318      	adds	r3, #24
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7fe fe48 	bl	8000a80 <sha256Init>

   //The entropy estimates for the fast pool are all reset to zero
   for(i = 0; i < YARROW_N; i++)
 8001df0:	2300      	movs	r3, #0
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	e008      	b.n	8001e08 <yarrowFastReseed+0xa2>
   {
      context->fastPoolEntropy[i] = 0;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	68fa      	ldr	r2, [r7, #12]
 8001dfa:	3222      	adds	r2, #34	; 0x22
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   for(i = 0; i < YARROW_N; i++)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	3301      	adds	r3, #1
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d9f3      	bls.n	8001df6 <yarrowFastReseed+0x90>
   }

   //The PRNG is ready to generate random data
   context->ready = TRUE;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2201      	movs	r2, #1
 8001e12:	605a      	str	r2, [r3, #4]
}
 8001e14:	bf00      	nop
 8001e16:	3710      	adds	r7, #16
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
 ldr   sp, =_estack      /* set stack pointer */
 8001e1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e54 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e20:	480d      	ldr	r0, [pc, #52]	; (8001e58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e22:	490e      	ldr	r1, [pc, #56]	; (8001e5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e24:	4a0e      	ldr	r2, [pc, #56]	; (8001e60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e28:	e002      	b.n	8001e30 <LoopCopyDataInit>

08001e2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e2e:	3304      	adds	r3, #4

08001e30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e34:	d3f9      	bcc.n	8001e2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e36:	4a0b      	ldr	r2, [pc, #44]	; (8001e64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e38:	4c0b      	ldr	r4, [pc, #44]	; (8001e68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e3c:	e001      	b.n	8001e42 <LoopFillZerobss>

08001e3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e40:	3204      	adds	r2, #4

08001e42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e44:	d3fb      	bcc.n	8001e3e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e46:	f7ff fe27 	bl	8001a98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e4a:	f001 fe83 	bl	8003b54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e4e:	f7ff fceb 	bl	8001828 <main>
  bx  lr    
 8001e52:	4770      	bx	lr
 ldr   sp, =_estack      /* set stack pointer */
 8001e54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e5c:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8001e60:	08006510 	.word	0x08006510
  ldr r2, =_sbss
 8001e64:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8001e68:	200006dc 	.word	0x200006dc

08001e6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e6c:	e7fe      	b.n	8001e6c <ADC_IRQHandler>
	...

08001e70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e74:	4b0e      	ldr	r3, [pc, #56]	; (8001eb0 <HAL_Init+0x40>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a0d      	ldr	r2, [pc, #52]	; (8001eb0 <HAL_Init+0x40>)
 8001e7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e80:	4b0b      	ldr	r3, [pc, #44]	; (8001eb0 <HAL_Init+0x40>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a0a      	ldr	r2, [pc, #40]	; (8001eb0 <HAL_Init+0x40>)
 8001e86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e8c:	4b08      	ldr	r3, [pc, #32]	; (8001eb0 <HAL_Init+0x40>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a07      	ldr	r2, [pc, #28]	; (8001eb0 <HAL_Init+0x40>)
 8001e92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e98:	2003      	movs	r0, #3
 8001e9a:	f000 f90d 	bl	80020b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e9e:	2000      	movs	r0, #0
 8001ea0:	f000 f808 	bl	8001eb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ea4:	f7ff fd70 	bl	8001988 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	40023c00 	.word	0x40023c00

08001eb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ebc:	4b12      	ldr	r3, [pc, #72]	; (8001f08 <HAL_InitTick+0x54>)
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	4b12      	ldr	r3, [pc, #72]	; (8001f0c <HAL_InitTick+0x58>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eca:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f000 f917 	bl	8002106 <HAL_SYSTICK_Config>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e00e      	b.n	8001f00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2b0f      	cmp	r3, #15
 8001ee6:	d80a      	bhi.n	8001efe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ee8:	2200      	movs	r2, #0
 8001eea:	6879      	ldr	r1, [r7, #4]
 8001eec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ef0:	f000 f8ed 	bl	80020ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ef4:	4a06      	ldr	r2, [pc, #24]	; (8001f10 <HAL_InitTick+0x5c>)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001efa:	2300      	movs	r3, #0
 8001efc:	e000      	b.n	8001f00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	20000040 	.word	0x20000040
 8001f0c:	20000048 	.word	0x20000048
 8001f10:	20000044 	.word	0x20000044

08001f14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f18:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <HAL_IncTick+0x20>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <HAL_IncTick+0x24>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4413      	add	r3, r2
 8001f24:	4a04      	ldr	r2, [pc, #16]	; (8001f38 <HAL_IncTick+0x24>)
 8001f26:	6013      	str	r3, [r2, #0]
}
 8001f28:	bf00      	nop
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	20000048 	.word	0x20000048
 8001f38:	200006c8 	.word	0x200006c8

08001f3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f40:	4b03      	ldr	r3, [pc, #12]	; (8001f50 <HAL_GetTick+0x14>)
 8001f42:	681b      	ldr	r3, [r3, #0]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	200006c8 	.word	0x200006c8

08001f54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f003 0307 	and.w	r3, r3, #7
 8001f62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f64:	4b0c      	ldr	r3, [pc, #48]	; (8001f98 <__NVIC_SetPriorityGrouping+0x44>)
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f6a:	68ba      	ldr	r2, [r7, #8]
 8001f6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f70:	4013      	ands	r3, r2
 8001f72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f86:	4a04      	ldr	r2, [pc, #16]	; (8001f98 <__NVIC_SetPriorityGrouping+0x44>)
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	60d3      	str	r3, [r2, #12]
}
 8001f8c:	bf00      	nop
 8001f8e:	3714      	adds	r7, #20
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	e000ed00 	.word	0xe000ed00

08001f9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fa0:	4b04      	ldr	r3, [pc, #16]	; (8001fb4 <__NVIC_GetPriorityGrouping+0x18>)
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	0a1b      	lsrs	r3, r3, #8
 8001fa6:	f003 0307 	and.w	r3, r3, #7
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	e000ed00 	.word	0xe000ed00

08001fb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	6039      	str	r1, [r7, #0]
 8001fc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	db0a      	blt.n	8001fe2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	490c      	ldr	r1, [pc, #48]	; (8002004 <__NVIC_SetPriority+0x4c>)
 8001fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd6:	0112      	lsls	r2, r2, #4
 8001fd8:	b2d2      	uxtb	r2, r2
 8001fda:	440b      	add	r3, r1
 8001fdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fe0:	e00a      	b.n	8001ff8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	b2da      	uxtb	r2, r3
 8001fe6:	4908      	ldr	r1, [pc, #32]	; (8002008 <__NVIC_SetPriority+0x50>)
 8001fe8:	79fb      	ldrb	r3, [r7, #7]
 8001fea:	f003 030f 	and.w	r3, r3, #15
 8001fee:	3b04      	subs	r3, #4
 8001ff0:	0112      	lsls	r2, r2, #4
 8001ff2:	b2d2      	uxtb	r2, r2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	761a      	strb	r2, [r3, #24]
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	e000e100 	.word	0xe000e100
 8002008:	e000ed00 	.word	0xe000ed00

0800200c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800200c:	b480      	push	{r7}
 800200e:	b089      	sub	sp, #36	; 0x24
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f003 0307 	and.w	r3, r3, #7
 800201e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	f1c3 0307 	rsb	r3, r3, #7
 8002026:	2b04      	cmp	r3, #4
 8002028:	bf28      	it	cs
 800202a:	2304      	movcs	r3, #4
 800202c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	3304      	adds	r3, #4
 8002032:	2b06      	cmp	r3, #6
 8002034:	d902      	bls.n	800203c <NVIC_EncodePriority+0x30>
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	3b03      	subs	r3, #3
 800203a:	e000      	b.n	800203e <NVIC_EncodePriority+0x32>
 800203c:	2300      	movs	r3, #0
 800203e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002040:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	fa02 f303 	lsl.w	r3, r2, r3
 800204a:	43da      	mvns	r2, r3
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	401a      	ands	r2, r3
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002054:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	fa01 f303 	lsl.w	r3, r1, r3
 800205e:	43d9      	mvns	r1, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002064:	4313      	orrs	r3, r2
         );
}
 8002066:	4618      	mov	r0, r3
 8002068:	3724      	adds	r7, #36	; 0x24
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
	...

08002074 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3b01      	subs	r3, #1
 8002080:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002084:	d301      	bcc.n	800208a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002086:	2301      	movs	r3, #1
 8002088:	e00f      	b.n	80020aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800208a:	4a0a      	ldr	r2, [pc, #40]	; (80020b4 <SysTick_Config+0x40>)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	3b01      	subs	r3, #1
 8002090:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002092:	210f      	movs	r1, #15
 8002094:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002098:	f7ff ff8e 	bl	8001fb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800209c:	4b05      	ldr	r3, [pc, #20]	; (80020b4 <SysTick_Config+0x40>)
 800209e:	2200      	movs	r2, #0
 80020a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020a2:	4b04      	ldr	r3, [pc, #16]	; (80020b4 <SysTick_Config+0x40>)
 80020a4:	2207      	movs	r2, #7
 80020a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	e000e010 	.word	0xe000e010

080020b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f7ff ff47 	bl	8001f54 <__NVIC_SetPriorityGrouping>
}
 80020c6:	bf00      	nop
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b086      	sub	sp, #24
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	4603      	mov	r3, r0
 80020d6:	60b9      	str	r1, [r7, #8]
 80020d8:	607a      	str	r2, [r7, #4]
 80020da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020dc:	2300      	movs	r3, #0
 80020de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020e0:	f7ff ff5c 	bl	8001f9c <__NVIC_GetPriorityGrouping>
 80020e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	68b9      	ldr	r1, [r7, #8]
 80020ea:	6978      	ldr	r0, [r7, #20]
 80020ec:	f7ff ff8e 	bl	800200c <NVIC_EncodePriority>
 80020f0:	4602      	mov	r2, r0
 80020f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020f6:	4611      	mov	r1, r2
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff ff5d 	bl	8001fb8 <__NVIC_SetPriority>
}
 80020fe:	bf00      	nop
 8002100:	3718      	adds	r7, #24
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b082      	sub	sp, #8
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f7ff ffb0 	bl	8002074 <SysTick_Config>
 8002114:	4603      	mov	r3, r0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
	...

08002120 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002120:	b480      	push	{r7}
 8002122:	b089      	sub	sp, #36	; 0x24
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800212a:	2300      	movs	r3, #0
 800212c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800212e:	2300      	movs	r3, #0
 8002130:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002132:	2300      	movs	r3, #0
 8002134:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002136:	2300      	movs	r3, #0
 8002138:	61fb      	str	r3, [r7, #28]
 800213a:	e165      	b.n	8002408 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800213c:	2201      	movs	r2, #1
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	697a      	ldr	r2, [r7, #20]
 800214c:	4013      	ands	r3, r2
 800214e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	429a      	cmp	r2, r3
 8002156:	f040 8154 	bne.w	8002402 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f003 0303 	and.w	r3, r3, #3
 8002162:	2b01      	cmp	r3, #1
 8002164:	d005      	beq.n	8002172 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800216e:	2b02      	cmp	r3, #2
 8002170:	d130      	bne.n	80021d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	2203      	movs	r2, #3
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	43db      	mvns	r3, r3
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	4013      	ands	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	68da      	ldr	r2, [r3, #12]
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	4313      	orrs	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021a8:	2201      	movs	r2, #1
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	43db      	mvns	r3, r3
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	4013      	ands	r3, r2
 80021b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	091b      	lsrs	r3, r3, #4
 80021be:	f003 0201 	and.w	r2, r3, #1
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f003 0303 	and.w	r3, r3, #3
 80021dc:	2b03      	cmp	r3, #3
 80021de:	d017      	beq.n	8002210 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	2203      	movs	r2, #3
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	43db      	mvns	r3, r3
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	4013      	ands	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	689a      	ldr	r2, [r3, #8]
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	4313      	orrs	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f003 0303 	and.w	r3, r3, #3
 8002218:	2b02      	cmp	r3, #2
 800221a:	d123      	bne.n	8002264 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	08da      	lsrs	r2, r3, #3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	3208      	adds	r2, #8
 8002224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002228:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	f003 0307 	and.w	r3, r3, #7
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	220f      	movs	r2, #15
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	43db      	mvns	r3, r3
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	4013      	ands	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	691a      	ldr	r2, [r3, #16]
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	f003 0307 	and.w	r3, r3, #7
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4313      	orrs	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	08da      	lsrs	r2, r3, #3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	3208      	adds	r2, #8
 800225e:	69b9      	ldr	r1, [r7, #24]
 8002260:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	2203      	movs	r2, #3
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	43db      	mvns	r3, r3
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	4013      	ands	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f003 0203 	and.w	r2, r3, #3
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	4313      	orrs	r3, r2
 8002290:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	f000 80ae 	beq.w	8002402 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022a6:	2300      	movs	r3, #0
 80022a8:	60fb      	str	r3, [r7, #12]
 80022aa:	4b5d      	ldr	r3, [pc, #372]	; (8002420 <HAL_GPIO_Init+0x300>)
 80022ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ae:	4a5c      	ldr	r2, [pc, #368]	; (8002420 <HAL_GPIO_Init+0x300>)
 80022b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022b4:	6453      	str	r3, [r2, #68]	; 0x44
 80022b6:	4b5a      	ldr	r3, [pc, #360]	; (8002420 <HAL_GPIO_Init+0x300>)
 80022b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022be:	60fb      	str	r3, [r7, #12]
 80022c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022c2:	4a58      	ldr	r2, [pc, #352]	; (8002424 <HAL_GPIO_Init+0x304>)
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	089b      	lsrs	r3, r3, #2
 80022c8:	3302      	adds	r3, #2
 80022ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	f003 0303 	and.w	r3, r3, #3
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	220f      	movs	r2, #15
 80022da:	fa02 f303 	lsl.w	r3, r2, r3
 80022de:	43db      	mvns	r3, r3
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	4013      	ands	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a4f      	ldr	r2, [pc, #316]	; (8002428 <HAL_GPIO_Init+0x308>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d025      	beq.n	800233a <HAL_GPIO_Init+0x21a>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a4e      	ldr	r2, [pc, #312]	; (800242c <HAL_GPIO_Init+0x30c>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d01f      	beq.n	8002336 <HAL_GPIO_Init+0x216>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a4d      	ldr	r2, [pc, #308]	; (8002430 <HAL_GPIO_Init+0x310>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d019      	beq.n	8002332 <HAL_GPIO_Init+0x212>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a4c      	ldr	r2, [pc, #304]	; (8002434 <HAL_GPIO_Init+0x314>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d013      	beq.n	800232e <HAL_GPIO_Init+0x20e>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a4b      	ldr	r2, [pc, #300]	; (8002438 <HAL_GPIO_Init+0x318>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d00d      	beq.n	800232a <HAL_GPIO_Init+0x20a>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a4a      	ldr	r2, [pc, #296]	; (800243c <HAL_GPIO_Init+0x31c>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d007      	beq.n	8002326 <HAL_GPIO_Init+0x206>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a49      	ldr	r2, [pc, #292]	; (8002440 <HAL_GPIO_Init+0x320>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d101      	bne.n	8002322 <HAL_GPIO_Init+0x202>
 800231e:	2306      	movs	r3, #6
 8002320:	e00c      	b.n	800233c <HAL_GPIO_Init+0x21c>
 8002322:	2307      	movs	r3, #7
 8002324:	e00a      	b.n	800233c <HAL_GPIO_Init+0x21c>
 8002326:	2305      	movs	r3, #5
 8002328:	e008      	b.n	800233c <HAL_GPIO_Init+0x21c>
 800232a:	2304      	movs	r3, #4
 800232c:	e006      	b.n	800233c <HAL_GPIO_Init+0x21c>
 800232e:	2303      	movs	r3, #3
 8002330:	e004      	b.n	800233c <HAL_GPIO_Init+0x21c>
 8002332:	2302      	movs	r3, #2
 8002334:	e002      	b.n	800233c <HAL_GPIO_Init+0x21c>
 8002336:	2301      	movs	r3, #1
 8002338:	e000      	b.n	800233c <HAL_GPIO_Init+0x21c>
 800233a:	2300      	movs	r3, #0
 800233c:	69fa      	ldr	r2, [r7, #28]
 800233e:	f002 0203 	and.w	r2, r2, #3
 8002342:	0092      	lsls	r2, r2, #2
 8002344:	4093      	lsls	r3, r2
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	4313      	orrs	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800234c:	4935      	ldr	r1, [pc, #212]	; (8002424 <HAL_GPIO_Init+0x304>)
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	089b      	lsrs	r3, r3, #2
 8002352:	3302      	adds	r3, #2
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800235a:	4b3a      	ldr	r3, [pc, #232]	; (8002444 <HAL_GPIO_Init+0x324>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	43db      	mvns	r3, r3
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	4013      	ands	r3, r2
 8002368:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d003      	beq.n	800237e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	4313      	orrs	r3, r2
 800237c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800237e:	4a31      	ldr	r2, [pc, #196]	; (8002444 <HAL_GPIO_Init+0x324>)
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002384:	4b2f      	ldr	r3, [pc, #188]	; (8002444 <HAL_GPIO_Init+0x324>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	43db      	mvns	r3, r3
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	4013      	ands	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d003      	beq.n	80023a8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023a8:	4a26      	ldr	r2, [pc, #152]	; (8002444 <HAL_GPIO_Init+0x324>)
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023ae:	4b25      	ldr	r3, [pc, #148]	; (8002444 <HAL_GPIO_Init+0x324>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	43db      	mvns	r3, r3
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4013      	ands	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d003      	beq.n	80023d2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023d2:	4a1c      	ldr	r2, [pc, #112]	; (8002444 <HAL_GPIO_Init+0x324>)
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023d8:	4b1a      	ldr	r3, [pc, #104]	; (8002444 <HAL_GPIO_Init+0x324>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	43db      	mvns	r3, r3
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	4013      	ands	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d003      	beq.n	80023fc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023fc:	4a11      	ldr	r2, [pc, #68]	; (8002444 <HAL_GPIO_Init+0x324>)
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	3301      	adds	r3, #1
 8002406:	61fb      	str	r3, [r7, #28]
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	2b0f      	cmp	r3, #15
 800240c:	f67f ae96 	bls.w	800213c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002410:	bf00      	nop
 8002412:	bf00      	nop
 8002414:	3724      	adds	r7, #36	; 0x24
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	40023800 	.word	0x40023800
 8002424:	40013800 	.word	0x40013800
 8002428:	40020000 	.word	0x40020000
 800242c:	40020400 	.word	0x40020400
 8002430:	40020800 	.word	0x40020800
 8002434:	40020c00 	.word	0x40020c00
 8002438:	40021000 	.word	0x40021000
 800243c:	40021400 	.word	0x40021400
 8002440:	40021800 	.word	0x40021800
 8002444:	40013c00 	.word	0x40013c00

08002448 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	460b      	mov	r3, r1
 8002452:	807b      	strh	r3, [r7, #2]
 8002454:	4613      	mov	r3, r2
 8002456:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002458:	787b      	ldrb	r3, [r7, #1]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d003      	beq.n	8002466 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800245e:	887a      	ldrh	r2, [r7, #2]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002464:	e003      	b.n	800246e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002466:	887b      	ldrh	r3, [r7, #2]
 8002468:	041a      	lsls	r2, r3, #16
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	619a      	str	r2, [r3, #24]
}
 800246e:	bf00      	nop
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
	...

0800247c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002482:	2300      	movs	r3, #0
 8002484:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002486:	2300      	movs	r3, #0
 8002488:	603b      	str	r3, [r7, #0]
 800248a:	4b20      	ldr	r3, [pc, #128]	; (800250c <HAL_PWREx_EnableOverDrive+0x90>)
 800248c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248e:	4a1f      	ldr	r2, [pc, #124]	; (800250c <HAL_PWREx_EnableOverDrive+0x90>)
 8002490:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002494:	6413      	str	r3, [r2, #64]	; 0x40
 8002496:	4b1d      	ldr	r3, [pc, #116]	; (800250c <HAL_PWREx_EnableOverDrive+0x90>)
 8002498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800249e:	603b      	str	r3, [r7, #0]
 80024a0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80024a2:	4b1b      	ldr	r3, [pc, #108]	; (8002510 <HAL_PWREx_EnableOverDrive+0x94>)
 80024a4:	2201      	movs	r2, #1
 80024a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024a8:	f7ff fd48 	bl	8001f3c <HAL_GetTick>
 80024ac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80024ae:	e009      	b.n	80024c4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80024b0:	f7ff fd44 	bl	8001f3c <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024be:	d901      	bls.n	80024c4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e01f      	b.n	8002504 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80024c4:	4b13      	ldr	r3, [pc, #76]	; (8002514 <HAL_PWREx_EnableOverDrive+0x98>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024d0:	d1ee      	bne.n	80024b0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80024d2:	4b11      	ldr	r3, [pc, #68]	; (8002518 <HAL_PWREx_EnableOverDrive+0x9c>)
 80024d4:	2201      	movs	r2, #1
 80024d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024d8:	f7ff fd30 	bl	8001f3c <HAL_GetTick>
 80024dc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80024de:	e009      	b.n	80024f4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80024e0:	f7ff fd2c 	bl	8001f3c <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024ee:	d901      	bls.n	80024f4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e007      	b.n	8002504 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80024f4:	4b07      	ldr	r3, [pc, #28]	; (8002514 <HAL_PWREx_EnableOverDrive+0x98>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002500:	d1ee      	bne.n	80024e0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002502:	2300      	movs	r3, #0
}
 8002504:	4618      	mov	r0, r3
 8002506:	3708      	adds	r7, #8
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	40023800 	.word	0x40023800
 8002510:	420e0040 	.word	0x420e0040
 8002514:	40007000 	.word	0x40007000
 8002518:	420e0044 	.word	0x420e0044

0800251c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d101      	bne.n	8002530 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e0cc      	b.n	80026ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002530:	4b68      	ldr	r3, [pc, #416]	; (80026d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 030f 	and.w	r3, r3, #15
 8002538:	683a      	ldr	r2, [r7, #0]
 800253a:	429a      	cmp	r2, r3
 800253c:	d90c      	bls.n	8002558 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800253e:	4b65      	ldr	r3, [pc, #404]	; (80026d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002540:	683a      	ldr	r2, [r7, #0]
 8002542:	b2d2      	uxtb	r2, r2
 8002544:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002546:	4b63      	ldr	r3, [pc, #396]	; (80026d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 030f 	and.w	r3, r3, #15
 800254e:	683a      	ldr	r2, [r7, #0]
 8002550:	429a      	cmp	r2, r3
 8002552:	d001      	beq.n	8002558 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e0b8      	b.n	80026ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0302 	and.w	r3, r3, #2
 8002560:	2b00      	cmp	r3, #0
 8002562:	d020      	beq.n	80025a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0304 	and.w	r3, r3, #4
 800256c:	2b00      	cmp	r3, #0
 800256e:	d005      	beq.n	800257c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002570:	4b59      	ldr	r3, [pc, #356]	; (80026d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	4a58      	ldr	r2, [pc, #352]	; (80026d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002576:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800257a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0308 	and.w	r3, r3, #8
 8002584:	2b00      	cmp	r3, #0
 8002586:	d005      	beq.n	8002594 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002588:	4b53      	ldr	r3, [pc, #332]	; (80026d8 <HAL_RCC_ClockConfig+0x1bc>)
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	4a52      	ldr	r2, [pc, #328]	; (80026d8 <HAL_RCC_ClockConfig+0x1bc>)
 800258e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002592:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002594:	4b50      	ldr	r3, [pc, #320]	; (80026d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	494d      	ldr	r1, [pc, #308]	; (80026d8 <HAL_RCC_ClockConfig+0x1bc>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d044      	beq.n	800263c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d107      	bne.n	80025ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ba:	4b47      	ldr	r3, [pc, #284]	; (80026d8 <HAL_RCC_ClockConfig+0x1bc>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d119      	bne.n	80025fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e07f      	b.n	80026ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d003      	beq.n	80025da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025d6:	2b03      	cmp	r3, #3
 80025d8:	d107      	bne.n	80025ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025da:	4b3f      	ldr	r3, [pc, #252]	; (80026d8 <HAL_RCC_ClockConfig+0x1bc>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d109      	bne.n	80025fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e06f      	b.n	80026ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ea:	4b3b      	ldr	r3, [pc, #236]	; (80026d8 <HAL_RCC_ClockConfig+0x1bc>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e067      	b.n	80026ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025fa:	4b37      	ldr	r3, [pc, #220]	; (80026d8 <HAL_RCC_ClockConfig+0x1bc>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f023 0203 	bic.w	r2, r3, #3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	4934      	ldr	r1, [pc, #208]	; (80026d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002608:	4313      	orrs	r3, r2
 800260a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800260c:	f7ff fc96 	bl	8001f3c <HAL_GetTick>
 8002610:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002612:	e00a      	b.n	800262a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002614:	f7ff fc92 	bl	8001f3c <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002622:	4293      	cmp	r3, r2
 8002624:	d901      	bls.n	800262a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e04f      	b.n	80026ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800262a:	4b2b      	ldr	r3, [pc, #172]	; (80026d8 <HAL_RCC_ClockConfig+0x1bc>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f003 020c 	and.w	r2, r3, #12
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	429a      	cmp	r2, r3
 800263a:	d1eb      	bne.n	8002614 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800263c:	4b25      	ldr	r3, [pc, #148]	; (80026d4 <HAL_RCC_ClockConfig+0x1b8>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 030f 	and.w	r3, r3, #15
 8002644:	683a      	ldr	r2, [r7, #0]
 8002646:	429a      	cmp	r2, r3
 8002648:	d20c      	bcs.n	8002664 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800264a:	4b22      	ldr	r3, [pc, #136]	; (80026d4 <HAL_RCC_ClockConfig+0x1b8>)
 800264c:	683a      	ldr	r2, [r7, #0]
 800264e:	b2d2      	uxtb	r2, r2
 8002650:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002652:	4b20      	ldr	r3, [pc, #128]	; (80026d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 030f 	and.w	r3, r3, #15
 800265a:	683a      	ldr	r2, [r7, #0]
 800265c:	429a      	cmp	r2, r3
 800265e:	d001      	beq.n	8002664 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e032      	b.n	80026ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0304 	and.w	r3, r3, #4
 800266c:	2b00      	cmp	r3, #0
 800266e:	d008      	beq.n	8002682 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002670:	4b19      	ldr	r3, [pc, #100]	; (80026d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	4916      	ldr	r1, [pc, #88]	; (80026d8 <HAL_RCC_ClockConfig+0x1bc>)
 800267e:	4313      	orrs	r3, r2
 8002680:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0308 	and.w	r3, r3, #8
 800268a:	2b00      	cmp	r3, #0
 800268c:	d009      	beq.n	80026a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800268e:	4b12      	ldr	r3, [pc, #72]	; (80026d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	490e      	ldr	r1, [pc, #56]	; (80026d8 <HAL_RCC_ClockConfig+0x1bc>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026a2:	f000 f855 	bl	8002750 <HAL_RCC_GetSysClockFreq>
 80026a6:	4602      	mov	r2, r0
 80026a8:	4b0b      	ldr	r3, [pc, #44]	; (80026d8 <HAL_RCC_ClockConfig+0x1bc>)
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	091b      	lsrs	r3, r3, #4
 80026ae:	f003 030f 	and.w	r3, r3, #15
 80026b2:	490a      	ldr	r1, [pc, #40]	; (80026dc <HAL_RCC_ClockConfig+0x1c0>)
 80026b4:	5ccb      	ldrb	r3, [r1, r3]
 80026b6:	fa22 f303 	lsr.w	r3, r2, r3
 80026ba:	4a09      	ldr	r2, [pc, #36]	; (80026e0 <HAL_RCC_ClockConfig+0x1c4>)
 80026bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80026be:	4b09      	ldr	r3, [pc, #36]	; (80026e4 <HAL_RCC_ClockConfig+0x1c8>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7ff fbf6 	bl	8001eb4 <HAL_InitTick>

  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	40023c00 	.word	0x40023c00
 80026d8:	40023800 	.word	0x40023800
 80026dc:	08006460 	.word	0x08006460
 80026e0:	20000040 	.word	0x20000040
 80026e4:	20000044 	.word	0x20000044

080026e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026ec:	4b03      	ldr	r3, [pc, #12]	; (80026fc <HAL_RCC_GetHCLKFreq+0x14>)
 80026ee:	681b      	ldr	r3, [r3, #0]
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	20000040 	.word	0x20000040

08002700 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002704:	f7ff fff0 	bl	80026e8 <HAL_RCC_GetHCLKFreq>
 8002708:	4602      	mov	r2, r0
 800270a:	4b05      	ldr	r3, [pc, #20]	; (8002720 <HAL_RCC_GetPCLK1Freq+0x20>)
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	0a9b      	lsrs	r3, r3, #10
 8002710:	f003 0307 	and.w	r3, r3, #7
 8002714:	4903      	ldr	r1, [pc, #12]	; (8002724 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002716:	5ccb      	ldrb	r3, [r1, r3]
 8002718:	fa22 f303 	lsr.w	r3, r2, r3
}
 800271c:	4618      	mov	r0, r3
 800271e:	bd80      	pop	{r7, pc}
 8002720:	40023800 	.word	0x40023800
 8002724:	08006470 	.word	0x08006470

08002728 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800272c:	f7ff ffdc 	bl	80026e8 <HAL_RCC_GetHCLKFreq>
 8002730:	4602      	mov	r2, r0
 8002732:	4b05      	ldr	r3, [pc, #20]	; (8002748 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	0b5b      	lsrs	r3, r3, #13
 8002738:	f003 0307 	and.w	r3, r3, #7
 800273c:	4903      	ldr	r1, [pc, #12]	; (800274c <HAL_RCC_GetPCLK2Freq+0x24>)
 800273e:	5ccb      	ldrb	r3, [r1, r3]
 8002740:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002744:	4618      	mov	r0, r3
 8002746:	bd80      	pop	{r7, pc}
 8002748:	40023800 	.word	0x40023800
 800274c:	08006470 	.word	0x08006470

08002750 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002750:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002754:	b0ae      	sub	sp, #184	; 0xb8
 8002756:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002758:	2300      	movs	r3, #0
 800275a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800275e:	2300      	movs	r3, #0
 8002760:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002764:	2300      	movs	r3, #0
 8002766:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800276a:	2300      	movs	r3, #0
 800276c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002770:	2300      	movs	r3, #0
 8002772:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002776:	4bcb      	ldr	r3, [pc, #812]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f003 030c 	and.w	r3, r3, #12
 800277e:	2b0c      	cmp	r3, #12
 8002780:	f200 8206 	bhi.w	8002b90 <HAL_RCC_GetSysClockFreq+0x440>
 8002784:	a201      	add	r2, pc, #4	; (adr r2, 800278c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800278a:	bf00      	nop
 800278c:	080027c1 	.word	0x080027c1
 8002790:	08002b91 	.word	0x08002b91
 8002794:	08002b91 	.word	0x08002b91
 8002798:	08002b91 	.word	0x08002b91
 800279c:	080027c9 	.word	0x080027c9
 80027a0:	08002b91 	.word	0x08002b91
 80027a4:	08002b91 	.word	0x08002b91
 80027a8:	08002b91 	.word	0x08002b91
 80027ac:	080027d1 	.word	0x080027d1
 80027b0:	08002b91 	.word	0x08002b91
 80027b4:	08002b91 	.word	0x08002b91
 80027b8:	08002b91 	.word	0x08002b91
 80027bc:	080029c1 	.word	0x080029c1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027c0:	4bb9      	ldr	r3, [pc, #740]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x358>)
 80027c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80027c6:	e1e7      	b.n	8002b98 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027c8:	4bb8      	ldr	r3, [pc, #736]	; (8002aac <HAL_RCC_GetSysClockFreq+0x35c>)
 80027ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80027ce:	e1e3      	b.n	8002b98 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027d0:	4bb4      	ldr	r3, [pc, #720]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0x354>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027dc:	4bb1      	ldr	r3, [pc, #708]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0x354>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d071      	beq.n	80028cc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027e8:	4bae      	ldr	r3, [pc, #696]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0x354>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	099b      	lsrs	r3, r3, #6
 80027ee:	2200      	movs	r2, #0
 80027f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80027f4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80027f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80027fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002800:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002804:	2300      	movs	r3, #0
 8002806:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800280a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800280e:	4622      	mov	r2, r4
 8002810:	462b      	mov	r3, r5
 8002812:	f04f 0000 	mov.w	r0, #0
 8002816:	f04f 0100 	mov.w	r1, #0
 800281a:	0159      	lsls	r1, r3, #5
 800281c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002820:	0150      	lsls	r0, r2, #5
 8002822:	4602      	mov	r2, r0
 8002824:	460b      	mov	r3, r1
 8002826:	4621      	mov	r1, r4
 8002828:	1a51      	subs	r1, r2, r1
 800282a:	6439      	str	r1, [r7, #64]	; 0x40
 800282c:	4629      	mov	r1, r5
 800282e:	eb63 0301 	sbc.w	r3, r3, r1
 8002832:	647b      	str	r3, [r7, #68]	; 0x44
 8002834:	f04f 0200 	mov.w	r2, #0
 8002838:	f04f 0300 	mov.w	r3, #0
 800283c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002840:	4649      	mov	r1, r9
 8002842:	018b      	lsls	r3, r1, #6
 8002844:	4641      	mov	r1, r8
 8002846:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800284a:	4641      	mov	r1, r8
 800284c:	018a      	lsls	r2, r1, #6
 800284e:	4641      	mov	r1, r8
 8002850:	1a51      	subs	r1, r2, r1
 8002852:	63b9      	str	r1, [r7, #56]	; 0x38
 8002854:	4649      	mov	r1, r9
 8002856:	eb63 0301 	sbc.w	r3, r3, r1
 800285a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800285c:	f04f 0200 	mov.w	r2, #0
 8002860:	f04f 0300 	mov.w	r3, #0
 8002864:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002868:	4649      	mov	r1, r9
 800286a:	00cb      	lsls	r3, r1, #3
 800286c:	4641      	mov	r1, r8
 800286e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002872:	4641      	mov	r1, r8
 8002874:	00ca      	lsls	r2, r1, #3
 8002876:	4610      	mov	r0, r2
 8002878:	4619      	mov	r1, r3
 800287a:	4603      	mov	r3, r0
 800287c:	4622      	mov	r2, r4
 800287e:	189b      	adds	r3, r3, r2
 8002880:	633b      	str	r3, [r7, #48]	; 0x30
 8002882:	462b      	mov	r3, r5
 8002884:	460a      	mov	r2, r1
 8002886:	eb42 0303 	adc.w	r3, r2, r3
 800288a:	637b      	str	r3, [r7, #52]	; 0x34
 800288c:	f04f 0200 	mov.w	r2, #0
 8002890:	f04f 0300 	mov.w	r3, #0
 8002894:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002898:	4629      	mov	r1, r5
 800289a:	024b      	lsls	r3, r1, #9
 800289c:	4621      	mov	r1, r4
 800289e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80028a2:	4621      	mov	r1, r4
 80028a4:	024a      	lsls	r2, r1, #9
 80028a6:	4610      	mov	r0, r2
 80028a8:	4619      	mov	r1, r3
 80028aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80028ae:	2200      	movs	r2, #0
 80028b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80028b4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80028b8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80028bc:	f7fd fcaa 	bl	8000214 <__aeabi_uldivmod>
 80028c0:	4602      	mov	r2, r0
 80028c2:	460b      	mov	r3, r1
 80028c4:	4613      	mov	r3, r2
 80028c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80028ca:	e067      	b.n	800299c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028cc:	4b75      	ldr	r3, [pc, #468]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0x354>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	099b      	lsrs	r3, r3, #6
 80028d2:	2200      	movs	r2, #0
 80028d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80028d8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80028dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80028e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80028e6:	2300      	movs	r3, #0
 80028e8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80028ea:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80028ee:	4622      	mov	r2, r4
 80028f0:	462b      	mov	r3, r5
 80028f2:	f04f 0000 	mov.w	r0, #0
 80028f6:	f04f 0100 	mov.w	r1, #0
 80028fa:	0159      	lsls	r1, r3, #5
 80028fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002900:	0150      	lsls	r0, r2, #5
 8002902:	4602      	mov	r2, r0
 8002904:	460b      	mov	r3, r1
 8002906:	4621      	mov	r1, r4
 8002908:	1a51      	subs	r1, r2, r1
 800290a:	62b9      	str	r1, [r7, #40]	; 0x28
 800290c:	4629      	mov	r1, r5
 800290e:	eb63 0301 	sbc.w	r3, r3, r1
 8002912:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002914:	f04f 0200 	mov.w	r2, #0
 8002918:	f04f 0300 	mov.w	r3, #0
 800291c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002920:	4649      	mov	r1, r9
 8002922:	018b      	lsls	r3, r1, #6
 8002924:	4641      	mov	r1, r8
 8002926:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800292a:	4641      	mov	r1, r8
 800292c:	018a      	lsls	r2, r1, #6
 800292e:	4641      	mov	r1, r8
 8002930:	ebb2 0a01 	subs.w	sl, r2, r1
 8002934:	4649      	mov	r1, r9
 8002936:	eb63 0b01 	sbc.w	fp, r3, r1
 800293a:	f04f 0200 	mov.w	r2, #0
 800293e:	f04f 0300 	mov.w	r3, #0
 8002942:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002946:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800294a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800294e:	4692      	mov	sl, r2
 8002950:	469b      	mov	fp, r3
 8002952:	4623      	mov	r3, r4
 8002954:	eb1a 0303 	adds.w	r3, sl, r3
 8002958:	623b      	str	r3, [r7, #32]
 800295a:	462b      	mov	r3, r5
 800295c:	eb4b 0303 	adc.w	r3, fp, r3
 8002960:	627b      	str	r3, [r7, #36]	; 0x24
 8002962:	f04f 0200 	mov.w	r2, #0
 8002966:	f04f 0300 	mov.w	r3, #0
 800296a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800296e:	4629      	mov	r1, r5
 8002970:	028b      	lsls	r3, r1, #10
 8002972:	4621      	mov	r1, r4
 8002974:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002978:	4621      	mov	r1, r4
 800297a:	028a      	lsls	r2, r1, #10
 800297c:	4610      	mov	r0, r2
 800297e:	4619      	mov	r1, r3
 8002980:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002984:	2200      	movs	r2, #0
 8002986:	673b      	str	r3, [r7, #112]	; 0x70
 8002988:	677a      	str	r2, [r7, #116]	; 0x74
 800298a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800298e:	f7fd fc41 	bl	8000214 <__aeabi_uldivmod>
 8002992:	4602      	mov	r2, r0
 8002994:	460b      	mov	r3, r1
 8002996:	4613      	mov	r3, r2
 8002998:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800299c:	4b41      	ldr	r3, [pc, #260]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0x354>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	0c1b      	lsrs	r3, r3, #16
 80029a2:	f003 0303 	and.w	r3, r3, #3
 80029a6:	3301      	adds	r3, #1
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80029ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80029b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80029b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80029be:	e0eb      	b.n	8002b98 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029c0:	4b38      	ldr	r3, [pc, #224]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0x354>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029cc:	4b35      	ldr	r3, [pc, #212]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0x354>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d06b      	beq.n	8002ab0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029d8:	4b32      	ldr	r3, [pc, #200]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0x354>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	099b      	lsrs	r3, r3, #6
 80029de:	2200      	movs	r2, #0
 80029e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80029e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80029e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029ea:	663b      	str	r3, [r7, #96]	; 0x60
 80029ec:	2300      	movs	r3, #0
 80029ee:	667b      	str	r3, [r7, #100]	; 0x64
 80029f0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80029f4:	4622      	mov	r2, r4
 80029f6:	462b      	mov	r3, r5
 80029f8:	f04f 0000 	mov.w	r0, #0
 80029fc:	f04f 0100 	mov.w	r1, #0
 8002a00:	0159      	lsls	r1, r3, #5
 8002a02:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a06:	0150      	lsls	r0, r2, #5
 8002a08:	4602      	mov	r2, r0
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	4621      	mov	r1, r4
 8002a0e:	1a51      	subs	r1, r2, r1
 8002a10:	61b9      	str	r1, [r7, #24]
 8002a12:	4629      	mov	r1, r5
 8002a14:	eb63 0301 	sbc.w	r3, r3, r1
 8002a18:	61fb      	str	r3, [r7, #28]
 8002a1a:	f04f 0200 	mov.w	r2, #0
 8002a1e:	f04f 0300 	mov.w	r3, #0
 8002a22:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002a26:	4659      	mov	r1, fp
 8002a28:	018b      	lsls	r3, r1, #6
 8002a2a:	4651      	mov	r1, sl
 8002a2c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a30:	4651      	mov	r1, sl
 8002a32:	018a      	lsls	r2, r1, #6
 8002a34:	4651      	mov	r1, sl
 8002a36:	ebb2 0801 	subs.w	r8, r2, r1
 8002a3a:	4659      	mov	r1, fp
 8002a3c:	eb63 0901 	sbc.w	r9, r3, r1
 8002a40:	f04f 0200 	mov.w	r2, #0
 8002a44:	f04f 0300 	mov.w	r3, #0
 8002a48:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a4c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a50:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a54:	4690      	mov	r8, r2
 8002a56:	4699      	mov	r9, r3
 8002a58:	4623      	mov	r3, r4
 8002a5a:	eb18 0303 	adds.w	r3, r8, r3
 8002a5e:	613b      	str	r3, [r7, #16]
 8002a60:	462b      	mov	r3, r5
 8002a62:	eb49 0303 	adc.w	r3, r9, r3
 8002a66:	617b      	str	r3, [r7, #20]
 8002a68:	f04f 0200 	mov.w	r2, #0
 8002a6c:	f04f 0300 	mov.w	r3, #0
 8002a70:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002a74:	4629      	mov	r1, r5
 8002a76:	024b      	lsls	r3, r1, #9
 8002a78:	4621      	mov	r1, r4
 8002a7a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a7e:	4621      	mov	r1, r4
 8002a80:	024a      	lsls	r2, r1, #9
 8002a82:	4610      	mov	r0, r2
 8002a84:	4619      	mov	r1, r3
 8002a86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	65bb      	str	r3, [r7, #88]	; 0x58
 8002a8e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002a90:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002a94:	f7fd fbbe 	bl	8000214 <__aeabi_uldivmod>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002aa2:	e065      	b.n	8002b70 <HAL_RCC_GetSysClockFreq+0x420>
 8002aa4:	40023800 	.word	0x40023800
 8002aa8:	00f42400 	.word	0x00f42400
 8002aac:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ab0:	4b3d      	ldr	r3, [pc, #244]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x458>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	099b      	lsrs	r3, r3, #6
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	4618      	mov	r0, r3
 8002aba:	4611      	mov	r1, r2
 8002abc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ac0:	653b      	str	r3, [r7, #80]	; 0x50
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	657b      	str	r3, [r7, #84]	; 0x54
 8002ac6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002aca:	4642      	mov	r2, r8
 8002acc:	464b      	mov	r3, r9
 8002ace:	f04f 0000 	mov.w	r0, #0
 8002ad2:	f04f 0100 	mov.w	r1, #0
 8002ad6:	0159      	lsls	r1, r3, #5
 8002ad8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002adc:	0150      	lsls	r0, r2, #5
 8002ade:	4602      	mov	r2, r0
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	4641      	mov	r1, r8
 8002ae4:	1a51      	subs	r1, r2, r1
 8002ae6:	60b9      	str	r1, [r7, #8]
 8002ae8:	4649      	mov	r1, r9
 8002aea:	eb63 0301 	sbc.w	r3, r3, r1
 8002aee:	60fb      	str	r3, [r7, #12]
 8002af0:	f04f 0200 	mov.w	r2, #0
 8002af4:	f04f 0300 	mov.w	r3, #0
 8002af8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002afc:	4659      	mov	r1, fp
 8002afe:	018b      	lsls	r3, r1, #6
 8002b00:	4651      	mov	r1, sl
 8002b02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b06:	4651      	mov	r1, sl
 8002b08:	018a      	lsls	r2, r1, #6
 8002b0a:	4651      	mov	r1, sl
 8002b0c:	1a54      	subs	r4, r2, r1
 8002b0e:	4659      	mov	r1, fp
 8002b10:	eb63 0501 	sbc.w	r5, r3, r1
 8002b14:	f04f 0200 	mov.w	r2, #0
 8002b18:	f04f 0300 	mov.w	r3, #0
 8002b1c:	00eb      	lsls	r3, r5, #3
 8002b1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b22:	00e2      	lsls	r2, r4, #3
 8002b24:	4614      	mov	r4, r2
 8002b26:	461d      	mov	r5, r3
 8002b28:	4643      	mov	r3, r8
 8002b2a:	18e3      	adds	r3, r4, r3
 8002b2c:	603b      	str	r3, [r7, #0]
 8002b2e:	464b      	mov	r3, r9
 8002b30:	eb45 0303 	adc.w	r3, r5, r3
 8002b34:	607b      	str	r3, [r7, #4]
 8002b36:	f04f 0200 	mov.w	r2, #0
 8002b3a:	f04f 0300 	mov.w	r3, #0
 8002b3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b42:	4629      	mov	r1, r5
 8002b44:	028b      	lsls	r3, r1, #10
 8002b46:	4621      	mov	r1, r4
 8002b48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b4c:	4621      	mov	r1, r4
 8002b4e:	028a      	lsls	r2, r1, #10
 8002b50:	4610      	mov	r0, r2
 8002b52:	4619      	mov	r1, r3
 8002b54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b58:	2200      	movs	r2, #0
 8002b5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b5c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002b5e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002b62:	f7fd fb57 	bl	8000214 <__aeabi_uldivmod>
 8002b66:	4602      	mov	r2, r0
 8002b68:	460b      	mov	r3, r1
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002b70:	4b0d      	ldr	r3, [pc, #52]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x458>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	0f1b      	lsrs	r3, r3, #28
 8002b76:	f003 0307 	and.w	r3, r3, #7
 8002b7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002b7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002b82:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002b8e:	e003      	b.n	8002b98 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b90:	4b06      	ldr	r3, [pc, #24]	; (8002bac <HAL_RCC_GetSysClockFreq+0x45c>)
 8002b92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002b96:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b98:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	37b8      	adds	r7, #184	; 0xb8
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ba6:	bf00      	nop
 8002ba8:	40023800 	.word	0x40023800
 8002bac:	00f42400 	.word	0x00f42400

08002bb0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b086      	sub	sp, #24
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d101      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e28d      	b.n	80030de <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	f000 8083 	beq.w	8002cd6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002bd0:	4b94      	ldr	r3, [pc, #592]	; (8002e24 <HAL_RCC_OscConfig+0x274>)
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f003 030c 	and.w	r3, r3, #12
 8002bd8:	2b04      	cmp	r3, #4
 8002bda:	d019      	beq.n	8002c10 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002bdc:	4b91      	ldr	r3, [pc, #580]	; (8002e24 <HAL_RCC_OscConfig+0x274>)
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002be4:	2b08      	cmp	r3, #8
 8002be6:	d106      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002be8:	4b8e      	ldr	r3, [pc, #568]	; (8002e24 <HAL_RCC_OscConfig+0x274>)
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bf0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bf4:	d00c      	beq.n	8002c10 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bf6:	4b8b      	ldr	r3, [pc, #556]	; (8002e24 <HAL_RCC_OscConfig+0x274>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002bfe:	2b0c      	cmp	r3, #12
 8002c00:	d112      	bne.n	8002c28 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c02:	4b88      	ldr	r3, [pc, #544]	; (8002e24 <HAL_RCC_OscConfig+0x274>)
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c0e:	d10b      	bne.n	8002c28 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c10:	4b84      	ldr	r3, [pc, #528]	; (8002e24 <HAL_RCC_OscConfig+0x274>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d05b      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x124>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d157      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e25a      	b.n	80030de <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c30:	d106      	bne.n	8002c40 <HAL_RCC_OscConfig+0x90>
 8002c32:	4b7c      	ldr	r3, [pc, #496]	; (8002e24 <HAL_RCC_OscConfig+0x274>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a7b      	ldr	r2, [pc, #492]	; (8002e24 <HAL_RCC_OscConfig+0x274>)
 8002c38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c3c:	6013      	str	r3, [r2, #0]
 8002c3e:	e01d      	b.n	8002c7c <HAL_RCC_OscConfig+0xcc>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c48:	d10c      	bne.n	8002c64 <HAL_RCC_OscConfig+0xb4>
 8002c4a:	4b76      	ldr	r3, [pc, #472]	; (8002e24 <HAL_RCC_OscConfig+0x274>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a75      	ldr	r2, [pc, #468]	; (8002e24 <HAL_RCC_OscConfig+0x274>)
 8002c50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c54:	6013      	str	r3, [r2, #0]
 8002c56:	4b73      	ldr	r3, [pc, #460]	; (8002e24 <HAL_RCC_OscConfig+0x274>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a72      	ldr	r2, [pc, #456]	; (8002e24 <HAL_RCC_OscConfig+0x274>)
 8002c5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c60:	6013      	str	r3, [r2, #0]
 8002c62:	e00b      	b.n	8002c7c <HAL_RCC_OscConfig+0xcc>
 8002c64:	4b6f      	ldr	r3, [pc, #444]	; (8002e24 <HAL_RCC_OscConfig+0x274>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a6e      	ldr	r2, [pc, #440]	; (8002e24 <HAL_RCC_OscConfig+0x274>)
 8002c6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c6e:	6013      	str	r3, [r2, #0]
 8002c70:	4b6c      	ldr	r3, [pc, #432]	; (8002e24 <HAL_RCC_OscConfig+0x274>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a6b      	ldr	r2, [pc, #428]	; (8002e24 <HAL_RCC_OscConfig+0x274>)
 8002c76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d013      	beq.n	8002cac <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c84:	f7ff f95a 	bl	8001f3c <HAL_GetTick>
 8002c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c8a:	e008      	b.n	8002c9e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c8c:	f7ff f956 	bl	8001f3c <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b64      	cmp	r3, #100	; 0x64
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e21f      	b.n	80030de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c9e:	4b61      	ldr	r3, [pc, #388]	; (8002e24 <HAL_RCC_OscConfig+0x274>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d0f0      	beq.n	8002c8c <HAL_RCC_OscConfig+0xdc>
 8002caa:	e014      	b.n	8002cd6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cac:	f7ff f946 	bl	8001f3c <HAL_GetTick>
 8002cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cb2:	e008      	b.n	8002cc6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cb4:	f7ff f942 	bl	8001f3c <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b64      	cmp	r3, #100	; 0x64
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e20b      	b.n	80030de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cc6:	4b57      	ldr	r3, [pc, #348]	; (8002e24 <HAL_RCC_OscConfig+0x274>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d1f0      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x104>
 8002cd2:	e000      	b.n	8002cd6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d06f      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002ce2:	4b50      	ldr	r3, [pc, #320]	; (8002e24 <HAL_RCC_OscConfig+0x274>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f003 030c 	and.w	r3, r3, #12
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d017      	beq.n	8002d1e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002cee:	4b4d      	ldr	r3, [pc, #308]	; (8002e24 <HAL_RCC_OscConfig+0x274>)
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002cf6:	2b08      	cmp	r3, #8
 8002cf8:	d105      	bne.n	8002d06 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002cfa:	4b4a      	ldr	r3, [pc, #296]	; (8002e24 <HAL_RCC_OscConfig+0x274>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00b      	beq.n	8002d1e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d06:	4b47      	ldr	r3, [pc, #284]	; (8002e24 <HAL_RCC_OscConfig+0x274>)
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002d0e:	2b0c      	cmp	r3, #12
 8002d10:	d11c      	bne.n	8002d4c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d12:	4b44      	ldr	r3, [pc, #272]	; (8002e24 <HAL_RCC_OscConfig+0x274>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d116      	bne.n	8002d4c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d1e:	4b41      	ldr	r3, [pc, #260]	; (8002e24 <HAL_RCC_OscConfig+0x274>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d005      	beq.n	8002d36 <HAL_RCC_OscConfig+0x186>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d001      	beq.n	8002d36 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e1d3      	b.n	80030de <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d36:	4b3b      	ldr	r3, [pc, #236]	; (8002e24 <HAL_RCC_OscConfig+0x274>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	4937      	ldr	r1, [pc, #220]	; (8002e24 <HAL_RCC_OscConfig+0x274>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d4a:	e03a      	b.n	8002dc2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d020      	beq.n	8002d96 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d54:	4b34      	ldr	r3, [pc, #208]	; (8002e28 <HAL_RCC_OscConfig+0x278>)
 8002d56:	2201      	movs	r2, #1
 8002d58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d5a:	f7ff f8ef 	bl	8001f3c <HAL_GetTick>
 8002d5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d60:	e008      	b.n	8002d74 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d62:	f7ff f8eb 	bl	8001f3c <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d901      	bls.n	8002d74 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e1b4      	b.n	80030de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d74:	4b2b      	ldr	r3, [pc, #172]	; (8002e24 <HAL_RCC_OscConfig+0x274>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0302 	and.w	r3, r3, #2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d0f0      	beq.n	8002d62 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d80:	4b28      	ldr	r3, [pc, #160]	; (8002e24 <HAL_RCC_OscConfig+0x274>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	00db      	lsls	r3, r3, #3
 8002d8e:	4925      	ldr	r1, [pc, #148]	; (8002e24 <HAL_RCC_OscConfig+0x274>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	600b      	str	r3, [r1, #0]
 8002d94:	e015      	b.n	8002dc2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d96:	4b24      	ldr	r3, [pc, #144]	; (8002e28 <HAL_RCC_OscConfig+0x278>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d9c:	f7ff f8ce 	bl	8001f3c <HAL_GetTick>
 8002da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002da2:	e008      	b.n	8002db6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002da4:	f7ff f8ca 	bl	8001f3c <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e193      	b.n	80030de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002db6:	4b1b      	ldr	r3, [pc, #108]	; (8002e24 <HAL_RCC_OscConfig+0x274>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0302 	and.w	r3, r3, #2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d1f0      	bne.n	8002da4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0308 	and.w	r3, r3, #8
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d036      	beq.n	8002e3c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	695b      	ldr	r3, [r3, #20]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d016      	beq.n	8002e04 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dd6:	4b15      	ldr	r3, [pc, #84]	; (8002e2c <HAL_RCC_OscConfig+0x27c>)
 8002dd8:	2201      	movs	r2, #1
 8002dda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ddc:	f7ff f8ae 	bl	8001f3c <HAL_GetTick>
 8002de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002de2:	e008      	b.n	8002df6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002de4:	f7ff f8aa 	bl	8001f3c <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e173      	b.n	80030de <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002df6:	4b0b      	ldr	r3, [pc, #44]	; (8002e24 <HAL_RCC_OscConfig+0x274>)
 8002df8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d0f0      	beq.n	8002de4 <HAL_RCC_OscConfig+0x234>
 8002e02:	e01b      	b.n	8002e3c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e04:	4b09      	ldr	r3, [pc, #36]	; (8002e2c <HAL_RCC_OscConfig+0x27c>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e0a:	f7ff f897 	bl	8001f3c <HAL_GetTick>
 8002e0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e10:	e00e      	b.n	8002e30 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e12:	f7ff f893 	bl	8001f3c <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d907      	bls.n	8002e30 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e15c      	b.n	80030de <HAL_RCC_OscConfig+0x52e>
 8002e24:	40023800 	.word	0x40023800
 8002e28:	42470000 	.word	0x42470000
 8002e2c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e30:	4b8a      	ldr	r3, [pc, #552]	; (800305c <HAL_RCC_OscConfig+0x4ac>)
 8002e32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e34:	f003 0302 	and.w	r3, r3, #2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d1ea      	bne.n	8002e12 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0304 	and.w	r3, r3, #4
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f000 8097 	beq.w	8002f78 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e4e:	4b83      	ldr	r3, [pc, #524]	; (800305c <HAL_RCC_OscConfig+0x4ac>)
 8002e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d10f      	bne.n	8002e7a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	60bb      	str	r3, [r7, #8]
 8002e5e:	4b7f      	ldr	r3, [pc, #508]	; (800305c <HAL_RCC_OscConfig+0x4ac>)
 8002e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e62:	4a7e      	ldr	r2, [pc, #504]	; (800305c <HAL_RCC_OscConfig+0x4ac>)
 8002e64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e68:	6413      	str	r3, [r2, #64]	; 0x40
 8002e6a:	4b7c      	ldr	r3, [pc, #496]	; (800305c <HAL_RCC_OscConfig+0x4ac>)
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e72:	60bb      	str	r3, [r7, #8]
 8002e74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e76:	2301      	movs	r3, #1
 8002e78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e7a:	4b79      	ldr	r3, [pc, #484]	; (8003060 <HAL_RCC_OscConfig+0x4b0>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d118      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e86:	4b76      	ldr	r3, [pc, #472]	; (8003060 <HAL_RCC_OscConfig+0x4b0>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a75      	ldr	r2, [pc, #468]	; (8003060 <HAL_RCC_OscConfig+0x4b0>)
 8002e8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e92:	f7ff f853 	bl	8001f3c <HAL_GetTick>
 8002e96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e98:	e008      	b.n	8002eac <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e9a:	f7ff f84f 	bl	8001f3c <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d901      	bls.n	8002eac <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e118      	b.n	80030de <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eac:	4b6c      	ldr	r3, [pc, #432]	; (8003060 <HAL_RCC_OscConfig+0x4b0>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d0f0      	beq.n	8002e9a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d106      	bne.n	8002ece <HAL_RCC_OscConfig+0x31e>
 8002ec0:	4b66      	ldr	r3, [pc, #408]	; (800305c <HAL_RCC_OscConfig+0x4ac>)
 8002ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec4:	4a65      	ldr	r2, [pc, #404]	; (800305c <HAL_RCC_OscConfig+0x4ac>)
 8002ec6:	f043 0301 	orr.w	r3, r3, #1
 8002eca:	6713      	str	r3, [r2, #112]	; 0x70
 8002ecc:	e01c      	b.n	8002f08 <HAL_RCC_OscConfig+0x358>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	2b05      	cmp	r3, #5
 8002ed4:	d10c      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x340>
 8002ed6:	4b61      	ldr	r3, [pc, #388]	; (800305c <HAL_RCC_OscConfig+0x4ac>)
 8002ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eda:	4a60      	ldr	r2, [pc, #384]	; (800305c <HAL_RCC_OscConfig+0x4ac>)
 8002edc:	f043 0304 	orr.w	r3, r3, #4
 8002ee0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ee2:	4b5e      	ldr	r3, [pc, #376]	; (800305c <HAL_RCC_OscConfig+0x4ac>)
 8002ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee6:	4a5d      	ldr	r2, [pc, #372]	; (800305c <HAL_RCC_OscConfig+0x4ac>)
 8002ee8:	f043 0301 	orr.w	r3, r3, #1
 8002eec:	6713      	str	r3, [r2, #112]	; 0x70
 8002eee:	e00b      	b.n	8002f08 <HAL_RCC_OscConfig+0x358>
 8002ef0:	4b5a      	ldr	r3, [pc, #360]	; (800305c <HAL_RCC_OscConfig+0x4ac>)
 8002ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef4:	4a59      	ldr	r2, [pc, #356]	; (800305c <HAL_RCC_OscConfig+0x4ac>)
 8002ef6:	f023 0301 	bic.w	r3, r3, #1
 8002efa:	6713      	str	r3, [r2, #112]	; 0x70
 8002efc:	4b57      	ldr	r3, [pc, #348]	; (800305c <HAL_RCC_OscConfig+0x4ac>)
 8002efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f00:	4a56      	ldr	r2, [pc, #344]	; (800305c <HAL_RCC_OscConfig+0x4ac>)
 8002f02:	f023 0304 	bic.w	r3, r3, #4
 8002f06:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d015      	beq.n	8002f3c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f10:	f7ff f814 	bl	8001f3c <HAL_GetTick>
 8002f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f16:	e00a      	b.n	8002f2e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f18:	f7ff f810 	bl	8001f3c <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e0d7      	b.n	80030de <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f2e:	4b4b      	ldr	r3, [pc, #300]	; (800305c <HAL_RCC_OscConfig+0x4ac>)
 8002f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d0ee      	beq.n	8002f18 <HAL_RCC_OscConfig+0x368>
 8002f3a:	e014      	b.n	8002f66 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f3c:	f7fe fffe 	bl	8001f3c <HAL_GetTick>
 8002f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f42:	e00a      	b.n	8002f5a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f44:	f7fe fffa 	bl	8001f3c <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e0c1      	b.n	80030de <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f5a:	4b40      	ldr	r3, [pc, #256]	; (800305c <HAL_RCC_OscConfig+0x4ac>)
 8002f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1ee      	bne.n	8002f44 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f66:	7dfb      	ldrb	r3, [r7, #23]
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d105      	bne.n	8002f78 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f6c:	4b3b      	ldr	r3, [pc, #236]	; (800305c <HAL_RCC_OscConfig+0x4ac>)
 8002f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f70:	4a3a      	ldr	r2, [pc, #232]	; (800305c <HAL_RCC_OscConfig+0x4ac>)
 8002f72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f76:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	699b      	ldr	r3, [r3, #24]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	f000 80ad 	beq.w	80030dc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f82:	4b36      	ldr	r3, [pc, #216]	; (800305c <HAL_RCC_OscConfig+0x4ac>)
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f003 030c 	and.w	r3, r3, #12
 8002f8a:	2b08      	cmp	r3, #8
 8002f8c:	d060      	beq.n	8003050 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d145      	bne.n	8003022 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f96:	4b33      	ldr	r3, [pc, #204]	; (8003064 <HAL_RCC_OscConfig+0x4b4>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f9c:	f7fe ffce 	bl	8001f3c <HAL_GetTick>
 8002fa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fa2:	e008      	b.n	8002fb6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fa4:	f7fe ffca 	bl	8001f3c <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e093      	b.n	80030de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fb6:	4b29      	ldr	r3, [pc, #164]	; (800305c <HAL_RCC_OscConfig+0x4ac>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d1f0      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	69da      	ldr	r2, [r3, #28]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a1b      	ldr	r3, [r3, #32]
 8002fca:	431a      	orrs	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd0:	019b      	lsls	r3, r3, #6
 8002fd2:	431a      	orrs	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd8:	085b      	lsrs	r3, r3, #1
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	041b      	lsls	r3, r3, #16
 8002fde:	431a      	orrs	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe4:	061b      	lsls	r3, r3, #24
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fec:	071b      	lsls	r3, r3, #28
 8002fee:	491b      	ldr	r1, [pc, #108]	; (800305c <HAL_RCC_OscConfig+0x4ac>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ff4:	4b1b      	ldr	r3, [pc, #108]	; (8003064 <HAL_RCC_OscConfig+0x4b4>)
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ffa:	f7fe ff9f 	bl	8001f3c <HAL_GetTick>
 8002ffe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003000:	e008      	b.n	8003014 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003002:	f7fe ff9b 	bl	8001f3c <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d901      	bls.n	8003014 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e064      	b.n	80030de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003014:	4b11      	ldr	r3, [pc, #68]	; (800305c <HAL_RCC_OscConfig+0x4ac>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d0f0      	beq.n	8003002 <HAL_RCC_OscConfig+0x452>
 8003020:	e05c      	b.n	80030dc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003022:	4b10      	ldr	r3, [pc, #64]	; (8003064 <HAL_RCC_OscConfig+0x4b4>)
 8003024:	2200      	movs	r2, #0
 8003026:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003028:	f7fe ff88 	bl	8001f3c <HAL_GetTick>
 800302c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800302e:	e008      	b.n	8003042 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003030:	f7fe ff84 	bl	8001f3c <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b02      	cmp	r3, #2
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e04d      	b.n	80030de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003042:	4b06      	ldr	r3, [pc, #24]	; (800305c <HAL_RCC_OscConfig+0x4ac>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1f0      	bne.n	8003030 <HAL_RCC_OscConfig+0x480>
 800304e:	e045      	b.n	80030dc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	2b01      	cmp	r3, #1
 8003056:	d107      	bne.n	8003068 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e040      	b.n	80030de <HAL_RCC_OscConfig+0x52e>
 800305c:	40023800 	.word	0x40023800
 8003060:	40007000 	.word	0x40007000
 8003064:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003068:	4b1f      	ldr	r3, [pc, #124]	; (80030e8 <HAL_RCC_OscConfig+0x538>)
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d030      	beq.n	80030d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003080:	429a      	cmp	r2, r3
 8003082:	d129      	bne.n	80030d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800308e:	429a      	cmp	r2, r3
 8003090:	d122      	bne.n	80030d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003098:	4013      	ands	r3, r2
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800309e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d119      	bne.n	80030d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ae:	085b      	lsrs	r3, r3, #1
 80030b0:	3b01      	subs	r3, #1
 80030b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d10f      	bne.n	80030d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d107      	bne.n	80030d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d001      	beq.n	80030dc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e000      	b.n	80030de <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3718      	adds	r7, #24
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	40023800 	.word	0x40023800

080030ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e041      	b.n	8003182 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d106      	bne.n	8003118 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f7fe fd3e 	bl	8001b94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2202      	movs	r2, #2
 800311c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	3304      	adds	r3, #4
 8003128:	4619      	mov	r1, r3
 800312a:	4610      	mov	r0, r2
 800312c:	f000 f82e 	bl	800318c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
	...

0800318c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800318c:	b480      	push	{r7}
 800318e:	b085      	sub	sp, #20
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	4a40      	ldr	r2, [pc, #256]	; (80032a0 <TIM_Base_SetConfig+0x114>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d013      	beq.n	80031cc <TIM_Base_SetConfig+0x40>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031aa:	d00f      	beq.n	80031cc <TIM_Base_SetConfig+0x40>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4a3d      	ldr	r2, [pc, #244]	; (80032a4 <TIM_Base_SetConfig+0x118>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d00b      	beq.n	80031cc <TIM_Base_SetConfig+0x40>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4a3c      	ldr	r2, [pc, #240]	; (80032a8 <TIM_Base_SetConfig+0x11c>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d007      	beq.n	80031cc <TIM_Base_SetConfig+0x40>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a3b      	ldr	r2, [pc, #236]	; (80032ac <TIM_Base_SetConfig+0x120>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d003      	beq.n	80031cc <TIM_Base_SetConfig+0x40>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a3a      	ldr	r2, [pc, #232]	; (80032b0 <TIM_Base_SetConfig+0x124>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d108      	bne.n	80031de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	68fa      	ldr	r2, [r7, #12]
 80031da:	4313      	orrs	r3, r2
 80031dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a2f      	ldr	r2, [pc, #188]	; (80032a0 <TIM_Base_SetConfig+0x114>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d02b      	beq.n	800323e <TIM_Base_SetConfig+0xb2>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031ec:	d027      	beq.n	800323e <TIM_Base_SetConfig+0xb2>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a2c      	ldr	r2, [pc, #176]	; (80032a4 <TIM_Base_SetConfig+0x118>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d023      	beq.n	800323e <TIM_Base_SetConfig+0xb2>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a2b      	ldr	r2, [pc, #172]	; (80032a8 <TIM_Base_SetConfig+0x11c>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d01f      	beq.n	800323e <TIM_Base_SetConfig+0xb2>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a2a      	ldr	r2, [pc, #168]	; (80032ac <TIM_Base_SetConfig+0x120>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d01b      	beq.n	800323e <TIM_Base_SetConfig+0xb2>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a29      	ldr	r2, [pc, #164]	; (80032b0 <TIM_Base_SetConfig+0x124>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d017      	beq.n	800323e <TIM_Base_SetConfig+0xb2>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a28      	ldr	r2, [pc, #160]	; (80032b4 <TIM_Base_SetConfig+0x128>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d013      	beq.n	800323e <TIM_Base_SetConfig+0xb2>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a27      	ldr	r2, [pc, #156]	; (80032b8 <TIM_Base_SetConfig+0x12c>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d00f      	beq.n	800323e <TIM_Base_SetConfig+0xb2>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a26      	ldr	r2, [pc, #152]	; (80032bc <TIM_Base_SetConfig+0x130>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d00b      	beq.n	800323e <TIM_Base_SetConfig+0xb2>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a25      	ldr	r2, [pc, #148]	; (80032c0 <TIM_Base_SetConfig+0x134>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d007      	beq.n	800323e <TIM_Base_SetConfig+0xb2>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a24      	ldr	r2, [pc, #144]	; (80032c4 <TIM_Base_SetConfig+0x138>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d003      	beq.n	800323e <TIM_Base_SetConfig+0xb2>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a23      	ldr	r2, [pc, #140]	; (80032c8 <TIM_Base_SetConfig+0x13c>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d108      	bne.n	8003250 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003244:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	4313      	orrs	r3, r2
 800324e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	4313      	orrs	r3, r2
 800325c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	689a      	ldr	r2, [r3, #8]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	4a0a      	ldr	r2, [pc, #40]	; (80032a0 <TIM_Base_SetConfig+0x114>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d003      	beq.n	8003284 <TIM_Base_SetConfig+0xf8>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4a0c      	ldr	r2, [pc, #48]	; (80032b0 <TIM_Base_SetConfig+0x124>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d103      	bne.n	800328c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	691a      	ldr	r2, [r3, #16]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	615a      	str	r2, [r3, #20]
}
 8003292:	bf00      	nop
 8003294:	3714      	adds	r7, #20
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	40010000 	.word	0x40010000
 80032a4:	40000400 	.word	0x40000400
 80032a8:	40000800 	.word	0x40000800
 80032ac:	40000c00 	.word	0x40000c00
 80032b0:	40010400 	.word	0x40010400
 80032b4:	40014000 	.word	0x40014000
 80032b8:	40014400 	.word	0x40014400
 80032bc:	40014800 	.word	0x40014800
 80032c0:	40001800 	.word	0x40001800
 80032c4:	40001c00 	.word	0x40001c00
 80032c8:	40002000 	.word	0x40002000

080032cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b085      	sub	sp, #20
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d101      	bne.n	80032e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032e0:	2302      	movs	r3, #2
 80032e2:	e05a      	b.n	800339a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2202      	movs	r2, #2
 80032f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800330a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	4313      	orrs	r3, r2
 8003314:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a21      	ldr	r2, [pc, #132]	; (80033a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d022      	beq.n	800336e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003330:	d01d      	beq.n	800336e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a1d      	ldr	r2, [pc, #116]	; (80033ac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d018      	beq.n	800336e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a1b      	ldr	r2, [pc, #108]	; (80033b0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d013      	beq.n	800336e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a1a      	ldr	r2, [pc, #104]	; (80033b4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d00e      	beq.n	800336e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a18      	ldr	r2, [pc, #96]	; (80033b8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d009      	beq.n	800336e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a17      	ldr	r2, [pc, #92]	; (80033bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d004      	beq.n	800336e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a15      	ldr	r2, [pc, #84]	; (80033c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d10c      	bne.n	8003388 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003374:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	68ba      	ldr	r2, [r7, #8]
 800337c:	4313      	orrs	r3, r2
 800337e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68ba      	ldr	r2, [r7, #8]
 8003386:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3714      	adds	r7, #20
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	40010000 	.word	0x40010000
 80033ac:	40000400 	.word	0x40000400
 80033b0:	40000800 	.word	0x40000800
 80033b4:	40000c00 	.word	0x40000c00
 80033b8:	40010400 	.word	0x40010400
 80033bc:	40014000 	.word	0x40014000
 80033c0:	40001800 	.word	0x40001800

080033c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d101      	bne.n	80033d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e03f      	b.n	8003456 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d106      	bne.n	80033f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f7fe fc34 	bl	8001c58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2224      	movs	r2, #36	; 0x24
 80033f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68da      	ldr	r2, [r3, #12]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003406:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f000 f929 	bl	8003660 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	691a      	ldr	r2, [r3, #16]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800341c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	695a      	ldr	r2, [r3, #20]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800342c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68da      	ldr	r2, [r3, #12]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800343c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2220      	movs	r2, #32
 8003448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2220      	movs	r2, #32
 8003450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b08a      	sub	sp, #40	; 0x28
 8003462:	af02      	add	r7, sp, #8
 8003464:	60f8      	str	r0, [r7, #12]
 8003466:	60b9      	str	r1, [r7, #8]
 8003468:	603b      	str	r3, [r7, #0]
 800346a:	4613      	mov	r3, r2
 800346c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800346e:	2300      	movs	r3, #0
 8003470:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2b20      	cmp	r3, #32
 800347c:	d17c      	bne.n	8003578 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d002      	beq.n	800348a <HAL_UART_Transmit+0x2c>
 8003484:	88fb      	ldrh	r3, [r7, #6]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d101      	bne.n	800348e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e075      	b.n	800357a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003494:	2b01      	cmp	r3, #1
 8003496:	d101      	bne.n	800349c <HAL_UART_Transmit+0x3e>
 8003498:	2302      	movs	r3, #2
 800349a:	e06e      	b.n	800357a <HAL_UART_Transmit+0x11c>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2200      	movs	r2, #0
 80034a8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2221      	movs	r2, #33	; 0x21
 80034ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034b2:	f7fe fd43 	bl	8001f3c <HAL_GetTick>
 80034b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	88fa      	ldrh	r2, [r7, #6]
 80034bc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	88fa      	ldrh	r2, [r7, #6]
 80034c2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034cc:	d108      	bne.n	80034e0 <HAL_UART_Transmit+0x82>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d104      	bne.n	80034e0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80034d6:	2300      	movs	r3, #0
 80034d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	61bb      	str	r3, [r7, #24]
 80034de:	e003      	b.n	80034e8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034e4:	2300      	movs	r3, #0
 80034e6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80034f0:	e02a      	b.n	8003548 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	9300      	str	r3, [sp, #0]
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	2200      	movs	r2, #0
 80034fa:	2180      	movs	r1, #128	; 0x80
 80034fc:	68f8      	ldr	r0, [r7, #12]
 80034fe:	f000 f840 	bl	8003582 <UART_WaitOnFlagUntilTimeout>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d001      	beq.n	800350c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e036      	b.n	800357a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d10b      	bne.n	800352a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	881b      	ldrh	r3, [r3, #0]
 8003516:	461a      	mov	r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003520:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	3302      	adds	r3, #2
 8003526:	61bb      	str	r3, [r7, #24]
 8003528:	e007      	b.n	800353a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	781a      	ldrb	r2, [r3, #0]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	3301      	adds	r3, #1
 8003538:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800353e:	b29b      	uxth	r3, r3
 8003540:	3b01      	subs	r3, #1
 8003542:	b29a      	uxth	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800354c:	b29b      	uxth	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1cf      	bne.n	80034f2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	9300      	str	r3, [sp, #0]
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	2200      	movs	r2, #0
 800355a:	2140      	movs	r1, #64	; 0x40
 800355c:	68f8      	ldr	r0, [r7, #12]
 800355e:	f000 f810 	bl	8003582 <UART_WaitOnFlagUntilTimeout>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d001      	beq.n	800356c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e006      	b.n	800357a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2220      	movs	r2, #32
 8003570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003574:	2300      	movs	r3, #0
 8003576:	e000      	b.n	800357a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003578:	2302      	movs	r3, #2
  }
}
 800357a:	4618      	mov	r0, r3
 800357c:	3720      	adds	r7, #32
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003582:	b580      	push	{r7, lr}
 8003584:	b090      	sub	sp, #64	; 0x40
 8003586:	af00      	add	r7, sp, #0
 8003588:	60f8      	str	r0, [r7, #12]
 800358a:	60b9      	str	r1, [r7, #8]
 800358c:	603b      	str	r3, [r7, #0]
 800358e:	4613      	mov	r3, r2
 8003590:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003592:	e050      	b.n	8003636 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003594:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003596:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800359a:	d04c      	beq.n	8003636 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800359c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d007      	beq.n	80035b2 <UART_WaitOnFlagUntilTimeout+0x30>
 80035a2:	f7fe fccb 	bl	8001f3c <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d241      	bcs.n	8003636 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	330c      	adds	r3, #12
 80035b8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035bc:	e853 3f00 	ldrex	r3, [r3]
 80035c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80035c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80035c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	330c      	adds	r3, #12
 80035d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035d2:	637a      	str	r2, [r7, #52]	; 0x34
 80035d4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80035d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035da:	e841 2300 	strex	r3, r2, [r1]
 80035de:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80035e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d1e5      	bne.n	80035b2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	3314      	adds	r3, #20
 80035ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	e853 3f00 	ldrex	r3, [r3]
 80035f4:	613b      	str	r3, [r7, #16]
   return(result);
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	f023 0301 	bic.w	r3, r3, #1
 80035fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	3314      	adds	r3, #20
 8003604:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003606:	623a      	str	r2, [r7, #32]
 8003608:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800360a:	69f9      	ldr	r1, [r7, #28]
 800360c:	6a3a      	ldr	r2, [r7, #32]
 800360e:	e841 2300 	strex	r3, r2, [r1]
 8003612:	61bb      	str	r3, [r7, #24]
   return(result);
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1e5      	bne.n	80035e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2220      	movs	r2, #32
 800361e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2220      	movs	r2, #32
 8003626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e00f      	b.n	8003656 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	4013      	ands	r3, r2
 8003640:	68ba      	ldr	r2, [r7, #8]
 8003642:	429a      	cmp	r2, r3
 8003644:	bf0c      	ite	eq
 8003646:	2301      	moveq	r3, #1
 8003648:	2300      	movne	r3, #0
 800364a:	b2db      	uxtb	r3, r3
 800364c:	461a      	mov	r2, r3
 800364e:	79fb      	ldrb	r3, [r7, #7]
 8003650:	429a      	cmp	r2, r3
 8003652:	d09f      	beq.n	8003594 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3740      	adds	r7, #64	; 0x40
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
	...

08003660 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003660:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003664:	b0c0      	sub	sp, #256	; 0x100
 8003666:	af00      	add	r7, sp, #0
 8003668:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800366c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	691b      	ldr	r3, [r3, #16]
 8003674:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800367c:	68d9      	ldr	r1, [r3, #12]
 800367e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	ea40 0301 	orr.w	r3, r0, r1
 8003688:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800368a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800368e:	689a      	ldr	r2, [r3, #8]
 8003690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	431a      	orrs	r2, r3
 8003698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	431a      	orrs	r2, r3
 80036a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036a4:	69db      	ldr	r3, [r3, #28]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80036ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80036b8:	f021 010c 	bic.w	r1, r1, #12
 80036bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80036c6:	430b      	orrs	r3, r1
 80036c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80036d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036da:	6999      	ldr	r1, [r3, #24]
 80036dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	ea40 0301 	orr.w	r3, r0, r1
 80036e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80036e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	4b8f      	ldr	r3, [pc, #572]	; (800392c <UART_SetConfig+0x2cc>)
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d005      	beq.n	8003700 <UART_SetConfig+0xa0>
 80036f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	4b8d      	ldr	r3, [pc, #564]	; (8003930 <UART_SetConfig+0x2d0>)
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d104      	bne.n	800370a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003700:	f7ff f812 	bl	8002728 <HAL_RCC_GetPCLK2Freq>
 8003704:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003708:	e003      	b.n	8003712 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800370a:	f7fe fff9 	bl	8002700 <HAL_RCC_GetPCLK1Freq>
 800370e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003716:	69db      	ldr	r3, [r3, #28]
 8003718:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800371c:	f040 810c 	bne.w	8003938 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003720:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003724:	2200      	movs	r2, #0
 8003726:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800372a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800372e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003732:	4622      	mov	r2, r4
 8003734:	462b      	mov	r3, r5
 8003736:	1891      	adds	r1, r2, r2
 8003738:	65b9      	str	r1, [r7, #88]	; 0x58
 800373a:	415b      	adcs	r3, r3
 800373c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800373e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003742:	4621      	mov	r1, r4
 8003744:	eb12 0801 	adds.w	r8, r2, r1
 8003748:	4629      	mov	r1, r5
 800374a:	eb43 0901 	adc.w	r9, r3, r1
 800374e:	f04f 0200 	mov.w	r2, #0
 8003752:	f04f 0300 	mov.w	r3, #0
 8003756:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800375a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800375e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003762:	4690      	mov	r8, r2
 8003764:	4699      	mov	r9, r3
 8003766:	4623      	mov	r3, r4
 8003768:	eb18 0303 	adds.w	r3, r8, r3
 800376c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003770:	462b      	mov	r3, r5
 8003772:	eb49 0303 	adc.w	r3, r9, r3
 8003776:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800377a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003786:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800378a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800378e:	460b      	mov	r3, r1
 8003790:	18db      	adds	r3, r3, r3
 8003792:	653b      	str	r3, [r7, #80]	; 0x50
 8003794:	4613      	mov	r3, r2
 8003796:	eb42 0303 	adc.w	r3, r2, r3
 800379a:	657b      	str	r3, [r7, #84]	; 0x54
 800379c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80037a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80037a4:	f7fc fd36 	bl	8000214 <__aeabi_uldivmod>
 80037a8:	4602      	mov	r2, r0
 80037aa:	460b      	mov	r3, r1
 80037ac:	4b61      	ldr	r3, [pc, #388]	; (8003934 <UART_SetConfig+0x2d4>)
 80037ae:	fba3 2302 	umull	r2, r3, r3, r2
 80037b2:	095b      	lsrs	r3, r3, #5
 80037b4:	011c      	lsls	r4, r3, #4
 80037b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037ba:	2200      	movs	r2, #0
 80037bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80037c0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80037c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80037c8:	4642      	mov	r2, r8
 80037ca:	464b      	mov	r3, r9
 80037cc:	1891      	adds	r1, r2, r2
 80037ce:	64b9      	str	r1, [r7, #72]	; 0x48
 80037d0:	415b      	adcs	r3, r3
 80037d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80037d8:	4641      	mov	r1, r8
 80037da:	eb12 0a01 	adds.w	sl, r2, r1
 80037de:	4649      	mov	r1, r9
 80037e0:	eb43 0b01 	adc.w	fp, r3, r1
 80037e4:	f04f 0200 	mov.w	r2, #0
 80037e8:	f04f 0300 	mov.w	r3, #0
 80037ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80037f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80037f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037f8:	4692      	mov	sl, r2
 80037fa:	469b      	mov	fp, r3
 80037fc:	4643      	mov	r3, r8
 80037fe:	eb1a 0303 	adds.w	r3, sl, r3
 8003802:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003806:	464b      	mov	r3, r9
 8003808:	eb4b 0303 	adc.w	r3, fp, r3
 800380c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800381c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003820:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003824:	460b      	mov	r3, r1
 8003826:	18db      	adds	r3, r3, r3
 8003828:	643b      	str	r3, [r7, #64]	; 0x40
 800382a:	4613      	mov	r3, r2
 800382c:	eb42 0303 	adc.w	r3, r2, r3
 8003830:	647b      	str	r3, [r7, #68]	; 0x44
 8003832:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003836:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800383a:	f7fc fceb 	bl	8000214 <__aeabi_uldivmod>
 800383e:	4602      	mov	r2, r0
 8003840:	460b      	mov	r3, r1
 8003842:	4611      	mov	r1, r2
 8003844:	4b3b      	ldr	r3, [pc, #236]	; (8003934 <UART_SetConfig+0x2d4>)
 8003846:	fba3 2301 	umull	r2, r3, r3, r1
 800384a:	095b      	lsrs	r3, r3, #5
 800384c:	2264      	movs	r2, #100	; 0x64
 800384e:	fb02 f303 	mul.w	r3, r2, r3
 8003852:	1acb      	subs	r3, r1, r3
 8003854:	00db      	lsls	r3, r3, #3
 8003856:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800385a:	4b36      	ldr	r3, [pc, #216]	; (8003934 <UART_SetConfig+0x2d4>)
 800385c:	fba3 2302 	umull	r2, r3, r3, r2
 8003860:	095b      	lsrs	r3, r3, #5
 8003862:	005b      	lsls	r3, r3, #1
 8003864:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003868:	441c      	add	r4, r3
 800386a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800386e:	2200      	movs	r2, #0
 8003870:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003874:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003878:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800387c:	4642      	mov	r2, r8
 800387e:	464b      	mov	r3, r9
 8003880:	1891      	adds	r1, r2, r2
 8003882:	63b9      	str	r1, [r7, #56]	; 0x38
 8003884:	415b      	adcs	r3, r3
 8003886:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003888:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800388c:	4641      	mov	r1, r8
 800388e:	1851      	adds	r1, r2, r1
 8003890:	6339      	str	r1, [r7, #48]	; 0x30
 8003892:	4649      	mov	r1, r9
 8003894:	414b      	adcs	r3, r1
 8003896:	637b      	str	r3, [r7, #52]	; 0x34
 8003898:	f04f 0200 	mov.w	r2, #0
 800389c:	f04f 0300 	mov.w	r3, #0
 80038a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80038a4:	4659      	mov	r1, fp
 80038a6:	00cb      	lsls	r3, r1, #3
 80038a8:	4651      	mov	r1, sl
 80038aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038ae:	4651      	mov	r1, sl
 80038b0:	00ca      	lsls	r2, r1, #3
 80038b2:	4610      	mov	r0, r2
 80038b4:	4619      	mov	r1, r3
 80038b6:	4603      	mov	r3, r0
 80038b8:	4642      	mov	r2, r8
 80038ba:	189b      	adds	r3, r3, r2
 80038bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80038c0:	464b      	mov	r3, r9
 80038c2:	460a      	mov	r2, r1
 80038c4:	eb42 0303 	adc.w	r3, r2, r3
 80038c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80038cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80038d8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80038dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80038e0:	460b      	mov	r3, r1
 80038e2:	18db      	adds	r3, r3, r3
 80038e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80038e6:	4613      	mov	r3, r2
 80038e8:	eb42 0303 	adc.w	r3, r2, r3
 80038ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80038f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80038f6:	f7fc fc8d 	bl	8000214 <__aeabi_uldivmod>
 80038fa:	4602      	mov	r2, r0
 80038fc:	460b      	mov	r3, r1
 80038fe:	4b0d      	ldr	r3, [pc, #52]	; (8003934 <UART_SetConfig+0x2d4>)
 8003900:	fba3 1302 	umull	r1, r3, r3, r2
 8003904:	095b      	lsrs	r3, r3, #5
 8003906:	2164      	movs	r1, #100	; 0x64
 8003908:	fb01 f303 	mul.w	r3, r1, r3
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	00db      	lsls	r3, r3, #3
 8003910:	3332      	adds	r3, #50	; 0x32
 8003912:	4a08      	ldr	r2, [pc, #32]	; (8003934 <UART_SetConfig+0x2d4>)
 8003914:	fba2 2303 	umull	r2, r3, r2, r3
 8003918:	095b      	lsrs	r3, r3, #5
 800391a:	f003 0207 	and.w	r2, r3, #7
 800391e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4422      	add	r2, r4
 8003926:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003928:	e105      	b.n	8003b36 <UART_SetConfig+0x4d6>
 800392a:	bf00      	nop
 800392c:	40011000 	.word	0x40011000
 8003930:	40011400 	.word	0x40011400
 8003934:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003938:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800393c:	2200      	movs	r2, #0
 800393e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003942:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003946:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800394a:	4642      	mov	r2, r8
 800394c:	464b      	mov	r3, r9
 800394e:	1891      	adds	r1, r2, r2
 8003950:	6239      	str	r1, [r7, #32]
 8003952:	415b      	adcs	r3, r3
 8003954:	627b      	str	r3, [r7, #36]	; 0x24
 8003956:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800395a:	4641      	mov	r1, r8
 800395c:	1854      	adds	r4, r2, r1
 800395e:	4649      	mov	r1, r9
 8003960:	eb43 0501 	adc.w	r5, r3, r1
 8003964:	f04f 0200 	mov.w	r2, #0
 8003968:	f04f 0300 	mov.w	r3, #0
 800396c:	00eb      	lsls	r3, r5, #3
 800396e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003972:	00e2      	lsls	r2, r4, #3
 8003974:	4614      	mov	r4, r2
 8003976:	461d      	mov	r5, r3
 8003978:	4643      	mov	r3, r8
 800397a:	18e3      	adds	r3, r4, r3
 800397c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003980:	464b      	mov	r3, r9
 8003982:	eb45 0303 	adc.w	r3, r5, r3
 8003986:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800398a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003996:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800399a:	f04f 0200 	mov.w	r2, #0
 800399e:	f04f 0300 	mov.w	r3, #0
 80039a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80039a6:	4629      	mov	r1, r5
 80039a8:	008b      	lsls	r3, r1, #2
 80039aa:	4621      	mov	r1, r4
 80039ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039b0:	4621      	mov	r1, r4
 80039b2:	008a      	lsls	r2, r1, #2
 80039b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80039b8:	f7fc fc2c 	bl	8000214 <__aeabi_uldivmod>
 80039bc:	4602      	mov	r2, r0
 80039be:	460b      	mov	r3, r1
 80039c0:	4b60      	ldr	r3, [pc, #384]	; (8003b44 <UART_SetConfig+0x4e4>)
 80039c2:	fba3 2302 	umull	r2, r3, r3, r2
 80039c6:	095b      	lsrs	r3, r3, #5
 80039c8:	011c      	lsls	r4, r3, #4
 80039ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039ce:	2200      	movs	r2, #0
 80039d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80039d4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80039d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80039dc:	4642      	mov	r2, r8
 80039de:	464b      	mov	r3, r9
 80039e0:	1891      	adds	r1, r2, r2
 80039e2:	61b9      	str	r1, [r7, #24]
 80039e4:	415b      	adcs	r3, r3
 80039e6:	61fb      	str	r3, [r7, #28]
 80039e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039ec:	4641      	mov	r1, r8
 80039ee:	1851      	adds	r1, r2, r1
 80039f0:	6139      	str	r1, [r7, #16]
 80039f2:	4649      	mov	r1, r9
 80039f4:	414b      	adcs	r3, r1
 80039f6:	617b      	str	r3, [r7, #20]
 80039f8:	f04f 0200 	mov.w	r2, #0
 80039fc:	f04f 0300 	mov.w	r3, #0
 8003a00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a04:	4659      	mov	r1, fp
 8003a06:	00cb      	lsls	r3, r1, #3
 8003a08:	4651      	mov	r1, sl
 8003a0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a0e:	4651      	mov	r1, sl
 8003a10:	00ca      	lsls	r2, r1, #3
 8003a12:	4610      	mov	r0, r2
 8003a14:	4619      	mov	r1, r3
 8003a16:	4603      	mov	r3, r0
 8003a18:	4642      	mov	r2, r8
 8003a1a:	189b      	adds	r3, r3, r2
 8003a1c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a20:	464b      	mov	r3, r9
 8003a22:	460a      	mov	r2, r1
 8003a24:	eb42 0303 	adc.w	r3, r2, r3
 8003a28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a36:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003a38:	f04f 0200 	mov.w	r2, #0
 8003a3c:	f04f 0300 	mov.w	r3, #0
 8003a40:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003a44:	4649      	mov	r1, r9
 8003a46:	008b      	lsls	r3, r1, #2
 8003a48:	4641      	mov	r1, r8
 8003a4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a4e:	4641      	mov	r1, r8
 8003a50:	008a      	lsls	r2, r1, #2
 8003a52:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003a56:	f7fc fbdd 	bl	8000214 <__aeabi_uldivmod>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	4b39      	ldr	r3, [pc, #228]	; (8003b44 <UART_SetConfig+0x4e4>)
 8003a60:	fba3 1302 	umull	r1, r3, r3, r2
 8003a64:	095b      	lsrs	r3, r3, #5
 8003a66:	2164      	movs	r1, #100	; 0x64
 8003a68:	fb01 f303 	mul.w	r3, r1, r3
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	011b      	lsls	r3, r3, #4
 8003a70:	3332      	adds	r3, #50	; 0x32
 8003a72:	4a34      	ldr	r2, [pc, #208]	; (8003b44 <UART_SetConfig+0x4e4>)
 8003a74:	fba2 2303 	umull	r2, r3, r2, r3
 8003a78:	095b      	lsrs	r3, r3, #5
 8003a7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a7e:	441c      	add	r4, r3
 8003a80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a84:	2200      	movs	r2, #0
 8003a86:	673b      	str	r3, [r7, #112]	; 0x70
 8003a88:	677a      	str	r2, [r7, #116]	; 0x74
 8003a8a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003a8e:	4642      	mov	r2, r8
 8003a90:	464b      	mov	r3, r9
 8003a92:	1891      	adds	r1, r2, r2
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	415b      	adcs	r3, r3
 8003a98:	60fb      	str	r3, [r7, #12]
 8003a9a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a9e:	4641      	mov	r1, r8
 8003aa0:	1851      	adds	r1, r2, r1
 8003aa2:	6039      	str	r1, [r7, #0]
 8003aa4:	4649      	mov	r1, r9
 8003aa6:	414b      	adcs	r3, r1
 8003aa8:	607b      	str	r3, [r7, #4]
 8003aaa:	f04f 0200 	mov.w	r2, #0
 8003aae:	f04f 0300 	mov.w	r3, #0
 8003ab2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003ab6:	4659      	mov	r1, fp
 8003ab8:	00cb      	lsls	r3, r1, #3
 8003aba:	4651      	mov	r1, sl
 8003abc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ac0:	4651      	mov	r1, sl
 8003ac2:	00ca      	lsls	r2, r1, #3
 8003ac4:	4610      	mov	r0, r2
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	4603      	mov	r3, r0
 8003aca:	4642      	mov	r2, r8
 8003acc:	189b      	adds	r3, r3, r2
 8003ace:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ad0:	464b      	mov	r3, r9
 8003ad2:	460a      	mov	r2, r1
 8003ad4:	eb42 0303 	adc.w	r3, r2, r3
 8003ad8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	663b      	str	r3, [r7, #96]	; 0x60
 8003ae4:	667a      	str	r2, [r7, #100]	; 0x64
 8003ae6:	f04f 0200 	mov.w	r2, #0
 8003aea:	f04f 0300 	mov.w	r3, #0
 8003aee:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003af2:	4649      	mov	r1, r9
 8003af4:	008b      	lsls	r3, r1, #2
 8003af6:	4641      	mov	r1, r8
 8003af8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003afc:	4641      	mov	r1, r8
 8003afe:	008a      	lsls	r2, r1, #2
 8003b00:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003b04:	f7fc fb86 	bl	8000214 <__aeabi_uldivmod>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	460b      	mov	r3, r1
 8003b0c:	4b0d      	ldr	r3, [pc, #52]	; (8003b44 <UART_SetConfig+0x4e4>)
 8003b0e:	fba3 1302 	umull	r1, r3, r3, r2
 8003b12:	095b      	lsrs	r3, r3, #5
 8003b14:	2164      	movs	r1, #100	; 0x64
 8003b16:	fb01 f303 	mul.w	r3, r1, r3
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	011b      	lsls	r3, r3, #4
 8003b1e:	3332      	adds	r3, #50	; 0x32
 8003b20:	4a08      	ldr	r2, [pc, #32]	; (8003b44 <UART_SetConfig+0x4e4>)
 8003b22:	fba2 2303 	umull	r2, r3, r2, r3
 8003b26:	095b      	lsrs	r3, r3, #5
 8003b28:	f003 020f 	and.w	r2, r3, #15
 8003b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4422      	add	r2, r4
 8003b34:	609a      	str	r2, [r3, #8]
}
 8003b36:	bf00      	nop
 8003b38:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b42:	bf00      	nop
 8003b44:	51eb851f 	.word	0x51eb851f

08003b48 <__errno>:
 8003b48:	4b01      	ldr	r3, [pc, #4]	; (8003b50 <__errno+0x8>)
 8003b4a:	6818      	ldr	r0, [r3, #0]
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	2000004c 	.word	0x2000004c

08003b54 <__libc_init_array>:
 8003b54:	b570      	push	{r4, r5, r6, lr}
 8003b56:	4d0d      	ldr	r5, [pc, #52]	; (8003b8c <__libc_init_array+0x38>)
 8003b58:	4c0d      	ldr	r4, [pc, #52]	; (8003b90 <__libc_init_array+0x3c>)
 8003b5a:	1b64      	subs	r4, r4, r5
 8003b5c:	10a4      	asrs	r4, r4, #2
 8003b5e:	2600      	movs	r6, #0
 8003b60:	42a6      	cmp	r6, r4
 8003b62:	d109      	bne.n	8003b78 <__libc_init_array+0x24>
 8003b64:	4d0b      	ldr	r5, [pc, #44]	; (8003b94 <__libc_init_array+0x40>)
 8003b66:	4c0c      	ldr	r4, [pc, #48]	; (8003b98 <__libc_init_array+0x44>)
 8003b68:	f000 f998 	bl	8003e9c <_init>
 8003b6c:	1b64      	subs	r4, r4, r5
 8003b6e:	10a4      	asrs	r4, r4, #2
 8003b70:	2600      	movs	r6, #0
 8003b72:	42a6      	cmp	r6, r4
 8003b74:	d105      	bne.n	8003b82 <__libc_init_array+0x2e>
 8003b76:	bd70      	pop	{r4, r5, r6, pc}
 8003b78:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b7c:	4798      	blx	r3
 8003b7e:	3601      	adds	r6, #1
 8003b80:	e7ee      	b.n	8003b60 <__libc_init_array+0xc>
 8003b82:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b86:	4798      	blx	r3
 8003b88:	3601      	adds	r6, #1
 8003b8a:	e7f2      	b.n	8003b72 <__libc_init_array+0x1e>
 8003b8c:	08006508 	.word	0x08006508
 8003b90:	08006508 	.word	0x08006508
 8003b94:	08006508 	.word	0x08006508
 8003b98:	0800650c 	.word	0x0800650c

08003b9c <__itoa>:
 8003b9c:	1e93      	subs	r3, r2, #2
 8003b9e:	2b22      	cmp	r3, #34	; 0x22
 8003ba0:	b510      	push	{r4, lr}
 8003ba2:	460c      	mov	r4, r1
 8003ba4:	d904      	bls.n	8003bb0 <__itoa+0x14>
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	700b      	strb	r3, [r1, #0]
 8003baa:	461c      	mov	r4, r3
 8003bac:	4620      	mov	r0, r4
 8003bae:	bd10      	pop	{r4, pc}
 8003bb0:	2a0a      	cmp	r2, #10
 8003bb2:	d109      	bne.n	8003bc8 <__itoa+0x2c>
 8003bb4:	2800      	cmp	r0, #0
 8003bb6:	da07      	bge.n	8003bc8 <__itoa+0x2c>
 8003bb8:	232d      	movs	r3, #45	; 0x2d
 8003bba:	700b      	strb	r3, [r1, #0]
 8003bbc:	4240      	negs	r0, r0
 8003bbe:	2101      	movs	r1, #1
 8003bc0:	4421      	add	r1, r4
 8003bc2:	f000 f91d 	bl	8003e00 <__utoa>
 8003bc6:	e7f1      	b.n	8003bac <__itoa+0x10>
 8003bc8:	2100      	movs	r1, #0
 8003bca:	e7f9      	b.n	8003bc0 <__itoa+0x24>

08003bcc <itoa>:
 8003bcc:	f7ff bfe6 	b.w	8003b9c <__itoa>

08003bd0 <__retarget_lock_acquire_recursive>:
 8003bd0:	4770      	bx	lr

08003bd2 <__retarget_lock_release_recursive>:
 8003bd2:	4770      	bx	lr

08003bd4 <malloc>:
 8003bd4:	4b02      	ldr	r3, [pc, #8]	; (8003be0 <malloc+0xc>)
 8003bd6:	4601      	mov	r1, r0
 8003bd8:	6818      	ldr	r0, [r3, #0]
 8003bda:	f000 b88d 	b.w	8003cf8 <_malloc_r>
 8003bde:	bf00      	nop
 8003be0:	2000004c 	.word	0x2000004c

08003be4 <free>:
 8003be4:	4b02      	ldr	r3, [pc, #8]	; (8003bf0 <free+0xc>)
 8003be6:	4601      	mov	r1, r0
 8003be8:	6818      	ldr	r0, [r3, #0]
 8003bea:	f000 b819 	b.w	8003c20 <_free_r>
 8003bee:	bf00      	nop
 8003bf0:	2000004c 	.word	0x2000004c

08003bf4 <memcpy>:
 8003bf4:	440a      	add	r2, r1
 8003bf6:	4291      	cmp	r1, r2
 8003bf8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003bfc:	d100      	bne.n	8003c00 <memcpy+0xc>
 8003bfe:	4770      	bx	lr
 8003c00:	b510      	push	{r4, lr}
 8003c02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c0a:	4291      	cmp	r1, r2
 8003c0c:	d1f9      	bne.n	8003c02 <memcpy+0xe>
 8003c0e:	bd10      	pop	{r4, pc}

08003c10 <memset>:
 8003c10:	4402      	add	r2, r0
 8003c12:	4603      	mov	r3, r0
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d100      	bne.n	8003c1a <memset+0xa>
 8003c18:	4770      	bx	lr
 8003c1a:	f803 1b01 	strb.w	r1, [r3], #1
 8003c1e:	e7f9      	b.n	8003c14 <memset+0x4>

08003c20 <_free_r>:
 8003c20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003c22:	2900      	cmp	r1, #0
 8003c24:	d044      	beq.n	8003cb0 <_free_r+0x90>
 8003c26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c2a:	9001      	str	r0, [sp, #4]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	f1a1 0404 	sub.w	r4, r1, #4
 8003c32:	bfb8      	it	lt
 8003c34:	18e4      	addlt	r4, r4, r3
 8003c36:	f000 f925 	bl	8003e84 <__malloc_lock>
 8003c3a:	4a1e      	ldr	r2, [pc, #120]	; (8003cb4 <_free_r+0x94>)
 8003c3c:	9801      	ldr	r0, [sp, #4]
 8003c3e:	6813      	ldr	r3, [r2, #0]
 8003c40:	b933      	cbnz	r3, 8003c50 <_free_r+0x30>
 8003c42:	6063      	str	r3, [r4, #4]
 8003c44:	6014      	str	r4, [r2, #0]
 8003c46:	b003      	add	sp, #12
 8003c48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003c4c:	f000 b920 	b.w	8003e90 <__malloc_unlock>
 8003c50:	42a3      	cmp	r3, r4
 8003c52:	d908      	bls.n	8003c66 <_free_r+0x46>
 8003c54:	6825      	ldr	r5, [r4, #0]
 8003c56:	1961      	adds	r1, r4, r5
 8003c58:	428b      	cmp	r3, r1
 8003c5a:	bf01      	itttt	eq
 8003c5c:	6819      	ldreq	r1, [r3, #0]
 8003c5e:	685b      	ldreq	r3, [r3, #4]
 8003c60:	1949      	addeq	r1, r1, r5
 8003c62:	6021      	streq	r1, [r4, #0]
 8003c64:	e7ed      	b.n	8003c42 <_free_r+0x22>
 8003c66:	461a      	mov	r2, r3
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	b10b      	cbz	r3, 8003c70 <_free_r+0x50>
 8003c6c:	42a3      	cmp	r3, r4
 8003c6e:	d9fa      	bls.n	8003c66 <_free_r+0x46>
 8003c70:	6811      	ldr	r1, [r2, #0]
 8003c72:	1855      	adds	r5, r2, r1
 8003c74:	42a5      	cmp	r5, r4
 8003c76:	d10b      	bne.n	8003c90 <_free_r+0x70>
 8003c78:	6824      	ldr	r4, [r4, #0]
 8003c7a:	4421      	add	r1, r4
 8003c7c:	1854      	adds	r4, r2, r1
 8003c7e:	42a3      	cmp	r3, r4
 8003c80:	6011      	str	r1, [r2, #0]
 8003c82:	d1e0      	bne.n	8003c46 <_free_r+0x26>
 8003c84:	681c      	ldr	r4, [r3, #0]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	6053      	str	r3, [r2, #4]
 8003c8a:	4421      	add	r1, r4
 8003c8c:	6011      	str	r1, [r2, #0]
 8003c8e:	e7da      	b.n	8003c46 <_free_r+0x26>
 8003c90:	d902      	bls.n	8003c98 <_free_r+0x78>
 8003c92:	230c      	movs	r3, #12
 8003c94:	6003      	str	r3, [r0, #0]
 8003c96:	e7d6      	b.n	8003c46 <_free_r+0x26>
 8003c98:	6825      	ldr	r5, [r4, #0]
 8003c9a:	1961      	adds	r1, r4, r5
 8003c9c:	428b      	cmp	r3, r1
 8003c9e:	bf04      	itt	eq
 8003ca0:	6819      	ldreq	r1, [r3, #0]
 8003ca2:	685b      	ldreq	r3, [r3, #4]
 8003ca4:	6063      	str	r3, [r4, #4]
 8003ca6:	bf04      	itt	eq
 8003ca8:	1949      	addeq	r1, r1, r5
 8003caa:	6021      	streq	r1, [r4, #0]
 8003cac:	6054      	str	r4, [r2, #4]
 8003cae:	e7ca      	b.n	8003c46 <_free_r+0x26>
 8003cb0:	b003      	add	sp, #12
 8003cb2:	bd30      	pop	{r4, r5, pc}
 8003cb4:	200006d0 	.word	0x200006d0

08003cb8 <sbrk_aligned>:
 8003cb8:	b570      	push	{r4, r5, r6, lr}
 8003cba:	4e0e      	ldr	r6, [pc, #56]	; (8003cf4 <sbrk_aligned+0x3c>)
 8003cbc:	460c      	mov	r4, r1
 8003cbe:	6831      	ldr	r1, [r6, #0]
 8003cc0:	4605      	mov	r5, r0
 8003cc2:	b911      	cbnz	r1, 8003cca <sbrk_aligned+0x12>
 8003cc4:	f000 f88c 	bl	8003de0 <_sbrk_r>
 8003cc8:	6030      	str	r0, [r6, #0]
 8003cca:	4621      	mov	r1, r4
 8003ccc:	4628      	mov	r0, r5
 8003cce:	f000 f887 	bl	8003de0 <_sbrk_r>
 8003cd2:	1c43      	adds	r3, r0, #1
 8003cd4:	d00a      	beq.n	8003cec <sbrk_aligned+0x34>
 8003cd6:	1cc4      	adds	r4, r0, #3
 8003cd8:	f024 0403 	bic.w	r4, r4, #3
 8003cdc:	42a0      	cmp	r0, r4
 8003cde:	d007      	beq.n	8003cf0 <sbrk_aligned+0x38>
 8003ce0:	1a21      	subs	r1, r4, r0
 8003ce2:	4628      	mov	r0, r5
 8003ce4:	f000 f87c 	bl	8003de0 <_sbrk_r>
 8003ce8:	3001      	adds	r0, #1
 8003cea:	d101      	bne.n	8003cf0 <sbrk_aligned+0x38>
 8003cec:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003cf0:	4620      	mov	r0, r4
 8003cf2:	bd70      	pop	{r4, r5, r6, pc}
 8003cf4:	200006d4 	.word	0x200006d4

08003cf8 <_malloc_r>:
 8003cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cfc:	1ccd      	adds	r5, r1, #3
 8003cfe:	f025 0503 	bic.w	r5, r5, #3
 8003d02:	3508      	adds	r5, #8
 8003d04:	2d0c      	cmp	r5, #12
 8003d06:	bf38      	it	cc
 8003d08:	250c      	movcc	r5, #12
 8003d0a:	2d00      	cmp	r5, #0
 8003d0c:	4607      	mov	r7, r0
 8003d0e:	db01      	blt.n	8003d14 <_malloc_r+0x1c>
 8003d10:	42a9      	cmp	r1, r5
 8003d12:	d905      	bls.n	8003d20 <_malloc_r+0x28>
 8003d14:	230c      	movs	r3, #12
 8003d16:	603b      	str	r3, [r7, #0]
 8003d18:	2600      	movs	r6, #0
 8003d1a:	4630      	mov	r0, r6
 8003d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d20:	4e2e      	ldr	r6, [pc, #184]	; (8003ddc <_malloc_r+0xe4>)
 8003d22:	f000 f8af 	bl	8003e84 <__malloc_lock>
 8003d26:	6833      	ldr	r3, [r6, #0]
 8003d28:	461c      	mov	r4, r3
 8003d2a:	bb34      	cbnz	r4, 8003d7a <_malloc_r+0x82>
 8003d2c:	4629      	mov	r1, r5
 8003d2e:	4638      	mov	r0, r7
 8003d30:	f7ff ffc2 	bl	8003cb8 <sbrk_aligned>
 8003d34:	1c43      	adds	r3, r0, #1
 8003d36:	4604      	mov	r4, r0
 8003d38:	d14d      	bne.n	8003dd6 <_malloc_r+0xde>
 8003d3a:	6834      	ldr	r4, [r6, #0]
 8003d3c:	4626      	mov	r6, r4
 8003d3e:	2e00      	cmp	r6, #0
 8003d40:	d140      	bne.n	8003dc4 <_malloc_r+0xcc>
 8003d42:	6823      	ldr	r3, [r4, #0]
 8003d44:	4631      	mov	r1, r6
 8003d46:	4638      	mov	r0, r7
 8003d48:	eb04 0803 	add.w	r8, r4, r3
 8003d4c:	f000 f848 	bl	8003de0 <_sbrk_r>
 8003d50:	4580      	cmp	r8, r0
 8003d52:	d13a      	bne.n	8003dca <_malloc_r+0xd2>
 8003d54:	6821      	ldr	r1, [r4, #0]
 8003d56:	3503      	adds	r5, #3
 8003d58:	1a6d      	subs	r5, r5, r1
 8003d5a:	f025 0503 	bic.w	r5, r5, #3
 8003d5e:	3508      	adds	r5, #8
 8003d60:	2d0c      	cmp	r5, #12
 8003d62:	bf38      	it	cc
 8003d64:	250c      	movcc	r5, #12
 8003d66:	4629      	mov	r1, r5
 8003d68:	4638      	mov	r0, r7
 8003d6a:	f7ff ffa5 	bl	8003cb8 <sbrk_aligned>
 8003d6e:	3001      	adds	r0, #1
 8003d70:	d02b      	beq.n	8003dca <_malloc_r+0xd2>
 8003d72:	6823      	ldr	r3, [r4, #0]
 8003d74:	442b      	add	r3, r5
 8003d76:	6023      	str	r3, [r4, #0]
 8003d78:	e00e      	b.n	8003d98 <_malloc_r+0xa0>
 8003d7a:	6822      	ldr	r2, [r4, #0]
 8003d7c:	1b52      	subs	r2, r2, r5
 8003d7e:	d41e      	bmi.n	8003dbe <_malloc_r+0xc6>
 8003d80:	2a0b      	cmp	r2, #11
 8003d82:	d916      	bls.n	8003db2 <_malloc_r+0xba>
 8003d84:	1961      	adds	r1, r4, r5
 8003d86:	42a3      	cmp	r3, r4
 8003d88:	6025      	str	r5, [r4, #0]
 8003d8a:	bf18      	it	ne
 8003d8c:	6059      	strne	r1, [r3, #4]
 8003d8e:	6863      	ldr	r3, [r4, #4]
 8003d90:	bf08      	it	eq
 8003d92:	6031      	streq	r1, [r6, #0]
 8003d94:	5162      	str	r2, [r4, r5]
 8003d96:	604b      	str	r3, [r1, #4]
 8003d98:	4638      	mov	r0, r7
 8003d9a:	f104 060b 	add.w	r6, r4, #11
 8003d9e:	f000 f877 	bl	8003e90 <__malloc_unlock>
 8003da2:	f026 0607 	bic.w	r6, r6, #7
 8003da6:	1d23      	adds	r3, r4, #4
 8003da8:	1af2      	subs	r2, r6, r3
 8003daa:	d0b6      	beq.n	8003d1a <_malloc_r+0x22>
 8003dac:	1b9b      	subs	r3, r3, r6
 8003dae:	50a3      	str	r3, [r4, r2]
 8003db0:	e7b3      	b.n	8003d1a <_malloc_r+0x22>
 8003db2:	6862      	ldr	r2, [r4, #4]
 8003db4:	42a3      	cmp	r3, r4
 8003db6:	bf0c      	ite	eq
 8003db8:	6032      	streq	r2, [r6, #0]
 8003dba:	605a      	strne	r2, [r3, #4]
 8003dbc:	e7ec      	b.n	8003d98 <_malloc_r+0xa0>
 8003dbe:	4623      	mov	r3, r4
 8003dc0:	6864      	ldr	r4, [r4, #4]
 8003dc2:	e7b2      	b.n	8003d2a <_malloc_r+0x32>
 8003dc4:	4634      	mov	r4, r6
 8003dc6:	6876      	ldr	r6, [r6, #4]
 8003dc8:	e7b9      	b.n	8003d3e <_malloc_r+0x46>
 8003dca:	230c      	movs	r3, #12
 8003dcc:	603b      	str	r3, [r7, #0]
 8003dce:	4638      	mov	r0, r7
 8003dd0:	f000 f85e 	bl	8003e90 <__malloc_unlock>
 8003dd4:	e7a1      	b.n	8003d1a <_malloc_r+0x22>
 8003dd6:	6025      	str	r5, [r4, #0]
 8003dd8:	e7de      	b.n	8003d98 <_malloc_r+0xa0>
 8003dda:	bf00      	nop
 8003ddc:	200006d0 	.word	0x200006d0

08003de0 <_sbrk_r>:
 8003de0:	b538      	push	{r3, r4, r5, lr}
 8003de2:	4d06      	ldr	r5, [pc, #24]	; (8003dfc <_sbrk_r+0x1c>)
 8003de4:	2300      	movs	r3, #0
 8003de6:	4604      	mov	r4, r0
 8003de8:	4608      	mov	r0, r1
 8003dea:	602b      	str	r3, [r5, #0]
 8003dec:	f7fd fe1e 	bl	8001a2c <_sbrk>
 8003df0:	1c43      	adds	r3, r0, #1
 8003df2:	d102      	bne.n	8003dfa <_sbrk_r+0x1a>
 8003df4:	682b      	ldr	r3, [r5, #0]
 8003df6:	b103      	cbz	r3, 8003dfa <_sbrk_r+0x1a>
 8003df8:	6023      	str	r3, [r4, #0]
 8003dfa:	bd38      	pop	{r3, r4, r5, pc}
 8003dfc:	200006d8 	.word	0x200006d8

08003e00 <__utoa>:
 8003e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e02:	4c1f      	ldr	r4, [pc, #124]	; (8003e80 <__utoa+0x80>)
 8003e04:	b08b      	sub	sp, #44	; 0x2c
 8003e06:	4605      	mov	r5, r0
 8003e08:	460b      	mov	r3, r1
 8003e0a:	466e      	mov	r6, sp
 8003e0c:	f104 0c20 	add.w	ip, r4, #32
 8003e10:	6820      	ldr	r0, [r4, #0]
 8003e12:	6861      	ldr	r1, [r4, #4]
 8003e14:	4637      	mov	r7, r6
 8003e16:	c703      	stmia	r7!, {r0, r1}
 8003e18:	3408      	adds	r4, #8
 8003e1a:	4564      	cmp	r4, ip
 8003e1c:	463e      	mov	r6, r7
 8003e1e:	d1f7      	bne.n	8003e10 <__utoa+0x10>
 8003e20:	7921      	ldrb	r1, [r4, #4]
 8003e22:	7139      	strb	r1, [r7, #4]
 8003e24:	1e91      	subs	r1, r2, #2
 8003e26:	6820      	ldr	r0, [r4, #0]
 8003e28:	6038      	str	r0, [r7, #0]
 8003e2a:	2922      	cmp	r1, #34	; 0x22
 8003e2c:	f04f 0100 	mov.w	r1, #0
 8003e30:	d904      	bls.n	8003e3c <__utoa+0x3c>
 8003e32:	7019      	strb	r1, [r3, #0]
 8003e34:	460b      	mov	r3, r1
 8003e36:	4618      	mov	r0, r3
 8003e38:	b00b      	add	sp, #44	; 0x2c
 8003e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e3c:	1e58      	subs	r0, r3, #1
 8003e3e:	4684      	mov	ip, r0
 8003e40:	fbb5 f7f2 	udiv	r7, r5, r2
 8003e44:	fb02 5617 	mls	r6, r2, r7, r5
 8003e48:	3628      	adds	r6, #40	; 0x28
 8003e4a:	446e      	add	r6, sp
 8003e4c:	460c      	mov	r4, r1
 8003e4e:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8003e52:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8003e56:	462e      	mov	r6, r5
 8003e58:	42b2      	cmp	r2, r6
 8003e5a:	f101 0101 	add.w	r1, r1, #1
 8003e5e:	463d      	mov	r5, r7
 8003e60:	d9ee      	bls.n	8003e40 <__utoa+0x40>
 8003e62:	2200      	movs	r2, #0
 8003e64:	545a      	strb	r2, [r3, r1]
 8003e66:	1919      	adds	r1, r3, r4
 8003e68:	1aa5      	subs	r5, r4, r2
 8003e6a:	42aa      	cmp	r2, r5
 8003e6c:	dae3      	bge.n	8003e36 <__utoa+0x36>
 8003e6e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8003e72:	780e      	ldrb	r6, [r1, #0]
 8003e74:	7006      	strb	r6, [r0, #0]
 8003e76:	3201      	adds	r2, #1
 8003e78:	f801 5901 	strb.w	r5, [r1], #-1
 8003e7c:	e7f4      	b.n	8003e68 <__utoa+0x68>
 8003e7e:	bf00      	nop
 8003e80:	08006478 	.word	0x08006478

08003e84 <__malloc_lock>:
 8003e84:	4801      	ldr	r0, [pc, #4]	; (8003e8c <__malloc_lock+0x8>)
 8003e86:	f7ff bea3 	b.w	8003bd0 <__retarget_lock_acquire_recursive>
 8003e8a:	bf00      	nop
 8003e8c:	200006cc 	.word	0x200006cc

08003e90 <__malloc_unlock>:
 8003e90:	4801      	ldr	r0, [pc, #4]	; (8003e98 <__malloc_unlock+0x8>)
 8003e92:	f7ff be9e 	b.w	8003bd2 <__retarget_lock_release_recursive>
 8003e96:	bf00      	nop
 8003e98:	200006cc 	.word	0x200006cc

08003e9c <_init>:
 8003e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e9e:	bf00      	nop
 8003ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ea2:	bc08      	pop	{r3}
 8003ea4:	469e      	mov	lr, r3
 8003ea6:	4770      	bx	lr

08003ea8 <_fini>:
 8003ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eaa:	bf00      	nop
 8003eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eae:	bc08      	pop	{r3}
 8003eb0:	469e      	mov	lr, r3
 8003eb2:	4770      	bx	lr
