
EncryptionAlgorithms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e38  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ab0  08007000  08007000  00017000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ab0  08009ab0  000200b0  2**0
                  CONTENTS
  4 .ARM          00000008  08009ab0  08009ab0  00019ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ab8  08009ab8  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ab8  08009ab8  00019ab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009abc  08009abc  00019abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  08009ac0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015e8  200000b0  08009b70  000200b0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001698  08009b70  00021698  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001890c  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003865  00000000  00000000  000389ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001210  00000000  00000000  0003c258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010a8  00000000  00000000  0003d468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022f1e  00000000  00000000  0003e510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018992  00000000  00000000  0006142e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000da1e9  00000000  00000000  00079dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00153fa9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d8c  00000000  00000000  00153ffc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200000b0 	.word	0x200000b0
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08006fe8 	.word	0x08006fe8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200000b4 	.word	0x200000b4
 8000204:	08006fe8 	.word	0x08006fe8

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <RsaTest>:
size_t sigLen;



void RsaTest(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
	RsaInit();
 8000520:	f000 fa72 	bl	8000a08 <RsaInit>
	RsaPKCS1();
 8000524:	f000 f802 	bl	800052c <RsaPKCS1>

}
 8000528:	bf00      	nop
 800052a:	bd80      	pop	{r7, pc}

0800052c <RsaPKCS1>:

void RsaPKCS1(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b084      	sub	sp, #16
 8000530:	af02      	add	r7, sp, #8
	uint8_t i;
	for ( i = 0; i < 3; i++ ) {
 8000532:	2300      	movs	r3, #0
 8000534:	71fb      	strb	r3, [r7, #7]
 8000536:	e0a5      	b.n	8000684 <RsaPKCS1+0x158>

		PrintInfo(rsaName, 2048, asymKeysLengths[i], sha256Name);
 8000538:	79fb      	ldrb	r3, [r7, #7]
 800053a:	4a57      	ldr	r2, [pc, #348]	; (8000698 <RsaPKCS1+0x16c>)
 800053c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000540:	4b56      	ldr	r3, [pc, #344]	; (800069c <RsaPKCS1+0x170>)
 8000542:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000546:	4856      	ldr	r0, [pc, #344]	; (80006a0 <RsaPKCS1+0x174>)
 8000548:	f004 f9dc 	bl	8004904 <PrintInfo>
		HAL_TIM_Base_Start(&htim6);
 800054c:	4855      	ldr	r0, [pc, #340]	; (80006a4 <RsaPKCS1+0x178>)
 800054e:	f005 fe33 	bl	80061b8 <HAL_TIM_Base_Start>
		rsassaPkcs1v15Sign(&privateKeys[i], &sha256HashAlgo, input, sig, &sigLen);
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	2264      	movs	r2, #100	; 0x64
 8000556:	fb02 f303 	mul.w	r3, r2, r3
 800055a:	4a53      	ldr	r2, [pc, #332]	; (80006a8 <RsaPKCS1+0x17c>)
 800055c:	1898      	adds	r0, r3, r2
 800055e:	4b53      	ldr	r3, [pc, #332]	; (80006ac <RsaPKCS1+0x180>)
 8000560:	9300      	str	r3, [sp, #0]
 8000562:	4b53      	ldr	r3, [pc, #332]	; (80006b0 <RsaPKCS1+0x184>)
 8000564:	4a53      	ldr	r2, [pc, #332]	; (80006b4 <RsaPKCS1+0x188>)
 8000566:	4954      	ldr	r1, [pc, #336]	; (80006b8 <RsaPKCS1+0x18c>)
 8000568:	f001 ff0e 	bl	8002388 <rsassaPkcs1v15Sign>
		HAL_TIM_Base_Stop(&htim6);
 800056c:	484d      	ldr	r0, [pc, #308]	; (80006a4 <RsaPKCS1+0x178>)
 800056e:	f005 fe8b 	bl	8006288 <HAL_TIM_Base_Stop>
		PrintTime();
 8000572:	f004 fa41 	bl	80049f8 <PrintTime>
		HAL_TIM_Base_Start(&htim6);
 8000576:	484b      	ldr	r0, [pc, #300]	; (80006a4 <RsaPKCS1+0x178>)
 8000578:	f005 fe1e 	bl	80061b8 <HAL_TIM_Base_Start>
		rsassaPkcs1v15Verify(&publicKeys[i], &sha256HashAlgo, input, sig, sigLen);
 800057c:	79fa      	ldrb	r2, [r7, #7]
 800057e:	4613      	mov	r3, r2
 8000580:	005b      	lsls	r3, r3, #1
 8000582:	4413      	add	r3, r2
 8000584:	00db      	lsls	r3, r3, #3
 8000586:	4a4d      	ldr	r2, [pc, #308]	; (80006bc <RsaPKCS1+0x190>)
 8000588:	1898      	adds	r0, r3, r2
 800058a:	4b48      	ldr	r3, [pc, #288]	; (80006ac <RsaPKCS1+0x180>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	9300      	str	r3, [sp, #0]
 8000590:	4b47      	ldr	r3, [pc, #284]	; (80006b0 <RsaPKCS1+0x184>)
 8000592:	4a48      	ldr	r2, [pc, #288]	; (80006b4 <RsaPKCS1+0x188>)
 8000594:	4948      	ldr	r1, [pc, #288]	; (80006b8 <RsaPKCS1+0x18c>)
 8000596:	f001 ffca 	bl	800252e <rsassaPkcs1v15Verify>
		HAL_TIM_Base_Stop(&htim6);
 800059a:	4842      	ldr	r0, [pc, #264]	; (80006a4 <RsaPKCS1+0x178>)
 800059c:	f005 fe74 	bl	8006288 <HAL_TIM_Base_Stop>
		PrintTime();
 80005a0:	f004 fa2a 	bl	80049f8 <PrintTime>

		RsaCleanSig();
 80005a4:	f000 f894 	bl	80006d0 <RsaCleanSig>

		PrintInfo(rsaName, 2048, asymKeysLengths[i], sha384Name);
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	4a3b      	ldr	r2, [pc, #236]	; (8000698 <RsaPKCS1+0x16c>)
 80005ac:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80005b0:	4b43      	ldr	r3, [pc, #268]	; (80006c0 <RsaPKCS1+0x194>)
 80005b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005b6:	483a      	ldr	r0, [pc, #232]	; (80006a0 <RsaPKCS1+0x174>)
 80005b8:	f004 f9a4 	bl	8004904 <PrintInfo>
		HAL_TIM_Base_Start(&htim6);
 80005bc:	4839      	ldr	r0, [pc, #228]	; (80006a4 <RsaPKCS1+0x178>)
 80005be:	f005 fdfb 	bl	80061b8 <HAL_TIM_Base_Start>
		rsassaPkcs1v15Sign(&privateKeys[i], &sha384HashAlgo, input, sig, &sigLen);
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	2264      	movs	r2, #100	; 0x64
 80005c6:	fb02 f303 	mul.w	r3, r2, r3
 80005ca:	4a37      	ldr	r2, [pc, #220]	; (80006a8 <RsaPKCS1+0x17c>)
 80005cc:	1898      	adds	r0, r3, r2
 80005ce:	4b37      	ldr	r3, [pc, #220]	; (80006ac <RsaPKCS1+0x180>)
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	4b37      	ldr	r3, [pc, #220]	; (80006b0 <RsaPKCS1+0x184>)
 80005d4:	4a37      	ldr	r2, [pc, #220]	; (80006b4 <RsaPKCS1+0x188>)
 80005d6:	493b      	ldr	r1, [pc, #236]	; (80006c4 <RsaPKCS1+0x198>)
 80005d8:	f001 fed6 	bl	8002388 <rsassaPkcs1v15Sign>
		HAL_TIM_Base_Stop(&htim6);
 80005dc:	4831      	ldr	r0, [pc, #196]	; (80006a4 <RsaPKCS1+0x178>)
 80005de:	f005 fe53 	bl	8006288 <HAL_TIM_Base_Stop>
		PrintTime();
 80005e2:	f004 fa09 	bl	80049f8 <PrintTime>
		HAL_TIM_Base_Start(&htim6);
 80005e6:	482f      	ldr	r0, [pc, #188]	; (80006a4 <RsaPKCS1+0x178>)
 80005e8:	f005 fde6 	bl	80061b8 <HAL_TIM_Base_Start>
		rsassaPkcs1v15Verify(&publicKeys[i], &sha384HashAlgo, input, sig, sigLen);
 80005ec:	79fa      	ldrb	r2, [r7, #7]
 80005ee:	4613      	mov	r3, r2
 80005f0:	005b      	lsls	r3, r3, #1
 80005f2:	4413      	add	r3, r2
 80005f4:	00db      	lsls	r3, r3, #3
 80005f6:	4a31      	ldr	r2, [pc, #196]	; (80006bc <RsaPKCS1+0x190>)
 80005f8:	1898      	adds	r0, r3, r2
 80005fa:	4b2c      	ldr	r3, [pc, #176]	; (80006ac <RsaPKCS1+0x180>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	4b2b      	ldr	r3, [pc, #172]	; (80006b0 <RsaPKCS1+0x184>)
 8000602:	4a2c      	ldr	r2, [pc, #176]	; (80006b4 <RsaPKCS1+0x188>)
 8000604:	492f      	ldr	r1, [pc, #188]	; (80006c4 <RsaPKCS1+0x198>)
 8000606:	f001 ff92 	bl	800252e <rsassaPkcs1v15Verify>
		HAL_TIM_Base_Stop(&htim6);
 800060a:	4826      	ldr	r0, [pc, #152]	; (80006a4 <RsaPKCS1+0x178>)
 800060c:	f005 fe3c 	bl	8006288 <HAL_TIM_Base_Stop>
		PrintTime();
 8000610:	f004 f9f2 	bl	80049f8 <PrintTime>

		RsaCleanSig();
 8000614:	f000 f85c 	bl	80006d0 <RsaCleanSig>

		PrintInfo(rsaName, 2048, asymKeysLengths[i], sha512Name);
 8000618:	79fb      	ldrb	r3, [r7, #7]
 800061a:	4a1f      	ldr	r2, [pc, #124]	; (8000698 <RsaPKCS1+0x16c>)
 800061c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000620:	4b29      	ldr	r3, [pc, #164]	; (80006c8 <RsaPKCS1+0x19c>)
 8000622:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000626:	481e      	ldr	r0, [pc, #120]	; (80006a0 <RsaPKCS1+0x174>)
 8000628:	f004 f96c 	bl	8004904 <PrintInfo>
		rsassaPkcs1v15Sign(&privateKeys[i], &sha512HashAlgo, input, sig, &sigLen);
 800062c:	79fb      	ldrb	r3, [r7, #7]
 800062e:	2264      	movs	r2, #100	; 0x64
 8000630:	fb02 f303 	mul.w	r3, r2, r3
 8000634:	4a1c      	ldr	r2, [pc, #112]	; (80006a8 <RsaPKCS1+0x17c>)
 8000636:	1898      	adds	r0, r3, r2
 8000638:	4b1c      	ldr	r3, [pc, #112]	; (80006ac <RsaPKCS1+0x180>)
 800063a:	9300      	str	r3, [sp, #0]
 800063c:	4b1c      	ldr	r3, [pc, #112]	; (80006b0 <RsaPKCS1+0x184>)
 800063e:	4a1d      	ldr	r2, [pc, #116]	; (80006b4 <RsaPKCS1+0x188>)
 8000640:	4922      	ldr	r1, [pc, #136]	; (80006cc <RsaPKCS1+0x1a0>)
 8000642:	f001 fea1 	bl	8002388 <rsassaPkcs1v15Sign>
		HAL_TIM_Base_Stop(&htim6);
 8000646:	4817      	ldr	r0, [pc, #92]	; (80006a4 <RsaPKCS1+0x178>)
 8000648:	f005 fe1e 	bl	8006288 <HAL_TIM_Base_Stop>
		PrintTime();
 800064c:	f004 f9d4 	bl	80049f8 <PrintTime>
		HAL_TIM_Base_Start(&htim6);
 8000650:	4814      	ldr	r0, [pc, #80]	; (80006a4 <RsaPKCS1+0x178>)
 8000652:	f005 fdb1 	bl	80061b8 <HAL_TIM_Base_Start>
		rsassaPkcs1v15Verify(&publicKeys[i], &sha512HashAlgo, input, sig, sigLen);
 8000656:	79fa      	ldrb	r2, [r7, #7]
 8000658:	4613      	mov	r3, r2
 800065a:	005b      	lsls	r3, r3, #1
 800065c:	4413      	add	r3, r2
 800065e:	00db      	lsls	r3, r3, #3
 8000660:	4a16      	ldr	r2, [pc, #88]	; (80006bc <RsaPKCS1+0x190>)
 8000662:	1898      	adds	r0, r3, r2
 8000664:	4b11      	ldr	r3, [pc, #68]	; (80006ac <RsaPKCS1+0x180>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	9300      	str	r3, [sp, #0]
 800066a:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <RsaPKCS1+0x184>)
 800066c:	4a11      	ldr	r2, [pc, #68]	; (80006b4 <RsaPKCS1+0x188>)
 800066e:	4917      	ldr	r1, [pc, #92]	; (80006cc <RsaPKCS1+0x1a0>)
 8000670:	f001 ff5d 	bl	800252e <rsassaPkcs1v15Verify>
		HAL_TIM_Base_Stop(&htim6);
 8000674:	480b      	ldr	r0, [pc, #44]	; (80006a4 <RsaPKCS1+0x178>)
 8000676:	f005 fe07 	bl	8006288 <HAL_TIM_Base_Stop>
		PrintTime();
 800067a:	f004 f9bd 	bl	80049f8 <PrintTime>
	for ( i = 0; i < 3; i++ ) {
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	3301      	adds	r3, #1
 8000682:	71fb      	strb	r3, [r7, #7]
 8000684:	79fb      	ldrb	r3, [r7, #7]
 8000686:	2b02      	cmp	r3, #2
 8000688:	f67f af56 	bls.w	8000538 <RsaPKCS1+0xc>
	}
}
 800068c:	bf00      	nop
 800068e:	bf00      	nop
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	080099e0 	.word	0x080099e0
 800069c:	080099a4 	.word	0x080099a4
 80006a0:	08009994 	.word	0x08009994
 80006a4:	200015f8 	.word	0x200015f8
 80006a8:	20000400 	.word	0x20000400
 80006ac:	200015f0 	.word	0x200015f0
 80006b0:	200005f0 	.word	0x200005f0
 80006b4:	08009194 	.word	0x08009194
 80006b8:	080084b4 	.word	0x080084b4
 80006bc:	20000590 	.word	0x20000590
 80006c0:	080099b8 	.word	0x080099b8
 80006c4:	080084f4 	.word	0x080084f4
 80006c8:	080099cc 	.word	0x080099cc
 80006cc:	08008834 	.word	0x08008834

080006d0 <RsaCleanSig>:

void RsaCleanSig(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
	memset(sig, 0, sizeof(sig));
 80006d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80006d8:	2100      	movs	r1, #0
 80006da:	4804      	ldr	r0, [pc, #16]	; (80006ec <RsaCleanSig+0x1c>)
 80006dc:	f006 fb3e 	bl	8006d5c <memset>
	sigLen = 0;
 80006e0:	4b03      	ldr	r3, [pc, #12]	; (80006f0 <RsaCleanSig+0x20>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	200005f0 	.word	0x200005f0
 80006f0:	200015f0 	.word	0x200015f0

080006f4 <RsaKeysInit>:

void RsaKeysInit(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
	/*------------1024---------------*/
	mpiImport(&privateKeys[0].n, n1, sizeof(n1), MPI_FORMAT_BIG_ENDIAN);
 80006f8:	2301      	movs	r3, #1
 80006fa:	2240      	movs	r2, #64	; 0x40
 80006fc:	497d      	ldr	r1, [pc, #500]	; (80008f4 <RsaKeysInit+0x200>)
 80006fe:	487e      	ldr	r0, [pc, #504]	; (80008f8 <RsaKeysInit+0x204>)
 8000700:	f000 fbff 	bl	8000f02 <mpiImport>
	mpiImport(&privateKeys[0].e, e, sizeof(e), MPI_FORMAT_BIG_ENDIAN);
 8000704:	2301      	movs	r3, #1
 8000706:	2203      	movs	r2, #3
 8000708:	497c      	ldr	r1, [pc, #496]	; (80008fc <RsaKeysInit+0x208>)
 800070a:	487d      	ldr	r0, [pc, #500]	; (8000900 <RsaKeysInit+0x20c>)
 800070c:	f000 fbf9 	bl	8000f02 <mpiImport>
	mpiImport(&privateKeys[0].d, d1, sizeof(d1), MPI_FORMAT_BIG_ENDIAN);
 8000710:	2301      	movs	r3, #1
 8000712:	2240      	movs	r2, #64	; 0x40
 8000714:	497b      	ldr	r1, [pc, #492]	; (8000904 <RsaKeysInit+0x210>)
 8000716:	487c      	ldr	r0, [pc, #496]	; (8000908 <RsaKeysInit+0x214>)
 8000718:	f000 fbf3 	bl	8000f02 <mpiImport>
	mpiImport(&privateKeys[0].p, p1, sizeof(p1), MPI_FORMAT_BIG_ENDIAN);
 800071c:	2301      	movs	r3, #1
 800071e:	2220      	movs	r2, #32
 8000720:	497a      	ldr	r1, [pc, #488]	; (800090c <RsaKeysInit+0x218>)
 8000722:	487b      	ldr	r0, [pc, #492]	; (8000910 <RsaKeysInit+0x21c>)
 8000724:	f000 fbed 	bl	8000f02 <mpiImport>
	mpiImport(&privateKeys[0].q, q1, sizeof(q1), MPI_FORMAT_BIG_ENDIAN);
 8000728:	2301      	movs	r3, #1
 800072a:	2220      	movs	r2, #32
 800072c:	4979      	ldr	r1, [pc, #484]	; (8000914 <RsaKeysInit+0x220>)
 800072e:	487a      	ldr	r0, [pc, #488]	; (8000918 <RsaKeysInit+0x224>)
 8000730:	f000 fbe7 	bl	8000f02 <mpiImport>
	mpiImport(&privateKeys[0].dp, dp1, sizeof(dp1), MPI_FORMAT_BIG_ENDIAN);
 8000734:	2301      	movs	r3, #1
 8000736:	2220      	movs	r2, #32
 8000738:	4978      	ldr	r1, [pc, #480]	; (800091c <RsaKeysInit+0x228>)
 800073a:	4879      	ldr	r0, [pc, #484]	; (8000920 <RsaKeysInit+0x22c>)
 800073c:	f000 fbe1 	bl	8000f02 <mpiImport>
	mpiImport(&privateKeys[0].dq, dq1, sizeof(dq1), MPI_FORMAT_BIG_ENDIAN);
 8000740:	2301      	movs	r3, #1
 8000742:	2220      	movs	r2, #32
 8000744:	4977      	ldr	r1, [pc, #476]	; (8000924 <RsaKeysInit+0x230>)
 8000746:	4878      	ldr	r0, [pc, #480]	; (8000928 <RsaKeysInit+0x234>)
 8000748:	f000 fbdb 	bl	8000f02 <mpiImport>
	mpiImport(&privateKeys[0].qinv, qinv1, sizeof(qinv1), MPI_FORMAT_BIG_ENDIAN);
 800074c:	2301      	movs	r3, #1
 800074e:	2220      	movs	r2, #32
 8000750:	4976      	ldr	r1, [pc, #472]	; (800092c <RsaKeysInit+0x238>)
 8000752:	4877      	ldr	r0, [pc, #476]	; (8000930 <RsaKeysInit+0x23c>)
 8000754:	f000 fbd5 	bl	8000f02 <mpiImport>

	mpiImport(&publicKeys[0].n, n1, sizeof(n1), MPI_FORMAT_BIG_ENDIAN);
 8000758:	2301      	movs	r3, #1
 800075a:	2240      	movs	r2, #64	; 0x40
 800075c:	4965      	ldr	r1, [pc, #404]	; (80008f4 <RsaKeysInit+0x200>)
 800075e:	4875      	ldr	r0, [pc, #468]	; (8000934 <RsaKeysInit+0x240>)
 8000760:	f000 fbcf 	bl	8000f02 <mpiImport>
	mpiImport(&publicKeys[0].e, e, sizeof(e), MPI_FORMAT_BIG_ENDIAN);
 8000764:	2301      	movs	r3, #1
 8000766:	2203      	movs	r2, #3
 8000768:	4964      	ldr	r1, [pc, #400]	; (80008fc <RsaKeysInit+0x208>)
 800076a:	4873      	ldr	r0, [pc, #460]	; (8000938 <RsaKeysInit+0x244>)
 800076c:	f000 fbc9 	bl	8000f02 <mpiImport>

	/*------------2048---------------*/
	mpiImport(&privateKeys[1].n, n2, sizeof(n2), MPI_FORMAT_BIG_ENDIAN);
 8000770:	2301      	movs	r3, #1
 8000772:	2281      	movs	r2, #129	; 0x81
 8000774:	4971      	ldr	r1, [pc, #452]	; (800093c <RsaKeysInit+0x248>)
 8000776:	4872      	ldr	r0, [pc, #456]	; (8000940 <RsaKeysInit+0x24c>)
 8000778:	f000 fbc3 	bl	8000f02 <mpiImport>
	mpiImport(&privateKeys[1].e, e, sizeof(e), MPI_FORMAT_BIG_ENDIAN);
 800077c:	2301      	movs	r3, #1
 800077e:	2203      	movs	r2, #3
 8000780:	495e      	ldr	r1, [pc, #376]	; (80008fc <RsaKeysInit+0x208>)
 8000782:	4870      	ldr	r0, [pc, #448]	; (8000944 <RsaKeysInit+0x250>)
 8000784:	f000 fbbd 	bl	8000f02 <mpiImport>
	mpiImport(&privateKeys[1].d, d2, sizeof(d2), MPI_FORMAT_BIG_ENDIAN);
 8000788:	2301      	movs	r3, #1
 800078a:	2280      	movs	r2, #128	; 0x80
 800078c:	496e      	ldr	r1, [pc, #440]	; (8000948 <RsaKeysInit+0x254>)
 800078e:	486f      	ldr	r0, [pc, #444]	; (800094c <RsaKeysInit+0x258>)
 8000790:	f000 fbb7 	bl	8000f02 <mpiImport>
	mpiImport(&privateKeys[1].p, p2, sizeof(p2), MPI_FORMAT_BIG_ENDIAN);
 8000794:	2301      	movs	r3, #1
 8000796:	2241      	movs	r2, #65	; 0x41
 8000798:	496d      	ldr	r1, [pc, #436]	; (8000950 <RsaKeysInit+0x25c>)
 800079a:	486e      	ldr	r0, [pc, #440]	; (8000954 <RsaKeysInit+0x260>)
 800079c:	f000 fbb1 	bl	8000f02 <mpiImport>
	mpiImport(&privateKeys[1].q, q2, sizeof(q2), MPI_FORMAT_BIG_ENDIAN);
 80007a0:	2301      	movs	r3, #1
 80007a2:	2241      	movs	r2, #65	; 0x41
 80007a4:	496c      	ldr	r1, [pc, #432]	; (8000958 <RsaKeysInit+0x264>)
 80007a6:	486d      	ldr	r0, [pc, #436]	; (800095c <RsaKeysInit+0x268>)
 80007a8:	f000 fbab 	bl	8000f02 <mpiImport>
	mpiImport(&privateKeys[1].dp, dp2, sizeof(dp2), MPI_FORMAT_BIG_ENDIAN);
 80007ac:	2301      	movs	r3, #1
 80007ae:	2240      	movs	r2, #64	; 0x40
 80007b0:	496b      	ldr	r1, [pc, #428]	; (8000960 <RsaKeysInit+0x26c>)
 80007b2:	486c      	ldr	r0, [pc, #432]	; (8000964 <RsaKeysInit+0x270>)
 80007b4:	f000 fba5 	bl	8000f02 <mpiImport>
	mpiImport(&privateKeys[1].dq, dq2, sizeof(dq2), MPI_FORMAT_BIG_ENDIAN);
 80007b8:	2301      	movs	r3, #1
 80007ba:	2241      	movs	r2, #65	; 0x41
 80007bc:	496a      	ldr	r1, [pc, #424]	; (8000968 <RsaKeysInit+0x274>)
 80007be:	486b      	ldr	r0, [pc, #428]	; (800096c <RsaKeysInit+0x278>)
 80007c0:	f000 fb9f 	bl	8000f02 <mpiImport>
	mpiImport(&privateKeys[1].qinv, qinv2, sizeof(qinv2), MPI_FORMAT_BIG_ENDIAN);
 80007c4:	2301      	movs	r3, #1
 80007c6:	2240      	movs	r2, #64	; 0x40
 80007c8:	4969      	ldr	r1, [pc, #420]	; (8000970 <RsaKeysInit+0x27c>)
 80007ca:	486a      	ldr	r0, [pc, #424]	; (8000974 <RsaKeysInit+0x280>)
 80007cc:	f000 fb99 	bl	8000f02 <mpiImport>

	mpiImport(&publicKeys[1].n, n2, sizeof(n2), MPI_FORMAT_BIG_ENDIAN);
 80007d0:	2301      	movs	r3, #1
 80007d2:	2281      	movs	r2, #129	; 0x81
 80007d4:	4959      	ldr	r1, [pc, #356]	; (800093c <RsaKeysInit+0x248>)
 80007d6:	4868      	ldr	r0, [pc, #416]	; (8000978 <RsaKeysInit+0x284>)
 80007d8:	f000 fb93 	bl	8000f02 <mpiImport>
	mpiImport(&publicKeys[1].e, e, sizeof(e), MPI_FORMAT_BIG_ENDIAN);
 80007dc:	2301      	movs	r3, #1
 80007de:	2203      	movs	r2, #3
 80007e0:	4946      	ldr	r1, [pc, #280]	; (80008fc <RsaKeysInit+0x208>)
 80007e2:	4866      	ldr	r0, [pc, #408]	; (800097c <RsaKeysInit+0x288>)
 80007e4:	f000 fb8d 	bl	8000f02 <mpiImport>

	/*------------3072---------------*/
	mpiImport(&privateKeys[2].n, n3, sizeof(n3), MPI_FORMAT_BIG_ENDIAN);
 80007e8:	2301      	movs	r3, #1
 80007ea:	f240 1281 	movw	r2, #385	; 0x181
 80007ee:	4964      	ldr	r1, [pc, #400]	; (8000980 <RsaKeysInit+0x28c>)
 80007f0:	4864      	ldr	r0, [pc, #400]	; (8000984 <RsaKeysInit+0x290>)
 80007f2:	f000 fb86 	bl	8000f02 <mpiImport>
	mpiImport(&privateKeys[2].e, e, sizeof(e), MPI_FORMAT_BIG_ENDIAN);
 80007f6:	2301      	movs	r3, #1
 80007f8:	2203      	movs	r2, #3
 80007fa:	4940      	ldr	r1, [pc, #256]	; (80008fc <RsaKeysInit+0x208>)
 80007fc:	4862      	ldr	r0, [pc, #392]	; (8000988 <RsaKeysInit+0x294>)
 80007fe:	f000 fb80 	bl	8000f02 <mpiImport>
	mpiImport(&privateKeys[2].d, d3, sizeof(d3), MPI_FORMAT_BIG_ENDIAN);
 8000802:	2301      	movs	r3, #1
 8000804:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000808:	4960      	ldr	r1, [pc, #384]	; (800098c <RsaKeysInit+0x298>)
 800080a:	4861      	ldr	r0, [pc, #388]	; (8000990 <RsaKeysInit+0x29c>)
 800080c:	f000 fb79 	bl	8000f02 <mpiImport>
	mpiImport(&privateKeys[2].p, p3, sizeof(p3), MPI_FORMAT_BIG_ENDIAN);
 8000810:	2301      	movs	r3, #1
 8000812:	22c1      	movs	r2, #193	; 0xc1
 8000814:	495f      	ldr	r1, [pc, #380]	; (8000994 <RsaKeysInit+0x2a0>)
 8000816:	4860      	ldr	r0, [pc, #384]	; (8000998 <RsaKeysInit+0x2a4>)
 8000818:	f000 fb73 	bl	8000f02 <mpiImport>
	mpiImport(&privateKeys[2].q, q3, sizeof(q3), MPI_FORMAT_BIG_ENDIAN);
 800081c:	2301      	movs	r3, #1
 800081e:	22c1      	movs	r2, #193	; 0xc1
 8000820:	495e      	ldr	r1, [pc, #376]	; (800099c <RsaKeysInit+0x2a8>)
 8000822:	485f      	ldr	r0, [pc, #380]	; (80009a0 <RsaKeysInit+0x2ac>)
 8000824:	f000 fb6d 	bl	8000f02 <mpiImport>
	mpiImport(&privateKeys[2].dp, dp3, sizeof(dp3), MPI_FORMAT_BIG_ENDIAN);
 8000828:	2301      	movs	r3, #1
 800082a:	22c0      	movs	r2, #192	; 0xc0
 800082c:	495d      	ldr	r1, [pc, #372]	; (80009a4 <RsaKeysInit+0x2b0>)
 800082e:	485e      	ldr	r0, [pc, #376]	; (80009a8 <RsaKeysInit+0x2b4>)
 8000830:	f000 fb67 	bl	8000f02 <mpiImport>
	mpiImport(&privateKeys[2].dq, dq3, sizeof(dq3), MPI_FORMAT_BIG_ENDIAN);
 8000834:	2301      	movs	r3, #1
 8000836:	22c0      	movs	r2, #192	; 0xc0
 8000838:	495c      	ldr	r1, [pc, #368]	; (80009ac <RsaKeysInit+0x2b8>)
 800083a:	485d      	ldr	r0, [pc, #372]	; (80009b0 <RsaKeysInit+0x2bc>)
 800083c:	f000 fb61 	bl	8000f02 <mpiImport>
	mpiImport(&privateKeys[2].qinv, qinv3, sizeof(qinv3), MPI_FORMAT_BIG_ENDIAN);
 8000840:	2301      	movs	r3, #1
 8000842:	22c0      	movs	r2, #192	; 0xc0
 8000844:	495b      	ldr	r1, [pc, #364]	; (80009b4 <RsaKeysInit+0x2c0>)
 8000846:	485c      	ldr	r0, [pc, #368]	; (80009b8 <RsaKeysInit+0x2c4>)
 8000848:	f000 fb5b 	bl	8000f02 <mpiImport>

	mpiImport(&publicKeys[2].n, n3, sizeof(n3), MPI_FORMAT_BIG_ENDIAN);
 800084c:	2301      	movs	r3, #1
 800084e:	f240 1281 	movw	r2, #385	; 0x181
 8000852:	494b      	ldr	r1, [pc, #300]	; (8000980 <RsaKeysInit+0x28c>)
 8000854:	4859      	ldr	r0, [pc, #356]	; (80009bc <RsaKeysInit+0x2c8>)
 8000856:	f000 fb54 	bl	8000f02 <mpiImport>
	mpiImport(&publicKeys[2].e, e, sizeof(e), MPI_FORMAT_BIG_ENDIAN);
 800085a:	2301      	movs	r3, #1
 800085c:	2203      	movs	r2, #3
 800085e:	4927      	ldr	r1, [pc, #156]	; (80008fc <RsaKeysInit+0x208>)
 8000860:	4857      	ldr	r0, [pc, #348]	; (80009c0 <RsaKeysInit+0x2cc>)
 8000862:	f000 fb4e 	bl	8000f02 <mpiImport>

	/*------------4096---------------*/
	mpiImport(&privateKeys[3].n, n4, sizeof(n4), MPI_FORMAT_BIG_ENDIAN);
 8000866:	2301      	movs	r3, #1
 8000868:	f240 12ff 	movw	r2, #511	; 0x1ff
 800086c:	4955      	ldr	r1, [pc, #340]	; (80009c4 <RsaKeysInit+0x2d0>)
 800086e:	4856      	ldr	r0, [pc, #344]	; (80009c8 <RsaKeysInit+0x2d4>)
 8000870:	f000 fb47 	bl	8000f02 <mpiImport>
	mpiImport(&privateKeys[3].e, e, sizeof(e), MPI_FORMAT_BIG_ENDIAN);
 8000874:	2301      	movs	r3, #1
 8000876:	2203      	movs	r2, #3
 8000878:	4920      	ldr	r1, [pc, #128]	; (80008fc <RsaKeysInit+0x208>)
 800087a:	4854      	ldr	r0, [pc, #336]	; (80009cc <RsaKeysInit+0x2d8>)
 800087c:	f000 fb41 	bl	8000f02 <mpiImport>
	mpiImport(&privateKeys[3].d, d4, sizeof(d4), MPI_FORMAT_BIG_ENDIAN);
 8000880:	2301      	movs	r3, #1
 8000882:	f240 12ff 	movw	r2, #511	; 0x1ff
 8000886:	4952      	ldr	r1, [pc, #328]	; (80009d0 <RsaKeysInit+0x2dc>)
 8000888:	4852      	ldr	r0, [pc, #328]	; (80009d4 <RsaKeysInit+0x2e0>)
 800088a:	f000 fb3a 	bl	8000f02 <mpiImport>
	mpiImport(&privateKeys[3].p, p4, sizeof(p4), MPI_FORMAT_BIG_ENDIAN);
 800088e:	2301      	movs	r3, #1
 8000890:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000894:	4950      	ldr	r1, [pc, #320]	; (80009d8 <RsaKeysInit+0x2e4>)
 8000896:	4851      	ldr	r0, [pc, #324]	; (80009dc <RsaKeysInit+0x2e8>)
 8000898:	f000 fb33 	bl	8000f02 <mpiImport>
	mpiImport(&privateKeys[3].q, q4, sizeof(q4), MPI_FORMAT_BIG_ENDIAN);
 800089c:	2301      	movs	r3, #1
 800089e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008a2:	494f      	ldr	r1, [pc, #316]	; (80009e0 <RsaKeysInit+0x2ec>)
 80008a4:	484f      	ldr	r0, [pc, #316]	; (80009e4 <RsaKeysInit+0x2f0>)
 80008a6:	f000 fb2c 	bl	8000f02 <mpiImport>
	mpiImport(&privateKeys[3].dp, dp4, sizeof(dp4), MPI_FORMAT_BIG_ENDIAN);
 80008aa:	2301      	movs	r3, #1
 80008ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008b0:	494d      	ldr	r1, [pc, #308]	; (80009e8 <RsaKeysInit+0x2f4>)
 80008b2:	484e      	ldr	r0, [pc, #312]	; (80009ec <RsaKeysInit+0x2f8>)
 80008b4:	f000 fb25 	bl	8000f02 <mpiImport>
	mpiImport(&privateKeys[3].dq, dq4, sizeof(dq4), MPI_FORMAT_BIG_ENDIAN);
 80008b8:	2301      	movs	r3, #1
 80008ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008be:	494c      	ldr	r1, [pc, #304]	; (80009f0 <RsaKeysInit+0x2fc>)
 80008c0:	484c      	ldr	r0, [pc, #304]	; (80009f4 <RsaKeysInit+0x300>)
 80008c2:	f000 fb1e 	bl	8000f02 <mpiImport>
	mpiImport(&privateKeys[3].qinv, qinv4, sizeof(qinv4), MPI_FORMAT_BIG_ENDIAN);
 80008c6:	2301      	movs	r3, #1
 80008c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008cc:	494a      	ldr	r1, [pc, #296]	; (80009f8 <RsaKeysInit+0x304>)
 80008ce:	484b      	ldr	r0, [pc, #300]	; (80009fc <RsaKeysInit+0x308>)
 80008d0:	f000 fb17 	bl	8000f02 <mpiImport>

	mpiImport(&publicKeys[3].n, n4, sizeof(n4), MPI_FORMAT_BIG_ENDIAN);
 80008d4:	2301      	movs	r3, #1
 80008d6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80008da:	493a      	ldr	r1, [pc, #232]	; (80009c4 <RsaKeysInit+0x2d0>)
 80008dc:	4848      	ldr	r0, [pc, #288]	; (8000a00 <RsaKeysInit+0x30c>)
 80008de:	f000 fb10 	bl	8000f02 <mpiImport>
	mpiImport(&publicKeys[3].e, e, sizeof(e), MPI_FORMAT_BIG_ENDIAN);
 80008e2:	2301      	movs	r3, #1
 80008e4:	2203      	movs	r2, #3
 80008e6:	4905      	ldr	r1, [pc, #20]	; (80008fc <RsaKeysInit+0x208>)
 80008e8:	4846      	ldr	r0, [pc, #280]	; (8000a04 <RsaKeysInit+0x310>)
 80008ea:	f000 fb0a 	bl	8000f02 <mpiImport>
}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	0800702c 	.word	0x0800702c
 80008f8:	20000400 	.word	0x20000400
 80008fc:	08007028 	.word	0x08007028
 8000900:	2000040c 	.word	0x2000040c
 8000904:	0800706c 	.word	0x0800706c
 8000908:	20000418 	.word	0x20000418
 800090c:	080070ac 	.word	0x080070ac
 8000910:	20000424 	.word	0x20000424
 8000914:	080070cc 	.word	0x080070cc
 8000918:	20000430 	.word	0x20000430
 800091c:	080070ec 	.word	0x080070ec
 8000920:	2000043c 	.word	0x2000043c
 8000924:	0800710c 	.word	0x0800710c
 8000928:	20000448 	.word	0x20000448
 800092c:	0800712c 	.word	0x0800712c
 8000930:	20000454 	.word	0x20000454
 8000934:	20000590 	.word	0x20000590
 8000938:	2000059c 	.word	0x2000059c
 800093c:	0800714c 	.word	0x0800714c
 8000940:	20000464 	.word	0x20000464
 8000944:	20000470 	.word	0x20000470
 8000948:	080071d0 	.word	0x080071d0
 800094c:	2000047c 	.word	0x2000047c
 8000950:	08007250 	.word	0x08007250
 8000954:	20000488 	.word	0x20000488
 8000958:	08007294 	.word	0x08007294
 800095c:	20000494 	.word	0x20000494
 8000960:	080072d8 	.word	0x080072d8
 8000964:	200004a0 	.word	0x200004a0
 8000968:	08007318 	.word	0x08007318
 800096c:	200004ac 	.word	0x200004ac
 8000970:	0800735c 	.word	0x0800735c
 8000974:	200004b8 	.word	0x200004b8
 8000978:	200005a8 	.word	0x200005a8
 800097c:	200005b4 	.word	0x200005b4
 8000980:	0800739c 	.word	0x0800739c
 8000984:	200004c8 	.word	0x200004c8
 8000988:	200004d4 	.word	0x200004d4
 800098c:	08007520 	.word	0x08007520
 8000990:	200004e0 	.word	0x200004e0
 8000994:	080076a0 	.word	0x080076a0
 8000998:	200004ec 	.word	0x200004ec
 800099c:	08007764 	.word	0x08007764
 80009a0:	200004f8 	.word	0x200004f8
 80009a4:	08007828 	.word	0x08007828
 80009a8:	20000504 	.word	0x20000504
 80009ac:	080078e8 	.word	0x080078e8
 80009b0:	20000510 	.word	0x20000510
 80009b4:	080079a8 	.word	0x080079a8
 80009b8:	2000051c 	.word	0x2000051c
 80009bc:	200005c0 	.word	0x200005c0
 80009c0:	200005cc 	.word	0x200005cc
 80009c4:	08007a68 	.word	0x08007a68
 80009c8:	2000052c 	.word	0x2000052c
 80009cc:	20000538 	.word	0x20000538
 80009d0:	08007c68 	.word	0x08007c68
 80009d4:	20000544 	.word	0x20000544
 80009d8:	08007e68 	.word	0x08007e68
 80009dc:	20000550 	.word	0x20000550
 80009e0:	08007f68 	.word	0x08007f68
 80009e4:	2000055c 	.word	0x2000055c
 80009e8:	08008068 	.word	0x08008068
 80009ec:	20000568 	.word	0x20000568
 80009f0:	08008168 	.word	0x08008168
 80009f4:	20000574 	.word	0x20000574
 80009f8:	08008268 	.word	0x08008268
 80009fc:	20000580 	.word	0x20000580
 8000a00:	200005d8 	.word	0x200005d8
 8000a04:	200005e4 	.word	0x200005e4

08000a08 <RsaInit>:
void RsaInit(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
	RsaKeysInit();
 8000a0c:	f7ff fe72 	bl	80006f4 <RsaKeysInit>

	yarrowInit(&contextYarrow);
 8000a10:	4804      	ldr	r0, [pc, #16]	; (8000a24 <RsaInit+0x1c>)
 8000a12:	f004 f97f 	bl	8004d14 <yarrowInit>
	yarrowSeed(&contextYarrow, seed, sizeof(seed));
 8000a16:	2240      	movs	r2, #64	; 0x40
 8000a18:	4903      	ldr	r1, [pc, #12]	; (8000a28 <RsaInit+0x20>)
 8000a1a:	4802      	ldr	r0, [pc, #8]	; (8000a24 <RsaInit+0x1c>)
 8000a1c:	f004 f99f 	bl	8004d5e <yarrowSeed>
}
 8000a20:	bf00      	nop
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	200000d0 	.word	0x200000d0
 8000a28:	20000000 	.word	0x20000000

08000a2c <mpiInit>:
 * @brief Initialize a multiple precision integer
 * @param[in,out] r Pointer to the multiple precision integer to be initialized
 **/

void mpiInit(Mpi *r)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
   //Initialize structure
   r->sign = 1;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	2201      	movs	r2, #1
 8000a38:	601a      	str	r2, [r3, #0]
   r->size = 0;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	605a      	str	r2, [r3, #4]
   r->data = NULL;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	2200      	movs	r2, #0
 8000a44:	609a      	str	r2, [r3, #8]
}
 8000a46:	bf00      	nop
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr

08000a52 <mpiFree>:
 * @brief Release a multiple precision integer
 * @param[in,out] r Pointer to the multiple precision integer to be freed
 **/

void mpiFree(Mpi *r)
{
 8000a52:	b580      	push	{r7, lr}
 8000a54:	b082      	sub	sp, #8
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	6078      	str	r0, [r7, #4]
   //Any memory previously allocated?
   if(r->data != NULL)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	689b      	ldr	r3, [r3, #8]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d00d      	beq.n	8000a7e <mpiFree+0x2c>
   {
      //Erase contents before releasing memory
      osMemset(r->data, 0, r->size * MPI_INT_SIZE);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	6898      	ldr	r0, [r3, #8]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	009b      	lsls	r3, r3, #2
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	2100      	movs	r1, #0
 8000a70:	f006 f974 	bl	8006d5c <memset>
      cryptoFreeMem(r->data);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	689b      	ldr	r3, [r3, #8]
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f003 ff35 	bl	80048e8 <osFreeMem>
   }

   //Set size to zero
   r->size = 0;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2200      	movs	r2, #0
 8000a82:	605a      	str	r2, [r3, #4]
   r->data = NULL;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2200      	movs	r2, #0
 8000a88:	609a      	str	r2, [r3, #8]
}
 8000a8a:	bf00      	nop
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}

08000a92 <mpiGrow>:
 * @param[in] size Desired size in words
 * @return Error code
 **/

error_t mpiGrow(Mpi *r, uint_t size)
{
 8000a92:	b580      	push	{r7, lr}
 8000a94:	b084      	sub	sp, #16
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	6078      	str	r0, [r7, #4]
 8000a9a:	6039      	str	r1, [r7, #0]
   uint_t *data;

   //Ensure the parameter is valid
   size = MAX(size, 1);
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	2b01      	cmp	r3, #1
 8000aa0:	bf38      	it	cc
 8000aa2:	2301      	movcc	r3, #1
 8000aa4:	603b      	str	r3, [r7, #0]

   //Check the current size
   if(r->size >= size)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	683a      	ldr	r2, [r7, #0]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	d801      	bhi.n	8000ab4 <mpiGrow+0x22>
      return NO_ERROR;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	e02a      	b.n	8000b0a <mpiGrow+0x78>

   //Allocate a memory buffer
   data = cryptoAllocMem(size * MPI_INT_SIZE);
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	009b      	lsls	r3, r3, #2
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f003 ff07 	bl	80048cc <osAllocMem>
 8000abe:	60f8      	str	r0, [r7, #12]
   //Failed to allocate memory?
   if(data == NULL)
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d101      	bne.n	8000aca <mpiGrow+0x38>
      return ERROR_OUT_OF_MEMORY;
 8000ac6:	2364      	movs	r3, #100	; 0x64
 8000ac8:	e01f      	b.n	8000b0a <mpiGrow+0x78>

   //Clear buffer contents
   osMemset(data, 0, size * MPI_INT_SIZE);
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	461a      	mov	r2, r3
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	68f8      	ldr	r0, [r7, #12]
 8000ad4:	f006 f942 	bl	8006d5c <memset>

   //Any data to copy?
   if(r->size > 0)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d00d      	beq.n	8000afc <mpiGrow+0x6a>
   {
      //Copy original data
      osMemcpy(data, r->data, r->size * MPI_INT_SIZE);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	6899      	ldr	r1, [r3, #8]
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	009b      	lsls	r3, r3, #2
 8000aea:	461a      	mov	r2, r3
 8000aec:	68f8      	ldr	r0, [r7, #12]
 8000aee:	f006 f927 	bl	8006d40 <memcpy>
      //Free previously allocated memory
      cryptoFreeMem(r->data);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	689b      	ldr	r3, [r3, #8]
 8000af6:	4618      	mov	r0, r3
 8000af8:	f003 fef6 	bl	80048e8 <osFreeMem>
   }

   //Update the size of the multiple precision integer
   r->size = size;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	683a      	ldr	r2, [r7, #0]
 8000b00:	605a      	str	r2, [r3, #4]
   r->data = data;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	68fa      	ldr	r2, [r7, #12]
 8000b06:	609a      	str	r2, [r3, #8]

   //Successful operation
   return NO_ERROR;
 8000b08:	2300      	movs	r3, #0
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3710      	adds	r7, #16
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <mpiGetLength>:
 * @param[in] a Pointer to a multiple precision integer
 * @return The actual length in words
 **/

uint_t mpiGetLength(const Mpi *a)
{
 8000b12:	b480      	push	{r7}
 8000b14:	b085      	sub	sp, #20
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	6078      	str	r0, [r7, #4]
   int_t i;

   //Check whether the specified multiple precision integer is empty
   if(a->size == 0)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d101      	bne.n	8000b26 <mpiGetLength+0x14>
      return 0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	e016      	b.n	8000b54 <mpiGetLength+0x42>

   //Start from the most significant word
   for(i = a->size - 1; i >= 0; i--)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	3b01      	subs	r3, #1
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	e00a      	b.n	8000b46 <mpiGetLength+0x34>
   {
      //Loop as long as the current word is zero
      if(a->data[i] != 0)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	689a      	ldr	r2, [r3, #8]
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	009b      	lsls	r3, r3, #2
 8000b38:	4413      	add	r3, r2
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d106      	bne.n	8000b4e <mpiGetLength+0x3c>
   for(i = a->size - 1; i >= 0; i--)
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	3b01      	subs	r3, #1
 8000b44:	60fb      	str	r3, [r7, #12]
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	daf1      	bge.n	8000b30 <mpiGetLength+0x1e>
 8000b4c:	e000      	b.n	8000b50 <mpiGetLength+0x3e>
         break;
 8000b4e:	bf00      	nop
   }

   //Return the actual length
   return i + 1;
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	3301      	adds	r3, #1
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3714      	adds	r7, #20
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <mpiGetByteLength>:
 * @param[in] a Pointer to a multiple precision integer
 * @return The actual byte count
 **/

uint_t mpiGetByteLength(const Mpi *a)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
   uint_t n;
   uint32_t m;

   //Check whether the specified multiple precision integer is empty
   if(a->size == 0)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d101      	bne.n	8000b74 <mpiGetByteLength+0x14>
      return 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	e029      	b.n	8000bc8 <mpiGetByteLength+0x68>

   //Start from the most significant word
   for(n = a->size - 1; n > 0; n--)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	3b01      	subs	r3, #1
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	e00a      	b.n	8000b94 <mpiGetByteLength+0x34>
   {
      //Loop as long as the current word is zero
      if(a->data[n] != 0)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	689a      	ldr	r2, [r3, #8]
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	009b      	lsls	r3, r3, #2
 8000b86:	4413      	add	r3, r2
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d106      	bne.n	8000b9c <mpiGetByteLength+0x3c>
   for(n = a->size - 1; n > 0; n--)
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	3b01      	subs	r3, #1
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d1f1      	bne.n	8000b7e <mpiGetByteLength+0x1e>
 8000b9a:	e000      	b.n	8000b9e <mpiGetByteLength+0x3e>
         break;
 8000b9c:	bf00      	nop
   }

   //Get the current word
   m = a->data[n];
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	689a      	ldr	r2, [r3, #8]
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	4413      	add	r3, r2
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	60bb      	str	r3, [r7, #8]
   //Convert the length to a byte count
   n *= MPI_INT_SIZE;
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	009b      	lsls	r3, r3, #2
 8000bb0:	60fb      	str	r3, [r7, #12]

   //Adjust the byte count
   for(; m != 0; m >>= 8)
 8000bb2:	e005      	b.n	8000bc0 <mpiGetByteLength+0x60>
   {
      n++;
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	60fb      	str	r3, [r7, #12]
   for(; m != 0; m >>= 8)
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	0a1b      	lsrs	r3, r3, #8
 8000bbe:	60bb      	str	r3, [r7, #8]
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d1f6      	bne.n	8000bb4 <mpiGetByteLength+0x54>
   }

   //Return the actual length in bytes
   return n;
 8000bc6:	68fb      	ldr	r3, [r7, #12]
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3714      	adds	r7, #20
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <mpiGetBitLength>:
 * @param[in] a Pointer to a multiple precision integer
 * @return The actual bit count
 **/

uint_t mpiGetBitLength(const Mpi *a)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
   uint_t n;
   uint32_t m;

   //Check whether the specified multiple precision integer is empty
   if(a->size == 0)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d101      	bne.n	8000be8 <mpiGetBitLength+0x14>
      return 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	e029      	b.n	8000c3c <mpiGetBitLength+0x68>

   //Start from the most significant word
   for(n = a->size - 1; n > 0; n--)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	3b01      	subs	r3, #1
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	e00a      	b.n	8000c08 <mpiGetBitLength+0x34>
   {
      //Loop as long as the current word is zero
      if(a->data[n] != 0)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	689a      	ldr	r2, [r3, #8]
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	009b      	lsls	r3, r3, #2
 8000bfa:	4413      	add	r3, r2
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d106      	bne.n	8000c10 <mpiGetBitLength+0x3c>
   for(n = a->size - 1; n > 0; n--)
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	3b01      	subs	r3, #1
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d1f1      	bne.n	8000bf2 <mpiGetBitLength+0x1e>
 8000c0e:	e000      	b.n	8000c12 <mpiGetBitLength+0x3e>
         break;
 8000c10:	bf00      	nop
   }

   //Get the current word
   m = a->data[n];
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	689a      	ldr	r2, [r3, #8]
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	009b      	lsls	r3, r3, #2
 8000c1a:	4413      	add	r3, r2
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	60bb      	str	r3, [r7, #8]
   //Convert the length to a bit count
   n *= MPI_INT_SIZE * 8;
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	015b      	lsls	r3, r3, #5
 8000c24:	60fb      	str	r3, [r7, #12]

   //Adjust the bit count
   for(; m != 0; m >>= 1)
 8000c26:	e005      	b.n	8000c34 <mpiGetBitLength+0x60>
   {
      n++;
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	60fb      	str	r3, [r7, #12]
   for(; m != 0; m >>= 1)
 8000c2e:	68bb      	ldr	r3, [r7, #8]
 8000c30:	085b      	lsrs	r3, r3, #1
 8000c32:	60bb      	str	r3, [r7, #8]
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d1f6      	bne.n	8000c28 <mpiGetBitLength+0x54>
   }

   //Return the actual length in bits
   return n;
 8000c3a:	68fb      	ldr	r3, [r7, #12]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3714      	adds	r7, #20
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr

08000c48 <mpiGetBitValue>:
 * @param[in] index Position where to read the bit
 * @return The actual bit value
 **/

uint_t mpiGetBitValue(const Mpi *a, uint_t index)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b085      	sub	sp, #20
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	6039      	str	r1, [r7, #0]
   uint_t n1;
   uint_t n2;

   //Retrieve the position of the bit to be read
   n1 = index / (MPI_INT_SIZE * 8);
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	095b      	lsrs	r3, r3, #5
 8000c56:	60fb      	str	r3, [r7, #12]
   n2 = index % (MPI_INT_SIZE * 8);
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	f003 031f 	and.w	r3, r3, #31
 8000c5e:	60bb      	str	r3, [r7, #8]

   //Index out of range?
   if(n1 >= a->size)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	68fa      	ldr	r2, [r7, #12]
 8000c66:	429a      	cmp	r2, r3
 8000c68:	d301      	bcc.n	8000c6e <mpiGetBitValue+0x26>
      return 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	e00a      	b.n	8000c84 <mpiGetBitValue+0x3c>

   //Return the actual bit value
   return (a->data[n1] >> n2) & 0x01;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	689a      	ldr	r2, [r3, #8]
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	4413      	add	r3, r2
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	68bb      	ldr	r3, [r7, #8]
 8000c7c:	fa22 f303 	lsr.w	r3, r2, r3
 8000c80:	f003 0301 	and.w	r3, r3, #1
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3714      	adds	r7, #20
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <mpiComp>:
 * @param[in] b The second multiple precision integer to be compared
 * @return Comparison result
 **/

int_t mpiComp(const Mpi *a, const Mpi *b)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	6039      	str	r1, [r7, #0]
   uint_t m;
   uint_t n;

   //Determine the actual length of A and B
   m = mpiGetLength(a);
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f7ff ff39 	bl	8000b12 <mpiGetLength>
 8000ca0:	60b8      	str	r0, [r7, #8]
   n = mpiGetLength(b);
 8000ca2:	6838      	ldr	r0, [r7, #0]
 8000ca4:	f7ff ff35 	bl	8000b12 <mpiGetLength>
 8000ca8:	60f8      	str	r0, [r7, #12]

   //Compare lengths
   if(!m && !n)
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d104      	bne.n	8000cba <mpiComp+0x2a>
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d101      	bne.n	8000cba <mpiComp+0x2a>
      return 0;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e04c      	b.n	8000d54 <mpiComp+0xc4>
   else if(m > n)
 8000cba:	68ba      	ldr	r2, [r7, #8]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	429a      	cmp	r2, r3
 8000cc0:	d902      	bls.n	8000cc8 <mpiComp+0x38>
      return a->sign;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	e045      	b.n	8000d54 <mpiComp+0xc4>
   else if(m < n)
 8000cc8:	68ba      	ldr	r2, [r7, #8]
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	d203      	bcs.n	8000cd8 <mpiComp+0x48>
      return -b->sign;
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	425b      	negs	r3, r3
 8000cd6:	e03d      	b.n	8000d54 <mpiComp+0xc4>

   //Compare signs
   if(a->sign > 0 && b->sign < 0)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	dd05      	ble.n	8000cec <mpiComp+0x5c>
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	da01      	bge.n	8000cec <mpiComp+0x5c>
      return 1;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	e033      	b.n	8000d54 <mpiComp+0xc4>
   else if(a->sign < 0 && b->sign > 0)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	da29      	bge.n	8000d48 <mpiComp+0xb8>
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	dd25      	ble.n	8000d48 <mpiComp+0xb8>
      return -1;
 8000cfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d00:	e028      	b.n	8000d54 <mpiComp+0xc4>

   //Then compare values
   while(n--)
   {
      if(a->data[n] > b->data[n])
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	689a      	ldr	r2, [r3, #8]
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	4413      	add	r3, r2
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	6899      	ldr	r1, [r3, #8]
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	440b      	add	r3, r1
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	429a      	cmp	r2, r3
 8000d1c:	d902      	bls.n	8000d24 <mpiComp+0x94>
         return a->sign;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	e017      	b.n	8000d54 <mpiComp+0xc4>
      else if(a->data[n] < b->data[n])
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	689a      	ldr	r2, [r3, #8]
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	4413      	add	r3, r2
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	6899      	ldr	r1, [r3, #8]
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	440b      	add	r3, r1
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d203      	bcs.n	8000d48 <mpiComp+0xb8>
         return -a->sign;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	425b      	negs	r3, r3
 8000d46:	e005      	b.n	8000d54 <mpiComp+0xc4>
   while(n--)
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	1e5a      	subs	r2, r3, #1
 8000d4c:	60fa      	str	r2, [r7, #12]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d1d7      	bne.n	8000d02 <mpiComp+0x72>
   }

   //Multiple precision integers are equals
   return 0;
 8000d52:	2300      	movs	r3, #0
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3710      	adds	r7, #16
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <mpiCompInt>:
 * @param[in] b Integer to be compared
 * @return Comparison result
 **/

int_t mpiCompInt(const Mpi *a, int_t b)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	6039      	str	r1, [r7, #0]
   uint_t value;
   Mpi t;

   //Initialize a temporary multiple precision integer
   value = (b >= 0) ? b : -b;
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	bfb8      	it	lt
 8000d6c:	425b      	neglt	r3, r3
 8000d6e:	617b      	str	r3, [r7, #20]
   t.sign = (b >= 0) ? 1 : -1;
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	db01      	blt.n	8000d7a <mpiCompInt+0x1e>
 8000d76:	2301      	movs	r3, #1
 8000d78:	e001      	b.n	8000d7e <mpiCompInt+0x22>
 8000d7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d7e:	60bb      	str	r3, [r7, #8]
   t.size = 1;
 8000d80:	2301      	movs	r3, #1
 8000d82:	60fb      	str	r3, [r7, #12]
   t.data = &value;
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	613b      	str	r3, [r7, #16]

   //Return comparison result
   return mpiComp(a, &t);
 8000d8a:	f107 0308 	add.w	r3, r7, #8
 8000d8e:	4619      	mov	r1, r3
 8000d90:	6878      	ldr	r0, [r7, #4]
 8000d92:	f7ff ff7d 	bl	8000c90 <mpiComp>
 8000d96:	4603      	mov	r3, r0
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3718      	adds	r7, #24
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <mpiCompAbs>:
 * @param[in] b The second multiple precision integer to be compared
 * @return Comparison result
 **/

int_t mpiCompAbs(const Mpi *a, const Mpi *b)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	6039      	str	r1, [r7, #0]
   uint_t m;
   uint_t n;

   //Determine the actual length of A and B
   m = mpiGetLength(a);
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	f7ff feb1 	bl	8000b12 <mpiGetLength>
 8000db0:	60b8      	str	r0, [r7, #8]
   n = mpiGetLength(b);
 8000db2:	6838      	ldr	r0, [r7, #0]
 8000db4:	f7ff fead 	bl	8000b12 <mpiGetLength>
 8000db8:	60f8      	str	r0, [r7, #12]

   //Compare lengths
   if(!m && !n)
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d104      	bne.n	8000dca <mpiCompAbs+0x2a>
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d101      	bne.n	8000dca <mpiCompAbs+0x2a>
      return 0;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	e033      	b.n	8000e32 <mpiCompAbs+0x92>
   else if(m > n)
 8000dca:	68ba      	ldr	r2, [r7, #8]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	d901      	bls.n	8000dd6 <mpiCompAbs+0x36>
      return 1;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e02d      	b.n	8000e32 <mpiCompAbs+0x92>
   else if(m < n)
 8000dd6:	68ba      	ldr	r2, [r7, #8]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	429a      	cmp	r2, r3
 8000ddc:	d223      	bcs.n	8000e26 <mpiCompAbs+0x86>
      return -1;
 8000dde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000de2:	e026      	b.n	8000e32 <mpiCompAbs+0x92>

   //Then compare values
   while(n--)
   {
      if(a->data[n] > b->data[n])
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	689a      	ldr	r2, [r3, #8]
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	4413      	add	r3, r2
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	6899      	ldr	r1, [r3, #8]
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	440b      	add	r3, r1
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d901      	bls.n	8000e04 <mpiCompAbs+0x64>
         return 1;
 8000e00:	2301      	movs	r3, #1
 8000e02:	e016      	b.n	8000e32 <mpiCompAbs+0x92>
      else if(a->data[n] < b->data[n])
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	689a      	ldr	r2, [r3, #8]
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	4413      	add	r3, r2
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	6899      	ldr	r1, [r3, #8]
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	440b      	add	r3, r1
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d202      	bcs.n	8000e26 <mpiCompAbs+0x86>
         return -1;
 8000e20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e24:	e005      	b.n	8000e32 <mpiCompAbs+0x92>
   while(n--)
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	1e5a      	subs	r2, r3, #1
 8000e2a:	60fa      	str	r2, [r7, #12]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d1d9      	bne.n	8000de4 <mpiCompAbs+0x44>
   }

   //Operands are equals
   return 0;
 8000e30:	2300      	movs	r3, #0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <mpiCopy>:
 * @param[in] a Pointer to a multiple precision integer (source)
 * @return Error code
 **/

error_t mpiCopy(Mpi *r, const Mpi *a)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b084      	sub	sp, #16
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
 8000e42:	6039      	str	r1, [r7, #0]
   error_t error;
   uint_t n;

   //R and A are the same instance?
   if(r == a)
 8000e44:	687a      	ldr	r2, [r7, #4]
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d101      	bne.n	8000e50 <mpiCopy+0x16>
      return NO_ERROR;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	e025      	b.n	8000e9c <mpiCopy+0x62>

   //Determine the actual length of A
   n = mpiGetLength(a);
 8000e50:	6838      	ldr	r0, [r7, #0]
 8000e52:	f7ff fe5e 	bl	8000b12 <mpiGetLength>
 8000e56:	60f8      	str	r0, [r7, #12]

   //Ajust the size of the destination operand
   error = mpiGrow(r, n);
 8000e58:	68f9      	ldr	r1, [r7, #12]
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f7ff fe19 	bl	8000a92 <mpiGrow>
 8000e60:	4603      	mov	r3, r0
 8000e62:	817b      	strh	r3, [r7, #10]
   //Any error to report?
   if(error)
 8000e64:	897b      	ldrh	r3, [r7, #10]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <mpiCopy+0x34>
      return error;
 8000e6a:	897b      	ldrh	r3, [r7, #10]
 8000e6c:	e016      	b.n	8000e9c <mpiCopy+0x62>

   //Clear the contents of the multiple precision integer
   osMemset(r->data, 0, r->size * MPI_INT_SIZE);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6898      	ldr	r0, [r3, #8]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	461a      	mov	r2, r3
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	f005 ff6e 	bl	8006d5c <memset>
   //Let R = A
   osMemcpy(r->data, a->data, n * MPI_INT_SIZE);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6898      	ldr	r0, [r3, #8]
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	6899      	ldr	r1, [r3, #8]
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	f005 ff57 	bl	8006d40 <memcpy>
   //Set the sign of R
   r->sign = a->sign;
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	601a      	str	r2, [r3, #0]

   //Successful operation
   return NO_ERROR;
 8000e9a:	2300      	movs	r3, #0
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3710      	adds	r7, #16
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <mpiSetValue>:
 * @param[in] a Value to be assigned to the multiple precision integer
 * @return Error code
 **/

error_t mpiSetValue(Mpi *r, int_t a)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	6039      	str	r1, [r7, #0]
   error_t error;

   //Ajust the size of the destination operand
   error = mpiGrow(r, 1);
 8000eae:	2101      	movs	r1, #1
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f7ff fdee 	bl	8000a92 <mpiGrow>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	81fb      	strh	r3, [r7, #14]
   //Failed to adjust the size?
   if(error)
 8000eba:	89fb      	ldrh	r3, [r7, #14]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <mpiSetValue+0x20>
      return error;
 8000ec0:	89fb      	ldrh	r3, [r7, #14]
 8000ec2:	e01a      	b.n	8000efa <mpiSetValue+0x56>

   //Clear the contents of the multiple precision integer
   osMemset(r->data, 0, r->size * MPI_INT_SIZE);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6898      	ldr	r0, [r3, #8]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	461a      	mov	r2, r3
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	f005 ff43 	bl	8006d5c <memset>
   //Set the value or R
   r->data[0] = (a >= 0) ? a : -a;
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000edc:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	689b      	ldr	r3, [r3, #8]
 8000ee4:	601a      	str	r2, [r3, #0]
   //Set the sign of R
   r->sign = (a >= 0) ? 1 : -1;
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	db01      	blt.n	8000ef0 <mpiSetValue+0x4c>
 8000eec:	2201      	movs	r2, #1
 8000eee:	e001      	b.n	8000ef4 <mpiSetValue+0x50>
 8000ef0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	601a      	str	r2, [r3, #0]

   //Successful operation
   return NO_ERROR;
 8000ef8:	2300      	movs	r3, #0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <mpiImport>:
 * @param[in] format Input format
 * @return Error code
 **/

error_t mpiImport(Mpi *r, const uint8_t *data, uint_t length, MpiFormat format)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b086      	sub	sp, #24
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	60f8      	str	r0, [r7, #12]
 8000f0a:	60b9      	str	r1, [r7, #8]
 8000f0c:	607a      	str	r2, [r7, #4]
 8000f0e:	70fb      	strb	r3, [r7, #3]
   error_t error;
   uint_t i;

   //Check input format
   if(format == MPI_FORMAT_LITTLE_ENDIAN)
 8000f10:	78fb      	ldrb	r3, [r7, #3]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d14d      	bne.n	8000fb2 <mpiImport+0xb0>
   {
      //Skip trailing zeroes
      while(length > 0 && data[length - 1] == 0)
 8000f16:	e002      	b.n	8000f1e <mpiImport+0x1c>
      {
         length--;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	3b01      	subs	r3, #1
 8000f1c:	607b      	str	r3, [r7, #4]
      while(length > 0 && data[length - 1] == 0)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d006      	beq.n	8000f32 <mpiImport+0x30>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	3b01      	subs	r3, #1
 8000f28:	68ba      	ldr	r2, [r7, #8]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d0f2      	beq.n	8000f18 <mpiImport+0x16>
      }

      //Ajust the size of the multiple precision integer
      error = mpiGrow(r, (length + MPI_INT_SIZE - 1) / MPI_INT_SIZE);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	3303      	adds	r3, #3
 8000f36:	089b      	lsrs	r3, r3, #2
 8000f38:	4619      	mov	r1, r3
 8000f3a:	68f8      	ldr	r0, [r7, #12]
 8000f3c:	f7ff fda9 	bl	8000a92 <mpiGrow>
 8000f40:	4603      	mov	r3, r0
 8000f42:	82fb      	strh	r3, [r7, #22]

      //Check status code
      if(!error)
 8000f44:	8afb      	ldrh	r3, [r7, #22]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	f040 808a 	bne.w	8001060 <mpiImport+0x15e>
      {
         //Clear the contents of the multiple precision integer
         osMemset(r->data, 0, r->size * MPI_INT_SIZE);
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	6898      	ldr	r0, [r3, #8]
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	461a      	mov	r2, r3
 8000f58:	2100      	movs	r1, #0
 8000f5a:	f005 feff 	bl	8006d5c <memset>
         //Set sign
         r->sign = 1;
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	2201      	movs	r2, #1
 8000f62:	601a      	str	r2, [r3, #0]

         //Import data
         for(i = 0; i < length; i++, data++)
 8000f64:	2300      	movs	r3, #0
 8000f66:	613b      	str	r3, [r7, #16]
 8000f68:	e01e      	b.n	8000fa8 <mpiImport+0xa6>
         {
            r->data[i / MPI_INT_SIZE] |= *data << ((i % MPI_INT_SIZE) * 8);
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	689a      	ldr	r2, [r3, #8]
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	f023 0303 	bic.w	r3, r3, #3
 8000f74:	4413      	add	r3, r2
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	f003 0303 	and.w	r3, r3, #3
 8000f84:	00db      	lsls	r3, r3, #3
 8000f86:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	6899      	ldr	r1, [r3, #8]
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	f023 0303 	bic.w	r3, r3, #3
 8000f96:	440b      	add	r3, r1
 8000f98:	4302      	orrs	r2, r0
 8000f9a:	601a      	str	r2, [r3, #0]
         for(i = 0; i < length; i++, data++)
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	613b      	str	r3, [r7, #16]
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	60bb      	str	r3, [r7, #8]
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d3dc      	bcc.n	8000f6a <mpiImport+0x68>
 8000fb0:	e056      	b.n	8001060 <mpiImport+0x15e>
         }
      }
   }
   else if(format == MPI_FORMAT_BIG_ENDIAN)
 8000fb2:	78fb      	ldrb	r3, [r7, #3]
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d151      	bne.n	800105c <mpiImport+0x15a>
   {
      //Skip leading zeroes
      while(length > 1 && *data == 0)
 8000fb8:	e005      	b.n	8000fc6 <mpiImport+0xc4>
      {
         data++;
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	60bb      	str	r3, [r7, #8]
         length--;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	607b      	str	r3, [r7, #4]
      while(length > 1 && *data == 0)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d903      	bls.n	8000fd4 <mpiImport+0xd2>
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d0f2      	beq.n	8000fba <mpiImport+0xb8>
      }

      //Ajust the size of the multiple precision integer
      error = mpiGrow(r, (length + MPI_INT_SIZE - 1) / MPI_INT_SIZE);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3303      	adds	r3, #3
 8000fd8:	089b      	lsrs	r3, r3, #2
 8000fda:	4619      	mov	r1, r3
 8000fdc:	68f8      	ldr	r0, [r7, #12]
 8000fde:	f7ff fd58 	bl	8000a92 <mpiGrow>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	82fb      	strh	r3, [r7, #22]

      //Check status code
      if(!error)
 8000fe6:	8afb      	ldrh	r3, [r7, #22]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d139      	bne.n	8001060 <mpiImport+0x15e>
      {
         //Clear the contents of the multiple precision integer
         osMemset(r->data, 0, r->size * MPI_INT_SIZE);
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	6898      	ldr	r0, [r3, #8]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	f005 feaf 	bl	8006d5c <memset>
         //Set sign
         r->sign = 1;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	2201      	movs	r2, #1
 8001002:	601a      	str	r2, [r3, #0]

         //Start from the least significant byte
         data += length - 1;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3b01      	subs	r3, #1
 8001008:	68ba      	ldr	r2, [r7, #8]
 800100a:	4413      	add	r3, r2
 800100c:	60bb      	str	r3, [r7, #8]

         //Import data
         for(i = 0; i < length; i++, data--)
 800100e:	2300      	movs	r3, #0
 8001010:	613b      	str	r3, [r7, #16]
 8001012:	e01e      	b.n	8001052 <mpiImport+0x150>
         {
            r->data[i / MPI_INT_SIZE] |= *data << ((i % MPI_INT_SIZE) * 8);
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	689a      	ldr	r2, [r3, #8]
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	f023 0303 	bic.w	r3, r3, #3
 800101e:	4413      	add	r3, r2
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	4619      	mov	r1, r3
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	f003 0303 	and.w	r3, r3, #3
 800102e:	00db      	lsls	r3, r3, #3
 8001030:	fa01 f303 	lsl.w	r3, r1, r3
 8001034:	4618      	mov	r0, r3
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	6899      	ldr	r1, [r3, #8]
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	f023 0303 	bic.w	r3, r3, #3
 8001040:	440b      	add	r3, r1
 8001042:	4302      	orrs	r2, r0
 8001044:	601a      	str	r2, [r3, #0]
         for(i = 0; i < length; i++, data--)
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	3301      	adds	r3, #1
 800104a:	613b      	str	r3, [r7, #16]
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	3b01      	subs	r3, #1
 8001050:	60bb      	str	r3, [r7, #8]
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	429a      	cmp	r2, r3
 8001058:	d3dc      	bcc.n	8001014 <mpiImport+0x112>
 800105a:	e001      	b.n	8001060 <mpiImport+0x15e>
      }
   }
   else
   {
      //Report an error
      error = ERROR_INVALID_PARAMETER;
 800105c:	2302      	movs	r3, #2
 800105e:	82fb      	strh	r3, [r7, #22]
   }

   //Return status code
   return error;
 8001060:	8afb      	ldrh	r3, [r7, #22]
}
 8001062:	4618      	mov	r0, r3
 8001064:	3718      	adds	r7, #24
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <mpiExport>:
 * @param[in] format Output format
 * @return Error code
 **/

error_t mpiExport(const Mpi *a, uint8_t *data, uint_t length, MpiFormat format)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b088      	sub	sp, #32
 800106e:	af00      	add	r7, sp, #0
 8001070:	60f8      	str	r0, [r7, #12]
 8001072:	60b9      	str	r1, [r7, #8]
 8001074:	607a      	str	r2, [r7, #4]
 8001076:	70fb      	strb	r3, [r7, #3]
   uint_t i;
   uint_t n;
   error_t error;

   //Initialize status code
   error = NO_ERROR;
 8001078:	2300      	movs	r3, #0
 800107a:	837b      	strh	r3, [r7, #26]

   //Check input format
   if(format == MPI_FORMAT_LITTLE_ENDIAN)
 800107c:	78fb      	ldrb	r3, [r7, #3]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d12d      	bne.n	80010de <mpiExport+0x74>
   {
      //Get the actual length in bytes
      n = mpiGetByteLength(a);
 8001082:	68f8      	ldr	r0, [r7, #12]
 8001084:	f7ff fd6c 	bl	8000b60 <mpiGetByteLength>
 8001088:	6178      	str	r0, [r7, #20]

      //Make sure the output buffer is large enough
      if(n <= length)
 800108a:	697a      	ldr	r2, [r7, #20]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	429a      	cmp	r2, r3
 8001090:	d822      	bhi.n	80010d8 <mpiExport+0x6e>
      {
         //Clear output buffer
         osMemset(data, 0, length);
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	2100      	movs	r1, #0
 8001096:	68b8      	ldr	r0, [r7, #8]
 8001098:	f005 fe60 	bl	8006d5c <memset>

         //Export data
         for(i = 0; i < n; i++, data++)
 800109c:	2300      	movs	r3, #0
 800109e:	61fb      	str	r3, [r7, #28]
 80010a0:	e015      	b.n	80010ce <mpiExport+0x64>
         {
            *data = a->data[i / MPI_INT_SIZE] >> ((i % MPI_INT_SIZE) * 8);
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	689a      	ldr	r2, [r3, #8]
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	f023 0303 	bic.w	r3, r3, #3
 80010ac:	4413      	add	r3, r2
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	f003 0303 	and.w	r3, r3, #3
 80010b6:	00db      	lsls	r3, r3, #3
 80010b8:	fa22 f303 	lsr.w	r3, r2, r3
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	701a      	strb	r2, [r3, #0]
         for(i = 0; i < n; i++, data++)
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	3301      	adds	r3, #1
 80010c6:	61fb      	str	r3, [r7, #28]
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	3301      	adds	r3, #1
 80010cc:	60bb      	str	r3, [r7, #8]
 80010ce:	69fa      	ldr	r2, [r7, #28]
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	429a      	cmp	r2, r3
 80010d4:	d3e5      	bcc.n	80010a2 <mpiExport+0x38>
 80010d6:	e03a      	b.n	800114e <mpiExport+0xe4>
         }
      }
      else
      {
         //Report an error
         error = ERROR_INVALID_LENGTH;
 80010d8:	23ec      	movs	r3, #236	; 0xec
 80010da:	837b      	strh	r3, [r7, #26]
 80010dc:	e037      	b.n	800114e <mpiExport+0xe4>
      }
   }
   else if(format == MPI_FORMAT_BIG_ENDIAN)
 80010de:	78fb      	ldrb	r3, [r7, #3]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d132      	bne.n	800114a <mpiExport+0xe0>
   {
      //Get the actual length in bytes
      n = mpiGetByteLength(a);
 80010e4:	68f8      	ldr	r0, [r7, #12]
 80010e6:	f7ff fd3b 	bl	8000b60 <mpiGetByteLength>
 80010ea:	6178      	str	r0, [r7, #20]

      //Make sure the output buffer is large enough
      if(n <= length)
 80010ec:	697a      	ldr	r2, [r7, #20]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d827      	bhi.n	8001144 <mpiExport+0xda>
      {
         //Clear output buffer
         osMemset(data, 0, length);
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	2100      	movs	r1, #0
 80010f8:	68b8      	ldr	r0, [r7, #8]
 80010fa:	f005 fe2f 	bl	8006d5c <memset>

         //Point to the least significant word
         data += length - 1;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3b01      	subs	r3, #1
 8001102:	68ba      	ldr	r2, [r7, #8]
 8001104:	4413      	add	r3, r2
 8001106:	60bb      	str	r3, [r7, #8]

         //Export data
         for(i = 0; i < n; i++, data--)
 8001108:	2300      	movs	r3, #0
 800110a:	61fb      	str	r3, [r7, #28]
 800110c:	e015      	b.n	800113a <mpiExport+0xd0>
         {
            *data = a->data[i / MPI_INT_SIZE] >> ((i % MPI_INT_SIZE) * 8);
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	689a      	ldr	r2, [r3, #8]
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	f023 0303 	bic.w	r3, r3, #3
 8001118:	4413      	add	r3, r2
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	f003 0303 	and.w	r3, r3, #3
 8001122:	00db      	lsls	r3, r3, #3
 8001124:	fa22 f303 	lsr.w	r3, r2, r3
 8001128:	b2da      	uxtb	r2, r3
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	701a      	strb	r2, [r3, #0]
         for(i = 0; i < n; i++, data--)
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	3301      	adds	r3, #1
 8001132:	61fb      	str	r3, [r7, #28]
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	3b01      	subs	r3, #1
 8001138:	60bb      	str	r3, [r7, #8]
 800113a:	69fa      	ldr	r2, [r7, #28]
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	429a      	cmp	r2, r3
 8001140:	d3e5      	bcc.n	800110e <mpiExport+0xa4>
 8001142:	e004      	b.n	800114e <mpiExport+0xe4>
         }
      }
      else
      {
         //Report an error
         error = ERROR_INVALID_LENGTH;
 8001144:	23ec      	movs	r3, #236	; 0xec
 8001146:	837b      	strh	r3, [r7, #26]
 8001148:	e001      	b.n	800114e <mpiExport+0xe4>
      }
   }
   else
   {
      //Report an error
      error = ERROR_INVALID_PARAMETER;
 800114a:	2302      	movs	r3, #2
 800114c:	837b      	strh	r3, [r7, #26]
   }

   //Return status code
   return error;
 800114e:	8b7b      	ldrh	r3, [r7, #26]
}
 8001150:	4618      	mov	r0, r3
 8001152:	3720      	adds	r7, #32
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <mpiAdd>:
 * @param[in] b Second operand B
 * @return Error code
 **/

error_t mpiAdd(Mpi *r, const Mpi *a, const Mpi *b)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b086      	sub	sp, #24
 800115c:	af00      	add	r7, sp, #0
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	60b9      	str	r1, [r7, #8]
 8001162:	607a      	str	r2, [r7, #4]
   error_t error;
   int_t sign;

   //Retrieve the sign of A
   sign = a->sign;
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	613b      	str	r3, [r7, #16]

   //Both operands have the same sign?
   if(a->sign == b->sign)
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	429a      	cmp	r2, r3
 8001174:	d10a      	bne.n	800118c <mpiAdd+0x34>
   {
      //Perform addition
      error = mpiAddAbs(r, a, b);
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	68b9      	ldr	r1, [r7, #8]
 800117a:	68f8      	ldr	r0, [r7, #12]
 800117c:	f000 f864 	bl	8001248 <mpiAddAbs>
 8001180:	4603      	mov	r3, r0
 8001182:	82fb      	strh	r3, [r7, #22]
      //Set the sign of the resulting number
      r->sign = sign;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	e01c      	b.n	80011c6 <mpiAdd+0x6e>
   }
   //Operands have different signs?
   else
   {
      //Compare the absolute value of A and B
      if(mpiCompAbs(a, b) >= 0)
 800118c:	6879      	ldr	r1, [r7, #4]
 800118e:	68b8      	ldr	r0, [r7, #8]
 8001190:	f7ff fe06 	bl	8000da0 <mpiCompAbs>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	db0a      	blt.n	80011b0 <mpiAdd+0x58>
      {
         //Perform subtraction
         error = mpiSubAbs(r, a, b);
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	68b9      	ldr	r1, [r7, #8]
 800119e:	68f8      	ldr	r0, [r7, #12]
 80011a0:	f000 f903 	bl	80013aa <mpiSubAbs>
 80011a4:	4603      	mov	r3, r0
 80011a6:	82fb      	strh	r3, [r7, #22]
         //Set the sign of the resulting number
         r->sign = sign;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	e00a      	b.n	80011c6 <mpiAdd+0x6e>
      }
      else
      {
         //Perform subtraction
         error = mpiSubAbs(r, b, a);
 80011b0:	68ba      	ldr	r2, [r7, #8]
 80011b2:	6879      	ldr	r1, [r7, #4]
 80011b4:	68f8      	ldr	r0, [r7, #12]
 80011b6:	f000 f8f8 	bl	80013aa <mpiSubAbs>
 80011ba:	4603      	mov	r3, r0
 80011bc:	82fb      	strh	r3, [r7, #22]
         //Set the sign of the resulting number
         r->sign = -sign;
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	425a      	negs	r2, r3
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	601a      	str	r2, [r3, #0]
      }
   }

   //Return status code
   return error;
 80011c6:	8afb      	ldrh	r3, [r7, #22]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3718      	adds	r7, #24
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <mpiSub>:
 * @param[in] b Second operand B
 * @return Error code
 **/

error_t mpiSub(Mpi *r, const Mpi *a, const Mpi *b)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	607a      	str	r2, [r7, #4]
   error_t error;
   int_t sign;

   //Retrieve the sign of A
   sign = a->sign;
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	613b      	str	r3, [r7, #16]

   //Both operands have the same sign?
   if(a->sign == b->sign)
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d11d      	bne.n	800122a <mpiSub+0x5a>
   {
      //Compare the absolute value of A and B
      if(mpiCompAbs(a, b) >= 0)
 80011ee:	6879      	ldr	r1, [r7, #4]
 80011f0:	68b8      	ldr	r0, [r7, #8]
 80011f2:	f7ff fdd5 	bl	8000da0 <mpiCompAbs>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	db0a      	blt.n	8001212 <mpiSub+0x42>
      {
         //Perform subtraction
         error = mpiSubAbs(r, a, b);
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	68b9      	ldr	r1, [r7, #8]
 8001200:	68f8      	ldr	r0, [r7, #12]
 8001202:	f000 f8d2 	bl	80013aa <mpiSubAbs>
 8001206:	4603      	mov	r3, r0
 8001208:	82fb      	strh	r3, [r7, #22]
         //Set the sign of the resulting number
         r->sign = sign;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	693a      	ldr	r2, [r7, #16]
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	e015      	b.n	800123e <mpiSub+0x6e>
      }
      else
      {
         //Perform subtraction
         error = mpiSubAbs(r, b, a);
 8001212:	68ba      	ldr	r2, [r7, #8]
 8001214:	6879      	ldr	r1, [r7, #4]
 8001216:	68f8      	ldr	r0, [r7, #12]
 8001218:	f000 f8c7 	bl	80013aa <mpiSubAbs>
 800121c:	4603      	mov	r3, r0
 800121e:	82fb      	strh	r3, [r7, #22]
         //Set the sign of the resulting number
         r->sign = -sign;
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	425a      	negs	r2, r3
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	e009      	b.n	800123e <mpiSub+0x6e>
   }
   //Operands have different signs?
   else
   {
      //Perform addition
      error = mpiAddAbs(r, a, b);
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	68b9      	ldr	r1, [r7, #8]
 800122e:	68f8      	ldr	r0, [r7, #12]
 8001230:	f000 f80a 	bl	8001248 <mpiAddAbs>
 8001234:	4603      	mov	r3, r0
 8001236:	82fb      	strh	r3, [r7, #22]
      //Set the sign of the resulting number
      r->sign = sign;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	601a      	str	r2, [r3, #0]
   }

   //Return status code
   return error;
 800123e:	8afb      	ldrh	r3, [r7, #22]
}
 8001240:	4618      	mov	r0, r3
 8001242:	3718      	adds	r7, #24
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <mpiAddAbs>:
 * @param[in] b Second operand B
 * @return Error code
 **/

error_t mpiAddAbs(Mpi *r, const Mpi *a, const Mpi *b)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b08a      	sub	sp, #40	; 0x28
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
   uint_t n;
   uint_t c;
   uint_t d;

   //R and B are the same instance?
   if(r == b)
 8001254:	68fa      	ldr	r2, [r7, #12]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	429a      	cmp	r2, r3
 800125a:	d106      	bne.n	800126a <mpiAddAbs+0x22>
   {
      //Swap A and B
      const Mpi *t = a;
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	61bb      	str	r3, [r7, #24]
      a = b;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	60bb      	str	r3, [r7, #8]
      b = t;
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	607b      	str	r3, [r7, #4]
 8001268:	e00d      	b.n	8001286 <mpiAddAbs+0x3e>
   }
   //R is neither A nor B?
   else if(r != a)
 800126a:	68fa      	ldr	r2, [r7, #12]
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	429a      	cmp	r2, r3
 8001270:	d009      	beq.n	8001286 <mpiAddAbs+0x3e>
   {
      //Copy the first operand to R
      MPI_CHECK(mpiCopy(r, a));
 8001272:	68b9      	ldr	r1, [r7, #8]
 8001274:	68f8      	ldr	r0, [r7, #12]
 8001276:	f7ff fde0 	bl	8000e3a <mpiCopy>
 800127a:	4603      	mov	r3, r0
 800127c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800127e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001280:	2b00      	cmp	r3, #0
 8001282:	f040 8086 	bne.w	8001392 <mpiAddAbs+0x14a>
   }

   //Determine the actual length of B
   n = mpiGetLength(b);
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f7ff fc43 	bl	8000b12 <mpiGetLength>
 800128c:	6178      	str	r0, [r7, #20]
   //Extend the size of the destination register as needed
   MPI_CHECK(mpiGrow(r, n));
 800128e:	6979      	ldr	r1, [r7, #20]
 8001290:	68f8      	ldr	r0, [r7, #12]
 8001292:	f7ff fbfe 	bl	8000a92 <mpiGrow>
 8001296:	4603      	mov	r3, r0
 8001298:	84fb      	strh	r3, [r7, #38]	; 0x26
 800129a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800129c:	2b00      	cmp	r3, #0
 800129e:	d17a      	bne.n	8001396 <mpiAddAbs+0x14e>

   //The result is always positive
   r->sign = 1;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	2201      	movs	r2, #1
 80012a4:	601a      	str	r2, [r3, #0]
   //Clear carry bit
   c = 0;
 80012a6:	2300      	movs	r3, #0
 80012a8:	61fb      	str	r3, [r7, #28]

   //Add operands
   for(i = 0; i < n; i++)
 80012aa:	2300      	movs	r3, #0
 80012ac:	623b      	str	r3, [r7, #32]
 80012ae:	e02b      	b.n	8001308 <mpiAddAbs+0xc0>
   {
      //Add carry bit
      d = r->data[i] + c;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	689a      	ldr	r2, [r3, #8]
 80012b4:	6a3b      	ldr	r3, [r7, #32]
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	4413      	add	r3, r2
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	69fa      	ldr	r2, [r7, #28]
 80012be:	4413      	add	r3, r2
 80012c0:	613b      	str	r3, [r7, #16]
      //Update carry bit
      if(d != 0) c = 0;
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <mpiAddAbs+0x84>
 80012c8:	2300      	movs	r3, #0
 80012ca:	61fb      	str	r3, [r7, #28]
      //Perform addition
      d += b->data[i];
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689a      	ldr	r2, [r3, #8]
 80012d0:	6a3b      	ldr	r3, [r7, #32]
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	4413      	add	r3, r2
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	4413      	add	r3, r2
 80012dc:	613b      	str	r3, [r7, #16]
      //Update carry bit
      if(d < b->data[i]) c = 1;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	689a      	ldr	r2, [r3, #8]
 80012e2:	6a3b      	ldr	r3, [r7, #32]
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	4413      	add	r3, r2
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d201      	bcs.n	80012f4 <mpiAddAbs+0xac>
 80012f0:	2301      	movs	r3, #1
 80012f2:	61fb      	str	r3, [r7, #28]
      //Save result
      r->data[i] = d;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	689a      	ldr	r2, [r3, #8]
 80012f8:	6a3b      	ldr	r3, [r7, #32]
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	4413      	add	r3, r2
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	601a      	str	r2, [r3, #0]
   for(i = 0; i < n; i++)
 8001302:	6a3b      	ldr	r3, [r7, #32]
 8001304:	3301      	adds	r3, #1
 8001306:	623b      	str	r3, [r7, #32]
 8001308:	6a3a      	ldr	r2, [r7, #32]
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	429a      	cmp	r2, r3
 800130e:	d3cf      	bcc.n	80012b0 <mpiAddAbs+0x68>
   }

   //Loop as long as the carry bit is set
   for(i = n; c && i < r->size; i++)
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	623b      	str	r3, [r7, #32]
 8001314:	e01a      	b.n	800134c <mpiAddAbs+0x104>
   {
      //Add carry bit
      r->data[i] += c;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	689a      	ldr	r2, [r3, #8]
 800131a:	6a3b      	ldr	r3, [r7, #32]
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	4413      	add	r3, r2
 8001320:	6819      	ldr	r1, [r3, #0]
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	689a      	ldr	r2, [r3, #8]
 8001326:	6a3b      	ldr	r3, [r7, #32]
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	4413      	add	r3, r2
 800132c:	69fa      	ldr	r2, [r7, #28]
 800132e:	440a      	add	r2, r1
 8001330:	601a      	str	r2, [r3, #0]
      //Update carry bit
      if(r->data[i] != 0) c = 0;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	689a      	ldr	r2, [r3, #8]
 8001336:	6a3b      	ldr	r3, [r7, #32]
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	4413      	add	r3, r2
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <mpiAddAbs+0xfe>
 8001342:	2300      	movs	r3, #0
 8001344:	61fb      	str	r3, [r7, #28]
   for(i = n; c && i < r->size; i++)
 8001346:	6a3b      	ldr	r3, [r7, #32]
 8001348:	3301      	adds	r3, #1
 800134a:	623b      	str	r3, [r7, #32]
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d004      	beq.n	800135c <mpiAddAbs+0x114>
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	6a3a      	ldr	r2, [r7, #32]
 8001358:	429a      	cmp	r2, r3
 800135a:	d3dc      	bcc.n	8001316 <mpiAddAbs+0xce>
   }

   //Check the final carry bit
   if(c && n >= r->size)
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d01b      	beq.n	800139a <mpiAddAbs+0x152>
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	697a      	ldr	r2, [r7, #20]
 8001368:	429a      	cmp	r2, r3
 800136a:	d316      	bcc.n	800139a <mpiAddAbs+0x152>
   {
      //Extend the size of the destination register
      MPI_CHECK(mpiGrow(r, n + 1));
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	3301      	adds	r3, #1
 8001370:	4619      	mov	r1, r3
 8001372:	68f8      	ldr	r0, [r7, #12]
 8001374:	f7ff fb8d 	bl	8000a92 <mpiGrow>
 8001378:	4603      	mov	r3, r0
 800137a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800137c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800137e:	2b00      	cmp	r3, #0
 8001380:	d10d      	bne.n	800139e <mpiAddAbs+0x156>
      //Add carry bit
      r->data[n] = 1;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	689a      	ldr	r2, [r3, #8]
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	4413      	add	r3, r2
 800138c:	2201      	movs	r2, #1
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	e006      	b.n	80013a0 <mpiAddAbs+0x158>
      MPI_CHECK(mpiCopy(r, a));
 8001392:	bf00      	nop
 8001394:	e004      	b.n	80013a0 <mpiAddAbs+0x158>
   MPI_CHECK(mpiGrow(r, n));
 8001396:	bf00      	nop
 8001398:	e002      	b.n	80013a0 <mpiAddAbs+0x158>
   }

end:
 800139a:	bf00      	nop
 800139c:	e000      	b.n	80013a0 <mpiAddAbs+0x158>
      MPI_CHECK(mpiGrow(r, n + 1));
 800139e:	bf00      	nop
   //Return status code
   return error;
 80013a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3728      	adds	r7, #40	; 0x28
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <mpiSubAbs>:
 * @param[in] b Second operand B
 * @return Error code
 **/

error_t mpiSubAbs(Mpi *r, const Mpi *a, const Mpi *b)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b08c      	sub	sp, #48	; 0x30
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	60f8      	str	r0, [r7, #12]
 80013b2:	60b9      	str	r1, [r7, #8]
 80013b4:	607a      	str	r2, [r7, #4]
   uint_t i;
   uint_t m;
   uint_t n;

   //Check input parameters
   if(mpiCompAbs(a, b) < 0)
 80013b6:	6879      	ldr	r1, [r7, #4]
 80013b8:	68b8      	ldr	r0, [r7, #8]
 80013ba:	f7ff fcf1 	bl	8000da0 <mpiCompAbs>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	da05      	bge.n	80013d0 <mpiSubAbs+0x26>
   {
      //Swap A and B if necessary
      const Mpi *t = b;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	623b      	str	r3, [r7, #32]
      a = b;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	60bb      	str	r3, [r7, #8]
      b = t;
 80013cc:	6a3b      	ldr	r3, [r7, #32]
 80013ce:	607b      	str	r3, [r7, #4]
   }

   //Determine the actual length of A
   m = mpiGetLength(a);
 80013d0:	68b8      	ldr	r0, [r7, #8]
 80013d2:	f7ff fb9e 	bl	8000b12 <mpiGetLength>
 80013d6:	61f8      	str	r0, [r7, #28]
   //Determine the actual length of B
   n = mpiGetLength(b);
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f7ff fb9a 	bl	8000b12 <mpiGetLength>
 80013de:	61b8      	str	r0, [r7, #24]

   //Extend the size of the destination register as needed
   MPI_CHECK(mpiGrow(r, m));
 80013e0:	69f9      	ldr	r1, [r7, #28]
 80013e2:	68f8      	ldr	r0, [r7, #12]
 80013e4:	f7ff fb55 	bl	8000a92 <mpiGrow>
 80013e8:	4603      	mov	r3, r0
 80013ea:	82fb      	strh	r3, [r7, #22]
 80013ec:	8afb      	ldrh	r3, [r7, #22]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	f040 8087 	bne.w	8001502 <mpiSubAbs+0x158>

   //The result is always positive
   r->sign = 1;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	2201      	movs	r2, #1
 80013f8:	601a      	str	r2, [r3, #0]
   //Clear carry bit
   c = 0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	62fb      	str	r3, [r7, #44]	; 0x2c

   //Subtract operands
   for(i = 0; i < n; i++)
 80013fe:	2300      	movs	r3, #0
 8001400:	627b      	str	r3, [r7, #36]	; 0x24
 8001402:	e02d      	b.n	8001460 <mpiSubAbs+0xb6>
   {
      //Read first operand
      d = a->data[i];
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	689a      	ldr	r2, [r3, #8]
 8001408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	4413      	add	r3, r2
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	62bb      	str	r3, [r7, #40]	; 0x28

      //Check the carry bit
      if(c)
 8001412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001414:	2b00      	cmp	r3, #0
 8001416:	d007      	beq.n	8001428 <mpiSubAbs+0x7e>
      {
         //Update carry bit
         if(d != 0) c = 0;
 8001418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <mpiSubAbs+0x78>
 800141e:	2300      	movs	r3, #0
 8001420:	62fb      	str	r3, [r7, #44]	; 0x2c
         //Propagate carry bit
         d -= 1;
 8001422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001424:	3b01      	subs	r3, #1
 8001426:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      //Update carry bit
      if(d < b->data[i]) c = 1;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	689a      	ldr	r2, [r3, #8]
 800142c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	4413      	add	r3, r2
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001436:	429a      	cmp	r2, r3
 8001438:	d201      	bcs.n	800143e <mpiSubAbs+0x94>
 800143a:	2301      	movs	r3, #1
 800143c:	62fb      	str	r3, [r7, #44]	; 0x2c
      //Perform subtraction
      r->data[i] = d - b->data[i];
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	689a      	ldr	r2, [r3, #8]
 8001442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	4413      	add	r3, r2
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	6899      	ldr	r1, [r3, #8]
 800144e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	440b      	add	r3, r1
 8001454:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001456:	1a8a      	subs	r2, r1, r2
 8001458:	601a      	str	r2, [r3, #0]
   for(i = 0; i < n; i++)
 800145a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145c:	3301      	adds	r3, #1
 800145e:	627b      	str	r3, [r7, #36]	; 0x24
 8001460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	429a      	cmp	r2, r3
 8001466:	d3cd      	bcc.n	8001404 <mpiSubAbs+0x5a>
   }

   //Loop as long as the carry bit is set
   for(i = n; c && i < m; i++)
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	627b      	str	r3, [r7, #36]	; 0x24
 800146c:	e019      	b.n	80014a2 <mpiSubAbs+0xf8>
   {
      //Update carry bit
      if(a->data[i] != 0) c = 0;
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	689a      	ldr	r2, [r3, #8]
 8001472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	4413      	add	r3, r2
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <mpiSubAbs+0xd8>
 800147e:	2300      	movs	r3, #0
 8001480:	62fb      	str	r3, [r7, #44]	; 0x2c
      //Propagate carry bit
      r->data[i] = a->data[i] - 1;
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	689a      	ldr	r2, [r3, #8]
 8001486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	4413      	add	r3, r2
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	6899      	ldr	r1, [r3, #8]
 8001492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	440b      	add	r3, r1
 8001498:	3a01      	subs	r2, #1
 800149a:	601a      	str	r2, [r3, #0]
   for(i = n; c && i < m; i++)
 800149c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149e:	3301      	adds	r3, #1
 80014a0:	627b      	str	r3, [r7, #36]	; 0x24
 80014a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d003      	beq.n	80014b0 <mpiSubAbs+0x106>
 80014a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d3de      	bcc.n	800146e <mpiSubAbs+0xc4>
   }

   //R and A are not the same instance?
   if(r != a)
 80014b0:	68fa      	ldr	r2, [r7, #12]
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d026      	beq.n	8001506 <mpiSubAbs+0x15c>
   {
      //Copy the remaining words
      for(; i < m; i++)
 80014b8:	e00e      	b.n	80014d8 <mpiSubAbs+0x12e>
      {
         r->data[i] = a->data[i];
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	689a      	ldr	r2, [r3, #8]
 80014be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	441a      	add	r2, r3
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	6899      	ldr	r1, [r3, #8]
 80014c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	440b      	add	r3, r1
 80014ce:	6812      	ldr	r2, [r2, #0]
 80014d0:	601a      	str	r2, [r3, #0]
      for(; i < m; i++)
 80014d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d4:	3301      	adds	r3, #1
 80014d6:	627b      	str	r3, [r7, #36]	; 0x24
 80014d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d3ec      	bcc.n	80014ba <mpiSubAbs+0x110>
      }

      //Zero the upper part of R
      for(; i < r->size; i++)
 80014e0:	e009      	b.n	80014f6 <mpiSubAbs+0x14c>
      {
         r->data[i] = 0;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	689a      	ldr	r2, [r3, #8]
 80014e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	4413      	add	r3, r2
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
      for(; i < r->size; i++)
 80014f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f2:	3301      	adds	r3, #1
 80014f4:	627b      	str	r3, [r7, #36]	; 0x24
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d3f0      	bcc.n	80014e2 <mpiSubAbs+0x138>
      }
   }

end:
 8001500:	e001      	b.n	8001506 <mpiSubAbs+0x15c>
   MPI_CHECK(mpiGrow(r, m));
 8001502:	bf00      	nop
 8001504:	e000      	b.n	8001508 <mpiSubAbs+0x15e>
end:
 8001506:	bf00      	nop
   //Return status code
   return error;
 8001508:	8afb      	ldrh	r3, [r7, #22]
}
 800150a:	4618      	mov	r0, r3
 800150c:	3730      	adds	r7, #48	; 0x30
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <mpiShiftLeft>:
 * @param[in] n The number of bits to shift
 * @return Error code
 **/

error_t mpiShiftLeft(Mpi *r, uint_t n)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b086      	sub	sp, #24
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
 800151a:	6039      	str	r1, [r7, #0]
   error_t error;
   uint_t i;

   //Number of 32-bit words to shift
   uint_t n1 = n / (MPI_INT_SIZE * 8);
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	095b      	lsrs	r3, r3, #5
 8001520:	613b      	str	r3, [r7, #16]
   //Number of bits to shift
   uint_t n2 = n % (MPI_INT_SIZE * 8);
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	f003 031f 	and.w	r3, r3, #31
 8001528:	60fb      	str	r3, [r7, #12]

   //Check parameters
   if(!r->size || !n)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d002      	beq.n	8001538 <mpiShiftLeft+0x26>
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d101      	bne.n	800153c <mpiShiftLeft+0x2a>
      return NO_ERROR;
 8001538:	2300      	movs	r3, #0
 800153a:	e073      	b.n	8001624 <mpiShiftLeft+0x112>

   //Increase the size of the multiple-precision number
   error = mpiGrow(r, r->size + (n + 31) / 32);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	685a      	ldr	r2, [r3, #4]
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	331f      	adds	r3, #31
 8001544:	095b      	lsrs	r3, r3, #5
 8001546:	4413      	add	r3, r2
 8001548:	4619      	mov	r1, r3
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f7ff faa1 	bl	8000a92 <mpiGrow>
 8001550:	4603      	mov	r3, r0
 8001552:	817b      	strh	r3, [r7, #10]
   //Check return code
   if(error)
 8001554:	897b      	ldrh	r3, [r7, #10]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <mpiShiftLeft+0x4c>
      return error;
 800155a:	897b      	ldrh	r3, [r7, #10]
 800155c:	e062      	b.n	8001624 <mpiShiftLeft+0x112>

   //First, shift words
   if(n1 > 0)
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d02a      	beq.n	80015ba <mpiShiftLeft+0xa8>
   {
      //Process the most significant words
      for(i = r->size - 1; i >= n1; i--)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	3b01      	subs	r3, #1
 800156a:	617b      	str	r3, [r7, #20]
 800156c:	e010      	b.n	8001590 <mpiShiftLeft+0x7e>
      {
         r->data[i] = r->data[i - n1];
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	689a      	ldr	r2, [r3, #8]
 8001572:	6979      	ldr	r1, [r7, #20]
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	1acb      	subs	r3, r1, r3
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	441a      	add	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6899      	ldr	r1, [r3, #8]
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	440b      	add	r3, r1
 8001586:	6812      	ldr	r2, [r2, #0]
 8001588:	601a      	str	r2, [r3, #0]
      for(i = r->size - 1; i >= n1; i--)
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	3b01      	subs	r3, #1
 800158e:	617b      	str	r3, [r7, #20]
 8001590:	697a      	ldr	r2, [r7, #20]
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	429a      	cmp	r2, r3
 8001596:	d2ea      	bcs.n	800156e <mpiShiftLeft+0x5c>
      }

      //Fill the rest with zeroes
      for(i = 0; i < n1; i++)
 8001598:	2300      	movs	r3, #0
 800159a:	617b      	str	r3, [r7, #20]
 800159c:	e009      	b.n	80015b2 <mpiShiftLeft+0xa0>
      {
         r->data[i] = 0;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	689a      	ldr	r2, [r3, #8]
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	4413      	add	r3, r2
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
      for(i = 0; i < n1; i++)
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	3301      	adds	r3, #1
 80015b0:	617b      	str	r3, [r7, #20]
 80015b2:	697a      	ldr	r2, [r7, #20]
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d3f1      	bcc.n	800159e <mpiShiftLeft+0x8c>
      }
   }

   //Then shift bits
   if(n2 > 0)
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d030      	beq.n	8001622 <mpiShiftLeft+0x110>
   {
      //Process the most significant words
      for(i = r->size - 1; i >= 1; i--)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	3b01      	subs	r3, #1
 80015c6:	617b      	str	r3, [r7, #20]
 80015c8:	e01f      	b.n	800160a <mpiShiftLeft+0xf8>
      {
         r->data[i] = (r->data[i] << n2) | (r->data[i - 1] >> (32 - n2));
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	689a      	ldr	r2, [r3, #8]
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	4413      	add	r3, r2
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	fa02 f103 	lsl.w	r1, r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689a      	ldr	r2, [r3, #8]
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80015e6:	3b01      	subs	r3, #1
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	4413      	add	r3, r2
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	f1c3 0320 	rsb	r3, r3, #32
 80015f4:	40da      	lsrs	r2, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6898      	ldr	r0, [r3, #8]
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	4403      	add	r3, r0
 8001600:	430a      	orrs	r2, r1
 8001602:	601a      	str	r2, [r3, #0]
      for(i = r->size - 1; i >= 1; i--)
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	3b01      	subs	r3, #1
 8001608:	617b      	str	r3, [r7, #20]
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d1dc      	bne.n	80015ca <mpiShiftLeft+0xb8>
      }

      //The least significant word requires a special handling
      r->data[0] <<= n2;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	6819      	ldr	r1, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	68fa      	ldr	r2, [r7, #12]
 800161c:	fa01 f202 	lsl.w	r2, r1, r2
 8001620:	601a      	str	r2, [r3, #0]
   }

   //Shift operation is complete
   return NO_ERROR;
 8001622:	2300      	movs	r3, #0
}
 8001624:	4618      	mov	r0, r3
 8001626:	3718      	adds	r7, #24
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <mpiShiftRight>:
 * @param[in] n The number of bits to shift
 * @return Error code
 **/

error_t mpiShiftRight(Mpi *r, uint_t n)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
   uint_t i;
   uint_t m;

   //Number of 32-bit words to shift
   uint_t n1 = n / (MPI_INT_SIZE * 8);
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	095b      	lsrs	r3, r3, #5
 800163a:	613b      	str	r3, [r7, #16]
   //Number of bits to shift
   uint_t n2 = n % (MPI_INT_SIZE * 8);
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	f003 031f 	and.w	r3, r3, #31
 8001642:	60fb      	str	r3, [r7, #12]

   //Check parameters
   if(n1 >= r->size)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	693a      	ldr	r2, [r7, #16]
 800164a:	429a      	cmp	r2, r3
 800164c:	d30a      	bcc.n	8001664 <mpiShiftRight+0x38>
   {
      osMemset(r->data, 0, r->size * MPI_INT_SIZE);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6898      	ldr	r0, [r3, #8]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	461a      	mov	r2, r3
 800165a:	2100      	movs	r1, #0
 800165c:	f005 fb7e 	bl	8006d5c <memset>
      return NO_ERROR;
 8001660:	2300      	movs	r3, #0
 8001662:	e06f      	b.n	8001744 <mpiShiftRight+0x118>
   }

   //First, shift words
   if(n1 > 0)
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d02e      	beq.n	80016c8 <mpiShiftRight+0x9c>
   {
      //Process the least significant words
      for(m = r->size - n1, i = 0; i < m; i++)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685a      	ldr	r2, [r3, #4]
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	60bb      	str	r3, [r7, #8]
 8001674:	2300      	movs	r3, #0
 8001676:	617b      	str	r3, [r7, #20]
 8001678:	e010      	b.n	800169c <mpiShiftRight+0x70>
      {
         r->data[i] = r->data[i + n1];
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	689a      	ldr	r2, [r3, #8]
 800167e:	6979      	ldr	r1, [r7, #20]
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	440b      	add	r3, r1
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	441a      	add	r2, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6899      	ldr	r1, [r3, #8]
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	440b      	add	r3, r1
 8001692:	6812      	ldr	r2, [r2, #0]
 8001694:	601a      	str	r2, [r3, #0]
      for(m = r->size - n1, i = 0; i < m; i++)
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	3301      	adds	r3, #1
 800169a:	617b      	str	r3, [r7, #20]
 800169c:	697a      	ldr	r2, [r7, #20]
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d3ea      	bcc.n	800167a <mpiShiftRight+0x4e>
      }

      //Fill the rest with zeroes
      for(i = m; i < r->size; i++)
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	617b      	str	r3, [r7, #20]
 80016a8:	e009      	b.n	80016be <mpiShiftRight+0x92>
      {
         r->data[i] = 0;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	689a      	ldr	r2, [r3, #8]
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	4413      	add	r3, r2
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
      for(i = m; i < r->size; i++)
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	3301      	adds	r3, #1
 80016bc:	617b      	str	r3, [r7, #20]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	697a      	ldr	r2, [r7, #20]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d3f0      	bcc.n	80016aa <mpiShiftRight+0x7e>
      }
   }

   //Then shift bits
   if(n2 > 0)
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d039      	beq.n	8001742 <mpiShiftRight+0x116>
   {
      //Process the least significant words
      for(m = r->size - n1 - 1, i = 0; i < m; i++)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685a      	ldr	r2, [r3, #4]
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	3b01      	subs	r3, #1
 80016d8:	60bb      	str	r3, [r7, #8]
 80016da:	2300      	movs	r3, #0
 80016dc:	617b      	str	r3, [r7, #20]
 80016de:	e01d      	b.n	800171c <mpiShiftRight+0xf0>
      {
         r->data[i] = (r->data[i] >> n2) | (r->data[i + 1] << (32 - n2));
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689a      	ldr	r2, [r3, #8]
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	4413      	add	r3, r2
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	fa22 f103 	lsr.w	r1, r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	689a      	ldr	r2, [r3, #8]
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	3301      	adds	r3, #1
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	4413      	add	r3, r2
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f1c3 0320 	rsb	r3, r3, #32
 8001706:	409a      	lsls	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6898      	ldr	r0, [r3, #8]
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	4403      	add	r3, r0
 8001712:	430a      	orrs	r2, r1
 8001714:	601a      	str	r2, [r3, #0]
      for(m = r->size - n1 - 1, i = 0; i < m; i++)
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	3301      	adds	r3, #1
 800171a:	617b      	str	r3, [r7, #20]
 800171c:	697a      	ldr	r2, [r7, #20]
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	429a      	cmp	r2, r3
 8001722:	d3dd      	bcc.n	80016e0 <mpiShiftRight+0xb4>
      }

      //The most significant word requires a special handling
      r->data[m] >>= n2;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	689a      	ldr	r2, [r3, #8]
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	4413      	add	r3, r2
 800172e:	6819      	ldr	r1, [r3, #0]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689a      	ldr	r2, [r3, #8]
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	4413      	add	r3, r2
 800173a:	68fa      	ldr	r2, [r7, #12]
 800173c:	fa21 f202 	lsr.w	r2, r1, r2
 8001740:	601a      	str	r2, [r3, #0]
   }

   //Shift operation is complete
   return NO_ERROR;
 8001742:	2300      	movs	r3, #0
}
 8001744:	4618      	mov	r0, r3
 8001746:	3718      	adds	r7, #24
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}

0800174c <mpiMul>:
 * @param[in] b Second operand B
 * @return Error code
 **/

__weak_func error_t mpiMul(Mpi *r, const Mpi *a, const Mpi *b)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b08e      	sub	sp, #56	; 0x38
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	60b9      	str	r1, [r7, #8]
 8001756:	607a      	str	r2, [r7, #4]
   int_t n;
   Mpi ta;
   Mpi tb;

   //Initialize multiple precision integers
   mpiInit(&ta);
 8001758:	f107 031c 	add.w	r3, r7, #28
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff f965 	bl	8000a2c <mpiInit>
   mpiInit(&tb);
 8001762:	f107 0310 	add.w	r3, r7, #16
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff f960 	bl	8000a2c <mpiInit>

   //R and A are the same instance?
   if(r == a)
 800176c:	68fa      	ldr	r2, [r7, #12]
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	429a      	cmp	r2, r3
 8001772:	d10d      	bne.n	8001790 <mpiMul+0x44>
   {
      //Copy A to TA
      MPI_CHECK(mpiCopy(&ta, a));
 8001774:	f107 031c 	add.w	r3, r7, #28
 8001778:	68b9      	ldr	r1, [r7, #8]
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff fb5d 	bl	8000e3a <mpiCopy>
 8001780:	4603      	mov	r3, r0
 8001782:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001784:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001786:	2b00      	cmp	r3, #0
 8001788:	d179      	bne.n	800187e <mpiMul+0x132>
      //Use TA instead of A
      a = &ta;
 800178a:	f107 031c 	add.w	r3, r7, #28
 800178e:	60bb      	str	r3, [r7, #8]
   }

   //R and B are the same instance?
   if(r == b)
 8001790:	68fa      	ldr	r2, [r7, #12]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	429a      	cmp	r2, r3
 8001796:	d10d      	bne.n	80017b4 <mpiMul+0x68>
   {
      //Copy B to TB
      MPI_CHECK(mpiCopy(&tb, b));
 8001798:	f107 0310 	add.w	r3, r7, #16
 800179c:	6879      	ldr	r1, [r7, #4]
 800179e:	4618      	mov	r0, r3
 80017a0:	f7ff fb4b 	bl	8000e3a <mpiCopy>
 80017a4:	4603      	mov	r3, r0
 80017a6:	86fb      	strh	r3, [r7, #54]	; 0x36
 80017a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d169      	bne.n	8001882 <mpiMul+0x136>
      //Use TB instead of B
      b = &tb;
 80017ae:	f107 0310 	add.w	r3, r7, #16
 80017b2:	607b      	str	r3, [r7, #4]
   }

   //Determine the actual length of A and B
   m = mpiGetLength(a);
 80017b4:	68b8      	ldr	r0, [r7, #8]
 80017b6:	f7ff f9ac 	bl	8000b12 <mpiGetLength>
 80017ba:	4603      	mov	r3, r0
 80017bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   n = mpiGetLength(b);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f7ff f9a7 	bl	8000b12 <mpiGetLength>
 80017c4:	4603      	mov	r3, r0
 80017c6:	62bb      	str	r3, [r7, #40]	; 0x28

   //Adjust the size of R
   MPI_CHECK(mpiGrow(r, m + n));
 80017c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017cc:	4413      	add	r3, r2
 80017ce:	4619      	mov	r1, r3
 80017d0:	68f8      	ldr	r0, [r7, #12]
 80017d2:	f7ff f95e 	bl	8000a92 <mpiGrow>
 80017d6:	4603      	mov	r3, r0
 80017d8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80017da:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d152      	bne.n	8001886 <mpiMul+0x13a>
   //Set the sign of R
   r->sign = (a->sign == b->sign) ? 1 : -1;
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d101      	bne.n	80017f0 <mpiMul+0xa4>
 80017ec:	2201      	movs	r2, #1
 80017ee:	e001      	b.n	80017f4 <mpiMul+0xa8>
 80017f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	601a      	str	r2, [r3, #0]

   //Clear the contents of the destination integer
   osMemset(r->data, 0, r->size * MPI_INT_SIZE);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	6898      	ldr	r0, [r3, #8]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	461a      	mov	r2, r3
 8001804:	2100      	movs	r1, #0
 8001806:	f005 faa9 	bl	8006d5c <memset>

   //Perform multiplication
   if(m < n)
 800180a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800180c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800180e:	429a      	cmp	r2, r3
 8001810:	da1a      	bge.n	8001848 <mpiMul+0xfc>
   {
      for(i = 0; i < m; i++)
 8001812:	2300      	movs	r3, #0
 8001814:	633b      	str	r3, [r7, #48]	; 0x30
 8001816:	e012      	b.n	800183e <mpiMul+0xf2>
      {
         mpiMulAccCore(&r->data[i], b->data, n, a->data[i]);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	689a      	ldr	r2, [r3, #8]
 800181c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	18d0      	adds	r0, r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6899      	ldr	r1, [r3, #8]
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	689a      	ldr	r2, [r3, #8]
 800182a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	4413      	add	r3, r2
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001834:	f000 fd1f 	bl	8002276 <mpiMulAccCore>
      for(i = 0; i < m; i++)
 8001838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800183a:	3301      	adds	r3, #1
 800183c:	633b      	str	r3, [r7, #48]	; 0x30
 800183e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001842:	429a      	cmp	r2, r3
 8001844:	dbe8      	blt.n	8001818 <mpiMul+0xcc>
 8001846:	e01f      	b.n	8001888 <mpiMul+0x13c>
      }
   }
   else
   {
      for(i = 0; i < n; i++)
 8001848:	2300      	movs	r3, #0
 800184a:	633b      	str	r3, [r7, #48]	; 0x30
 800184c:	e012      	b.n	8001874 <mpiMul+0x128>
      {
         mpiMulAccCore(&r->data[i], a->data, m, b->data[i]);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	689a      	ldr	r2, [r3, #8]
 8001852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	18d0      	adds	r0, r2, r3
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	6899      	ldr	r1, [r3, #8]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689a      	ldr	r2, [r3, #8]
 8001860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	4413      	add	r3, r2
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800186a:	f000 fd04 	bl	8002276 <mpiMulAccCore>
      for(i = 0; i < n; i++)
 800186e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001870:	3301      	adds	r3, #1
 8001872:	633b      	str	r3, [r7, #48]	; 0x30
 8001874:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001878:	429a      	cmp	r2, r3
 800187a:	dbe8      	blt.n	800184e <mpiMul+0x102>
      }
   }

end:
 800187c:	e004      	b.n	8001888 <mpiMul+0x13c>
      MPI_CHECK(mpiCopy(&ta, a));
 800187e:	bf00      	nop
 8001880:	e002      	b.n	8001888 <mpiMul+0x13c>
      MPI_CHECK(mpiCopy(&tb, b));
 8001882:	bf00      	nop
 8001884:	e000      	b.n	8001888 <mpiMul+0x13c>
   MPI_CHECK(mpiGrow(r, m + n));
 8001886:	bf00      	nop
   //Release multiple precision integers
   mpiFree(&ta);
 8001888:	f107 031c 	add.w	r3, r7, #28
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff f8e0 	bl	8000a52 <mpiFree>
   mpiFree(&tb);
 8001892:	f107 0310 	add.w	r3, r7, #16
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff f8db 	bl	8000a52 <mpiFree>

   //Return status code
   return error;
 800189c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3738      	adds	r7, #56	; 0x38
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <mpiMod>:
 * @param[in] p The modulus P
 * @return Error code
 **/

error_t mpiMod(Mpi *r, const Mpi *a, const Mpi *p)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b08c      	sub	sp, #48	; 0x30
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	60f8      	str	r0, [r7, #12]
 80018ae:	60b9      	str	r1, [r7, #8]
 80018b0:	607a      	str	r2, [r7, #4]
   uint_t m;
   uint_t n;
   Mpi c;

   //Make sure the modulus is positive
   if(mpiCompInt(p, 0) <= 0)
 80018b2:	2100      	movs	r1, #0
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f7ff fa51 	bl	8000d5c <mpiCompInt>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	dc01      	bgt.n	80018c4 <mpiMod+0x1e>
      return ERROR_INVALID_PARAMETER;
 80018c0:	2302      	movs	r3, #2
 80018c2:	e07b      	b.n	80019bc <mpiMod+0x116>

   //Initialize multiple precision integer
   mpiInit(&c);
 80018c4:	f107 0314 	add.w	r3, r7, #20
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff f8af 	bl	8000a2c <mpiInit>

   //Save the sign of A
   sign = a->sign;
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	62bb      	str	r3, [r7, #40]	; 0x28
   //Determine the actual length of A
   m = mpiGetBitLength(a);
 80018d4:	68b8      	ldr	r0, [r7, #8]
 80018d6:	f7ff f97d 	bl	8000bd4 <mpiGetBitLength>
 80018da:	6278      	str	r0, [r7, #36]	; 0x24
   //Determine the actual length of P
   n = mpiGetBitLength(p);
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f7ff f979 	bl	8000bd4 <mpiGetBitLength>
 80018e2:	6238      	str	r0, [r7, #32]

   //Let R = A
   MPI_CHECK(mpiCopy(r, a));
 80018e4:	68b9      	ldr	r1, [r7, #8]
 80018e6:	68f8      	ldr	r0, [r7, #12]
 80018e8:	f7ff faa7 	bl	8000e3a <mpiCopy>
 80018ec:	4603      	mov	r3, r0
 80018ee:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80018f0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d151      	bne.n	800199a <mpiMod+0xf4>

   if(m >= n)
 80018f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018f8:	6a3b      	ldr	r3, [r7, #32]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d340      	bcc.n	8001980 <mpiMod+0xda>
   {
      MPI_CHECK(mpiCopy(&c, p));
 80018fe:	f107 0314 	add.w	r3, r7, #20
 8001902:	6879      	ldr	r1, [r7, #4]
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff fa98 	bl	8000e3a <mpiCopy>
 800190a:	4603      	mov	r3, r0
 800190c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800190e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001910:	2b00      	cmp	r3, #0
 8001912:	d144      	bne.n	800199e <mpiMod+0xf8>
      MPI_CHECK(mpiShiftLeft(&c, m - n));
 8001914:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001916:	6a3b      	ldr	r3, [r7, #32]
 8001918:	1ad2      	subs	r2, r2, r3
 800191a:	f107 0314 	add.w	r3, r7, #20
 800191e:	4611      	mov	r1, r2
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff fdf6 	bl	8001512 <mpiShiftLeft>
 8001926:	4603      	mov	r3, r0
 8001928:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800192a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800192c:	2b00      	cmp	r3, #0
 800192e:	d138      	bne.n	80019a2 <mpiMod+0xfc>

      while(mpiCompAbs(r, p) >= 0)
 8001930:	e01f      	b.n	8001972 <mpiMod+0xcc>
      {
         if(mpiCompAbs(r, &c) >= 0)
 8001932:	f107 0314 	add.w	r3, r7, #20
 8001936:	4619      	mov	r1, r3
 8001938:	68f8      	ldr	r0, [r7, #12]
 800193a:	f7ff fa31 	bl	8000da0 <mpiCompAbs>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	db0b      	blt.n	800195c <mpiMod+0xb6>
         {
            MPI_CHECK(mpiSubAbs(r, r, &c));
 8001944:	f107 0314 	add.w	r3, r7, #20
 8001948:	461a      	mov	r2, r3
 800194a:	68f9      	ldr	r1, [r7, #12]
 800194c:	68f8      	ldr	r0, [r7, #12]
 800194e:	f7ff fd2c 	bl	80013aa <mpiSubAbs>
 8001952:	4603      	mov	r3, r0
 8001954:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001956:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001958:	2b00      	cmp	r3, #0
 800195a:	d124      	bne.n	80019a6 <mpiMod+0x100>
         }

         MPI_CHECK(mpiShiftRight(&c, 1));
 800195c:	f107 0314 	add.w	r3, r7, #20
 8001960:	2101      	movs	r1, #1
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff fe62 	bl	800162c <mpiShiftRight>
 8001968:	4603      	mov	r3, r0
 800196a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800196c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800196e:	2b00      	cmp	r3, #0
 8001970:	d11b      	bne.n	80019aa <mpiMod+0x104>
      while(mpiCompAbs(r, p) >= 0)
 8001972:	6879      	ldr	r1, [r7, #4]
 8001974:	68f8      	ldr	r0, [r7, #12]
 8001976:	f7ff fa13 	bl	8000da0 <mpiCompAbs>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	dad8      	bge.n	8001932 <mpiMod+0x8c>
      }
   }

   if(sign < 0)
 8001980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001982:	2b00      	cmp	r3, #0
 8001984:	da13      	bge.n	80019ae <mpiMod+0x108>
   {
      MPI_CHECK(mpiSubAbs(r, p, r));
 8001986:	68fa      	ldr	r2, [r7, #12]
 8001988:	6879      	ldr	r1, [r7, #4]
 800198a:	68f8      	ldr	r0, [r7, #12]
 800198c:	f7ff fd0d 	bl	80013aa <mpiSubAbs>
 8001990:	4603      	mov	r3, r0
 8001992:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001994:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001996:	2b00      	cmp	r3, #0
   }

end:
 8001998:	e009      	b.n	80019ae <mpiMod+0x108>
   MPI_CHECK(mpiCopy(r, a));
 800199a:	bf00      	nop
 800199c:	e008      	b.n	80019b0 <mpiMod+0x10a>
      MPI_CHECK(mpiCopy(&c, p));
 800199e:	bf00      	nop
 80019a0:	e006      	b.n	80019b0 <mpiMod+0x10a>
      MPI_CHECK(mpiShiftLeft(&c, m - n));
 80019a2:	bf00      	nop
 80019a4:	e004      	b.n	80019b0 <mpiMod+0x10a>
            MPI_CHECK(mpiSubAbs(r, r, &c));
 80019a6:	bf00      	nop
 80019a8:	e002      	b.n	80019b0 <mpiMod+0x10a>
         MPI_CHECK(mpiShiftRight(&c, 1));
 80019aa:	bf00      	nop
 80019ac:	e000      	b.n	80019b0 <mpiMod+0x10a>
end:
 80019ae:	bf00      	nop
   //Release previously allocated memory
   mpiFree(&c);
 80019b0:	f107 0314 	add.w	r3, r7, #20
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff f84c 	bl	8000a52 <mpiFree>

   //Return status code
   return error;
 80019ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3730      	adds	r7, #48	; 0x30
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <mpiMulMod>:
 * @param[in] p The modulus P
 * @return Error code
 **/

__weak_func error_t mpiMulMod(Mpi *r, const Mpi *a, const Mpi *b, const Mpi *p)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b086      	sub	sp, #24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	60b9      	str	r1, [r7, #8]
 80019ce:	607a      	str	r2, [r7, #4]
 80019d0:	603b      	str	r3, [r7, #0]
   error_t error;

   //Perform modular multiplication
   MPI_CHECK(mpiMul(r, a, b));
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	68b9      	ldr	r1, [r7, #8]
 80019d6:	68f8      	ldr	r0, [r7, #12]
 80019d8:	f7ff feb8 	bl	800174c <mpiMul>
 80019dc:	4603      	mov	r3, r0
 80019de:	82fb      	strh	r3, [r7, #22]
 80019e0:	8afb      	ldrh	r3, [r7, #22]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d109      	bne.n	80019fa <mpiMulMod+0x36>
   MPI_CHECK(mpiMod(r, r, p));
 80019e6:	683a      	ldr	r2, [r7, #0]
 80019e8:	68f9      	ldr	r1, [r7, #12]
 80019ea:	68f8      	ldr	r0, [r7, #12]
 80019ec:	f7ff ff5b 	bl	80018a6 <mpiMod>
 80019f0:	4603      	mov	r3, r0
 80019f2:	82fb      	strh	r3, [r7, #22]
 80019f4:	8afb      	ldrh	r3, [r7, #22]
 80019f6:	2b00      	cmp	r3, #0

end:
 80019f8:	e000      	b.n	80019fc <mpiMulMod+0x38>
   MPI_CHECK(mpiMul(r, a, b));
 80019fa:	bf00      	nop
   //Return status code
   return error;
 80019fc:	8afb      	ldrh	r3, [r7, #22]
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3718      	adds	r7, #24
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <mpiExpMod>:
 * @param[in] p Modulus
 * @return Error code
 **/

__weak_func error_t mpiExpMod(Mpi *r, const Mpi *a, const Mpi *e, const Mpi *p)
{
 8001a06:	b590      	push	{r4, r7, lr}
 8001a08:	b0af      	sub	sp, #188	; 0xbc
 8001a0a:	af02      	add	r7, sp, #8
 8001a0c:	60f8      	str	r0, [r7, #12]
 8001a0e:	60b9      	str	r1, [r7, #8]
 8001a10:	607a      	str	r2, [r7, #4]
 8001a12:	603b      	str	r3, [r7, #0]
   Mpi c2;
   Mpi t;
   Mpi s[8];

   //Initialize multiple precision integers
   mpiInit(&b);
 8001a14:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff f807 	bl	8000a2c <mpiInit>
   mpiInit(&c2);
 8001a1e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7ff f802 	bl	8000a2c <mpiInit>
   mpiInit(&t);
 8001a28:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7fe fffd 	bl	8000a2c <mpiInit>

   //Initialize precomputed values
   for(i = 0; (uint_t) i < arraysize(s); i++)
 8001a32:	2300      	movs	r3, #0
 8001a34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001a38:	e010      	b.n	8001a5c <mpiExpMod+0x56>
   {
      mpiInit(&s[i]);
 8001a3a:	f107 0110 	add.w	r1, r7, #16
 8001a3e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001a42:	4613      	mov	r3, r2
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	4413      	add	r3, r2
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	440b      	add	r3, r1
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7fe ffed 	bl	8000a2c <mpiInit>
   for(i = 0; (uint_t) i < arraysize(s); i++)
 8001a52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a56:	3301      	adds	r3, #1
 8001a58:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001a5c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a60:	2b07      	cmp	r3, #7
 8001a62:	d9ea      	bls.n	8001a3a <mpiExpMod+0x34>
   }

   //Very small exponents are often selected with low Hamming weight.
   //The sliding window mechanism should be disabled in that case
   d = (mpiGetBitLength(e) <= 32) ? 1 : 4;
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f7ff f8b5 	bl	8000bd4 <mpiGetBitLength>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b20      	cmp	r3, #32
 8001a6e:	d801      	bhi.n	8001a74 <mpiExpMod+0x6e>
 8001a70:	2301      	movs	r3, #1
 8001a72:	e000      	b.n	8001a76 <mpiExpMod+0x70>
 8001a74:	2304      	movs	r3, #4
 8001a76:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

   //Even modulus?
   if(mpiIsEven(p))
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	6838      	ldr	r0, [r7, #0]
 8001a7e:	f7ff f8e3 	bl	8000c48 <mpiGetBitValue>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	f040 80f2 	bne.w	8001c6e <mpiExpMod+0x268>
   {
      //Let B = A^2
      MPI_CHECK(mpiMulMod(&b, a, a, p));
 8001a8a:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	68ba      	ldr	r2, [r7, #8]
 8001a92:	68b9      	ldr	r1, [r7, #8]
 8001a94:	f7ff ff96 	bl	80019c4 <mpiMulMod>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8001a9e:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f040 828e 	bne.w	8001fc4 <mpiExpMod+0x5be>
      //Let S[0] = A
      MPI_CHECK(mpiCopy(&s[0], a));
 8001aa8:	f107 0310 	add.w	r3, r7, #16
 8001aac:	68b9      	ldr	r1, [r7, #8]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff f9c3 	bl	8000e3a <mpiCopy>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8001aba:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	f040 8282 	bne.w	8001fc8 <mpiExpMod+0x5c2>

      //Precompute S[i] = A^(2 * i + 1)
      for(i = 1; i < (1 << (d - 1)); i++)
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001aca:	e024      	b.n	8001b16 <mpiExpMod+0x110>
      {
         MPI_CHECK(mpiMulMod(&s[i], &s[i - 1], &b, p));
 8001acc:	f107 0110 	add.w	r1, r7, #16
 8001ad0:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	4413      	add	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	18c8      	adds	r0, r1, r3
 8001ade:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ae2:	1e5a      	subs	r2, r3, #1
 8001ae4:	f107 0110 	add.w	r1, r7, #16
 8001ae8:	4613      	mov	r3, r2
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	4413      	add	r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	4419      	add	r1, r3
 8001af2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	f7ff ff64 	bl	80019c4 <mpiMulMod>
 8001afc:	4603      	mov	r3, r0
 8001afe:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8001b02:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	f040 8260 	bne.w	8001fcc <mpiExpMod+0x5c6>
      for(i = 1; i < (1 << (d - 1)); i++)
 8001b0c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b10:	3301      	adds	r3, #1
 8001b12:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001b16:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001b26:	429a      	cmp	r2, r3
 8001b28:	dbd0      	blt.n	8001acc <mpiExpMod+0xc6>
      }

      //Let R = 1
      MPI_CHECK(mpiSetValue(r, 1));
 8001b2a:	2101      	movs	r1, #1
 8001b2c:	68f8      	ldr	r0, [r7, #12]
 8001b2e:	f7ff f9b9 	bl	8000ea4 <mpiSetValue>
 8001b32:	4603      	mov	r3, r0
 8001b34:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8001b38:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	f040 8247 	bne.w	8001fd0 <mpiExpMod+0x5ca>

      //The exponent is processed in a left-to-right fashion
      i = mpiGetBitLength(e) - 1;
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f7ff f846 	bl	8000bd4 <mpiGetBitLength>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      //Perform sliding window exponentiation
      while(i >= 0)
 8001b50:	e087      	b.n	8001c62 <mpiExpMod+0x25c>
      {
         //The sliding window exponentiation algorithm decomposes E
         //into zero and nonzero windows
         if(!mpiGetBitValue(e, i))
 8001b52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b56:	4619      	mov	r1, r3
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f7ff f875 	bl	8000c48 <mpiGetBitValue>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d113      	bne.n	8001b8c <mpiExpMod+0x186>
         {
            //Compute R = R^2
            MPI_CHECK(mpiMulMod(r, r, r, p));
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	68fa      	ldr	r2, [r7, #12]
 8001b68:	68f9      	ldr	r1, [r7, #12]
 8001b6a:	68f8      	ldr	r0, [r7, #12]
 8001b6c:	f7ff ff2a 	bl	80019c4 <mpiMulMod>
 8001b70:	4603      	mov	r3, r0
 8001b72:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8001b76:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f040 822a 	bne.w	8001fd4 <mpiExpMod+0x5ce>
            //Next bit to be processed
            i--;
 8001b80:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b84:	3b01      	subs	r3, #1
 8001b86:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001b8a:	e06a      	b.n	8001c62 <mpiExpMod+0x25c>
         }
         else
         {
            //Find the longest window
            n = MAX(i - d + 1, 0);
 8001b8c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001b90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b9a:	d006      	beq.n	8001baa <mpiExpMod+0x1a4>
 8001b9c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001ba0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	e000      	b.n	8001bac <mpiExpMod+0x1a6>
 8001baa:	2300      	movs	r3, #0
 8001bac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

            //The least significant bit of the window must be equal to 1
            while(!mpiGetBitValue(e, n)) n++;
 8001bb0:	e004      	b.n	8001bbc <mpiExpMod+0x1b6>
 8001bb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001bbc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f7ff f840 	bl	8000c48 <mpiGetBitValue>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d0f1      	beq.n	8001bb2 <mpiExpMod+0x1ac>

            //The algorithm processes more than one bit per iteration
            for(u = 0, j = i; j >= n; j--)
 8001bce:	2300      	movs	r3, #0
 8001bd0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001bd4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001bd8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001bdc:	e01f      	b.n	8001c1e <mpiExpMod+0x218>
            {
               //Compute R = R^2
               MPI_CHECK(mpiMulMod(r, r, r, p));
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	68fa      	ldr	r2, [r7, #12]
 8001be2:	68f9      	ldr	r1, [r7, #12]
 8001be4:	68f8      	ldr	r0, [r7, #12]
 8001be6:	f7ff feed 	bl	80019c4 <mpiMulMod>
 8001bea:	4603      	mov	r3, r0
 8001bec:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8001bf0:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	f040 81ef 	bne.w	8001fd8 <mpiExpMod+0x5d2>
               //Compute the relevant index to be used in the precomputed table
               u = (u << 1) | mpiGetBitValue(e, j);
 8001bfa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001bfe:	005c      	lsls	r4, r3, #1
 8001c00:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001c04:	4619      	mov	r1, r3
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f7ff f81e 	bl	8000c48 <mpiGetBitValue>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	4323      	orrs	r3, r4
 8001c10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
            for(u = 0, j = i; j >= n; j--)
 8001c14:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001c18:	3b01      	subs	r3, #1
 8001c1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001c1e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8001c22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001c26:	429a      	cmp	r2, r3
 8001c28:	dad9      	bge.n	8001bde <mpiExpMod+0x1d8>
            }

            //Perform a single multiplication per iteration
            MPI_CHECK(mpiMulMod(r, r, &s[u >> 1], p));
 8001c2a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c2e:	085a      	lsrs	r2, r3, #1
 8001c30:	f107 0110 	add.w	r1, r7, #16
 8001c34:	4613      	mov	r3, r2
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	4413      	add	r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	18ca      	adds	r2, r1, r3
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	68f9      	ldr	r1, [r7, #12]
 8001c42:	68f8      	ldr	r0, [r7, #12]
 8001c44:	f7ff febe 	bl	80019c4 <mpiMulMod>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8001c4e:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f040 81c2 	bne.w	8001fdc <mpiExpMod+0x5d6>
            //Next bit to be processed
            i = n - 1;
 8001c58:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001c5c:	3b01      	subs	r3, #1
 8001c5e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
      while(i >= 0)
 8001c62:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	f6bf af73 	bge.w	8001b52 <mpiExpMod+0x14c>
 8001c6c:	e1d1      	b.n	8002012 <mpiExpMod+0x60c>
      }
   }
   else
   {
      //Compute the smaller C = (2^32)^k such as C > P
      k = mpiGetLength(p);
 8001c6e:	6838      	ldr	r0, [r7, #0]
 8001c70:	f7fe ff4f 	bl	8000b12 <mpiGetLength>
 8001c74:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

      //Compute C^2 mod P
      MPI_CHECK(mpiSetValue(&c2, 1));
 8001c78:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff f910 	bl	8000ea4 <mpiSetValue>
 8001c84:	4603      	mov	r3, r0
 8001c86:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8001c8a:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	f040 81a6 	bne.w	8001fe0 <mpiExpMod+0x5da>
      MPI_CHECK(mpiShiftLeft(&c2, 2 * k * (MPI_INT_SIZE * 8)));
 8001c94:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001c98:	019a      	lsls	r2, r3, #6
 8001c9a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001c9e:	4611      	mov	r1, r2
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff fc36 	bl	8001512 <mpiShiftLeft>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8001cac:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	f040 8197 	bne.w	8001fe4 <mpiExpMod+0x5de>
      MPI_CHECK(mpiMod(&c2, &c2, p));
 8001cb6:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8001cba:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001cbe:	683a      	ldr	r2, [r7, #0]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff fdf0 	bl	80018a6 <mpiMod>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8001ccc:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	f040 8189 	bne.w	8001fe8 <mpiExpMod+0x5e2>

      //Let B = A * C mod P
      if(mpiComp(a, p) >= 0)
 8001cd6:	6839      	ldr	r1, [r7, #0]
 8001cd8:	68b8      	ldr	r0, [r7, #8]
 8001cda:	f7fe ffd9 	bl	8000c90 <mpiComp>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	db25      	blt.n	8001d30 <mpiExpMod+0x32a>
      {
         MPI_CHECK(mpiMod(&b, a, p));
 8001ce4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001ce8:	683a      	ldr	r2, [r7, #0]
 8001cea:	68b9      	ldr	r1, [r7, #8]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff fdda 	bl	80018a6 <mpiMod>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8001cf8:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	f040 8175 	bne.w	8001fec <mpiExpMod+0x5e6>
         MPI_CHECK(mpiMontgomeryMul(&b, &b, &c2, k, p, &t));
 8001d02:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8001d06:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001d0a:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8001d0e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001d12:	9301      	str	r3, [sp, #4]
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	9300      	str	r3, [sp, #0]
 8001d18:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001d1c:	f000 f9cb 	bl	80020b6 <mpiMontgomeryMul>
 8001d20:	4603      	mov	r3, r0
 8001d22:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8001d26:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d016      	beq.n	8001d5c <mpiExpMod+0x356>
 8001d2e:	e170      	b.n	8002012 <mpiExpMod+0x60c>
      }
      else
      {
         MPI_CHECK(mpiMontgomeryMul(&b, a, &c2, k, p, &t));
 8001d30:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8001d34:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8001d38:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001d3c:	9301      	str	r3, [sp, #4]
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	9300      	str	r3, [sp, #0]
 8001d42:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001d46:	68b9      	ldr	r1, [r7, #8]
 8001d48:	f000 f9b5 	bl	80020b6 <mpiMontgomeryMul>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8001d52:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	f040 814a 	bne.w	8001ff0 <mpiExpMod+0x5ea>
      }

      //Let R = B^2 * C^-1 mod P
      MPI_CHECK(mpiMontgomeryMul(r, &b, &b, k, p, &t));
 8001d5c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001d60:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001d64:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001d68:	9301      	str	r3, [sp, #4]
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	9300      	str	r3, [sp, #0]
 8001d6e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001d72:	68f8      	ldr	r0, [r7, #12]
 8001d74:	f000 f99f 	bl	80020b6 <mpiMontgomeryMul>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8001d7e:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	f040 8136 	bne.w	8001ff4 <mpiExpMod+0x5ee>
      //Let S[0] = B
      MPI_CHECK(mpiCopy(&s[0], &b));
 8001d88:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001d8c:	f107 0310 	add.w	r3, r7, #16
 8001d90:	4611      	mov	r1, r2
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7ff f851 	bl	8000e3a <mpiCopy>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8001d9e:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	f040 8128 	bne.w	8001ff8 <mpiExpMod+0x5f2>

      //Precompute S[i] = B^(2 * i + 1) * C^-1 mod P
      for(i = 1; i < (1 << (d - 1)); i++)
 8001da8:	2301      	movs	r3, #1
 8001daa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001dae:	e029      	b.n	8001e04 <mpiExpMod+0x3fe>
      {
         MPI_CHECK(mpiMontgomeryMul(&s[i], &s[i - 1], r, k, p, &t));
 8001db0:	f107 0110 	add.w	r1, r7, #16
 8001db4:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001db8:	4613      	mov	r3, r2
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	4413      	add	r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	18c8      	adds	r0, r1, r3
 8001dc2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001dc6:	1e5a      	subs	r2, r3, #1
 8001dc8:	f107 0110 	add.w	r1, r7, #16
 8001dcc:	4613      	mov	r3, r2
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	4413      	add	r3, r2
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	4419      	add	r1, r3
 8001dd6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001dda:	9301      	str	r3, [sp, #4]
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	9300      	str	r3, [sp, #0]
 8001de0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001de4:	68fa      	ldr	r2, [r7, #12]
 8001de6:	f000 f966 	bl	80020b6 <mpiMontgomeryMul>
 8001dea:	4603      	mov	r3, r0
 8001dec:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8001df0:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	f040 8101 	bne.w	8001ffc <mpiExpMod+0x5f6>
      for(i = 1; i < (1 << (d - 1)); i++)
 8001dfa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001dfe:	3301      	adds	r3, #1
 8001e00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001e04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001e08:	3b01      	subs	r3, #1
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001e14:	429a      	cmp	r2, r3
 8001e16:	dbcb      	blt.n	8001db0 <mpiExpMod+0x3aa>
      }

      //Let R = C mod P
      MPI_CHECK(mpiCopy(r, &c2));
 8001e18:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	68f8      	ldr	r0, [r7, #12]
 8001e20:	f7ff f80b 	bl	8000e3a <mpiCopy>
 8001e24:	4603      	mov	r3, r0
 8001e26:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8001e2a:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f040 80e6 	bne.w	8002000 <mpiExpMod+0x5fa>
      MPI_CHECK(mpiMontgomeryRed(r, r, k, p, &t));
 8001e34:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001e38:	9300      	str	r3, [sp, #0]
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001e40:	68f9      	ldr	r1, [r7, #12]
 8001e42:	68f8      	ldr	r0, [r7, #12]
 8001e44:	f000 f9f7 	bl	8002236 <mpiMontgomeryRed>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8001e4e:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f040 80d6 	bne.w	8002004 <mpiExpMod+0x5fe>

      //The exponent is processed in a left-to-right fashion
      i = mpiGetBitLength(e) - 1;
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f7fe febb 	bl	8000bd4 <mpiGetBitLength>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	3b01      	subs	r3, #1
 8001e62:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      //Perform sliding window exponentiation
      while(i >= 0)
 8001e66:	e097      	b.n	8001f98 <mpiExpMod+0x592>
      {
         //The sliding window exponentiation algorithm decomposes E
         //into zero and nonzero windows
         if(!mpiGetBitValue(e, i))
 8001e68:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f7fe feea 	bl	8000c48 <mpiGetBitValue>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d119      	bne.n	8001eae <mpiExpMod+0x4a8>
         {
            //Compute R = R^2 * C^-1 mod P
            MPI_CHECK(mpiMontgomeryMul(r, r, r, k, p, &t));
 8001e7a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001e7e:	9301      	str	r3, [sp, #4]
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	9300      	str	r3, [sp, #0]
 8001e84:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001e88:	68fa      	ldr	r2, [r7, #12]
 8001e8a:	68f9      	ldr	r1, [r7, #12]
 8001e8c:	68f8      	ldr	r0, [r7, #12]
 8001e8e:	f000 f912 	bl	80020b6 <mpiMontgomeryMul>
 8001e92:	4603      	mov	r3, r0
 8001e94:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8001e98:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	f040 80b3 	bne.w	8002008 <mpiExpMod+0x602>
            //Next bit to be processed
            i--;
 8001ea2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001eac:	e074      	b.n	8001f98 <mpiExpMod+0x592>
         }
         else
         {
            //Find the longest window
            n = MAX(i - d + 1, 0);
 8001eae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001eb2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ebc:	d006      	beq.n	8001ecc <mpiExpMod+0x4c6>
 8001ebe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001ec2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	3301      	adds	r3, #1
 8001eca:	e000      	b.n	8001ece <mpiExpMod+0x4c8>
 8001ecc:	2300      	movs	r3, #0
 8001ece:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

            //The least significant bit of the window must be equal to 1
            while(!mpiGetBitValue(e, n)) n++;
 8001ed2:	e004      	b.n	8001ede <mpiExpMod+0x4d8>
 8001ed4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001ed8:	3301      	adds	r3, #1
 8001eda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001ede:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f7fe feaf 	bl	8000c48 <mpiGetBitValue>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d0f1      	beq.n	8001ed4 <mpiExpMod+0x4ce>

            //The algorithm processes more than one bit per iteration
            for(u = 0, j = i; j >= n; j--)
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001ef6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001efa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001efe:	e024      	b.n	8001f4a <mpiExpMod+0x544>
            {
               //Compute R = R^2 * C^-1 mod P
               MPI_CHECK(mpiMontgomeryMul(r, r, r, k, p, &t));
 8001f00:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001f04:	9301      	str	r3, [sp, #4]
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	9300      	str	r3, [sp, #0]
 8001f0a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	68f9      	ldr	r1, [r7, #12]
 8001f12:	68f8      	ldr	r0, [r7, #12]
 8001f14:	f000 f8cf 	bl	80020b6 <mpiMontgomeryMul>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8001f1e:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d172      	bne.n	800200c <mpiExpMod+0x606>
               //Compute the relevant index to be used in the precomputed table
               u = (u << 1) | mpiGetBitValue(e, j);
 8001f26:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f2a:	005c      	lsls	r4, r3, #1
 8001f2c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001f30:	4619      	mov	r1, r3
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f7fe fe88 	bl	8000c48 <mpiGetBitValue>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	4323      	orrs	r3, r4
 8001f3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
            for(u = 0, j = i; j >= n; j--)
 8001f40:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001f44:	3b01      	subs	r3, #1
 8001f46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001f4a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8001f4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001f52:	429a      	cmp	r2, r3
 8001f54:	dad4      	bge.n	8001f00 <mpiExpMod+0x4fa>
            }

            //Compute R = R * T[u/2] * C^-1 mod P
            MPI_CHECK(mpiMontgomeryMul(r, r, &s[u >> 1], k, p, &t));
 8001f56:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f5a:	085a      	lsrs	r2, r3, #1
 8001f5c:	f107 0110 	add.w	r1, r7, #16
 8001f60:	4613      	mov	r3, r2
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	4413      	add	r3, r2
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	18ca      	adds	r2, r1, r3
 8001f6a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001f6e:	9301      	str	r3, [sp, #4]
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	9300      	str	r3, [sp, #0]
 8001f74:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001f78:	68f9      	ldr	r1, [r7, #12]
 8001f7a:	68f8      	ldr	r0, [r7, #12]
 8001f7c:	f000 f89b 	bl	80020b6 <mpiMontgomeryMul>
 8001f80:	4603      	mov	r3, r0
 8001f82:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8001f86:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d140      	bne.n	8002010 <mpiExpMod+0x60a>
            //Next bit to be processed
            i = n - 1;
 8001f8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001f92:	3b01      	subs	r3, #1
 8001f94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
      while(i >= 0)
 8001f98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	f6bf af63 	bge.w	8001e68 <mpiExpMod+0x462>
         }
      }

      //Compute R = R * C^-1 mod P
      MPI_CHECK(mpiMontgomeryRed(r, r, k, p, &t));
 8001fa2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001fa6:	9300      	str	r3, [sp, #0]
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001fae:	68f9      	ldr	r1, [r7, #12]
 8001fb0:	68f8      	ldr	r0, [r7, #12]
 8001fb2:	f000 f940 	bl	8002236 <mpiMontgomeryRed>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8001fbc:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8001fc0:	2b00      	cmp	r3, #0
   }

end:
 8001fc2:	e026      	b.n	8002012 <mpiExpMod+0x60c>
      MPI_CHECK(mpiMulMod(&b, a, a, p));
 8001fc4:	bf00      	nop
 8001fc6:	e024      	b.n	8002012 <mpiExpMod+0x60c>
      MPI_CHECK(mpiCopy(&s[0], a));
 8001fc8:	bf00      	nop
 8001fca:	e022      	b.n	8002012 <mpiExpMod+0x60c>
         MPI_CHECK(mpiMulMod(&s[i], &s[i - 1], &b, p));
 8001fcc:	bf00      	nop
 8001fce:	e020      	b.n	8002012 <mpiExpMod+0x60c>
      MPI_CHECK(mpiSetValue(r, 1));
 8001fd0:	bf00      	nop
 8001fd2:	e01e      	b.n	8002012 <mpiExpMod+0x60c>
            MPI_CHECK(mpiMulMod(r, r, r, p));
 8001fd4:	bf00      	nop
 8001fd6:	e01c      	b.n	8002012 <mpiExpMod+0x60c>
               MPI_CHECK(mpiMulMod(r, r, r, p));
 8001fd8:	bf00      	nop
 8001fda:	e01a      	b.n	8002012 <mpiExpMod+0x60c>
            MPI_CHECK(mpiMulMod(r, r, &s[u >> 1], p));
 8001fdc:	bf00      	nop
 8001fde:	e018      	b.n	8002012 <mpiExpMod+0x60c>
      MPI_CHECK(mpiSetValue(&c2, 1));
 8001fe0:	bf00      	nop
 8001fe2:	e016      	b.n	8002012 <mpiExpMod+0x60c>
      MPI_CHECK(mpiShiftLeft(&c2, 2 * k * (MPI_INT_SIZE * 8)));
 8001fe4:	bf00      	nop
 8001fe6:	e014      	b.n	8002012 <mpiExpMod+0x60c>
      MPI_CHECK(mpiMod(&c2, &c2, p));
 8001fe8:	bf00      	nop
 8001fea:	e012      	b.n	8002012 <mpiExpMod+0x60c>
         MPI_CHECK(mpiMod(&b, a, p));
 8001fec:	bf00      	nop
 8001fee:	e010      	b.n	8002012 <mpiExpMod+0x60c>
         MPI_CHECK(mpiMontgomeryMul(&b, a, &c2, k, p, &t));
 8001ff0:	bf00      	nop
 8001ff2:	e00e      	b.n	8002012 <mpiExpMod+0x60c>
      MPI_CHECK(mpiMontgomeryMul(r, &b, &b, k, p, &t));
 8001ff4:	bf00      	nop
 8001ff6:	e00c      	b.n	8002012 <mpiExpMod+0x60c>
      MPI_CHECK(mpiCopy(&s[0], &b));
 8001ff8:	bf00      	nop
 8001ffa:	e00a      	b.n	8002012 <mpiExpMod+0x60c>
         MPI_CHECK(mpiMontgomeryMul(&s[i], &s[i - 1], r, k, p, &t));
 8001ffc:	bf00      	nop
 8001ffe:	e008      	b.n	8002012 <mpiExpMod+0x60c>
      MPI_CHECK(mpiCopy(r, &c2));
 8002000:	bf00      	nop
 8002002:	e006      	b.n	8002012 <mpiExpMod+0x60c>
      MPI_CHECK(mpiMontgomeryRed(r, r, k, p, &t));
 8002004:	bf00      	nop
 8002006:	e004      	b.n	8002012 <mpiExpMod+0x60c>
            MPI_CHECK(mpiMontgomeryMul(r, r, r, k, p, &t));
 8002008:	bf00      	nop
 800200a:	e002      	b.n	8002012 <mpiExpMod+0x60c>
               MPI_CHECK(mpiMontgomeryMul(r, r, r, k, p, &t));
 800200c:	bf00      	nop
 800200e:	e000      	b.n	8002012 <mpiExpMod+0x60c>
            MPI_CHECK(mpiMontgomeryMul(r, r, &s[u >> 1], k, p, &t));
 8002010:	bf00      	nop
   //Release multiple precision integers
   mpiFree(&b);
 8002012:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002016:	4618      	mov	r0, r3
 8002018:	f7fe fd1b 	bl	8000a52 <mpiFree>
   mpiFree(&c2);
 800201c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002020:	4618      	mov	r0, r3
 8002022:	f7fe fd16 	bl	8000a52 <mpiFree>
   mpiFree(&t);
 8002026:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800202a:	4618      	mov	r0, r3
 800202c:	f7fe fd11 	bl	8000a52 <mpiFree>

   //Release precomputed values
   for(i = 0; (uint_t) i < arraysize(s); i++)
 8002030:	2300      	movs	r3, #0
 8002032:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002036:	e010      	b.n	800205a <mpiExpMod+0x654>
   {
      mpiFree(&s[i]);
 8002038:	f107 0110 	add.w	r1, r7, #16
 800203c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002040:	4613      	mov	r3, r2
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	4413      	add	r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	440b      	add	r3, r1
 800204a:	4618      	mov	r0, r3
 800204c:	f7fe fd01 	bl	8000a52 <mpiFree>
   for(i = 0; (uint_t) i < arraysize(s); i++)
 8002050:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002054:	3301      	adds	r3, #1
 8002056:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800205a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800205e:	2b07      	cmp	r3, #7
 8002060:	d9ea      	bls.n	8002038 <mpiExpMod+0x632>
   }

   //Return status code
   return error;
 8002062:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
}
 8002066:	4618      	mov	r0, r3
 8002068:	37b4      	adds	r7, #180	; 0xb4
 800206a:	46bd      	mov	sp, r7
 800206c:	bd90      	pop	{r4, r7, pc}

0800206e <mpiExpModFast>:
 * @param[in] p Modulus
 * @return Error code
 **/

__weak_func error_t mpiExpModFast(Mpi *r, const Mpi *a, const Mpi *e, const Mpi *p)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b084      	sub	sp, #16
 8002072:	af00      	add	r7, sp, #0
 8002074:	60f8      	str	r0, [r7, #12]
 8002076:	60b9      	str	r1, [r7, #8]
 8002078:	607a      	str	r2, [r7, #4]
 800207a:	603b      	str	r3, [r7, #0]
   //Perform modular exponentiation
   return mpiExpMod(r, a, e, p);
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	68b9      	ldr	r1, [r7, #8]
 8002082:	68f8      	ldr	r0, [r7, #12]
 8002084:	f7ff fcbf 	bl	8001a06 <mpiExpMod>
 8002088:	4603      	mov	r3, r0
}
 800208a:	4618      	mov	r0, r3
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <mpiExpModRegular>:
 * @param[in] p Modulus
 * @return Error code
 **/

__weak_func error_t mpiExpModRegular(Mpi *r, const Mpi *a, const Mpi *e, const Mpi *p)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b084      	sub	sp, #16
 8002096:	af00      	add	r7, sp, #0
 8002098:	60f8      	str	r0, [r7, #12]
 800209a:	60b9      	str	r1, [r7, #8]
 800209c:	607a      	str	r2, [r7, #4]
 800209e:	603b      	str	r3, [r7, #0]
   //Perform modular exponentiation
   return mpiExpMod(r, a, e, p);
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	68b9      	ldr	r1, [r7, #8]
 80020a6:	68f8      	ldr	r0, [r7, #12]
 80020a8:	f7ff fcad 	bl	8001a06 <mpiExpMod>
 80020ac:	4603      	mov	r3, r0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <mpiMontgomeryMul>:
 * @return Error code
 **/

error_t mpiMontgomeryMul(Mpi *r, const Mpi *a, const Mpi *b, uint_t k,
   const Mpi *p, Mpi *t)
{
 80020b6:	b590      	push	{r4, r7, lr}
 80020b8:	b08b      	sub	sp, #44	; 0x2c
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	60f8      	str	r0, [r7, #12]
 80020be:	60b9      	str	r1, [r7, #8]
 80020c0:	607a      	str	r2, [r7, #4]
 80020c2:	603b      	str	r3, [r7, #0]
   uint_t m;
   uint_t n;
   uint_t q;

   //Use Newton's method to compute the inverse of P[0] mod 2^32
   for(m = 2 - p->data[0], i = 0; i < 4; i++)
 80020c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f1c3 0302 	rsb	r3, r3, #2
 80020ce:	61fb      	str	r3, [r7, #28]
 80020d0:	2300      	movs	r3, #0
 80020d2:	623b      	str	r3, [r7, #32]
 80020d4:	e00e      	b.n	80020f4 <mpiMontgomeryMul+0x3e>
   {
      m = m * (2 - m * p->data[0]);
 80020d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	69fa      	ldr	r2, [r7, #28]
 80020de:	fb02 f303 	mul.w	r3, r2, r3
 80020e2:	f1c3 0202 	rsb	r2, r3, #2
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	fb02 f303 	mul.w	r3, r2, r3
 80020ec:	61fb      	str	r3, [r7, #28]
   for(m = 2 - p->data[0], i = 0; i < 4; i++)
 80020ee:	6a3b      	ldr	r3, [r7, #32]
 80020f0:	3301      	adds	r3, #1
 80020f2:	623b      	str	r3, [r7, #32]
 80020f4:	6a3b      	ldr	r3, [r7, #32]
 80020f6:	2b03      	cmp	r3, #3
 80020f8:	d9ed      	bls.n	80020d6 <mpiMontgomeryMul+0x20>
   }

   //Precompute -1/P[0] mod 2^32;
   m = ~m + 1;
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	425b      	negs	r3, r3
 80020fe:	61fb      	str	r3, [r7, #28]

   //We assume that B is always less than 2^k
   n = MIN(b->size, k);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	4293      	cmp	r3, r2
 8002108:	bf28      	it	cs
 800210a:	4613      	movcs	r3, r2
 800210c:	617b      	str	r3, [r7, #20]

   //Make sure T is large enough
   MPI_CHECK(mpiGrow(t, 2 * k + 1));
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	3301      	adds	r3, #1
 8002114:	4619      	mov	r1, r3
 8002116:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002118:	f7fe fcbb 	bl	8000a92 <mpiGrow>
 800211c:	4603      	mov	r3, r0
 800211e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002120:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002122:	2b00      	cmp	r3, #0
 8002124:	d179      	bne.n	800221a <mpiMontgomeryMul+0x164>
   //Let T = 0
   MPI_CHECK(mpiSetValue(t, 0));
 8002126:	2100      	movs	r1, #0
 8002128:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800212a:	f7fe febb 	bl	8000ea4 <mpiSetValue>
 800212e:	4603      	mov	r3, r0
 8002130:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002132:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002134:	2b00      	cmp	r3, #0
 8002136:	d172      	bne.n	800221e <mpiMontgomeryMul+0x168>

   //Perform Montgomery multiplication
   for(i = 0; i < k; i++)
 8002138:	2300      	movs	r3, #0
 800213a:	623b      	str	r3, [r7, #32]
 800213c:	e044      	b.n	80021c8 <mpiMontgomeryMul+0x112>
   {
      //Check current index
      if(i < a->size)
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	6a3a      	ldr	r2, [r7, #32]
 8002144:	429a      	cmp	r2, r3
 8002146:	d227      	bcs.n	8002198 <mpiMontgomeryMul+0xe2>
      {
         //Compute q = ((T[i] + A[i] * B[0]) * m) mod 2^32
         q = (t->data[i] + a->data[i] * b->data[0]) * m;
 8002148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800214a:	689a      	ldr	r2, [r3, #8]
 800214c:	6a3b      	ldr	r3, [r7, #32]
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	4413      	add	r3, r2
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	6899      	ldr	r1, [r3, #8]
 8002158:	6a3b      	ldr	r3, [r7, #32]
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	440b      	add	r3, r1
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	6879      	ldr	r1, [r7, #4]
 8002162:	6889      	ldr	r1, [r1, #8]
 8002164:	6809      	ldr	r1, [r1, #0]
 8002166:	fb01 f303 	mul.w	r3, r1, r3
 800216a:	441a      	add	r2, r3
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	fb02 f303 	mul.w	r3, r2, r3
 8002172:	61bb      	str	r3, [r7, #24]
         //Compute T = T + A[i] * B
         mpiMulAccCore(t->data + i, b->data, n, a->data[i]);
 8002174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002176:	689a      	ldr	r2, [r3, #8]
 8002178:	6a3b      	ldr	r3, [r7, #32]
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	18d0      	adds	r0, r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6899      	ldr	r1, [r3, #8]
 8002182:	697c      	ldr	r4, [r7, #20]
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	689a      	ldr	r2, [r3, #8]
 8002188:	6a3b      	ldr	r3, [r7, #32]
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	4413      	add	r3, r2
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4622      	mov	r2, r4
 8002192:	f000 f870 	bl	8002276 <mpiMulAccCore>
 8002196:	e009      	b.n	80021ac <mpiMontgomeryMul+0xf6>
      }
      else
      {
         //Compute q = (T[i] * m) mod 2^32
         q = t->data[i] * m;
 8002198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800219a:	689a      	ldr	r2, [r3, #8]
 800219c:	6a3b      	ldr	r3, [r7, #32]
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	4413      	add	r3, r2
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	fb02 f303 	mul.w	r3, r2, r3
 80021aa:	61bb      	str	r3, [r7, #24]
      }

      //Compute T = T + q * P
      mpiMulAccCore(t->data + i, p->data, k, q);
 80021ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021ae:	689a      	ldr	r2, [r3, #8]
 80021b0:	6a3b      	ldr	r3, [r7, #32]
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	18d0      	adds	r0, r2, r3
 80021b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021b8:	6899      	ldr	r1, [r3, #8]
 80021ba:	683a      	ldr	r2, [r7, #0]
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	f000 f85a 	bl	8002276 <mpiMulAccCore>
   for(i = 0; i < k; i++)
 80021c2:	6a3b      	ldr	r3, [r7, #32]
 80021c4:	3301      	adds	r3, #1
 80021c6:	623b      	str	r3, [r7, #32]
 80021c8:	6a3a      	ldr	r2, [r7, #32]
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d3b6      	bcc.n	800213e <mpiMontgomeryMul+0x88>
   }

   //Compute R = T / 2^(32 * k)
   MPI_CHECK(mpiShiftRight(t, k * (MPI_INT_SIZE * 8)));
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	015b      	lsls	r3, r3, #5
 80021d4:	4619      	mov	r1, r3
 80021d6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80021d8:	f7ff fa28 	bl	800162c <mpiShiftRight>
 80021dc:	4603      	mov	r3, r0
 80021de:	84fb      	strh	r3, [r7, #38]	; 0x26
 80021e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d11d      	bne.n	8002222 <mpiMontgomeryMul+0x16c>
   MPI_CHECK(mpiCopy(r, t));
 80021e6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80021e8:	68f8      	ldr	r0, [r7, #12]
 80021ea:	f7fe fe26 	bl	8000e3a <mpiCopy>
 80021ee:	4603      	mov	r3, r0
 80021f0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80021f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d116      	bne.n	8002226 <mpiMontgomeryMul+0x170>

   //A final subtraction is required
   if(mpiComp(r, p) >= 0)
 80021f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80021fa:	68f8      	ldr	r0, [r7, #12]
 80021fc:	f7fe fd48 	bl	8000c90 <mpiComp>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	db11      	blt.n	800222a <mpiMontgomeryMul+0x174>
   {
      MPI_CHECK(mpiSub(r, r, p));
 8002206:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002208:	68f9      	ldr	r1, [r7, #12]
 800220a:	68f8      	ldr	r0, [r7, #12]
 800220c:	f7fe ffe0 	bl	80011d0 <mpiSub>
 8002210:	4603      	mov	r3, r0
 8002212:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002214:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002216:	2b00      	cmp	r3, #0
   }

end:
 8002218:	e007      	b.n	800222a <mpiMontgomeryMul+0x174>
   MPI_CHECK(mpiGrow(t, 2 * k + 1));
 800221a:	bf00      	nop
 800221c:	e006      	b.n	800222c <mpiMontgomeryMul+0x176>
   MPI_CHECK(mpiSetValue(t, 0));
 800221e:	bf00      	nop
 8002220:	e004      	b.n	800222c <mpiMontgomeryMul+0x176>
   MPI_CHECK(mpiShiftRight(t, k * (MPI_INT_SIZE * 8)));
 8002222:	bf00      	nop
 8002224:	e002      	b.n	800222c <mpiMontgomeryMul+0x176>
   MPI_CHECK(mpiCopy(r, t));
 8002226:	bf00      	nop
 8002228:	e000      	b.n	800222c <mpiMontgomeryMul+0x176>
end:
 800222a:	bf00      	nop
   //Return status code
   return error;
 800222c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 800222e:	4618      	mov	r0, r3
 8002230:	372c      	adds	r7, #44	; 0x2c
 8002232:	46bd      	mov	sp, r7
 8002234:	bd90      	pop	{r4, r7, pc}

08002236 <mpiMontgomeryRed>:
 * @param[in] t An preallocated integer T (for internal operation)
 * @return Error code
 **/

error_t mpiMontgomeryRed(Mpi *r, const Mpi *a, uint_t k, const Mpi *p, Mpi *t)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b08a      	sub	sp, #40	; 0x28
 800223a:	af02      	add	r7, sp, #8
 800223c:	60f8      	str	r0, [r7, #12]
 800223e:	60b9      	str	r1, [r7, #8]
 8002240:	607a      	str	r2, [r7, #4]
 8002242:	603b      	str	r3, [r7, #0]
   uint_t value;
   Mpi b;

   //Let B = 1
   value = 1;
 8002244:	2301      	movs	r3, #1
 8002246:	61fb      	str	r3, [r7, #28]
   b.sign = 1;
 8002248:	2301      	movs	r3, #1
 800224a:	613b      	str	r3, [r7, #16]
   b.size = 1;
 800224c:	2301      	movs	r3, #1
 800224e:	617b      	str	r3, [r7, #20]
   b.data = &value;
 8002250:	f107 031c 	add.w	r3, r7, #28
 8002254:	61bb      	str	r3, [r7, #24]

   //Compute R = A / 2^k mod P
   return mpiMontgomeryMul(r, a, &b, k, p, t);
 8002256:	f107 0210 	add.w	r2, r7, #16
 800225a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800225c:	9301      	str	r3, [sp, #4]
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	9300      	str	r3, [sp, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	68b9      	ldr	r1, [r7, #8]
 8002266:	68f8      	ldr	r0, [r7, #12]
 8002268:	f7ff ff25 	bl	80020b6 <mpiMontgomeryMul>
 800226c:	4603      	mov	r3, r0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3720      	adds	r7, #32
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <mpiMulAccCore>:
 * @param[in] m Size of A in words
 * @param[in] b Second operand B
 **/

void mpiMulAccCore(uint_t *r, const uint_t *a, int_t m, const uint_t b)
{
 8002276:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800227a:	b08b      	sub	sp, #44	; 0x2c
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
 8002284:	603b      	str	r3, [r7, #0]
   uint32_t u;
   uint32_t v;
   uint64_t p;

   //Clear variables
   c = 0;
 8002286:	2300      	movs	r3, #0
 8002288:	623b      	str	r3, [r7, #32]
   u = 0;
 800228a:	2300      	movs	r3, #0
 800228c:	61bb      	str	r3, [r7, #24]
   v = 0;
 800228e:	2300      	movs	r3, #0
 8002290:	61fb      	str	r3, [r7, #28]

   //Perform multiplication
   for(i = 0; i < m; i++)
 8002292:	2300      	movs	r3, #0
 8002294:	627b      	str	r3, [r7, #36]	; 0x24
 8002296:	e04d      	b.n	8002334 <mpiMulAccCore+0xbe>
   {
      p = (uint64_t) a[i] * b;
 8002298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	68ba      	ldr	r2, [r7, #8]
 800229e:	4413      	add	r3, r2
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2200      	movs	r2, #0
 80022a4:	4698      	mov	r8, r3
 80022a6:	4691      	mov	r9, r2
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	2200      	movs	r2, #0
 80022ac:	469a      	mov	sl, r3
 80022ae:	4693      	mov	fp, r2
 80022b0:	fb0a f209 	mul.w	r2, sl, r9
 80022b4:	fb08 f30b 	mul.w	r3, r8, fp
 80022b8:	4413      	add	r3, r2
 80022ba:	fba8 450a 	umull	r4, r5, r8, sl
 80022be:	442b      	add	r3, r5
 80022c0:	461d      	mov	r5, r3
 80022c2:	e9c7 4504 	strd	r4, r5, [r7, #16]
 80022c6:	e9c7 4504 	strd	r4, r5, [r7, #16]
      u = (uint32_t) p;
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	61bb      	str	r3, [r7, #24]
      v = (uint32_t) (p >> 32);
 80022ce:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80022d2:	f04f 0200 	mov.w	r2, #0
 80022d6:	f04f 0300 	mov.w	r3, #0
 80022da:	000a      	movs	r2, r1
 80022dc:	2300      	movs	r3, #0
 80022de:	4613      	mov	r3, r2
 80022e0:	61fb      	str	r3, [r7, #28]

      u += c;
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	6a3b      	ldr	r3, [r7, #32]
 80022e6:	4413      	add	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
      if(u < c) v++;
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	6a3b      	ldr	r3, [r7, #32]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d202      	bcs.n	80022f8 <mpiMulAccCore+0x82>
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	3301      	adds	r3, #1
 80022f6:	61fb      	str	r3, [r7, #28]

      u += r[i];
 80022f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	68fa      	ldr	r2, [r7, #12]
 80022fe:	4413      	add	r3, r2
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	4413      	add	r3, r2
 8002306:	61bb      	str	r3, [r7, #24]
      if(u < r[i]) v++;
 8002308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	68fa      	ldr	r2, [r7, #12]
 800230e:	4413      	add	r3, r2
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	429a      	cmp	r2, r3
 8002316:	d202      	bcs.n	800231e <mpiMulAccCore+0xa8>
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	3301      	adds	r3, #1
 800231c:	61fb      	str	r3, [r7, #28]

      r[i] = u;
 800231e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	4413      	add	r3, r2
 8002326:	69ba      	ldr	r2, [r7, #24]
 8002328:	601a      	str	r2, [r3, #0]
      c = v;
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	623b      	str	r3, [r7, #32]
   for(i = 0; i < m; i++)
 800232e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002330:	3301      	adds	r3, #1
 8002332:	627b      	str	r3, [r7, #36]	; 0x24
 8002334:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	429a      	cmp	r2, r3
 800233a:	dbad      	blt.n	8002298 <mpiMulAccCore+0x22>
   }

   //Propagate carry
   for(; c != 0; i++)
 800233c:	e01a      	b.n	8002374 <mpiMulAccCore+0xfe>
   {
      r[i] += c;
 800233e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	4413      	add	r3, r2
 8002346:	6819      	ldr	r1, [r3, #0]
 8002348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	68fa      	ldr	r2, [r7, #12]
 800234e:	4413      	add	r3, r2
 8002350:	6a3a      	ldr	r2, [r7, #32]
 8002352:	440a      	add	r2, r1
 8002354:	601a      	str	r2, [r3, #0]
      c = (r[i] < c);
 8002356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	4413      	add	r3, r2
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6a3a      	ldr	r2, [r7, #32]
 8002362:	429a      	cmp	r2, r3
 8002364:	bf8c      	ite	hi
 8002366:	2301      	movhi	r3, #1
 8002368:	2300      	movls	r3, #0
 800236a:	b2db      	uxtb	r3, r3
 800236c:	623b      	str	r3, [r7, #32]
   for(; c != 0; i++)
 800236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002370:	3301      	adds	r3, #1
 8002372:	627b      	str	r3, [r7, #36]	; 0x24
 8002374:	6a3b      	ldr	r3, [r7, #32]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1e1      	bne.n	800233e <mpiMulAccCore+0xc8>
   }
}
 800237a:	bf00      	nop
 800237c:	bf00      	nop
 800237e:	372c      	adds	r7, #44	; 0x2c
 8002380:	46bd      	mov	sp, r7
 8002382:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002386:	4770      	bx	lr

08002388 <rsassaPkcs1v15Sign>:
 * @return Error code
 **/

error_t rsassaPkcs1v15Sign(const RsaPrivateKey *key, const HashAlgo *hash,
   const uint8_t *digest, uint8_t *signature, size_t *signatureLen)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b096      	sub	sp, #88	; 0x58
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]
 8002394:	603b      	str	r3, [r7, #0]
   Mpi m;
   Mpi s;
   Mpi t;

   //Check parameters
   if(key == NULL || hash == NULL || digest == NULL)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d005      	beq.n	80023a8 <rsassaPkcs1v15Sign+0x20>
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d002      	beq.n	80023a8 <rsassaPkcs1v15Sign+0x20>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d101      	bne.n	80023ac <rsassaPkcs1v15Sign+0x24>
      return ERROR_INVALID_PARAMETER;
 80023a8:	2302      	movs	r3, #2
 80023aa:	e0bc      	b.n	8002526 <rsassaPkcs1v15Sign+0x19e>
   if(signature == NULL || signatureLen == NULL)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d002      	beq.n	80023b8 <rsassaPkcs1v15Sign+0x30>
 80023b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d101      	bne.n	80023bc <rsassaPkcs1v15Sign+0x34>
      return ERROR_INVALID_PARAMETER;
 80023b8:	2302      	movs	r3, #2
 80023ba:	e0b4      	b.n	8002526 <rsassaPkcs1v15Sign+0x19e>
   TRACE_DEBUG_MPI("    ", &key->qinv);
   TRACE_DEBUG("  Message digest:\r\n");
   TRACE_DEBUG_ARRAY("    ", digest, hash->digestSize);

   //Initialize multiple-precision integers
   mpiInit(&m);
 80023bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7fe fb33 	bl	8000a2c <mpiInit>
   mpiInit(&s);
 80023c6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7fe fb2e 	bl	8000a2c <mpiInit>
   mpiInit(&t);
 80023d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7fe fb29 	bl	8000a2c <mpiInit>

   //Get the length in octets of the modulus n
   k = mpiGetByteLength(&key->n);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	4618      	mov	r0, r3
 80023de:	f7fe fbbf 	bl	8000b60 <mpiGetByteLength>
 80023e2:	6538      	str	r0, [r7, #80]	; 0x50
   //Point to the buffer where the encoded message EM will be formatted
   em = signature;
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	64fb      	str	r3, [r7, #76]	; 0x4c

   //Apply the EMSA-PKCS1-v1.5 encoding operation
   error = emsaPkcs1v15Encode(hash, digest, em, k);
 80023e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80023ec:	6879      	ldr	r1, [r7, #4]
 80023ee:	68b8      	ldr	r0, [r7, #8]
 80023f0:	f000 fa55 	bl	800289e <emsaPkcs1v15Encode>
 80023f4:	4603      	mov	r3, r0
 80023f6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
   //Any error to report?
   if(error)
 80023fa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d002      	beq.n	8002408 <rsassaPkcs1v15Sign+0x80>
      return error;
 8002402:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002406:	e08e      	b.n	8002526 <rsassaPkcs1v15Sign+0x19e>

   //Start of exception handling block
   do
   {
      //Convert the encoded message EM to an integer message representative m
      error = mpiReadRaw(&m, em, k);
 8002408:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800240c:	2301      	movs	r3, #1
 800240e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002410:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002412:	f7fe fd76 	bl	8000f02 <mpiImport>
 8002416:	4603      	mov	r3, r0
 8002418:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
      //Conversion failed?
      if(error)
 800241c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002420:	2b00      	cmp	r3, #0
 8002422:	d168      	bne.n	80024f6 <rsassaPkcs1v15Sign+0x16e>
         break;

      //Apply the RSASP1 signature primitive
      error = rsasp1(key, &m, &s);
 8002424:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002428:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800242c:	4619      	mov	r1, r3
 800242e:	68f8      	ldr	r0, [r7, #12]
 8002430:	f000 fa15 	bl	800285e <rsasp1>
 8002434:	4603      	mov	r3, r0
 8002436:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
      //Any error to report?
      if(error)
 800243a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800243e:	2b00      	cmp	r3, #0
 8002440:	d15b      	bne.n	80024fa <rsassaPkcs1v15Sign+0x172>
         break;

      //When unprotected, RSA-CRT is vulnerable to the Bellcore attack
      if(key->n.size && key->e.size && key->p.size && key->q.size &&
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d043      	beq.n	80024d2 <rsassaPkcs1v15Sign+0x14a>
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d03f      	beq.n	80024d2 <rsassaPkcs1v15Sign+0x14a>
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002456:	2b00      	cmp	r3, #0
 8002458:	d03b      	beq.n	80024d2 <rsassaPkcs1v15Sign+0x14a>
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800245e:	2b00      	cmp	r3, #0
 8002460:	d037      	beq.n	80024d2 <rsassaPkcs1v15Sign+0x14a>
         key->dp.size && key->dq.size && key->qinv.size)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
      if(key->n.size && key->e.size && key->p.size && key->q.size &&
 8002466:	2b00      	cmp	r3, #0
 8002468:	d033      	beq.n	80024d2 <rsassaPkcs1v15Sign+0x14a>
         key->dp.size && key->dq.size && key->qinv.size)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800246e:	2b00      	cmp	r3, #0
 8002470:	d02f      	beq.n	80024d2 <rsassaPkcs1v15Sign+0x14a>
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002476:	2b00      	cmp	r3, #0
 8002478:	d02b      	beq.n	80024d2 <rsassaPkcs1v15Sign+0x14a>
      {
         RsaPublicKey publicKey;

         //Retrieve modulus and public exponent
         publicKey.n = key->n;
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	f107 0310 	add.w	r3, r7, #16
 8002480:	ca07      	ldmia	r2, {r0, r1, r2}
 8002482:	e883 0007 	stmia.w	r3, {r0, r1, r2}
         publicKey.e = key->e;
 8002486:	68fa      	ldr	r2, [r7, #12]
 8002488:	f107 031c 	add.w	r3, r7, #28
 800248c:	320c      	adds	r2, #12
 800248e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002490:	e883 0007 	stmia.w	r3, {r0, r1, r2}

         //Apply the RSAVP1 verification primitive
         error = rsavp1(&publicKey, &s, &t);
 8002494:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002498:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800249c:	f107 0310 	add.w	r3, r7, #16
 80024a0:	4618      	mov	r0, r3
 80024a2:	f000 f9ec 	bl	800287e <rsavp1>
 80024a6:	4603      	mov	r3, r0
 80024a8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
         //Any error to report?
         if(error)
 80024ac:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d124      	bne.n	80024fe <rsassaPkcs1v15Sign+0x176>
            break;

         //Verify the RSA signature in order to protect against RSA-CRT key leak
         if(mpiComp(&t, &m) != 0)
 80024b4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80024b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024bc:	4611      	mov	r1, r2
 80024be:	4618      	mov	r0, r3
 80024c0:	f7fe fbe6 	bl	8000c90 <mpiComp>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d003      	beq.n	80024d2 <rsassaPkcs1v15Sign+0x14a>
         {
            //A signature fault has been detected
            error = ERROR_FAILURE;
 80024ca:	2301      	movs	r3, #1
 80024cc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
            break;
 80024d0:	e018      	b.n	8002504 <rsassaPkcs1v15Sign+0x17c>
         }
      }

      //Convert the signature representative s to a signature of length k octets
      error = mpiWriteRaw(&s, signature, k);
 80024d2:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80024d6:	2301      	movs	r3, #1
 80024d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80024da:	6839      	ldr	r1, [r7, #0]
 80024dc:	f7fe fdc5 	bl	800106a <mpiExport>
 80024e0:	4603      	mov	r3, r0
 80024e2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
      //Conversion failed?
      if(error)
 80024e6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d109      	bne.n	8002502 <rsassaPkcs1v15Sign+0x17a>
         break;

      //Length of the resulting signature
      *signatureLen = k;
 80024ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	e006      	b.n	8002504 <rsassaPkcs1v15Sign+0x17c>
         break;
 80024f6:	bf00      	nop
 80024f8:	e004      	b.n	8002504 <rsassaPkcs1v15Sign+0x17c>
         break;
 80024fa:	bf00      	nop
 80024fc:	e002      	b.n	8002504 <rsassaPkcs1v15Sign+0x17c>
            break;
 80024fe:	bf00      	nop
 8002500:	e000      	b.n	8002504 <rsassaPkcs1v15Sign+0x17c>
         break;
 8002502:	bf00      	nop

      //End of exception handling block
   } while(0);

   //Free previously allocated memory
   mpiFree(&m);
 8002504:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002508:	4618      	mov	r0, r3
 800250a:	f7fe faa2 	bl	8000a52 <mpiFree>
   mpiFree(&s);
 800250e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002512:	4618      	mov	r0, r3
 8002514:	f7fe fa9d 	bl	8000a52 <mpiFree>
   mpiFree(&t);
 8002518:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800251c:	4618      	mov	r0, r3
 800251e:	f7fe fa98 	bl	8000a52 <mpiFree>

   //Return status code
   return error;
 8002522:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
}
 8002526:	4618      	mov	r0, r3
 8002528:	3758      	adds	r7, #88	; 0x58
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <rsassaPkcs1v15Verify>:
 * @return Error code
 **/

error_t rsassaPkcs1v15Verify(const RsaPublicKey *key, const HashAlgo *hash,
   const uint8_t *digest, const uint8_t *signature, size_t signatureLen)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b08e      	sub	sp, #56	; 0x38
 8002532:	af00      	add	r7, sp, #0
 8002534:	60f8      	str	r0, [r7, #12]
 8002536:	60b9      	str	r1, [r7, #8]
 8002538:	607a      	str	r2, [r7, #4]
 800253a:	603b      	str	r3, [r7, #0]
   uint8_t *em;
   Mpi s;
   Mpi m;

   //Check parameters
   if(key == NULL || hash == NULL || digest == NULL || signature == NULL)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d008      	beq.n	8002554 <rsassaPkcs1v15Verify+0x26>
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d005      	beq.n	8002554 <rsassaPkcs1v15Verify+0x26>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d002      	beq.n	8002554 <rsassaPkcs1v15Verify+0x26>
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d101      	bne.n	8002558 <rsassaPkcs1v15Verify+0x2a>
      return ERROR_INVALID_PARAMETER;
 8002554:	2302      	movs	r3, #2
 8002556:	e06a      	b.n	800262e <rsassaPkcs1v15Verify+0x100>
   TRACE_DEBUG_ARRAY("    ", digest, hash->digestSize);
   TRACE_DEBUG("  Signature:\r\n");
   TRACE_DEBUG_ARRAY("    ", signature, signatureLen);

   //Initialize multiple-precision integers
   mpiInit(&s);
 8002558:	f107 0320 	add.w	r3, r7, #32
 800255c:	4618      	mov	r0, r3
 800255e:	f7fe fa65 	bl	8000a2c <mpiInit>
   mpiInit(&m);
 8002562:	f107 0314 	add.w	r3, r7, #20
 8002566:	4618      	mov	r0, r3
 8002568:	f7fe fa60 	bl	8000a2c <mpiInit>

   //Get the length in octets of the modulus n
   k = mpiGetByteLength(&key->n);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	4618      	mov	r0, r3
 8002570:	f7fe faf6 	bl	8000b60 <mpiGetByteLength>
 8002574:	6338      	str	r0, [r7, #48]	; 0x30

   //Make sure the modulus is valid
   if(k == 0)
 8002576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002578:	2b00      	cmp	r3, #0
 800257a:	d101      	bne.n	8002580 <rsassaPkcs1v15Verify+0x52>
      return ERROR_INVALID_PARAMETER;
 800257c:	2302      	movs	r3, #2
 800257e:	e056      	b.n	800262e <rsassaPkcs1v15Verify+0x100>

   //Check the length of the signature
   if(signatureLen != k)
 8002580:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002584:	429a      	cmp	r2, r3
 8002586:	d002      	beq.n	800258e <rsassaPkcs1v15Verify+0x60>
      return ERROR_INVALID_SIGNATURE;
 8002588:	f240 230d 	movw	r3, #525	; 0x20d
 800258c:	e04f      	b.n	800262e <rsassaPkcs1v15Verify+0x100>

   //Allocate a memory buffer to hold the encoded message
   em = cryptoAllocMem(k);
 800258e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002590:	f002 f99c 	bl	80048cc <osAllocMem>
 8002594:	62f8      	str	r0, [r7, #44]	; 0x2c
   //Failed to allocate memory?
   if(em == NULL)
 8002596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002598:	2b00      	cmp	r3, #0
 800259a:	d101      	bne.n	80025a0 <rsassaPkcs1v15Verify+0x72>
      return ERROR_OUT_OF_MEMORY;
 800259c:	2364      	movs	r3, #100	; 0x64
 800259e:	e046      	b.n	800262e <rsassaPkcs1v15Verify+0x100>

   //Start of exception handling block
   do
   {
      //Convert the signature to an integer signature representative s
      error = mpiReadRaw(&s, signature, signatureLen);
 80025a0:	f107 0020 	add.w	r0, r7, #32
 80025a4:	2301      	movs	r3, #1
 80025a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80025a8:	6839      	ldr	r1, [r7, #0]
 80025aa:	f7fe fcaa 	bl	8000f02 <mpiImport>
 80025ae:	4603      	mov	r3, r0
 80025b0:	86fb      	strh	r3, [r7, #54]	; 0x36
      //Conversion failed?
      if(error)
 80025b2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d127      	bne.n	8002608 <rsassaPkcs1v15Verify+0xda>
         break;

      //Apply the RSAVP1 verification primitive
      error = rsavp1(key, &s, &m);
 80025b8:	f107 0214 	add.w	r2, r7, #20
 80025bc:	f107 0320 	add.w	r3, r7, #32
 80025c0:	4619      	mov	r1, r3
 80025c2:	68f8      	ldr	r0, [r7, #12]
 80025c4:	f000 f95b 	bl	800287e <rsavp1>
 80025c8:	4603      	mov	r3, r0
 80025ca:	86fb      	strh	r3, [r7, #54]	; 0x36
      //Any error to report?
      if(error)
 80025cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d11c      	bne.n	800260c <rsassaPkcs1v15Verify+0xde>
         break;

      //Convert the message representative m to an encoded message EM of
      //length k octets
      error = mpiWriteRaw(&m, em, k);
 80025d2:	f107 0014 	add.w	r0, r7, #20
 80025d6:	2301      	movs	r3, #1
 80025d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80025dc:	f7fe fd45 	bl	800106a <mpiExport>
 80025e0:	4603      	mov	r3, r0
 80025e2:	86fb      	strh	r3, [r7, #54]	; 0x36
      //Conversion failed?
      if(error)
 80025e4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d112      	bne.n	8002610 <rsassaPkcs1v15Verify+0xe2>
      //Debug message
      TRACE_DEBUG("  Encoded message:\r\n");
      TRACE_DEBUG_ARRAY("    ", em, k);

      //Verify the encoded message EM
      error = emsaPkcs1v15Verify(hash, digest, em, k);
 80025ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025ee:	6879      	ldr	r1, [r7, #4]
 80025f0:	68b8      	ldr	r0, [r7, #8]
 80025f2:	f000 fa06 	bl	8002a02 <emsaPkcs1v15Verify>
 80025f6:	4603      	mov	r3, r0
 80025f8:	86fb      	strh	r3, [r7, #54]	; 0x36
      //Any error to report?
      if(error)
 80025fa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d008      	beq.n	8002612 <rsassaPkcs1v15Verify+0xe4>
      {
         //The signature is not valid
         error = ERROR_INVALID_SIGNATURE;
 8002600:	f240 230d 	movw	r3, #525	; 0x20d
 8002604:	86fb      	strh	r3, [r7, #54]	; 0x36
         break;
 8002606:	e004      	b.n	8002612 <rsassaPkcs1v15Verify+0xe4>
         break;
 8002608:	bf00      	nop
 800260a:	e002      	b.n	8002612 <rsassaPkcs1v15Verify+0xe4>
         break;
 800260c:	bf00      	nop
 800260e:	e000      	b.n	8002612 <rsassaPkcs1v15Verify+0xe4>
         break;
 8002610:	bf00      	nop

      //End of exception handling block
   } while(0);

   //Release the encoded message
   cryptoFreeMem(em);
 8002612:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002614:	f002 f968 	bl	80048e8 <osFreeMem>

   //Release multiple precision integers
   mpiFree(&s);
 8002618:	f107 0320 	add.w	r3, r7, #32
 800261c:	4618      	mov	r0, r3
 800261e:	f7fe fa18 	bl	8000a52 <mpiFree>
   mpiFree(&m);
 8002622:	f107 0314 	add.w	r3, r7, #20
 8002626:	4618      	mov	r0, r3
 8002628:	f7fe fa13 	bl	8000a52 <mpiFree>

   //Return status code
   return error;
 800262c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
}
 800262e:	4618      	mov	r0, r3
 8002630:	3738      	adds	r7, #56	; 0x38
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <rsaep>:
 * @param[out] c Ciphertext representative
 * @return Error code
 **/

__weak_func error_t rsaep(const RsaPublicKey *key, const Mpi *m, Mpi *c)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	b084      	sub	sp, #16
 800263a:	af00      	add	r7, sp, #0
 800263c:	60f8      	str	r0, [r7, #12]
 800263e:	60b9      	str	r1, [r7, #8]
 8002640:	607a      	str	r2, [r7, #4]
   //Ensure the RSA public key is valid
   if(!key->n.size || !key->e.size)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d003      	beq.n	8002652 <rsaep+0x1c>
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <rsaep+0x20>
      return ERROR_INVALID_PARAMETER;
 8002652:	2302      	movs	r3, #2
 8002654:	e01a      	b.n	800268c <rsaep+0x56>

   //The message representative m shall be between 0 and n - 1
   if(mpiCompInt(m, 0) < 0 || mpiComp(m, &key->n) >= 0)
 8002656:	2100      	movs	r1, #0
 8002658:	68b8      	ldr	r0, [r7, #8]
 800265a:	f7fe fb7f 	bl	8000d5c <mpiCompInt>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	db07      	blt.n	8002674 <rsaep+0x3e>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	4619      	mov	r1, r3
 8002668:	68b8      	ldr	r0, [r7, #8]
 800266a:	f7fe fb11 	bl	8000c90 <mpiComp>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	db02      	blt.n	800267a <rsaep+0x44>
      return ERROR_OUT_OF_RANGE;
 8002674:	f44f 7383 	mov.w	r3, #262	; 0x106
 8002678:	e008      	b.n	800268c <rsaep+0x56>

   //Perform modular exponentiation (c = m ^ e mod n)
   return mpiExpModFast(c, m, &key->e, &key->n);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f103 020c 	add.w	r2, r3, #12
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	68b9      	ldr	r1, [r7, #8]
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f7ff fcf2 	bl	800206e <mpiExpModFast>
 800268a:	4603      	mov	r3, r0
}
 800268c:	4618      	mov	r0, r3
 800268e:	3710      	adds	r7, #16
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <rsadp>:
 * @param[out] m Message representative
 * @return Error code
 **/

__weak_func error_t rsadp(const RsaPrivateKey *key, const Mpi *c, Mpi *m)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b08e      	sub	sp, #56	; 0x38
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	607a      	str	r2, [r7, #4]
   Mpi m1;
   Mpi m2;
   Mpi h;

   //The ciphertext representative c shall be between 0 and n - 1
   if(mpiCompInt(c, 0) < 0 || mpiComp(c, &key->n) >= 0)
 80026a0:	2100      	movs	r1, #0
 80026a2:	68b8      	ldr	r0, [r7, #8]
 80026a4:	f7fe fb5a 	bl	8000d5c <mpiCompInt>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	db07      	blt.n	80026be <rsadp+0x2a>
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	4619      	mov	r1, r3
 80026b2:	68b8      	ldr	r0, [r7, #8]
 80026b4:	f7fe faec 	bl	8000c90 <mpiComp>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	db02      	blt.n	80026c4 <rsadp+0x30>
      return ERROR_OUT_OF_RANGE;
 80026be:	f44f 7383 	mov.w	r3, #262	; 0x106
 80026c2:	e0c8      	b.n	8002856 <rsadp+0x1c2>

   //Initialize multiple-precision integers
   mpiInit(&m1);
 80026c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7fe f9af 	bl	8000a2c <mpiInit>
   mpiInit(&m2);
 80026ce:	f107 031c 	add.w	r3, r7, #28
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7fe f9aa 	bl	8000a2c <mpiInit>
   mpiInit(&h);
 80026d8:	f107 0310 	add.w	r3, r7, #16
 80026dc:	4618      	mov	r0, r3
 80026de:	f7fe f9a5 	bl	8000a2c <mpiInit>

   //Use the Chinese remainder algorithm?
   if(mpiGetLength(&key->n) > 0 && mpiGetLength(&key->p) > 0 &&
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7fe fa14 	bl	8000b12 <mpiGetLength>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d07c      	beq.n	80027ea <rsadp+0x156>
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	3324      	adds	r3, #36	; 0x24
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7fe fa0c 	bl	8000b12 <mpiGetLength>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d074      	beq.n	80027ea <rsadp+0x156>
      mpiGetLength(&key->q) > 0 && mpiGetLength(&key->dp) > 0 &&
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	3330      	adds	r3, #48	; 0x30
 8002704:	4618      	mov	r0, r3
 8002706:	f7fe fa04 	bl	8000b12 <mpiGetLength>
 800270a:	4603      	mov	r3, r0
   if(mpiGetLength(&key->n) > 0 && mpiGetLength(&key->p) > 0 &&
 800270c:	2b00      	cmp	r3, #0
 800270e:	d06c      	beq.n	80027ea <rsadp+0x156>
      mpiGetLength(&key->q) > 0 && mpiGetLength(&key->dp) > 0 &&
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	333c      	adds	r3, #60	; 0x3c
 8002714:	4618      	mov	r0, r3
 8002716:	f7fe f9fc 	bl	8000b12 <mpiGetLength>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d064      	beq.n	80027ea <rsadp+0x156>
      mpiGetLength(&key->dq) > 0 && mpiGetLength(&key->qinv) > 0)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	3348      	adds	r3, #72	; 0x48
 8002724:	4618      	mov	r0, r3
 8002726:	f7fe f9f4 	bl	8000b12 <mpiGetLength>
 800272a:	4603      	mov	r3, r0
      mpiGetLength(&key->q) > 0 && mpiGetLength(&key->dp) > 0 &&
 800272c:	2b00      	cmp	r3, #0
 800272e:	d05c      	beq.n	80027ea <rsadp+0x156>
      mpiGetLength(&key->dq) > 0 && mpiGetLength(&key->qinv) > 0)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	3354      	adds	r3, #84	; 0x54
 8002734:	4618      	mov	r0, r3
 8002736:	f7fe f9ec 	bl	8000b12 <mpiGetLength>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d054      	beq.n	80027ea <rsadp+0x156>
   {
      //Compute m1 = c ^ dP mod p
      MPI_CHECK(mpiExpModRegular(&m1, c, &key->dp, &key->p));
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	3324      	adds	r3, #36	; 0x24
 800274a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800274e:	68b9      	ldr	r1, [r7, #8]
 8002750:	f7ff fc9f 	bl	8002092 <mpiExpModRegular>
 8002754:	4603      	mov	r3, r0
 8002756:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002758:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800275a:	2b00      	cmp	r3, #0
 800275c:	d162      	bne.n	8002824 <rsadp+0x190>
      //Compute m2 = c ^ dQ mod q
      MPI_CHECK(mpiExpModRegular(&m2, c, &key->dq, &key->q));
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	3330      	adds	r3, #48	; 0x30
 8002768:	f107 001c 	add.w	r0, r7, #28
 800276c:	68b9      	ldr	r1, [r7, #8]
 800276e:	f7ff fc90 	bl	8002092 <mpiExpModRegular>
 8002772:	4603      	mov	r3, r0
 8002774:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002776:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002778:	2b00      	cmp	r3, #0
 800277a:	d155      	bne.n	8002828 <rsadp+0x194>
      //Let h = (m1 - m2) * qInv mod p
      MPI_CHECK(mpiSub(&h, &m1, &m2));
 800277c:	f107 021c 	add.w	r2, r7, #28
 8002780:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002784:	f107 0310 	add.w	r3, r7, #16
 8002788:	4618      	mov	r0, r3
 800278a:	f7fe fd21 	bl	80011d0 <mpiSub>
 800278e:	4603      	mov	r3, r0
 8002790:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002792:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002794:	2b00      	cmp	r3, #0
 8002796:	d149      	bne.n	800282c <rsadp+0x198>
      MPI_CHECK(mpiMulMod(&h, &h, &key->qinv, &key->p));
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	3324      	adds	r3, #36	; 0x24
 80027a2:	f107 0110 	add.w	r1, r7, #16
 80027a6:	f107 0010 	add.w	r0, r7, #16
 80027aa:	f7ff f90b 	bl	80019c4 <mpiMulMod>
 80027ae:	4603      	mov	r3, r0
 80027b0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80027b2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d13b      	bne.n	8002830 <rsadp+0x19c>
      //Let m = m2 + q * h
      MPI_CHECK(mpiMul(m, &key->q, &h));
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	3330      	adds	r3, #48	; 0x30
 80027bc:	f107 0210 	add.w	r2, r7, #16
 80027c0:	4619      	mov	r1, r3
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f7fe ffc2 	bl	800174c <mpiMul>
 80027c8:	4603      	mov	r3, r0
 80027ca:	86fb      	strh	r3, [r7, #54]	; 0x36
 80027cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d130      	bne.n	8002834 <rsadp+0x1a0>
      MPI_CHECK(mpiAdd(m, m, &m2));
 80027d2:	f107 031c 	add.w	r3, r7, #28
 80027d6:	461a      	mov	r2, r3
 80027d8:	6879      	ldr	r1, [r7, #4]
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f7fe fcbc 	bl	8001158 <mpiAdd>
 80027e0:	4603      	mov	r3, r0
 80027e2:	86fb      	strh	r3, [r7, #54]	; 0x36
 80027e4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	e025      	b.n	8002836 <rsadp+0x1a2>
   }
   //Use modular exponentiation?
   else if(mpiGetLength(&key->n) > 0 && mpiGetLength(&key->d) > 0)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7fe f990 	bl	8000b12 <mpiGetLength>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d012      	beq.n	800281e <rsadp+0x18a>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	3318      	adds	r3, #24
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7fe f988 	bl	8000b12 <mpiGetLength>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d00a      	beq.n	800281e <rsadp+0x18a>
   {
      //Let m = c ^ d mod n
      error = mpiExpModRegular(m, c, &key->d, &key->n);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f103 0218 	add.w	r2, r3, #24
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	68b9      	ldr	r1, [r7, #8]
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f7ff fc3d 	bl	8002092 <mpiExpModRegular>
 8002818:	4603      	mov	r3, r0
 800281a:	86fb      	strh	r3, [r7, #54]	; 0x36
 800281c:	e00b      	b.n	8002836 <rsadp+0x1a2>
   }
   //Invalid parameters?
   else
   {
      //Report an error
      error = ERROR_INVALID_PARAMETER;
 800281e:	2302      	movs	r3, #2
 8002820:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002822:	e008      	b.n	8002836 <rsadp+0x1a2>
      MPI_CHECK(mpiExpModRegular(&m1, c, &key->dp, &key->p));
 8002824:	bf00      	nop
 8002826:	e006      	b.n	8002836 <rsadp+0x1a2>
      MPI_CHECK(mpiExpModRegular(&m2, c, &key->dq, &key->q));
 8002828:	bf00      	nop
 800282a:	e004      	b.n	8002836 <rsadp+0x1a2>
      MPI_CHECK(mpiSub(&h, &m1, &m2));
 800282c:	bf00      	nop
 800282e:	e002      	b.n	8002836 <rsadp+0x1a2>
      MPI_CHECK(mpiMulMod(&h, &h, &key->qinv, &key->p));
 8002830:	bf00      	nop
 8002832:	e000      	b.n	8002836 <rsadp+0x1a2>
      MPI_CHECK(mpiMul(m, &key->q, &h));
 8002834:	bf00      	nop
   }

end:
   //Free previously allocated memory
   mpiFree(&m1);
 8002836:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800283a:	4618      	mov	r0, r3
 800283c:	f7fe f909 	bl	8000a52 <mpiFree>
   mpiFree(&m2);
 8002840:	f107 031c 	add.w	r3, r7, #28
 8002844:	4618      	mov	r0, r3
 8002846:	f7fe f904 	bl	8000a52 <mpiFree>
   mpiFree(&h);
 800284a:	f107 0310 	add.w	r3, r7, #16
 800284e:	4618      	mov	r0, r3
 8002850:	f7fe f8ff 	bl	8000a52 <mpiFree>

   //Return status code
   return error;
 8002854:	8efb      	ldrh	r3, [r7, #54]	; 0x36
}
 8002856:	4618      	mov	r0, r3
 8002858:	3738      	adds	r7, #56	; 0x38
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}

0800285e <rsasp1>:
 * @param[out] s Signature representative
 * @return Error code
 **/

error_t rsasp1(const RsaPrivateKey *key, const Mpi *m, Mpi *s)
{
 800285e:	b580      	push	{r7, lr}
 8002860:	b084      	sub	sp, #16
 8002862:	af00      	add	r7, sp, #0
 8002864:	60f8      	str	r0, [r7, #12]
 8002866:	60b9      	str	r1, [r7, #8]
 8002868:	607a      	str	r2, [r7, #4]
   //RSASP1 primitive is the same as RSADP except for the names of its input
   //and output arguments. They are distinguished as they are intended for
   //different purposes
   return rsadp(key, m, s);
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	68b9      	ldr	r1, [r7, #8]
 800286e:	68f8      	ldr	r0, [r7, #12]
 8002870:	f7ff ff10 	bl	8002694 <rsadp>
 8002874:	4603      	mov	r3, r0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <rsavp1>:
 * @param[out] m Message representative
 * @return Error code
 **/

error_t rsavp1(const RsaPublicKey *key, const Mpi *s, Mpi *m)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	b084      	sub	sp, #16
 8002882:	af00      	add	r7, sp, #0
 8002884:	60f8      	str	r0, [r7, #12]
 8002886:	60b9      	str	r1, [r7, #8]
 8002888:	607a      	str	r2, [r7, #4]
   //RSAVP1 primitive is the same as RSAEP except for the names of its input
   //and output arguments. They are distinguished as they are intended for
   //different purposes
   return rsaep(key, s, m);
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	68b9      	ldr	r1, [r7, #8]
 800288e:	68f8      	ldr	r0, [r7, #12]
 8002890:	f7ff fed1 	bl	8002636 <rsaep>
 8002894:	4603      	mov	r3, r0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <emsaPkcs1v15Encode>:
 * @return Error code
 **/

error_t emsaPkcs1v15Encode(const HashAlgo *hash,
   const uint8_t *digest, uint8_t *em, size_t emLen)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b086      	sub	sp, #24
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	60f8      	str	r0, [r7, #12]
 80028a6:	60b9      	str	r1, [r7, #8]
 80028a8:	607a      	str	r2, [r7, #4]
 80028aa:	603b      	str	r3, [r7, #0]
   size_t i;
   size_t n;

   //Check the intended length of the encoded message
   if(emLen < (hash->oidSize + hash->digestSize + 21))
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	689a      	ldr	r2, [r3, #8]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	695b      	ldr	r3, [r3, #20]
 80028b4:	4413      	add	r3, r2
 80028b6:	3315      	adds	r3, #21
 80028b8:	683a      	ldr	r2, [r7, #0]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d201      	bcs.n	80028c2 <emsaPkcs1v15Encode+0x24>
      return ERROR_INVALID_LENGTH;
 80028be:	23ec      	movs	r3, #236	; 0xec
 80028c0:	e09b      	b.n	80029fa <emsaPkcs1v15Encode+0x15c>

   //Point to the first byte of the encoded message
   i = 0;
 80028c2:	2300      	movs	r3, #0
 80028c4:	617b      	str	r3, [r7, #20]

   //The leading 0x00 octet ensures that the encoded message, converted to
   //an integer, is less than the modulus
   em[i++] = 0x00;
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	1c5a      	adds	r2, r3, #1
 80028ca:	617a      	str	r2, [r7, #20]
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	4413      	add	r3, r2
 80028d0:	2200      	movs	r2, #0
 80028d2:	701a      	strb	r2, [r3, #0]
   //Block type 0x01 is used for private-key operations
   em[i++] = 0x01;
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	1c5a      	adds	r2, r3, #1
 80028d8:	617a      	str	r2, [r7, #20]
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	4413      	add	r3, r2
 80028de:	2201      	movs	r2, #1
 80028e0:	701a      	strb	r2, [r3, #0]

   //Determine the length of the padding string PS
   n = emLen - hash->oidSize - hash->digestSize - 13;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	683a      	ldr	r2, [r7, #0]
 80028e8:	1ad2      	subs	r2, r2, r3
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	695b      	ldr	r3, [r3, #20]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	3b0d      	subs	r3, #13
 80028f2:	613b      	str	r3, [r7, #16]

   //Each byte of PS must be set to 0xFF when the block type is 0x01
   osMemset(em + i, 0xFF, n);
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	4413      	add	r3, r2
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	21ff      	movs	r1, #255	; 0xff
 80028fe:	4618      	mov	r0, r3
 8002900:	f004 fa2c 	bl	8006d5c <memset>
   i += n;
 8002904:	697a      	ldr	r2, [r7, #20]
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	4413      	add	r3, r2
 800290a:	617b      	str	r3, [r7, #20]

   //Append a 0x00 octet to the padding string
   em[i++] = 0x00;
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	1c5a      	adds	r2, r3, #1
 8002910:	617a      	str	r2, [r7, #20]
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	4413      	add	r3, r2
 8002916:	2200      	movs	r2, #0
 8002918:	701a      	strb	r2, [r3, #0]

   //Encode the DigestInfo structure using ASN.1
   em[i++] = (uint8_t) (ASN1_ENCODING_CONSTRUCTED | ASN1_TYPE_SEQUENCE);
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	1c5a      	adds	r2, r3, #1
 800291e:	617a      	str	r2, [r7, #20]
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	4413      	add	r3, r2
 8002924:	2230      	movs	r2, #48	; 0x30
 8002926:	701a      	strb	r2, [r3, #0]
   em[i++] = (uint8_t) (hash->oidSize + hash->digestSize + 8);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	b2da      	uxtb	r2, r3
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	b2db      	uxtb	r3, r3
 8002934:	4413      	add	r3, r2
 8002936:	b2da      	uxtb	r2, r3
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	1c59      	adds	r1, r3, #1
 800293c:	6179      	str	r1, [r7, #20]
 800293e:	6879      	ldr	r1, [r7, #4]
 8002940:	440b      	add	r3, r1
 8002942:	3208      	adds	r2, #8
 8002944:	b2d2      	uxtb	r2, r2
 8002946:	701a      	strb	r2, [r3, #0]
   em[i++] = (uint8_t) (ASN1_ENCODING_CONSTRUCTED | ASN1_TYPE_SEQUENCE);
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	1c5a      	adds	r2, r3, #1
 800294c:	617a      	str	r2, [r7, #20]
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	4413      	add	r3, r2
 8002952:	2230      	movs	r2, #48	; 0x30
 8002954:	701a      	strb	r2, [r3, #0]
   em[i++] = (uint8_t) (hash->oidSize + 4);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	b2da      	uxtb	r2, r3
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	1c59      	adds	r1, r3, #1
 8002960:	6179      	str	r1, [r7, #20]
 8002962:	6879      	ldr	r1, [r7, #4]
 8002964:	440b      	add	r3, r1
 8002966:	3204      	adds	r2, #4
 8002968:	b2d2      	uxtb	r2, r2
 800296a:	701a      	strb	r2, [r3, #0]
   em[i++] = (uint8_t) ASN1_TYPE_OBJECT_IDENTIFIER;
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	1c5a      	adds	r2, r3, #1
 8002970:	617a      	str	r2, [r7, #20]
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	4413      	add	r3, r2
 8002976:	2206      	movs	r2, #6
 8002978:	701a      	strb	r2, [r3, #0]
   em[i++] = (uint8_t) hash->oidSize;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6899      	ldr	r1, [r3, #8]
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	1c5a      	adds	r2, r3, #1
 8002982:	617a      	str	r2, [r7, #20]
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	4413      	add	r3, r2
 8002988:	b2ca      	uxtb	r2, r1
 800298a:	701a      	strb	r2, [r3, #0]

   //Copy the hash algorithm OID
   osMemcpy(em + i, hash->oid, hash->oidSize);
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	18d0      	adds	r0, r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6859      	ldr	r1, [r3, #4]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	461a      	mov	r2, r3
 800299c:	f004 f9d0 	bl	8006d40 <memcpy>
   i += hash->oidSize;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	697a      	ldr	r2, [r7, #20]
 80029a6:	4413      	add	r3, r2
 80029a8:	617b      	str	r3, [r7, #20]

   //Encode the rest of the ASN.1 structure
   em[i++] = (uint8_t) ASN1_TYPE_NULL;
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	1c5a      	adds	r2, r3, #1
 80029ae:	617a      	str	r2, [r7, #20]
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	4413      	add	r3, r2
 80029b4:	2205      	movs	r2, #5
 80029b6:	701a      	strb	r2, [r3, #0]
   em[i++] = 0;
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	1c5a      	adds	r2, r3, #1
 80029bc:	617a      	str	r2, [r7, #20]
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	4413      	add	r3, r2
 80029c2:	2200      	movs	r2, #0
 80029c4:	701a      	strb	r2, [r3, #0]
   em[i++] = (uint8_t) ASN1_TYPE_OCTET_STRING;
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	1c5a      	adds	r2, r3, #1
 80029ca:	617a      	str	r2, [r7, #20]
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	4413      	add	r3, r2
 80029d0:	2204      	movs	r2, #4
 80029d2:	701a      	strb	r2, [r3, #0]
   em[i++] = (uint8_t) hash->digestSize;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6959      	ldr	r1, [r3, #20]
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	1c5a      	adds	r2, r3, #1
 80029dc:	617a      	str	r2, [r7, #20]
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	4413      	add	r3, r2
 80029e2:	b2ca      	uxtb	r2, r1
 80029e4:	701a      	strb	r2, [r3, #0]

   //Append the hash value
   osMemcpy(em + i, digest, hash->digestSize);
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	18d0      	adds	r0, r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	695b      	ldr	r3, [r3, #20]
 80029f0:	461a      	mov	r2, r3
 80029f2:	68b9      	ldr	r1, [r7, #8]
 80029f4:	f004 f9a4 	bl	8006d40 <memcpy>

   //Successful processing
   return NO_ERROR;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3718      	adds	r7, #24
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <emsaPkcs1v15Verify>:
 * @return Error code
 **/

error_t emsaPkcs1v15Verify(const HashAlgo *hash, const uint8_t *digest,
   const uint8_t *em, size_t emLen)
{
 8002a02:	b480      	push	{r7}
 8002a04:	b089      	sub	sp, #36	; 0x24
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	60f8      	str	r0, [r7, #12]
 8002a0a:	60b9      	str	r1, [r7, #8]
 8002a0c:	607a      	str	r2, [r7, #4]
 8002a0e:	603b      	str	r3, [r7, #0]
   size_t j;
   size_t n;
   uint8_t bad;

   //Check the length of the encoded message
   if(emLen < (hash->oidSize + hash->digestSize + 21))
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	689a      	ldr	r2, [r3, #8]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	695b      	ldr	r3, [r3, #20]
 8002a18:	4413      	add	r3, r2
 8002a1a:	3315      	adds	r3, #21
 8002a1c:	683a      	ldr	r2, [r7, #0]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d201      	bcs.n	8002a26 <emsaPkcs1v15Verify+0x24>
      return ERROR_INVALID_LENGTH;
 8002a22:	23ec      	movs	r3, #236	; 0xec
 8002a24:	e123      	b.n	8002c6e <emsaPkcs1v15Verify+0x26c>

   //Point to the first byte of the encoded message
   i = 0;
 8002a26:	2300      	movs	r3, #0
 8002a28:	61fb      	str	r3, [r7, #28]

   //The first octet of EM must have hexadecimal value 0x00
   bad = em[i++];
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	1c5a      	adds	r2, r3, #1
 8002a2e:	61fa      	str	r2, [r7, #28]
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	4413      	add	r3, r2
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	75fb      	strb	r3, [r7, #23]
   //The second octet of EM must have hexadecimal value 0x01
   bad |= em[i++] ^ 0x01;
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	1c5a      	adds	r2, r3, #1
 8002a3c:	61fa      	str	r2, [r7, #28]
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	4413      	add	r3, r2
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	f083 0301 	eor.w	r3, r3, #1
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	b25a      	sxtb	r2, r3
 8002a4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	b25b      	sxtb	r3, r3
 8002a54:	75fb      	strb	r3, [r7, #23]

   //Determine the length of the padding string PS
   n = emLen - hash->oidSize - hash->digestSize - 13;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	683a      	ldr	r2, [r7, #0]
 8002a5c:	1ad2      	subs	r2, r2, r3
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	3b0d      	subs	r3, #13
 8002a66:	613b      	str	r3, [r7, #16]

   //Each byte of PS must be set to 0xFF when the block type is 0x01
   for(j = 0; j < n; j++)
 8002a68:	2300      	movs	r3, #0
 8002a6a:	61bb      	str	r3, [r7, #24]
 8002a6c:	e010      	b.n	8002a90 <emsaPkcs1v15Verify+0x8e>
   {
      bad |= em[i++] ^ 0xFF;
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	1c5a      	adds	r2, r3, #1
 8002a72:	61fa      	str	r2, [r7, #28]
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	4413      	add	r3, r2
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	43db      	mvns	r3, r3
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	b25a      	sxtb	r2, r3
 8002a80:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	b25b      	sxtb	r3, r3
 8002a88:	75fb      	strb	r3, [r7, #23]
   for(j = 0; j < n; j++)
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	61bb      	str	r3, [r7, #24]
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d3ea      	bcc.n	8002a6e <emsaPkcs1v15Verify+0x6c>
   }

   //The padding string must be followed by a 0x00 octet
   bad |= em[i++];
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	1c5a      	adds	r2, r3, #1
 8002a9c:	61fa      	str	r2, [r7, #28]
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	781a      	ldrb	r2, [r3, #0]
 8002aa4:	7dfb      	ldrb	r3, [r7, #23]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	75fb      	strb	r3, [r7, #23]

   //Check the ASN.1 syntax of the DigestInfo structure
   bad |= em[i++] ^ (uint8_t) (ASN1_ENCODING_CONSTRUCTED | ASN1_TYPE_SEQUENCE);
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	1c5a      	adds	r2, r3, #1
 8002aae:	61fa      	str	r2, [r7, #28]
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	b25a      	sxtb	r2, r3
 8002abe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	b25b      	sxtb	r3, r3
 8002ac6:	75fb      	strb	r3, [r7, #23]
   bad |= em[i++] ^ (uint8_t) (hash->oidSize + hash->digestSize + 8);
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	1c5a      	adds	r2, r3, #1
 8002acc:	61fa      	str	r2, [r7, #28]
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	781a      	ldrb	r2, [r3, #0]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	b2d9      	uxtb	r1, r3
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	440b      	add	r3, r1
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	3308      	adds	r3, #8
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	4053      	eors	r3, r2
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	b25a      	sxtb	r2, r3
 8002aee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	b25b      	sxtb	r3, r3
 8002af6:	75fb      	strb	r3, [r7, #23]
   bad |= em[i++] ^ (uint8_t) (ASN1_ENCODING_CONSTRUCTED | ASN1_TYPE_SEQUENCE);
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	1c5a      	adds	r2, r3, #1
 8002afc:	61fa      	str	r2, [r7, #28]
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	4413      	add	r3, r2
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	b25a      	sxtb	r2, r3
 8002b0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	b25b      	sxtb	r3, r3
 8002b14:	75fb      	strb	r3, [r7, #23]
   bad |= em[i++] ^ (uint8_t) (hash->oidSize + 4);
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	1c5a      	adds	r2, r3, #1
 8002b1a:	61fa      	str	r2, [r7, #28]
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	4413      	add	r3, r2
 8002b20:	781a      	ldrb	r2, [r3, #0]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	3304      	adds	r3, #4
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	4053      	eors	r3, r2
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	b25a      	sxtb	r2, r3
 8002b32:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	b25b      	sxtb	r3, r3
 8002b3a:	75fb      	strb	r3, [r7, #23]
   bad |= em[i++] ^ (uint8_t) ASN1_TYPE_OBJECT_IDENTIFIER;
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	1c5a      	adds	r2, r3, #1
 8002b40:	61fa      	str	r2, [r7, #28]
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	4413      	add	r3, r2
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	f083 0306 	eor.w	r3, r3, #6
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	b25a      	sxtb	r2, r3
 8002b50:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	b25b      	sxtb	r3, r3
 8002b58:	75fb      	strb	r3, [r7, #23]
   bad |= em[i++] ^ (uint8_t) hash->oidSize;
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	1c5a      	adds	r2, r3, #1
 8002b5e:	61fa      	str	r2, [r7, #28]
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	4413      	add	r3, r2
 8002b64:	781a      	ldrb	r2, [r3, #0]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	4053      	eors	r3, r2
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	b25a      	sxtb	r2, r3
 8002b72:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	b25b      	sxtb	r3, r3
 8002b7a:	75fb      	strb	r3, [r7, #23]

   //Verify the hash algorithm OID
   for(j = 0; j < hash->oidSize; j++)
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	61bb      	str	r3, [r7, #24]
 8002b80:	e015      	b.n	8002bae <emsaPkcs1v15Verify+0x1ac>
   {
      bad |= em[i++] ^ hash->oid[j];
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	1c5a      	adds	r2, r3, #1
 8002b86:	61fa      	str	r2, [r7, #28]
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	781a      	ldrb	r2, [r3, #0]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6859      	ldr	r1, [r3, #4]
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	440b      	add	r3, r1
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	4053      	eors	r3, r2
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	b25a      	sxtb	r2, r3
 8002b9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	b25b      	sxtb	r3, r3
 8002ba6:	75fb      	strb	r3, [r7, #23]
   for(j = 0; j < hash->oidSize; j++)
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	3301      	adds	r3, #1
 8002bac:	61bb      	str	r3, [r7, #24]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d3e4      	bcc.n	8002b82 <emsaPkcs1v15Verify+0x180>
   }

   //Check the rest of the ASN.1 structure
   bad |= em[i++] ^ (uint8_t) ASN1_TYPE_NULL;
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	1c5a      	adds	r2, r3, #1
 8002bbc:	61fa      	str	r2, [r7, #28]
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	f083 0305 	eor.w	r3, r3, #5
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	b25a      	sxtb	r2, r3
 8002bcc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	b25b      	sxtb	r3, r3
 8002bd4:	75fb      	strb	r3, [r7, #23]
   bad |= em[i++];
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	1c5a      	adds	r2, r3, #1
 8002bda:	61fa      	str	r2, [r7, #28]
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	4413      	add	r3, r2
 8002be0:	781a      	ldrb	r2, [r3, #0]
 8002be2:	7dfb      	ldrb	r3, [r7, #23]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	75fb      	strb	r3, [r7, #23]
   bad |= em[i++] ^ (uint8_t) ASN1_TYPE_OCTET_STRING;
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	1c5a      	adds	r2, r3, #1
 8002bec:	61fa      	str	r2, [r7, #28]
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	f083 0304 	eor.w	r3, r3, #4
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	b25a      	sxtb	r2, r3
 8002bfc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	b25b      	sxtb	r3, r3
 8002c04:	75fb      	strb	r3, [r7, #23]
   bad |= em[i++] ^ (uint8_t) hash->digestSize;
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	1c5a      	adds	r2, r3, #1
 8002c0a:	61fa      	str	r2, [r7, #28]
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	4413      	add	r3, r2
 8002c10:	781a      	ldrb	r2, [r3, #0]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	4053      	eors	r3, r2
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	b25a      	sxtb	r2, r3
 8002c1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	b25b      	sxtb	r3, r3
 8002c26:	75fb      	strb	r3, [r7, #23]

   //Recover the underlying hash value, and then compare it to the newly
   //computed hash value
   for(j = 0; j < hash->digestSize; j++)
 8002c28:	2300      	movs	r3, #0
 8002c2a:	61bb      	str	r3, [r7, #24]
 8002c2c:	e014      	b.n	8002c58 <emsaPkcs1v15Verify+0x256>
   {
      bad |= em[i++] ^ digest[j];
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	1c5a      	adds	r2, r3, #1
 8002c32:	61fa      	str	r2, [r7, #28]
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	4413      	add	r3, r2
 8002c38:	781a      	ldrb	r2, [r3, #0]
 8002c3a:	68b9      	ldr	r1, [r7, #8]
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	440b      	add	r3, r1
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	4053      	eors	r3, r2
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	b25a      	sxtb	r2, r3
 8002c48:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	b25b      	sxtb	r3, r3
 8002c50:	75fb      	strb	r3, [r7, #23]
   for(j = 0; j < hash->digestSize; j++)
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	3301      	adds	r3, #1
 8002c56:	61bb      	str	r3, [r7, #24]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	695b      	ldr	r3, [r3, #20]
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d3e5      	bcc.n	8002c2e <emsaPkcs1v15Verify+0x22c>
   }

   //Verification result
   return (bad != 0) ? ERROR_INCONSISTENT_VALUE : NO_ERROR;
 8002c62:	7dfb      	ldrb	r3, [r7, #23]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d001      	beq.n	8002c6c <emsaPkcs1v15Verify+0x26a>
 8002c68:	23f9      	movs	r3, #249	; 0xf9
 8002c6a:	e000      	b.n	8002c6e <emsaPkcs1v15Verify+0x26c>
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3724      	adds	r7, #36	; 0x24
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr

08002c7a <sha256Compute>:
 * @param[out] digest Pointer to the calculated digest
 * @return Error code
 **/

__weak_func error_t sha256Compute(const void *data, size_t length, uint8_t *digest)
{
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b086      	sub	sp, #24
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	60f8      	str	r0, [r7, #12]
 8002c82:	60b9      	str	r1, [r7, #8]
 8002c84:	607a      	str	r2, [r7, #4]
   error_t error;
   Sha256Context *context;

   //Allocate a memory buffer to hold the SHA-256 context
   context = cryptoAllocMem(sizeof(Sha256Context));
 8002c86:	2070      	movs	r0, #112	; 0x70
 8002c88:	f001 fe20 	bl	80048cc <osAllocMem>
 8002c8c:	6138      	str	r0, [r7, #16]

   //Successful memory allocation?
   if(context != NULL)
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d011      	beq.n	8002cb8 <sha256Compute+0x3e>
   {
      //Initialize the SHA-256 context
      sha256Init(context);
 8002c94:	6938      	ldr	r0, [r7, #16]
 8002c96:	f000 f817 	bl	8002cc8 <sha256Init>
      //Digest the message
      sha256Update(context, data, length);
 8002c9a:	68ba      	ldr	r2, [r7, #8]
 8002c9c:	68f9      	ldr	r1, [r7, #12]
 8002c9e:	6938      	ldr	r0, [r7, #16]
 8002ca0:	f000 f84e 	bl	8002d40 <sha256Update>
      //Finalize the SHA-256 message digest
      sha256Final(context, digest);
 8002ca4:	6879      	ldr	r1, [r7, #4]
 8002ca6:	6938      	ldr	r0, [r7, #16]
 8002ca8:	f000 f896 	bl	8002dd8 <sha256Final>

      //Free previously allocated memory
      cryptoFreeMem(context);
 8002cac:	6938      	ldr	r0, [r7, #16]
 8002cae:	f001 fe1b 	bl	80048e8 <osFreeMem>

      //Successful processing
      error = NO_ERROR;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	82fb      	strh	r3, [r7, #22]
 8002cb6:	e001      	b.n	8002cbc <sha256Compute+0x42>
   }
   else
   {
      //Failed to allocate memory
      error = ERROR_OUT_OF_MEMORY;
 8002cb8:	2364      	movs	r3, #100	; 0x64
 8002cba:	82fb      	strh	r3, [r7, #22]
   }

   //Return status code
   return error;
 8002cbc:	8afb      	ldrh	r3, [r7, #22]
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3718      	adds	r7, #24
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
	...

08002cc8 <sha256Init>:
 * @brief Initialize SHA-256 message digest context
 * @param[in] context Pointer to the SHA-256 context to initialize
 **/

__weak_func void sha256Init(Sha256Context *context)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
   //Set initial hash value
   context->h[0] = 0x6A09E667;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4a13      	ldr	r2, [pc, #76]	; (8002d20 <sha256Init+0x58>)
 8002cd4:	601a      	str	r2, [r3, #0]
   context->h[1] = 0xBB67AE85;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a12      	ldr	r2, [pc, #72]	; (8002d24 <sha256Init+0x5c>)
 8002cda:	605a      	str	r2, [r3, #4]
   context->h[2] = 0x3C6EF372;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a12      	ldr	r2, [pc, #72]	; (8002d28 <sha256Init+0x60>)
 8002ce0:	609a      	str	r2, [r3, #8]
   context->h[3] = 0xA54FF53A;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a11      	ldr	r2, [pc, #68]	; (8002d2c <sha256Init+0x64>)
 8002ce6:	60da      	str	r2, [r3, #12]
   context->h[4] = 0x510E527F;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4a11      	ldr	r2, [pc, #68]	; (8002d30 <sha256Init+0x68>)
 8002cec:	611a      	str	r2, [r3, #16]
   context->h[5] = 0x9B05688C;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a10      	ldr	r2, [pc, #64]	; (8002d34 <sha256Init+0x6c>)
 8002cf2:	615a      	str	r2, [r3, #20]
   context->h[6] = 0x1F83D9AB;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4a10      	ldr	r2, [pc, #64]	; (8002d38 <sha256Init+0x70>)
 8002cf8:	619a      	str	r2, [r3, #24]
   context->h[7] = 0x5BE0CD19;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a0f      	ldr	r2, [pc, #60]	; (8002d3c <sha256Init+0x74>)
 8002cfe:	61da      	str	r2, [r3, #28]

   //Number of bytes in the buffer
   context->size = 0;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	661a      	str	r2, [r3, #96]	; 0x60
   //Total length of the message
   context->totalSize = 0;
 8002d06:	6879      	ldr	r1, [r7, #4]
 8002d08:	f04f 0200 	mov.w	r2, #0
 8002d0c:	f04f 0300 	mov.w	r3, #0
 8002d10:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr
 8002d20:	6a09e667 	.word	0x6a09e667
 8002d24:	bb67ae85 	.word	0xbb67ae85
 8002d28:	3c6ef372 	.word	0x3c6ef372
 8002d2c:	a54ff53a 	.word	0xa54ff53a
 8002d30:	510e527f 	.word	0x510e527f
 8002d34:	9b05688c 	.word	0x9b05688c
 8002d38:	1f83d9ab 	.word	0x1f83d9ab
 8002d3c:	5be0cd19 	.word	0x5be0cd19

08002d40 <sha256Update>:
 * @param[in] data Pointer to the buffer being hashed
 * @param[in] length Length of the buffer
 **/

__weak_func void sha256Update(Sha256Context *context, const void *data, size_t length)
{
 8002d40:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002d44:	b086      	sub	sp, #24
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	60f8      	str	r0, [r7, #12]
 8002d4a:	60b9      	str	r1, [r7, #8]
 8002d4c:	607a      	str	r2, [r7, #4]
   size_t n;

   //Process the incoming data
   while(length > 0)
 8002d4e:	e039      	b.n	8002dc4 <sha256Update+0x84>
   {
      //The buffer can hold at most 64 bytes
      n = MIN(length, 64 - context->size);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d54:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	bf28      	it	cs
 8002d5e:	4613      	movcs	r3, r2
 8002d60:	617b      	str	r3, [r7, #20]

      //Copy the data to the buffer
      osMemcpy(context->buffer + context->size, data, n);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	f103 0220 	add.w	r2, r3, #32
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d6c:	4413      	add	r3, r2
 8002d6e:	697a      	ldr	r2, [r7, #20]
 8002d70:	68b9      	ldr	r1, [r7, #8]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f003 ffe4 	bl	8006d40 <memcpy>

      //Update the SHA-256 context
      context->size += n;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	441a      	add	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	661a      	str	r2, [r3, #96]	; 0x60
      context->totalSize += n;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002d8a:	6979      	ldr	r1, [r7, #20]
 8002d8c:	2000      	movs	r0, #0
 8002d8e:	460c      	mov	r4, r1
 8002d90:	4605      	mov	r5, r0
 8002d92:	eb12 0804 	adds.w	r8, r2, r4
 8002d96:	eb43 0905 	adc.w	r9, r3, r5
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	e9c3 891a 	strd	r8, r9, [r3, #104]	; 0x68
      //Advance the data pointer
      data = (uint8_t *) data + n;
 8002da0:	68ba      	ldr	r2, [r7, #8]
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	4413      	add	r3, r2
 8002da6:	60bb      	str	r3, [r7, #8]
      //Remaining bytes to process
      length -= n;
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	607b      	str	r3, [r7, #4]

      //Process message in 16-word blocks
      if(context->size == 64)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002db4:	2b40      	cmp	r3, #64	; 0x40
 8002db6:	d105      	bne.n	8002dc4 <sha256Update+0x84>
      {
         //Transform the 16-word block
         sha256ProcessBlock(context);
 8002db8:	68f8      	ldr	r0, [r7, #12]
 8002dba:	f000 f8ab 	bl	8002f14 <sha256ProcessBlock>
         //Empty the buffer
         context->size = 0;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	661a      	str	r2, [r3, #96]	; 0x60
   while(length > 0)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1c2      	bne.n	8002d50 <sha256Update+0x10>
      }
   }
}
 8002dca:	bf00      	nop
 8002dcc:	bf00      	nop
 8002dce:	3718      	adds	r7, #24
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08002dd8 <sha256Final>:
 * @param[in] context Pointer to the SHA-256 context
 * @param[out] digest Calculated digest (optional parameter)
 **/

__weak_func void sha256Final(Sha256Context *context, uint8_t *digest)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b086      	sub	sp, #24
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
   uint_t i;
   size_t paddingSize;
   uint64_t totalSize;

   //Length of the original message (before padding)
   totalSize = context->totalSize * 8;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8002de8:	f04f 0200 	mov.w	r2, #0
 8002dec:	f04f 0300 	mov.w	r3, #0
 8002df0:	00cb      	lsls	r3, r1, #3
 8002df2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002df6:	00c2      	lsls	r2, r0, #3
 8002df8:	e9c7 2302 	strd	r2, r3, [r7, #8]

   //Pad the message so that its length is congruent to 56 modulo 64
   if(context->size < 56)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e00:	2b37      	cmp	r3, #55	; 0x37
 8002e02:	d805      	bhi.n	8002e10 <sha256Final+0x38>
   {
      paddingSize = 56 - context->size;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e08:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8002e0c:	613b      	str	r3, [r7, #16]
 8002e0e:	e004      	b.n	8002e1a <sha256Final+0x42>
   }
   else
   {
      paddingSize = 64 + 56 - context->size;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e14:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 8002e18:	613b      	str	r3, [r7, #16]
   }

   //Append padding
   sha256Update(context, padding, paddingSize);
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	491f      	ldr	r1, [pc, #124]	; (8002e9c <sha256Final+0xc4>)
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f7ff ff8e 	bl	8002d40 <sha256Update>

   //Append the length of the original message
   context->w[14] = htobe32((uint32_t) (totalSize >> 32));
 8002e24:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e28:	f04f 0200 	mov.w	r2, #0
 8002e2c:	f04f 0300 	mov.w	r3, #0
 8002e30:	000a      	movs	r2, r1
 8002e32:	2300      	movs	r3, #0
 8002e34:	4613      	mov	r3, r2
 8002e36:	4618      	mov	r0, r3
 8002e38:	f001 fb72 	bl	8004520 <swapInt32>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	659a      	str	r2, [r3, #88]	; 0x58
   context->w[15] = htobe32((uint32_t) totalSize);
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f001 fb6b 	bl	8004520 <swapInt32>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	65da      	str	r2, [r3, #92]	; 0x5c

   //Calculate the message digest
   sha256ProcessBlock(context);
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f000 f85f 	bl	8002f14 <sha256ProcessBlock>

   //Convert from host byte order to big-endian byte order
   for(i = 0; i < 8; i++)
 8002e56:	2300      	movs	r3, #0
 8002e58:	617b      	str	r3, [r7, #20]
 8002e5a:	e00e      	b.n	8002e7a <sha256Final+0xa2>
   {
      context->h[i] = htobe32(context->h[i]);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	697a      	ldr	r2, [r7, #20]
 8002e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f001 fb5b 	bl	8004520 <swapInt32>
 8002e6a:	4601      	mov	r1, r0
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	697a      	ldr	r2, [r7, #20]
 8002e70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   for(i = 0; i < 8; i++)
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	3301      	adds	r3, #1
 8002e78:	617b      	str	r3, [r7, #20]
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	2b07      	cmp	r3, #7
 8002e7e:	d9ed      	bls.n	8002e5c <sha256Final+0x84>
   }

   //Copy the resulting digest
   if(digest != NULL)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d005      	beq.n	8002e92 <sha256Final+0xba>
   {
      osMemcpy(digest, context->digest, SHA256_DIGEST_SIZE);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2220      	movs	r2, #32
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	6838      	ldr	r0, [r7, #0]
 8002e8e:	f003 ff57 	bl	8006d40 <memcpy>
   }
}
 8002e92:	bf00      	nop
 8002e94:	3718      	adds	r7, #24
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	08008368 	.word	0x08008368

08002ea0 <sha256FinalRaw>:
 * @param[in] context Pointer to the SHA-256 context
 * @param[out] digest Calculated digest
 **/

__weak_func void sha256FinalRaw(Sha256Context *context, uint8_t *digest)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
   uint_t i;

   //Convert from host byte order to big-endian byte order
   for(i = 0; i < 8; i++)
 8002eaa:	2300      	movs	r3, #0
 8002eac:	60fb      	str	r3, [r7, #12]
 8002eae:	e00e      	b.n	8002ece <sha256FinalRaw+0x2e>
   {
      context->h[i] = htobe32(context->h[i]);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f001 fb31 	bl	8004520 <swapInt32>
 8002ebe:	4601      	mov	r1, r0
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	68fa      	ldr	r2, [r7, #12]
 8002ec4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   for(i = 0; i < 8; i++)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	3301      	adds	r3, #1
 8002ecc:	60fb      	str	r3, [r7, #12]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2b07      	cmp	r3, #7
 8002ed2:	d9ed      	bls.n	8002eb0 <sha256FinalRaw+0x10>
   }

   //Copy the resulting digest
   osMemcpy(digest, context->digest, SHA256_DIGEST_SIZE);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2220      	movs	r2, #32
 8002ed8:	4619      	mov	r1, r3
 8002eda:	6838      	ldr	r0, [r7, #0]
 8002edc:	f003 ff30 	bl	8006d40 <memcpy>

   //Convert from big-endian byte order to host byte order
   for(i = 0; i < 8; i++)
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	60fb      	str	r3, [r7, #12]
 8002ee4:	e00e      	b.n	8002f04 <sha256FinalRaw+0x64>
   {
      context->h[i] = betoh32(context->h[i]);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	68fa      	ldr	r2, [r7, #12]
 8002eea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f001 fb16 	bl	8004520 <swapInt32>
 8002ef4:	4601      	mov	r1, r0
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	68fa      	ldr	r2, [r7, #12]
 8002efa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   for(i = 0; i < 8; i++)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	3301      	adds	r3, #1
 8002f02:	60fb      	str	r3, [r7, #12]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2b07      	cmp	r3, #7
 8002f08:	d9ed      	bls.n	8002ee6 <sha256FinalRaw+0x46>
   }
}
 8002f0a:	bf00      	nop
 8002f0c:	bf00      	nop
 8002f0e:	3710      	adds	r7, #16
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <sha256ProcessBlock>:
 * @brief Process message in 16-word blocks
 * @param[in] context Pointer to the SHA-256 context
 **/

__weak_func void sha256ProcessBlock(Sha256Context *context)
{
 8002f14:	b590      	push	{r4, r7, lr}
 8002f16:	b08f      	sub	sp, #60	; 0x3c
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
   uint_t t;
   uint32_t temp1;
   uint32_t temp2;

   //Initialize the 8 working registers
   uint32_t a = context->h[0];
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	633b      	str	r3, [r7, #48]	; 0x30
   uint32_t b = context->h[1];
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	62fb      	str	r3, [r7, #44]	; 0x2c
   uint32_t c = context->h[2];
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	62bb      	str	r3, [r7, #40]	; 0x28
   uint32_t d = context->h[3];
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	627b      	str	r3, [r7, #36]	; 0x24
   uint32_t e = context->h[4];
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	623b      	str	r3, [r7, #32]
   uint32_t f = context->h[5];
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	61fb      	str	r3, [r7, #28]
   uint32_t g = context->h[6];
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	61bb      	str	r3, [r7, #24]
   uint32_t h = context->h[7];
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	69db      	ldr	r3, [r3, #28]
 8002f4a:	617b      	str	r3, [r7, #20]

   //Process message in 16-word blocks
   uint32_t *w = context->w;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	3320      	adds	r3, #32
 8002f50:	613b      	str	r3, [r7, #16]

   //Convert from big-endian byte order to host byte order
   for(t = 0; t < 16; t++)
 8002f52:	2300      	movs	r3, #0
 8002f54:	637b      	str	r3, [r7, #52]	; 0x34
 8002f56:	e010      	b.n	8002f7a <sha256ProcessBlock+0x66>
   {
      w[t] = betoh32(w[t]);
 8002f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	4413      	add	r3, r2
 8002f60:	6819      	ldr	r1, [r3, #0]
 8002f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	18d4      	adds	r4, r2, r3
 8002f6a:	4608      	mov	r0, r1
 8002f6c:	f001 fad8 	bl	8004520 <swapInt32>
 8002f70:	4603      	mov	r3, r0
 8002f72:	6023      	str	r3, [r4, #0]
   for(t = 0; t < 16; t++)
 8002f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f76:	3301      	adds	r3, #1
 8002f78:	637b      	str	r3, [r7, #52]	; 0x34
 8002f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f7c:	2b0f      	cmp	r3, #15
 8002f7e:	d9eb      	bls.n	8002f58 <sha256ProcessBlock+0x44>
   }

   //SHA-256 hash computation (alternate method)
   for(t = 0; t < 64; t++)
 8002f80:	2300      	movs	r3, #0
 8002f82:	637b      	str	r3, [r7, #52]	; 0x34
 8002f84:	e0aa      	b.n	80030dc <sha256ProcessBlock+0x1c8>
   {
      //Prepare the message schedule
      if(t >= 16)
 8002f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f88:	2b0f      	cmp	r3, #15
 8002f8a:	d956      	bls.n	800303a <sha256ProcessBlock+0x126>
      {
         W(t) += SIGMA4(W(t + 14)) + W(t + 9) + SIGMA3(W(t + 1));
 8002f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f8e:	f003 030f 	and.w	r3, r3, #15
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	693a      	ldr	r2, [r7, #16]
 8002f96:	4413      	add	r3, r2
 8002f98:	6819      	ldr	r1, [r3, #0]
 8002f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f9c:	330e      	adds	r3, #14
 8002f9e:	f003 030f 	and.w	r3, r3, #15
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	ea4f 4273 	mov.w	r2, r3, ror #17
 8002fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fb0:	330e      	adds	r3, #14
 8002fb2:	f003 030f 	and.w	r3, r3, #15
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	6938      	ldr	r0, [r7, #16]
 8002fba:	4403      	add	r3, r0
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8002fc2:	405a      	eors	r2, r3
 8002fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fc6:	330e      	adds	r3, #14
 8002fc8:	f003 030f 	and.w	r3, r3, #15
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	6938      	ldr	r0, [r7, #16]
 8002fd0:	4403      	add	r3, r0
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	0a9b      	lsrs	r3, r3, #10
 8002fd6:	405a      	eors	r2, r3
 8002fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fda:	3309      	adds	r3, #9
 8002fdc:	f003 030f 	and.w	r3, r3, #15
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	6938      	ldr	r0, [r7, #16]
 8002fe4:	4403      	add	r3, r0
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	441a      	add	r2, r3
 8002fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fec:	3301      	adds	r3, #1
 8002fee:	f003 030f 	and.w	r3, r3, #15
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	6938      	ldr	r0, [r7, #16]
 8002ff6:	4403      	add	r3, r0
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8002ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003000:	3301      	adds	r3, #1
 8003002:	f003 030f 	and.w	r3, r3, #15
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	693c      	ldr	r4, [r7, #16]
 800300a:	4423      	add	r3, r4
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8003012:	4058      	eors	r0, r3
 8003014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003016:	3301      	adds	r3, #1
 8003018:	f003 030f 	and.w	r3, r3, #15
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	693c      	ldr	r4, [r7, #16]
 8003020:	4423      	add	r3, r4
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	08db      	lsrs	r3, r3, #3
 8003026:	4043      	eors	r3, r0
 8003028:	441a      	add	r2, r3
 800302a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800302c:	f003 030f 	and.w	r3, r3, #15
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	6938      	ldr	r0, [r7, #16]
 8003034:	4403      	add	r3, r0
 8003036:	440a      	add	r2, r1
 8003038:	601a      	str	r2, [r3, #0]
      }

      //Calculate T1 and T2
      temp1 = h + SIGMA2(e) + CH(e, f, g) + k[t] + W(t);
 800303a:	6a3b      	ldr	r3, [r7, #32]
 800303c:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8003040:	6a3b      	ldr	r3, [r7, #32]
 8003042:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8003046:	405a      	eors	r2, r3
 8003048:	6a3b      	ldr	r3, [r7, #32]
 800304a:	ea4f 6373 	mov.w	r3, r3, ror #25
 800304e:	405a      	eors	r2, r3
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	441a      	add	r2, r3
 8003054:	6a39      	ldr	r1, [r7, #32]
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	4019      	ands	r1, r3
 800305a:	6a3b      	ldr	r3, [r7, #32]
 800305c:	43d8      	mvns	r0, r3
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	4003      	ands	r3, r0
 8003062:	430b      	orrs	r3, r1
 8003064:	441a      	add	r2, r3
 8003066:	4939      	ldr	r1, [pc, #228]	; (800314c <sha256ProcessBlock+0x238>)
 8003068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800306a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800306e:	441a      	add	r2, r3
 8003070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003072:	f003 030f 	and.w	r3, r3, #15
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	6939      	ldr	r1, [r7, #16]
 800307a:	440b      	add	r3, r1
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4413      	add	r3, r2
 8003080:	60fb      	str	r3, [r7, #12]
      temp2 = SIGMA1(a) + MAJ(a, b, c);
 8003082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003084:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8003088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800308a:	ea4f 3373 	mov.w	r3, r3, ror #13
 800308e:	405a      	eors	r2, r3
 8003090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003092:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8003096:	405a      	eors	r2, r3
 8003098:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800309a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800309c:	4319      	orrs	r1, r3
 800309e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a0:	4019      	ands	r1, r3
 80030a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80030a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a6:	4003      	ands	r3, r0
 80030a8:	430b      	orrs	r3, r1
 80030aa:	4413      	add	r3, r2
 80030ac:	60bb      	str	r3, [r7, #8]

      //Update the working registers
      h = g;
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	617b      	str	r3, [r7, #20]
      g = f;
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	61bb      	str	r3, [r7, #24]
      f = e;
 80030b6:	6a3b      	ldr	r3, [r7, #32]
 80030b8:	61fb      	str	r3, [r7, #28]
      e = d + temp1;
 80030ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	4413      	add	r3, r2
 80030c0:	623b      	str	r3, [r7, #32]
      d = c;
 80030c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c4:	627b      	str	r3, [r7, #36]	; 0x24
      c = b;
 80030c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030c8:	62bb      	str	r3, [r7, #40]	; 0x28
      b = a;
 80030ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      a = temp1 + temp2;
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	4413      	add	r3, r2
 80030d4:	633b      	str	r3, [r7, #48]	; 0x30
   for(t = 0; t < 64; t++)
 80030d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030d8:	3301      	adds	r3, #1
 80030da:	637b      	str	r3, [r7, #52]	; 0x34
 80030dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030de:	2b3f      	cmp	r3, #63	; 0x3f
 80030e0:	f67f af51 	bls.w	8002f86 <sha256ProcessBlock+0x72>
   }

   //Update the hash value
   context->h[0] += a;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ea:	441a      	add	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	601a      	str	r2, [r3, #0]
   context->h[1] += b;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685a      	ldr	r2, [r3, #4]
 80030f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f6:	441a      	add	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	605a      	str	r2, [r3, #4]
   context->h[2] += c;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689a      	ldr	r2, [r3, #8]
 8003100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003102:	441a      	add	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	609a      	str	r2, [r3, #8]
   context->h[3] += d;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	68da      	ldr	r2, [r3, #12]
 800310c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310e:	441a      	add	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	60da      	str	r2, [r3, #12]
   context->h[4] += e;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	691a      	ldr	r2, [r3, #16]
 8003118:	6a3b      	ldr	r3, [r7, #32]
 800311a:	441a      	add	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	611a      	str	r2, [r3, #16]
   context->h[5] += f;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	695a      	ldr	r2, [r3, #20]
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	441a      	add	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	615a      	str	r2, [r3, #20]
   context->h[6] += g;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	699a      	ldr	r2, [r3, #24]
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	441a      	add	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	619a      	str	r2, [r3, #24]
   context->h[7] += h;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	69da      	ldr	r2, [r3, #28]
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	441a      	add	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	61da      	str	r2, [r3, #28]
}
 8003144:	bf00      	nop
 8003146:	373c      	adds	r7, #60	; 0x3c
 8003148:	46bd      	mov	sp, r7
 800314a:	bd90      	pop	{r4, r7, pc}
 800314c:	080083a8 	.word	0x080083a8

08003150 <sha384Compute>:
 * @param[out] digest Pointer to the calculated digest
 * @return Error code
 **/

__weak_func error_t sha384Compute(const void *data, size_t length, uint8_t *digest)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b086      	sub	sp, #24
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	607a      	str	r2, [r7, #4]
   error_t error;
   Sha384Context *context;

   //Allocate a memory buffer to hold the SHA-384 context
   context = cryptoAllocMem(sizeof(Sha384Context));
 800315c:	20d0      	movs	r0, #208	; 0xd0
 800315e:	f001 fbb5 	bl	80048cc <osAllocMem>
 8003162:	6138      	str	r0, [r7, #16]

   //Successful memory allocation?
   if(context != NULL)
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d011      	beq.n	800318e <sha384Compute+0x3e>
   {
      //Initialize the SHA-384 context
      sha384Init(context);
 800316a:	6938      	ldr	r0, [r7, #16]
 800316c:	f000 f818 	bl	80031a0 <sha384Init>
      //Digest the message
      sha384Update(context, data, length);
 8003170:	68ba      	ldr	r2, [r7, #8]
 8003172:	68f9      	ldr	r1, [r7, #12]
 8003174:	6938      	ldr	r0, [r7, #16]
 8003176:	f000 f87b 	bl	8003270 <sha384Update>
      //Finalize the SHA-384 message digest
      sha384Final(context, digest);
 800317a:	6879      	ldr	r1, [r7, #4]
 800317c:	6938      	ldr	r0, [r7, #16]
 800317e:	f000 f886 	bl	800328e <sha384Final>

      //Free previously allocated memory
      cryptoFreeMem(context);
 8003182:	6938      	ldr	r0, [r7, #16]
 8003184:	f001 fbb0 	bl	80048e8 <osFreeMem>

      //Successful processing
      error = NO_ERROR;
 8003188:	2300      	movs	r3, #0
 800318a:	82fb      	strh	r3, [r7, #22]
 800318c:	e001      	b.n	8003192 <sha384Compute+0x42>
   }
   else
   {
      //Failed to allocate memory
      error = ERROR_OUT_OF_MEMORY;
 800318e:	2364      	movs	r3, #100	; 0x64
 8003190:	82fb      	strh	r3, [r7, #22]
   }

   //Return status code
   return error;
 8003192:	8afb      	ldrh	r3, [r7, #22]
}
 8003194:	4618      	mov	r0, r3
 8003196:	3718      	adds	r7, #24
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	0000      	movs	r0, r0
	...

080031a0 <sha384Init>:
 * @brief Initialize SHA-384 message digest context
 * @param[in] context Pointer to the SHA-384 context to initialize
 **/

__weak_func void sha384Init(Sha384Context *context)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
   //Set initial hash value
   context->h[0] = 0xCBBB9D5DC1059ED8;
 80031a8:	6879      	ldr	r1, [r7, #4]
 80031aa:	a321      	add	r3, pc, #132	; (adr r3, 8003230 <sha384Init+0x90>)
 80031ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b0:	e9c1 2300 	strd	r2, r3, [r1]
   context->h[1] = 0x629A292A367CD507;
 80031b4:	6879      	ldr	r1, [r7, #4]
 80031b6:	a320      	add	r3, pc, #128	; (adr r3, 8003238 <sha384Init+0x98>)
 80031b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031bc:	e9c1 2302 	strd	r2, r3, [r1, #8]
   context->h[2] = 0x9159015A3070DD17;
 80031c0:	6879      	ldr	r1, [r7, #4]
 80031c2:	a31f      	add	r3, pc, #124	; (adr r3, 8003240 <sha384Init+0xa0>)
 80031c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031c8:	e9c1 2304 	strd	r2, r3, [r1, #16]
   context->h[3] = 0x152FECD8F70E5939;
 80031cc:	6879      	ldr	r1, [r7, #4]
 80031ce:	a31e      	add	r3, pc, #120	; (adr r3, 8003248 <sha384Init+0xa8>)
 80031d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d4:	e9c1 2306 	strd	r2, r3, [r1, #24]
   context->h[4] = 0x67332667FFC00B31;
 80031d8:	6879      	ldr	r1, [r7, #4]
 80031da:	a31d      	add	r3, pc, #116	; (adr r3, 8003250 <sha384Init+0xb0>)
 80031dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031e0:	e9c1 2308 	strd	r2, r3, [r1, #32]
   context->h[5] = 0x8EB44A8768581511;
 80031e4:	6879      	ldr	r1, [r7, #4]
 80031e6:	a31c      	add	r3, pc, #112	; (adr r3, 8003258 <sha384Init+0xb8>)
 80031e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ec:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
   context->h[6] = 0xDB0C2E0D64F98FA7;
 80031f0:	6879      	ldr	r1, [r7, #4]
 80031f2:	a31b      	add	r3, pc, #108	; (adr r3, 8003260 <sha384Init+0xc0>)
 80031f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f8:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
   context->h[7] = 0x47B5481DBEFA4FA4;
 80031fc:	6879      	ldr	r1, [r7, #4]
 80031fe:	a31a      	add	r3, pc, #104	; (adr r3, 8003268 <sha384Init+0xc8>)
 8003200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003204:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

   //Number of bytes in the buffer
   context->size = 0;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
   //Total length of the message
   context->totalSize = 0;
 8003210:	6879      	ldr	r1, [r7, #4]
 8003212:	f04f 0200 	mov.w	r2, #0
 8003216:	f04f 0300 	mov.w	r3, #0
 800321a:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
}
 800321e:	bf00      	nop
 8003220:	370c      	adds	r7, #12
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	f3af 8000 	nop.w
 8003230:	c1059ed8 	.word	0xc1059ed8
 8003234:	cbbb9d5d 	.word	0xcbbb9d5d
 8003238:	367cd507 	.word	0x367cd507
 800323c:	629a292a 	.word	0x629a292a
 8003240:	3070dd17 	.word	0x3070dd17
 8003244:	9159015a 	.word	0x9159015a
 8003248:	f70e5939 	.word	0xf70e5939
 800324c:	152fecd8 	.word	0x152fecd8
 8003250:	ffc00b31 	.word	0xffc00b31
 8003254:	67332667 	.word	0x67332667
 8003258:	68581511 	.word	0x68581511
 800325c:	8eb44a87 	.word	0x8eb44a87
 8003260:	64f98fa7 	.word	0x64f98fa7
 8003264:	db0c2e0d 	.word	0xdb0c2e0d
 8003268:	befa4fa4 	.word	0xbefa4fa4
 800326c:	47b5481d 	.word	0x47b5481d

08003270 <sha384Update>:
 * @param[in] data Pointer to the buffer being hashed
 * @param[in] length Length of the buffer
 **/

__weak_func void sha384Update(Sha384Context *context, const void *data, size_t length)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]
   //The function is defined in the exact same manner as SHA-512
   sha512Update(context, data, length);
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	68b9      	ldr	r1, [r7, #8]
 8003280:	68f8      	ldr	r0, [r7, #12]
 8003282:	f000 f8f1 	bl	8003468 <sha512Update>
}
 8003286:	bf00      	nop
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <sha384Final>:
 * @param[in] context Pointer to the SHA-384 context
 * @param[out] digest Calculated digest (optional parameter)
 **/

__weak_func void sha384Final(Sha384Context *context, uint8_t *digest)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b082      	sub	sp, #8
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
 8003296:	6039      	str	r1, [r7, #0]
   //The function is defined in the exact same manner as SHA-512
   sha512Final(context, NULL);
 8003298:	2100      	movs	r1, #0
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 f936 	bl	800350c <sha512Final>

   //Copy the resulting digest
   if(digest != NULL)
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d005      	beq.n	80032b2 <sha384Final+0x24>
   {
      osMemcpy(digest, context->digest, SHA384_DIGEST_SIZE);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2230      	movs	r2, #48	; 0x30
 80032aa:	4619      	mov	r1, r3
 80032ac:	6838      	ldr	r0, [r7, #0]
 80032ae:	f003 fd47 	bl	8006d40 <memcpy>
   }
}
 80032b2:	bf00      	nop
 80032b4:	3708      	adds	r7, #8
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}

080032ba <sha384FinalRaw>:
 * @param[in] context Pointer to the SHA-384 context
 * @param[out] digest Calculated digest
 **/

__weak_func void sha384FinalRaw(Sha384Context *context, uint8_t *digest)
{
 80032ba:	b580      	push	{r7, lr}
 80032bc:	b084      	sub	sp, #16
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
 80032c2:	6039      	str	r1, [r7, #0]
   uint_t i;

   //Convert from host byte order to big-endian byte order
   for(i = 0; i < 8; i++)
 80032c4:	2300      	movs	r3, #0
 80032c6:	60fb      	str	r3, [r7, #12]
 80032c8:	e014      	b.n	80032f4 <sha384FinalRaw+0x3a>
   {
      context->h[i] = htobe64(context->h[i]);
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	00db      	lsls	r3, r3, #3
 80032d0:	4413      	add	r3, r2
 80032d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d6:	4610      	mov	r0, r2
 80032d8:	4619      	mov	r1, r3
 80032da:	f001 f93a 	bl	8004552 <swapInt64>
 80032de:	4602      	mov	r2, r0
 80032e0:	460b      	mov	r3, r1
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	68f9      	ldr	r1, [r7, #12]
 80032e6:	00c9      	lsls	r1, r1, #3
 80032e8:	4401      	add	r1, r0
 80032ea:	e9c1 2300 	strd	r2, r3, [r1]
   for(i = 0; i < 8; i++)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	3301      	adds	r3, #1
 80032f2:	60fb      	str	r3, [r7, #12]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2b07      	cmp	r3, #7
 80032f8:	d9e7      	bls.n	80032ca <sha384FinalRaw+0x10>
   }

   //Copy the resulting digest
   osMemcpy(digest, context->digest, SHA384_DIGEST_SIZE);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2230      	movs	r2, #48	; 0x30
 80032fe:	4619      	mov	r1, r3
 8003300:	6838      	ldr	r0, [r7, #0]
 8003302:	f003 fd1d 	bl	8006d40 <memcpy>

   //Convert from big-endian byte order to host byte order
   for(i = 0; i < 8; i++)
 8003306:	2300      	movs	r3, #0
 8003308:	60fb      	str	r3, [r7, #12]
 800330a:	e014      	b.n	8003336 <sha384FinalRaw+0x7c>
   {
      context->h[i] = betoh64(context->h[i]);
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	00db      	lsls	r3, r3, #3
 8003312:	4413      	add	r3, r2
 8003314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003318:	4610      	mov	r0, r2
 800331a:	4619      	mov	r1, r3
 800331c:	f001 f919 	bl	8004552 <swapInt64>
 8003320:	4602      	mov	r2, r0
 8003322:	460b      	mov	r3, r1
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	68f9      	ldr	r1, [r7, #12]
 8003328:	00c9      	lsls	r1, r1, #3
 800332a:	4401      	add	r1, r0
 800332c:	e9c1 2300 	strd	r2, r3, [r1]
   for(i = 0; i < 8; i++)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	3301      	adds	r3, #1
 8003334:	60fb      	str	r3, [r7, #12]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2b07      	cmp	r3, #7
 800333a:	d9e7      	bls.n	800330c <sha384FinalRaw+0x52>
   }
}
 800333c:	bf00      	nop
 800333e:	bf00      	nop
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <sha512Compute>:
 * @param[out] digest Pointer to the calculated digest
 * @return Error code
 **/

__weak_func error_t sha512Compute(const void *data, size_t length, uint8_t *digest)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b086      	sub	sp, #24
 800334a:	af00      	add	r7, sp, #0
 800334c:	60f8      	str	r0, [r7, #12]
 800334e:	60b9      	str	r1, [r7, #8]
 8003350:	607a      	str	r2, [r7, #4]
   error_t error;
   Sha512Context *context;

   //Allocate a memory buffer to hold the SHA-512 context
   context = cryptoAllocMem(sizeof(Sha512Context));
 8003352:	20d0      	movs	r0, #208	; 0xd0
 8003354:	f001 faba 	bl	80048cc <osAllocMem>
 8003358:	6138      	str	r0, [r7, #16]

   //Successful memory allocation?
   if(context != NULL)
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d011      	beq.n	8003384 <sha512Compute+0x3e>
   {
      //Initialize the SHA-512 context
      sha512Init(context);
 8003360:	6938      	ldr	r0, [r7, #16]
 8003362:	f000 f819 	bl	8003398 <sha512Init>
      //Digest the message
      sha512Update(context, data, length);
 8003366:	68ba      	ldr	r2, [r7, #8]
 8003368:	68f9      	ldr	r1, [r7, #12]
 800336a:	6938      	ldr	r0, [r7, #16]
 800336c:	f000 f87c 	bl	8003468 <sha512Update>
      //Finalize the SHA-512 message digest
      sha512Final(context, digest);
 8003370:	6879      	ldr	r1, [r7, #4]
 8003372:	6938      	ldr	r0, [r7, #16]
 8003374:	f000 f8ca 	bl	800350c <sha512Final>

      //Free previously allocated memory
      cryptoFreeMem(context);
 8003378:	6938      	ldr	r0, [r7, #16]
 800337a:	f001 fab5 	bl	80048e8 <osFreeMem>

      //Successful processing
      error = NO_ERROR;
 800337e:	2300      	movs	r3, #0
 8003380:	82fb      	strh	r3, [r7, #22]
 8003382:	e001      	b.n	8003388 <sha512Compute+0x42>
   }
   else
   {
      //Failed to allocate memory
      error = ERROR_OUT_OF_MEMORY;
 8003384:	2364      	movs	r3, #100	; 0x64
 8003386:	82fb      	strh	r3, [r7, #22]
   }

   //Return status code
   return error;
 8003388:	8afb      	ldrh	r3, [r7, #22]
}
 800338a:	4618      	mov	r0, r3
 800338c:	3718      	adds	r7, #24
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	0000      	movs	r0, r0
 8003394:	0000      	movs	r0, r0
	...

08003398 <sha512Init>:
 * @brief Initialize SHA-512 message digest context
 * @param[in] context Pointer to the SHA-512 context to initialize
 **/

__weak_func void sha512Init(Sha512Context *context)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
   //Set initial hash value
   context->h[0] = 0x6A09E667F3BCC908;
 80033a0:	6879      	ldr	r1, [r7, #4]
 80033a2:	a321      	add	r3, pc, #132	; (adr r3, 8003428 <sha512Init+0x90>)
 80033a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a8:	e9c1 2300 	strd	r2, r3, [r1]
   context->h[1] = 0xBB67AE8584CAA73B;
 80033ac:	6879      	ldr	r1, [r7, #4]
 80033ae:	a320      	add	r3, pc, #128	; (adr r3, 8003430 <sha512Init+0x98>)
 80033b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b4:	e9c1 2302 	strd	r2, r3, [r1, #8]
   context->h[2] = 0x3C6EF372FE94F82B;
 80033b8:	6879      	ldr	r1, [r7, #4]
 80033ba:	a31f      	add	r3, pc, #124	; (adr r3, 8003438 <sha512Init+0xa0>)
 80033bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c0:	e9c1 2304 	strd	r2, r3, [r1, #16]
   context->h[3] = 0xA54FF53A5F1D36F1;
 80033c4:	6879      	ldr	r1, [r7, #4]
 80033c6:	a31e      	add	r3, pc, #120	; (adr r3, 8003440 <sha512Init+0xa8>)
 80033c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033cc:	e9c1 2306 	strd	r2, r3, [r1, #24]
   context->h[4] = 0x510E527FADE682D1;
 80033d0:	6879      	ldr	r1, [r7, #4]
 80033d2:	a31d      	add	r3, pc, #116	; (adr r3, 8003448 <sha512Init+0xb0>)
 80033d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d8:	e9c1 2308 	strd	r2, r3, [r1, #32]
   context->h[5] = 0x9B05688C2B3E6C1F;
 80033dc:	6879      	ldr	r1, [r7, #4]
 80033de:	a31c      	add	r3, pc, #112	; (adr r3, 8003450 <sha512Init+0xb8>)
 80033e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
   context->h[6] = 0x1F83D9ABFB41BD6B;
 80033e8:	6879      	ldr	r1, [r7, #4]
 80033ea:	a31b      	add	r3, pc, #108	; (adr r3, 8003458 <sha512Init+0xc0>)
 80033ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f0:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
   context->h[7] = 0x5BE0CD19137E2179;
 80033f4:	6879      	ldr	r1, [r7, #4]
 80033f6:	a31a      	add	r3, pc, #104	; (adr r3, 8003460 <sha512Init+0xc8>)
 80033f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033fc:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

   //Number of bytes in the buffer
   context->size = 0;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
   //Total length of the message
   context->totalSize = 0;
 8003408:	6879      	ldr	r1, [r7, #4]
 800340a:	f04f 0200 	mov.w	r2, #0
 800340e:	f04f 0300 	mov.w	r3, #0
 8003412:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
}
 8003416:	bf00      	nop
 8003418:	370c      	adds	r7, #12
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	f3af 8000 	nop.w
 8003428:	f3bcc908 	.word	0xf3bcc908
 800342c:	6a09e667 	.word	0x6a09e667
 8003430:	84caa73b 	.word	0x84caa73b
 8003434:	bb67ae85 	.word	0xbb67ae85
 8003438:	fe94f82b 	.word	0xfe94f82b
 800343c:	3c6ef372 	.word	0x3c6ef372
 8003440:	5f1d36f1 	.word	0x5f1d36f1
 8003444:	a54ff53a 	.word	0xa54ff53a
 8003448:	ade682d1 	.word	0xade682d1
 800344c:	510e527f 	.word	0x510e527f
 8003450:	2b3e6c1f 	.word	0x2b3e6c1f
 8003454:	9b05688c 	.word	0x9b05688c
 8003458:	fb41bd6b 	.word	0xfb41bd6b
 800345c:	1f83d9ab 	.word	0x1f83d9ab
 8003460:	137e2179 	.word	0x137e2179
 8003464:	5be0cd19 	.word	0x5be0cd19

08003468 <sha512Update>:
 * @param[in] data Pointer to the buffer being hashed
 * @param[in] length Length of the buffer
 **/

__weak_func void sha512Update(Sha512Context *context, const void *data, size_t length)
{
 8003468:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800346c:	b086      	sub	sp, #24
 800346e:	af00      	add	r7, sp, #0
 8003470:	60f8      	str	r0, [r7, #12]
 8003472:	60b9      	str	r1, [r7, #8]
 8003474:	607a      	str	r2, [r7, #4]
   size_t n;

   //Process the incoming data
   while(length > 0)
 8003476:	e03f      	b.n	80034f8 <sha512Update+0x90>
   {
      //The buffer can hold at most 128 bytes
      n = MIN(length, 128 - context->size);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800347e:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	4293      	cmp	r3, r2
 8003486:	bf28      	it	cs
 8003488:	4613      	movcs	r3, r2
 800348a:	617b      	str	r3, [r7, #20]

      //Copy the data to the buffer
      osMemcpy(context->buffer + context->size, data, n);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003498:	4413      	add	r3, r2
 800349a:	697a      	ldr	r2, [r7, #20]
 800349c:	68b9      	ldr	r1, [r7, #8]
 800349e:	4618      	mov	r0, r3
 80034a0:	f003 fc4e 	bl	8006d40 <memcpy>

      //Update the SHA-512 context
      context->size += n;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	441a      	add	r2, r3
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
      context->totalSize += n;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 80034ba:	6979      	ldr	r1, [r7, #20]
 80034bc:	2000      	movs	r0, #0
 80034be:	460c      	mov	r4, r1
 80034c0:	4605      	mov	r5, r0
 80034c2:	eb12 0804 	adds.w	r8, r2, r4
 80034c6:	eb43 0905 	adc.w	r9, r3, r5
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	e9c3 8932 	strd	r8, r9, [r3, #200]	; 0xc8
      //Advance the data pointer
      data = (uint8_t *) data + n;
 80034d0:	68ba      	ldr	r2, [r7, #8]
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	4413      	add	r3, r2
 80034d6:	60bb      	str	r3, [r7, #8]
      //Remaining bytes to process
      length -= n;
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	607b      	str	r3, [r7, #4]

      //Process message in 16-word blocks
      if(context->size == 128)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80034e6:	2b80      	cmp	r3, #128	; 0x80
 80034e8:	d106      	bne.n	80034f8 <sha512Update+0x90>
      {
         //Transform the 16-word block
         sha512ProcessBlock(context);
 80034ea:	68f8      	ldr	r0, [r7, #12]
 80034ec:	f000 f874 	bl	80035d8 <sha512ProcessBlock>
         //Empty the buffer
         context->size = 0;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
   while(length > 0)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1bc      	bne.n	8003478 <sha512Update+0x10>
      }
   }
}
 80034fe:	bf00      	nop
 8003500:	bf00      	nop
 8003502:	3718      	adds	r7, #24
 8003504:	46bd      	mov	sp, r7
 8003506:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

0800350c <sha512Final>:
 * @param[in] context Pointer to the SHA-512 context
 * @param[out] digest Calculated digest (optional parameter)
 **/

__weak_func void sha512Final(Sha512Context *context, uint8_t *digest)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b086      	sub	sp, #24
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
   uint_t i;
   size_t paddingSize;
   uint64_t totalSize;

   //Length of the original message (before padding)
   totalSize = context->totalSize * 8;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	; 0xc8
 800351c:	f04f 0200 	mov.w	r2, #0
 8003520:	f04f 0300 	mov.w	r3, #0
 8003524:	00cb      	lsls	r3, r1, #3
 8003526:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800352a:	00c2      	lsls	r2, r0, #3
 800352c:	e9c7 2302 	strd	r2, r3, [r7, #8]

   //Pad the message so that its length is congruent to 112 modulo 128
   if(context->size < 112)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003536:	2b6f      	cmp	r3, #111	; 0x6f
 8003538:	d806      	bhi.n	8003548 <sha512Final+0x3c>
   {
      paddingSize = 112 - context->size;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003540:	f1c3 0370 	rsb	r3, r3, #112	; 0x70
 8003544:	613b      	str	r3, [r7, #16]
 8003546:	e005      	b.n	8003554 <sha512Final+0x48>
   }
   else
   {
      paddingSize = 128 + 112 - context->size;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800354e:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8003552:	613b      	str	r3, [r7, #16]
   }

   //Append padding
   sha512Update(context, padding, paddingSize);
 8003554:	693a      	ldr	r2, [r7, #16]
 8003556:	491f      	ldr	r1, [pc, #124]	; (80035d4 <sha512Final+0xc8>)
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f7ff ff85 	bl	8003468 <sha512Update>

   //Append the length of the original message
   context->w[14] = 0;
 800355e:	6879      	ldr	r1, [r7, #4]
 8003560:	f04f 0200 	mov.w	r2, #0
 8003564:	f04f 0300 	mov.w	r3, #0
 8003568:	e9c1 232c 	strd	r2, r3, [r1, #176]	; 0xb0
   context->w[15] = htobe64(totalSize);
 800356c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003570:	f000 ffef 	bl	8004552 <swapInt64>
 8003574:	4602      	mov	r2, r0
 8003576:	460b      	mov	r3, r1
 8003578:	6879      	ldr	r1, [r7, #4]
 800357a:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8

   //Calculate the message digest
   sha512ProcessBlock(context);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f000 f82a 	bl	80035d8 <sha512ProcessBlock>

   //Convert from host byte order to big-endian byte order
   for(i = 0; i < 8; i++)
 8003584:	2300      	movs	r3, #0
 8003586:	617b      	str	r3, [r7, #20]
 8003588:	e014      	b.n	80035b4 <sha512Final+0xa8>
   {
      context->h[i] = htobe64(context->h[i]);
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	00db      	lsls	r3, r3, #3
 8003590:	4413      	add	r3, r2
 8003592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003596:	4610      	mov	r0, r2
 8003598:	4619      	mov	r1, r3
 800359a:	f000 ffda 	bl	8004552 <swapInt64>
 800359e:	4602      	mov	r2, r0
 80035a0:	460b      	mov	r3, r1
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	6979      	ldr	r1, [r7, #20]
 80035a6:	00c9      	lsls	r1, r1, #3
 80035a8:	4401      	add	r1, r0
 80035aa:	e9c1 2300 	strd	r2, r3, [r1]
   for(i = 0; i < 8; i++)
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	3301      	adds	r3, #1
 80035b2:	617b      	str	r3, [r7, #20]
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	2b07      	cmp	r3, #7
 80035b8:	d9e7      	bls.n	800358a <sha512Final+0x7e>
   }

   //Copy the resulting digest
   if(digest != NULL)
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d005      	beq.n	80035cc <sha512Final+0xc0>
   {
      osMemcpy(digest, context->digest, SHA512_DIGEST_SIZE);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2240      	movs	r2, #64	; 0x40
 80035c4:	4619      	mov	r1, r3
 80035c6:	6838      	ldr	r0, [r7, #0]
 80035c8:	f003 fbba 	bl	8006d40 <memcpy>
   }
}
 80035cc:	bf00      	nop
 80035ce:	3718      	adds	r7, #24
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	08008528 	.word	0x08008528

080035d8 <sha512ProcessBlock>:
 * @brief Process message in 16-word blocks
 * @param[in] context Pointer to the SHA-512 context
 **/

__weak_func void sha512ProcessBlock(Sha512Context *context)
{
 80035d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035dc:	b0ee      	sub	sp, #440	; 0x1b8
 80035de:	af00      	add	r7, sp, #0
 80035e0:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154
   uint_t t;
   uint64_t temp1;
   uint64_t temp2;

   //Initialize the 8 working registers
   uint64_t a = context->h[0];
 80035e4:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80035e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ec:	e9c7 236a 	strd	r2, r3, [r7, #424]	; 0x1a8
   uint64_t b = context->h[1];
 80035f0:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80035f4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80035f8:	e9c7 2368 	strd	r2, r3, [r7, #416]	; 0x1a0
   uint64_t c = context->h[2];
 80035fc:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003600:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003604:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
   uint64_t d = context->h[3];
 8003608:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800360c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003610:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
   uint64_t e = context->h[4];
 8003614:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003618:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800361c:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
   uint64_t f = context->h[5];
 8003620:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003624:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003628:	e9c7 2360 	strd	r2, r3, [r7, #384]	; 0x180
   uint64_t g = context->h[6];
 800362c:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003630:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003634:	e9c7 235e 	strd	r2, r3, [r7, #376]	; 0x178
   uint64_t h = context->h[7];
 8003638:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800363c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003640:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170

   //Process message in 16-word blocks
   uint64_t *w = context->w;
 8003644:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003648:	3340      	adds	r3, #64	; 0x40
 800364a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c

   //Convert from big-endian byte order to host byte order
   for(t = 0; t < 16; t++)
 800364e:	2300      	movs	r3, #0
 8003650:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8003654:	e018      	b.n	8003688 <sha512ProcessBlock+0xb0>
   {
      w[t] = betoh64(w[t]);
 8003656:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800365a:	00da      	lsls	r2, r3, #3
 800365c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003660:	4413      	add	r3, r2
 8003662:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003666:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800366a:	00da      	lsls	r2, r3, #3
 800366c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003670:	189c      	adds	r4, r3, r2
 8003672:	f000 ff6e 	bl	8004552 <swapInt64>
 8003676:	4602      	mov	r2, r0
 8003678:	460b      	mov	r3, r1
 800367a:	e9c4 2300 	strd	r2, r3, [r4]
   for(t = 0; t < 16; t++)
 800367e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003682:	3301      	adds	r3, #1
 8003684:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8003688:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800368c:	2b0f      	cmp	r3, #15
 800368e:	d9e2      	bls.n	8003656 <sha512ProcessBlock+0x7e>
   }

   //SHA-512 hash computation (alternate method)
   for(t = 0; t < 80; t++)
 8003690:	2300      	movs	r3, #0
 8003692:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8003696:	e26c      	b.n	8003b72 <sha512ProcessBlock+0x59a>
   {
      //Prepare the message schedule
      if(t >= 16)
 8003698:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800369c:	2b0f      	cmp	r3, #15
 800369e:	f240 80e4 	bls.w	800386a <sha512ProcessBlock+0x292>
      {
         W(t) += SIGMA4(W(t + 14)) + W(t + 9) + SIGMA3(W(t + 1));
 80036a2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80036a6:	f003 030f 	and.w	r3, r3, #15
 80036aa:	00da      	lsls	r2, r3, #3
 80036ac:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80036b0:	4413      	add	r3, r2
 80036b2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80036b6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80036ba:	330e      	adds	r3, #14
 80036bc:	f003 030f 	and.w	r3, r3, #15
 80036c0:	00da      	lsls	r2, r3, #3
 80036c2:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80036c6:	4413      	add	r3, r2
 80036c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036cc:	0358      	lsls	r0, r3, #13
 80036ce:	0cd1      	lsrs	r1, r2, #19
 80036d0:	4301      	orrs	r1, r0
 80036d2:	f8c7 1148 	str.w	r1, [r7, #328]	; 0x148
 80036d6:	0351      	lsls	r1, r2, #13
 80036d8:	0cdb      	lsrs	r3, r3, #19
 80036da:	430b      	orrs	r3, r1
 80036dc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80036e0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80036e4:	330e      	adds	r3, #14
 80036e6:	f003 030f 	and.w	r3, r3, #15
 80036ea:	00da      	lsls	r2, r3, #3
 80036ec:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80036f0:	4413      	add	r3, r2
 80036f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f6:	0f50      	lsrs	r0, r2, #29
 80036f8:	00d9      	lsls	r1, r3, #3
 80036fa:	4301      	orrs	r1, r0
 80036fc:	f8c7 1124 	str.w	r1, [r7, #292]	; 0x124
 8003700:	0f59      	lsrs	r1, r3, #29
 8003702:	00d3      	lsls	r3, r2, #3
 8003704:	430b      	orrs	r3, r1
 8003706:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800370a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800370e:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8003712:	4602      	mov	r2, r0
 8003714:	4053      	eors	r3, r2
 8003716:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800371a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800371e:	460a      	mov	r2, r1
 8003720:	4053      	eors	r3, r2
 8003722:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8003726:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800372a:	330e      	adds	r3, #14
 800372c:	f003 030f 	and.w	r3, r3, #15
 8003730:	00da      	lsls	r2, r3, #3
 8003732:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003736:	4413      	add	r3, r2
 8003738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800373c:	f04f 0000 	mov.w	r0, #0
 8003740:	f04f 0100 	mov.w	r1, #0
 8003744:	0990      	lsrs	r0, r2, #6
 8003746:	ea40 6083 	orr.w	r0, r0, r3, lsl #26
 800374a:	0999      	lsrs	r1, r3, #6
 800374c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8003750:	4043      	eors	r3, r0
 8003752:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8003756:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800375a:	404b      	eors	r3, r1
 800375c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8003760:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003764:	3309      	adds	r3, #9
 8003766:	f003 030f 	and.w	r3, r3, #15
 800376a:	00da      	lsls	r2, r3, #3
 800376c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003770:	4413      	add	r3, r2
 8003772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003776:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 800377a:	1889      	adds	r1, r1, r2
 800377c:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 8003780:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003784:	eb41 0303 	adc.w	r3, r1, r3
 8003788:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800378c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003790:	3301      	adds	r3, #1
 8003792:	f003 030f 	and.w	r3, r3, #15
 8003796:	00da      	lsls	r2, r3, #3
 8003798:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800379c:	4413      	add	r3, r2
 800379e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037a2:	07d8      	lsls	r0, r3, #31
 80037a4:	0851      	lsrs	r1, r2, #1
 80037a6:	4301      	orrs	r1, r0
 80037a8:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 80037ac:	07d1      	lsls	r1, r2, #31
 80037ae:	085b      	lsrs	r3, r3, #1
 80037b0:	430b      	orrs	r3, r1
 80037b2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80037b6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80037ba:	3301      	adds	r3, #1
 80037bc:	f003 030f 	and.w	r3, r3, #15
 80037c0:	00da      	lsls	r2, r3, #3
 80037c2:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80037c6:	4413      	add	r3, r2
 80037c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037cc:	0618      	lsls	r0, r3, #24
 80037ce:	0a11      	lsrs	r1, r2, #8
 80037d0:	4301      	orrs	r1, r0
 80037d2:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 80037d6:	0611      	lsls	r1, r2, #24
 80037d8:	0a1b      	lsrs	r3, r3, #8
 80037da:	430b      	orrs	r3, r1
 80037dc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80037e0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80037e4:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 80037e8:	4602      	mov	r2, r0
 80037ea:	4053      	eors	r3, r2
 80037ec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80037f0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80037f4:	460a      	mov	r2, r1
 80037f6:	4053      	eors	r3, r2
 80037f8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80037fc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003800:	3301      	adds	r3, #1
 8003802:	f003 030f 	and.w	r3, r3, #15
 8003806:	00da      	lsls	r2, r3, #3
 8003808:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800380c:	4413      	add	r3, r2
 800380e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003812:	f04f 0000 	mov.w	r0, #0
 8003816:	f04f 0100 	mov.w	r1, #0
 800381a:	09d0      	lsrs	r0, r2, #7
 800381c:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 8003820:	09d9      	lsrs	r1, r3, #7
 8003822:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003826:	ea83 0a00 	eor.w	sl, r3, r0
 800382a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800382e:	ea83 0b01 	eor.w	fp, r3, r1
 8003832:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	; 0x118
 8003836:	460b      	mov	r3, r1
 8003838:	eb13 080a 	adds.w	r8, r3, sl
 800383c:	4613      	mov	r3, r2
 800383e:	eb43 090b 	adc.w	r9, r3, fp
 8003842:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003846:	f003 030f 	and.w	r3, r3, #15
 800384a:	00da      	lsls	r2, r3, #3
 800384c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003850:	4413      	add	r3, r2
 8003852:	eb14 0208 	adds.w	r2, r4, r8
 8003856:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 800385a:	eb45 0209 	adc.w	r2, r5, r9
 800385e:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8003862:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8003866:	e9c3 1200 	strd	r1, r2, [r3]
      }

      //Calculate T1 and T2
      temp1 = h + SIGMA2(e) + CH(e, f, g) + k[t] + W(t);
 800386a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800386e:	049a      	lsls	r2, r3, #18
 8003870:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003874:	0b9b      	lsrs	r3, r3, #14
 8003876:	4313      	orrs	r3, r2
 8003878:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800387c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003880:	049a      	lsls	r2, r3, #18
 8003882:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003886:	0b9b      	lsrs	r3, r3, #14
 8003888:	4313      	orrs	r3, r2
 800388a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800388e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003892:	039a      	lsls	r2, r3, #14
 8003894:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003898:	0c9b      	lsrs	r3, r3, #18
 800389a:	4313      	orrs	r3, r2
 800389c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80038a0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80038a4:	039a      	lsls	r2, r3, #14
 80038a6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80038aa:	0c9b      	lsrs	r3, r3, #18
 80038ac:	4313      	orrs	r3, r2
 80038ae:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80038b2:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 80038b6:	4623      	mov	r3, r4
 80038b8:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 80038bc:	4602      	mov	r2, r0
 80038be:	4053      	eors	r3, r2
 80038c0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80038c4:	462b      	mov	r3, r5
 80038c6:	460a      	mov	r2, r1
 80038c8:	4053      	eors	r3, r2
 80038ca:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80038ce:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80038d2:	0a5a      	lsrs	r2, r3, #9
 80038d4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80038d8:	05db      	lsls	r3, r3, #23
 80038da:	4313      	orrs	r3, r2
 80038dc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80038e0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80038e4:	0a5a      	lsrs	r2, r3, #9
 80038e6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80038ea:	05db      	lsls	r3, r3, #23
 80038ec:	4313      	orrs	r3, r2
 80038ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80038f2:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 80038f6:	4623      	mov	r3, r4
 80038f8:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 80038fc:	4602      	mov	r2, r0
 80038fe:	4053      	eors	r3, r2
 8003900:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003904:	462b      	mov	r3, r5
 8003906:	460a      	mov	r2, r1
 8003908:	4053      	eors	r3, r2
 800390a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800390e:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8003912:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8003916:	4621      	mov	r1, r4
 8003918:	1889      	adds	r1, r1, r2
 800391a:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800391e:	4629      	mov	r1, r5
 8003920:	eb41 0303 	adc.w	r3, r1, r3
 8003924:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003928:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800392c:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 8003930:	ea00 0402 	and.w	r4, r0, r2
 8003934:	f8c7 40d0 	str.w	r4, [r7, #208]	; 0xd0
 8003938:	400b      	ands	r3, r1
 800393a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800393e:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8003942:	43d1      	mvns	r1, r2
 8003944:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8003948:	43db      	mvns	r3, r3
 800394a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800394e:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8003952:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8003956:	4621      	mov	r1, r4
 8003958:	4011      	ands	r1, r2
 800395a:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800395e:	4629      	mov	r1, r5
 8003960:	400b      	ands	r3, r1
 8003962:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003966:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 800396a:	4623      	mov	r3, r4
 800396c:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8003970:	4602      	mov	r2, r0
 8003972:	4313      	orrs	r3, r2
 8003974:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003978:	462b      	mov	r3, r5
 800397a:	460a      	mov	r2, r1
 800397c:	4313      	orrs	r3, r2
 800397e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003982:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8003986:	4623      	mov	r3, r4
 8003988:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800398c:	4602      	mov	r2, r0
 800398e:	189b      	adds	r3, r3, r2
 8003990:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003994:	462b      	mov	r3, r5
 8003996:	460a      	mov	r2, r1
 8003998:	4153      	adcs	r3, r2
 800399a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800399e:	4abe      	ldr	r2, [pc, #760]	; (8003c98 <sha512ProcessBlock+0x6c0>)
 80039a0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80039a4:	00db      	lsls	r3, r3, #3
 80039a6:	4413      	add	r3, r2
 80039a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ac:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 80039b0:	4621      	mov	r1, r4
 80039b2:	1889      	adds	r1, r1, r2
 80039b4:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 80039b8:	4629      	mov	r1, r5
 80039ba:	eb41 0303 	adc.w	r3, r1, r3
 80039be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80039c2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80039c6:	f003 030f 	and.w	r3, r3, #15
 80039ca:	00da      	lsls	r2, r3, #3
 80039cc:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80039d0:	4413      	add	r3, r2
 80039d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d6:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 80039da:	4621      	mov	r1, r4
 80039dc:	1889      	adds	r1, r1, r2
 80039de:	61b9      	str	r1, [r7, #24]
 80039e0:	4629      	mov	r1, r5
 80039e2:	eb41 0303 	adc.w	r3, r1, r3
 80039e6:	61fb      	str	r3, [r7, #28]
 80039e8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80039ec:	e9c7 3458 	strd	r3, r4, [r7, #352]	; 0x160
      temp2 = SIGMA1(a) + MAJ(a, b, c);
 80039f0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80039f4:	011a      	lsls	r2, r3, #4
 80039f6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80039fa:	0f1b      	lsrs	r3, r3, #28
 80039fc:	4313      	orrs	r3, r2
 80039fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003a02:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003a06:	011a      	lsls	r2, r3, #4
 8003a08:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003a0c:	0f1b      	lsrs	r3, r3, #28
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003a14:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003a18:	089a      	lsrs	r2, r3, #2
 8003a1a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003a1e:	079b      	lsls	r3, r3, #30
 8003a20:	4313      	orrs	r3, r2
 8003a22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003a26:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003a2a:	089a      	lsrs	r2, r3, #2
 8003a2c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003a30:	079b      	lsls	r3, r3, #30
 8003a32:	4313      	orrs	r3, r2
 8003a34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003a38:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 8003a3c:	4623      	mov	r3, r4
 8003a3e:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003a42:	4602      	mov	r2, r0
 8003a44:	4053      	eors	r3, r2
 8003a46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003a4a:	462b      	mov	r3, r5
 8003a4c:	460a      	mov	r2, r1
 8003a4e:	4053      	eors	r3, r2
 8003a50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003a54:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003a58:	09da      	lsrs	r2, r3, #7
 8003a5a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003a5e:	065b      	lsls	r3, r3, #25
 8003a60:	4313      	orrs	r3, r2
 8003a62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003a66:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003a6a:	09da      	lsrs	r2, r3, #7
 8003a6c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003a70:	065b      	lsls	r3, r3, #25
 8003a72:	4313      	orrs	r3, r2
 8003a74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003a78:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003a7c:	4623      	mov	r3, r4
 8003a7e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8003a82:	4602      	mov	r2, r0
 8003a84:	4053      	eors	r3, r2
 8003a86:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a8a:	462b      	mov	r3, r5
 8003a8c:	460a      	mov	r2, r1
 8003a8e:	4053      	eors	r3, r2
 8003a90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003a94:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 8003a98:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 8003a9c:	ea40 0402 	orr.w	r4, r0, r2
 8003aa0:	67bc      	str	r4, [r7, #120]	; 0x78
 8003aa2:	430b      	orrs	r3, r1
 8003aa4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003aa6:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	; 0x1a8
 8003aaa:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003aae:	4621      	mov	r1, r4
 8003ab0:	4011      	ands	r1, r2
 8003ab2:	6739      	str	r1, [r7, #112]	; 0x70
 8003ab4:	4629      	mov	r1, r5
 8003ab6:	400b      	ands	r3, r1
 8003ab8:	677b      	str	r3, [r7, #116]	; 0x74
 8003aba:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 8003abe:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 8003ac2:	ea00 0402 	and.w	r4, r0, r2
 8003ac6:	66bc      	str	r4, [r7, #104]	; 0x68
 8003ac8:	400b      	ands	r3, r1
 8003aca:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003acc:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8003ad0:	4623      	mov	r3, r4
 8003ad2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	663b      	str	r3, [r7, #96]	; 0x60
 8003adc:	462b      	mov	r3, r5
 8003ade:	460a      	mov	r2, r1
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	667b      	str	r3, [r7, #100]	; 0x64
 8003ae4:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8003ae8:	4623      	mov	r3, r4
 8003aea:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003aee:	4602      	mov	r2, r0
 8003af0:	189b      	adds	r3, r3, r2
 8003af2:	613b      	str	r3, [r7, #16]
 8003af4:	462b      	mov	r3, r5
 8003af6:	460a      	mov	r2, r1
 8003af8:	4153      	adcs	r3, r2
 8003afa:	617b      	str	r3, [r7, #20]
 8003afc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003b00:	e9c7 3456 	strd	r3, r4, [r7, #344]	; 0x158

      //Update the working registers
      h = g;
 8003b04:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8003b08:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
      g = f;
 8003b0c:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 8003b10:	e9c7 235e 	strd	r2, r3, [r7, #376]	; 0x178
      f = e;
 8003b14:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8003b18:	e9c7 2360 	strd	r2, r3, [r7, #384]	; 0x180
      e = d + temp1;
 8003b1c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003b20:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 8003b24:	1884      	adds	r4, r0, r2
 8003b26:	60bc      	str	r4, [r7, #8]
 8003b28:	eb41 0303 	adc.w	r3, r1, r3
 8003b2c:	60fb      	str	r3, [r7, #12]
 8003b2e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003b32:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      d = c;
 8003b36:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 8003b3a:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      c = b;
 8003b3e:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 8003b42:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      b = a;
 8003b46:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	; 0x1a8
 8003b4a:	e9c7 2368 	strd	r2, r3, [r7, #416]	; 0x1a0
      a = temp1 + temp2;
 8003b4e:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 8003b52:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 8003b56:	1884      	adds	r4, r0, r2
 8003b58:	603c      	str	r4, [r7, #0]
 8003b5a:	eb41 0303 	adc.w	r3, r1, r3
 8003b5e:	607b      	str	r3, [r7, #4]
 8003b60:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003b64:	e9c7 346a 	strd	r3, r4, [r7, #424]	; 0x1a8
   for(t = 0; t < 80; t++)
 8003b68:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8003b72:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003b76:	2b4f      	cmp	r3, #79	; 0x4f
 8003b78:	f67f ad8e 	bls.w	8003698 <sha512ProcessBlock+0xc0>
   }

   //Update the hash value
   context->h[0] += a;
 8003b7c:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003b80:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b84:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	; 0x1a8
 8003b88:	1884      	adds	r4, r0, r2
 8003b8a:	65bc      	str	r4, [r7, #88]	; 0x58
 8003b8c:	eb41 0303 	adc.w	r3, r1, r3
 8003b90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b92:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003b96:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003b9a:	e9c3 1200 	strd	r1, r2, [r3]
   context->h[1] += b;
 8003b9e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003ba2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003ba6:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 8003baa:	1884      	adds	r4, r0, r2
 8003bac:	653c      	str	r4, [r7, #80]	; 0x50
 8003bae:	eb41 0303 	adc.w	r3, r1, r3
 8003bb2:	657b      	str	r3, [r7, #84]	; 0x54
 8003bb4:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003bb8:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003bbc:	e9c3 1202 	strd	r1, r2, [r3, #8]
   context->h[2] += c;
 8003bc0:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003bc4:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8003bc8:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 8003bcc:	1884      	adds	r4, r0, r2
 8003bce:	64bc      	str	r4, [r7, #72]	; 0x48
 8003bd0:	eb41 0303 	adc.w	r3, r1, r3
 8003bd4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bd6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003bda:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003bde:	e9c3 1204 	strd	r1, r2, [r3, #16]
   context->h[3] += d;
 8003be2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003be6:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8003bea:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 8003bee:	1884      	adds	r4, r0, r2
 8003bf0:	643c      	str	r4, [r7, #64]	; 0x40
 8003bf2:	eb41 0303 	adc.w	r3, r1, r3
 8003bf6:	647b      	str	r3, [r7, #68]	; 0x44
 8003bf8:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003bfc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003c00:	e9c3 1206 	strd	r1, r2, [r3, #24]
   context->h[4] += e;
 8003c04:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003c08:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8003c0c:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8003c10:	1884      	adds	r4, r0, r2
 8003c12:	63bc      	str	r4, [r7, #56]	; 0x38
 8003c14:	eb41 0303 	adc.w	r3, r1, r3
 8003c18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c1a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003c1e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003c22:	e9c3 1208 	strd	r1, r2, [r3, #32]
   context->h[5] += f;
 8003c26:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003c2a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8003c2e:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 8003c32:	1884      	adds	r4, r0, r2
 8003c34:	633c      	str	r4, [r7, #48]	; 0x30
 8003c36:	eb41 0303 	adc.w	r3, r1, r3
 8003c3a:	637b      	str	r3, [r7, #52]	; 0x34
 8003c3c:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003c40:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003c44:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
   context->h[6] += g;
 8003c48:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003c4c:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8003c50:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8003c54:	1884      	adds	r4, r0, r2
 8003c56:	62bc      	str	r4, [r7, #40]	; 0x28
 8003c58:	eb41 0303 	adc.w	r3, r1, r3
 8003c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c5e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003c62:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003c66:	e9c3 120c 	strd	r1, r2, [r3, #48]	; 0x30
   context->h[7] += h;
 8003c6a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003c6e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8003c72:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8003c76:	1884      	adds	r4, r0, r2
 8003c78:	623c      	str	r4, [r7, #32]
 8003c7a:	eb41 0303 	adc.w	r3, r1, r3
 8003c7e:	627b      	str	r3, [r7, #36]	; 0x24
 8003c80:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003c84:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003c88:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
}
 8003c8c:	bf00      	nop
 8003c8e:	f507 77dc 	add.w	r7, r7, #440	; 0x1b8
 8003c92:	46bd      	mov	sp, r7
 8003c94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c98:	080085a8 	.word	0x080085a8

08003c9c <aesInit>:
 * @return Error code
 **/

__weak_func error_t aesInit(AesContext *context, const uint8_t *key,
   size_t keyLen)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b089      	sub	sp, #36	; 0x24
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	607a      	str	r2, [r7, #4]
   uint_t i;
   uint32_t temp;
   size_t keyScheduleSize;

   //Check parameters
   if(context == NULL || key == NULL)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d002      	beq.n	8003cb4 <aesInit+0x18>
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d101      	bne.n	8003cb8 <aesInit+0x1c>
      return ERROR_INVALID_PARAMETER;
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	e1a9      	b.n	800400c <aesInit+0x370>

   //Check the length of the key
   if(keyLen == 16)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2b10      	cmp	r3, #16
 8003cbc:	d103      	bne.n	8003cc6 <aesInit+0x2a>
   {
      //10 rounds are required for 128-bit key
      context->nr = 10;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	220a      	movs	r2, #10
 8003cc2:	601a      	str	r2, [r3, #0]
 8003cc4:	e00f      	b.n	8003ce6 <aesInit+0x4a>
   }
   else if(keyLen == 24)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2b18      	cmp	r3, #24
 8003cca:	d103      	bne.n	8003cd4 <aesInit+0x38>
   {
      //12 rounds are required for 192-bit key
      context->nr = 12;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	220c      	movs	r2, #12
 8003cd0:	601a      	str	r2, [r3, #0]
 8003cd2:	e008      	b.n	8003ce6 <aesInit+0x4a>
   }
   else if(keyLen == 32)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2b20      	cmp	r3, #32
 8003cd8:	d103      	bne.n	8003ce2 <aesInit+0x46>
   {
      //14 rounds are required for 256-bit key
      context->nr = 14;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	220e      	movs	r2, #14
 8003cde:	601a      	str	r2, [r3, #0]
 8003ce0:	e001      	b.n	8003ce6 <aesInit+0x4a>
   }
   else
   {
      //Report an error
      return ERROR_INVALID_KEY_LENGTH;
 8003ce2:	23e8      	movs	r3, #232	; 0xe8
 8003ce4:	e192      	b.n	800400c <aesInit+0x370>
   }

   //Determine the number of 32-bit words in the key
   keyLen /= 4;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	089b      	lsrs	r3, r3, #2
 8003cea:	607b      	str	r3, [r7, #4]

   //Copy the original key
   for(i = 0; i < keyLen; i++)
 8003cec:	2300      	movs	r3, #0
 8003cee:	61fb      	str	r3, [r7, #28]
 8003cf0:	e026      	b.n	8003d40 <aesInit+0xa4>
   {
      context->ek[i] = LOAD32LE(key + (i * 4));
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	68ba      	ldr	r2, [r7, #8]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	68ba      	ldr	r2, [r7, #8]
 8003d04:	4413      	add	r3, r2
 8003d06:	3301      	adds	r3, #1
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	021b      	lsls	r3, r3, #8
 8003d0c:	ea41 0203 	orr.w	r2, r1, r3
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	68b9      	ldr	r1, [r7, #8]
 8003d16:	440b      	add	r3, r1
 8003d18:	3302      	adds	r3, #2
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	041b      	lsls	r3, r3, #16
 8003d1e:	431a      	orrs	r2, r3
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	68b9      	ldr	r1, [r7, #8]
 8003d26:	440b      	add	r3, r1
 8003d28:	3303      	adds	r3, #3
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	061b      	lsls	r3, r3, #24
 8003d2e:	431a      	orrs	r2, r3
 8003d30:	68f9      	ldr	r1, [r7, #12]
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	440b      	add	r3, r1
 8003d38:	605a      	str	r2, [r3, #4]
   for(i = 0; i < keyLen; i++)
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	3301      	adds	r3, #1
 8003d3e:	61fb      	str	r3, [r7, #28]
 8003d40:	69fa      	ldr	r2, [r7, #28]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d3d4      	bcc.n	8003cf2 <aesInit+0x56>
   }

   //The size of the key schedule depends on the number of rounds
   keyScheduleSize = 4 * (context->nr + 1);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	61bb      	str	r3, [r7, #24]

   //Generate the key schedule (encryption)
   for(i = keyLen; i < keyScheduleSize; i++)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	61fb      	str	r3, [r7, #28]
 8003d56:	e0c4      	b.n	8003ee2 <aesInit+0x246>
   {
      //Save previous word
      temp = context->ek[i - 1];
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	68fa      	ldr	r2, [r7, #12]
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	4413      	add	r3, r2
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	617b      	str	r3, [r7, #20]

      //Apply transformation
      if((i % keyLen) == 0)
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	fbb3 f2f2 	udiv	r2, r3, r2
 8003d6e:	6879      	ldr	r1, [r7, #4]
 8003d70:	fb01 f202 	mul.w	r2, r1, r2
 8003d74:	1a9b      	subs	r3, r3, r2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d14e      	bne.n	8003e18 <aesInit+0x17c>
      {
         context->ek[i] = sbox[(temp >> 8) & 0xFF];
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	0a1b      	lsrs	r3, r3, #8
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	4a66      	ldr	r2, [pc, #408]	; (8003f1c <aesInit+0x280>)
 8003d82:	5cd3      	ldrb	r3, [r2, r3]
 8003d84:	4619      	mov	r1, r3
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	4413      	add	r3, r2
 8003d8e:	6059      	str	r1, [r3, #4]
         context->ek[i] |= (sbox[(temp >> 16) & 0xFF] << 8);
 8003d90:	68fa      	ldr	r2, [r7, #12]
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	4413      	add	r3, r2
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	697a      	ldr	r2, [r7, #20]
 8003d9c:	0c12      	lsrs	r2, r2, #16
 8003d9e:	b2d2      	uxtb	r2, r2
 8003da0:	495e      	ldr	r1, [pc, #376]	; (8003f1c <aesInit+0x280>)
 8003da2:	5c8a      	ldrb	r2, [r1, r2]
 8003da4:	0212      	lsls	r2, r2, #8
 8003da6:	431a      	orrs	r2, r3
 8003da8:	68f9      	ldr	r1, [r7, #12]
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	440b      	add	r3, r1
 8003db0:	605a      	str	r2, [r3, #4]
         context->ek[i] |= (sbox[(temp >> 24) & 0xFF] << 16);
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	4413      	add	r3, r2
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	697a      	ldr	r2, [r7, #20]
 8003dbe:	0e12      	lsrs	r2, r2, #24
 8003dc0:	4956      	ldr	r1, [pc, #344]	; (8003f1c <aesInit+0x280>)
 8003dc2:	5c8a      	ldrb	r2, [r1, r2]
 8003dc4:	0412      	lsls	r2, r2, #16
 8003dc6:	431a      	orrs	r2, r3
 8003dc8:	68f9      	ldr	r1, [r7, #12]
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	440b      	add	r3, r1
 8003dd0:	605a      	str	r2, [r3, #4]
         context->ek[i] |= (sbox[temp & 0xFF] << 24);
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	4413      	add	r3, r2
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	697a      	ldr	r2, [r7, #20]
 8003dde:	b2d2      	uxtb	r2, r2
 8003de0:	494e      	ldr	r1, [pc, #312]	; (8003f1c <aesInit+0x280>)
 8003de2:	5c8a      	ldrb	r2, [r1, r2]
 8003de4:	0612      	lsls	r2, r2, #24
 8003de6:	431a      	orrs	r2, r3
 8003de8:	68f9      	ldr	r1, [r7, #12]
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	440b      	add	r3, r1
 8003df0:	605a      	str	r2, [r3, #4]
         context->ek[i] ^= rcon[i / keyLen];
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	4413      	add	r3, r2
 8003dfa:	685a      	ldr	r2, [r3, #4]
 8003dfc:	69f9      	ldr	r1, [r7, #28]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e04:	4946      	ldr	r1, [pc, #280]	; (8003f20 <aesInit+0x284>)
 8003e06:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e0a:	405a      	eors	r2, r3
 8003e0c:	68f9      	ldr	r1, [r7, #12]
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	440b      	add	r3, r1
 8003e14:	605a      	str	r2, [r3, #4]
 8003e16:	e04f      	b.n	8003eb8 <aesInit+0x21c>
      }
      else if(keyLen > 6 && (i % keyLen) == 4)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2b06      	cmp	r3, #6
 8003e1c:	d946      	bls.n	8003eac <aesInit+0x210>
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	fbb3 f2f2 	udiv	r2, r3, r2
 8003e26:	6879      	ldr	r1, [r7, #4]
 8003e28:	fb01 f202 	mul.w	r2, r1, r2
 8003e2c:	1a9b      	subs	r3, r3, r2
 8003e2e:	2b04      	cmp	r3, #4
 8003e30:	d13c      	bne.n	8003eac <aesInit+0x210>
      {
         context->ek[i] = sbox[temp & 0xFF];
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	4a39      	ldr	r2, [pc, #228]	; (8003f1c <aesInit+0x280>)
 8003e38:	5cd3      	ldrb	r3, [r2, r3]
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	4413      	add	r3, r2
 8003e44:	6059      	str	r1, [r3, #4]
         context->ek[i] |= (sbox[(temp >> 8) & 0xFF] << 8);
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	4413      	add	r3, r2
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	697a      	ldr	r2, [r7, #20]
 8003e52:	0a12      	lsrs	r2, r2, #8
 8003e54:	b2d2      	uxtb	r2, r2
 8003e56:	4931      	ldr	r1, [pc, #196]	; (8003f1c <aesInit+0x280>)
 8003e58:	5c8a      	ldrb	r2, [r1, r2]
 8003e5a:	0212      	lsls	r2, r2, #8
 8003e5c:	431a      	orrs	r2, r3
 8003e5e:	68f9      	ldr	r1, [r7, #12]
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	440b      	add	r3, r1
 8003e66:	605a      	str	r2, [r3, #4]
         context->ek[i] |= (sbox[(temp >> 16) & 0xFF] << 16);
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	4413      	add	r3, r2
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	697a      	ldr	r2, [r7, #20]
 8003e74:	0c12      	lsrs	r2, r2, #16
 8003e76:	b2d2      	uxtb	r2, r2
 8003e78:	4928      	ldr	r1, [pc, #160]	; (8003f1c <aesInit+0x280>)
 8003e7a:	5c8a      	ldrb	r2, [r1, r2]
 8003e7c:	0412      	lsls	r2, r2, #16
 8003e7e:	431a      	orrs	r2, r3
 8003e80:	68f9      	ldr	r1, [r7, #12]
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	440b      	add	r3, r1
 8003e88:	605a      	str	r2, [r3, #4]
         context->ek[i] |= (sbox[(temp >> 24) & 0xFF] << 24);
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	4413      	add	r3, r2
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	697a      	ldr	r2, [r7, #20]
 8003e96:	0e12      	lsrs	r2, r2, #24
 8003e98:	4920      	ldr	r1, [pc, #128]	; (8003f1c <aesInit+0x280>)
 8003e9a:	5c8a      	ldrb	r2, [r1, r2]
 8003e9c:	0612      	lsls	r2, r2, #24
 8003e9e:	431a      	orrs	r2, r3
 8003ea0:	68f9      	ldr	r1, [r7, #12]
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	440b      	add	r3, r1
 8003ea8:	605a      	str	r2, [r3, #4]
 8003eaa:	e005      	b.n	8003eb8 <aesInit+0x21c>
      }
      else
      {
         context->ek[i] = temp;
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	4413      	add	r3, r2
 8003eb4:	697a      	ldr	r2, [r7, #20]
 8003eb6:	605a      	str	r2, [r3, #4]
      }

      //Update the key schedule
      context->ek[i] ^= context->ek[i - keyLen];
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	4413      	add	r3, r2
 8003ec0:	685a      	ldr	r2, [r3, #4]
 8003ec2:	69f9      	ldr	r1, [r7, #28]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	1acb      	subs	r3, r1, r3
 8003ec8:	68f9      	ldr	r1, [r7, #12]
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	440b      	add	r3, r1
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	405a      	eors	r2, r3
 8003ed2:	68f9      	ldr	r1, [r7, #12]
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	440b      	add	r3, r1
 8003eda:	605a      	str	r2, [r3, #4]
   for(i = keyLen; i < keyScheduleSize; i++)
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	3301      	adds	r3, #1
 8003ee0:	61fb      	str	r3, [r7, #28]
 8003ee2:	69fa      	ldr	r2, [r7, #28]
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	f4ff af36 	bcc.w	8003d58 <aesInit+0xbc>
   }

   //Generate the key schedule (decryption)
   for(i = 0; i < keyScheduleSize; i++)
 8003eec:	2300      	movs	r3, #0
 8003eee:	61fb      	str	r3, [r7, #28]
 8003ef0:	e086      	b.n	8004000 <aesInit+0x364>
   {
      //Apply the InvMixColumns transformation to all round keys but the first
      //and the last
      if(i < 4 || i >= (keyScheduleSize - 4))
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	2b03      	cmp	r3, #3
 8003ef6:	d904      	bls.n	8003f02 <aesInit+0x266>
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	3b04      	subs	r3, #4
 8003efc:	69fa      	ldr	r2, [r7, #28]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d310      	bcc.n	8003f24 <aesInit+0x288>
      {
         context->dk[i] = context->ek[i];
 8003f02:	68fa      	ldr	r2, [r7, #12]
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	4413      	add	r3, r2
 8003f0a:	685a      	ldr	r2, [r3, #4]
 8003f0c:	68f9      	ldr	r1, [r7, #12]
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	333c      	adds	r3, #60	; 0x3c
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	440b      	add	r3, r1
 8003f16:	605a      	str	r2, [r3, #4]
 8003f18:	e06f      	b.n	8003ffa <aesInit+0x35e>
 8003f1a:	bf00      	nop
 8003f1c:	08008868 	.word	0x08008868
 8003f20:	08009168 	.word	0x08009168
      }
      else
      {
         context->dk[i] = td[sbox[context->ek[i] & 0xFF]];
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	4413      	add	r3, r2
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	4a39      	ldr	r2, [pc, #228]	; (8004018 <aesInit+0x37c>)
 8003f32:	5cd3      	ldrb	r3, [r2, r3]
 8003f34:	461a      	mov	r2, r3
 8003f36:	4b39      	ldr	r3, [pc, #228]	; (800401c <aesInit+0x380>)
 8003f38:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003f3c:	68f9      	ldr	r1, [r7, #12]
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	333c      	adds	r3, #60	; 0x3c
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	440b      	add	r3, r1
 8003f46:	605a      	str	r2, [r3, #4]
         temp = td[sbox[(context->ek[i] >> 8) & 0xFF]];
 8003f48:	68fa      	ldr	r2, [r7, #12]
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	4413      	add	r3, r2
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	0a1b      	lsrs	r3, r3, #8
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	4a30      	ldr	r2, [pc, #192]	; (8004018 <aesInit+0x37c>)
 8003f58:	5cd3      	ldrb	r3, [r2, r3]
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	4b2f      	ldr	r3, [pc, #188]	; (800401c <aesInit+0x380>)
 8003f5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f62:	617b      	str	r3, [r7, #20]
         context->dk[i] ^= ROL32(temp, 8);
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	333c      	adds	r3, #60	; 0x3c
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	4413      	add	r3, r2
 8003f6e:	685a      	ldr	r2, [r3, #4]
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	ea4f 6333 	mov.w	r3, r3, ror #24
 8003f76:	405a      	eors	r2, r3
 8003f78:	68f9      	ldr	r1, [r7, #12]
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	333c      	adds	r3, #60	; 0x3c
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	440b      	add	r3, r1
 8003f82:	605a      	str	r2, [r3, #4]
         temp = td[sbox[(context->ek[i] >> 16) & 0xFF]];
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	4413      	add	r3, r2
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	0c1b      	lsrs	r3, r3, #16
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	4a21      	ldr	r2, [pc, #132]	; (8004018 <aesInit+0x37c>)
 8003f94:	5cd3      	ldrb	r3, [r2, r3]
 8003f96:	461a      	mov	r2, r3
 8003f98:	4b20      	ldr	r3, [pc, #128]	; (800401c <aesInit+0x380>)
 8003f9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f9e:	617b      	str	r3, [r7, #20]
         context->dk[i] ^= ROL32(temp, 16);
 8003fa0:	68fa      	ldr	r2, [r7, #12]
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	333c      	adds	r3, #60	; 0x3c
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	4413      	add	r3, r2
 8003faa:	685a      	ldr	r2, [r3, #4]
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	ea4f 4333 	mov.w	r3, r3, ror #16
 8003fb2:	405a      	eors	r2, r3
 8003fb4:	68f9      	ldr	r1, [r7, #12]
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	333c      	adds	r3, #60	; 0x3c
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	440b      	add	r3, r1
 8003fbe:	605a      	str	r2, [r3, #4]
         temp = td[sbox[(context->ek[i] >> 24) & 0xFF]];
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	4413      	add	r3, r2
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	0e1b      	lsrs	r3, r3, #24
 8003fcc:	4a12      	ldr	r2, [pc, #72]	; (8004018 <aesInit+0x37c>)
 8003fce:	5cd3      	ldrb	r3, [r2, r3]
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	4b12      	ldr	r3, [pc, #72]	; (800401c <aesInit+0x380>)
 8003fd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fd8:	617b      	str	r3, [r7, #20]
         context->dk[i] ^= ROL32(temp, 24);
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	333c      	adds	r3, #60	; 0x3c
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	4413      	add	r3, r2
 8003fe4:	685a      	ldr	r2, [r3, #4]
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	ea4f 2333 	mov.w	r3, r3, ror #8
 8003fec:	405a      	eors	r2, r3
 8003fee:	68f9      	ldr	r1, [r7, #12]
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	333c      	adds	r3, #60	; 0x3c
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	440b      	add	r3, r1
 8003ff8:	605a      	str	r2, [r3, #4]
   for(i = 0; i < keyScheduleSize; i++)
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	61fb      	str	r3, [r7, #28]
 8004000:	69fa      	ldr	r2, [r7, #28]
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	429a      	cmp	r2, r3
 8004006:	f4ff af74 	bcc.w	8003ef2 <aesInit+0x256>
      }
   }

   //No error to report
   return NO_ERROR;
 800400a:	2300      	movs	r3, #0
}
 800400c:	4618      	mov	r0, r3
 800400e:	3724      	adds	r7, #36	; 0x24
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr
 8004018:	08008868 	.word	0x08008868
 800401c:	08008d68 	.word	0x08008d68

08004020 <aesEncryptBlock>:
 * @param[out] output Ciphertext block resulting from encryption
 **/

__weak_func void aesEncryptBlock(AesContext *context, const uint8_t *input,
   uint8_t *output)
{
 8004020:	b480      	push	{r7}
 8004022:	b08f      	sub	sp, #60	; 0x3c
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	607a      	str	r2, [r7, #4]
   uint32_t t2;
   uint32_t t3;
   uint32_t temp;

   //Copy the plaintext to the state array
   s0 = LOAD32LE(input + 0);
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	461a      	mov	r2, r3
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	3301      	adds	r3, #1
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	021b      	lsls	r3, r3, #8
 800403a:	431a      	orrs	r2, r3
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	3302      	adds	r3, #2
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	041b      	lsls	r3, r3, #16
 8004044:	431a      	orrs	r2, r3
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	3303      	adds	r3, #3
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	061b      	lsls	r3, r3, #24
 800404e:	4313      	orrs	r3, r2
 8004050:	633b      	str	r3, [r7, #48]	; 0x30
   s1 = LOAD32LE(input + 4);
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	3304      	adds	r3, #4
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	461a      	mov	r2, r3
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	3304      	adds	r3, #4
 800405e:	3301      	adds	r3, #1
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	021b      	lsls	r3, r3, #8
 8004064:	431a      	orrs	r2, r3
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	3304      	adds	r3, #4
 800406a:	3302      	adds	r3, #2
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	041b      	lsls	r3, r3, #16
 8004070:	431a      	orrs	r2, r3
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	3304      	adds	r3, #4
 8004076:	3303      	adds	r3, #3
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	061b      	lsls	r3, r3, #24
 800407c:	4313      	orrs	r3, r2
 800407e:	62fb      	str	r3, [r7, #44]	; 0x2c
   s2 = LOAD32LE(input + 8);
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	3308      	adds	r3, #8
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	461a      	mov	r2, r3
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	3308      	adds	r3, #8
 800408c:	3301      	adds	r3, #1
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	021b      	lsls	r3, r3, #8
 8004092:	431a      	orrs	r2, r3
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	3308      	adds	r3, #8
 8004098:	3302      	adds	r3, #2
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	041b      	lsls	r3, r3, #16
 800409e:	431a      	orrs	r2, r3
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	3308      	adds	r3, #8
 80040a4:	3303      	adds	r3, #3
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	061b      	lsls	r3, r3, #24
 80040aa:	4313      	orrs	r3, r2
 80040ac:	62bb      	str	r3, [r7, #40]	; 0x28
   s3 = LOAD32LE(input + 12);
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	330c      	adds	r3, #12
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	461a      	mov	r2, r3
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	330c      	adds	r3, #12
 80040ba:	3301      	adds	r3, #1
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	021b      	lsls	r3, r3, #8
 80040c0:	431a      	orrs	r2, r3
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	330c      	adds	r3, #12
 80040c6:	3302      	adds	r3, #2
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	041b      	lsls	r3, r3, #16
 80040cc:	431a      	orrs	r2, r3
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	330c      	adds	r3, #12
 80040d2:	3303      	adds	r3, #3
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	061b      	lsls	r3, r3, #24
 80040d8:	4313      	orrs	r3, r2
 80040da:	627b      	str	r3, [r7, #36]	; 0x24

   //Initial round key addition
   s0 ^= context->ek[0];
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040e2:	4053      	eors	r3, r2
 80040e4:	633b      	str	r3, [r7, #48]	; 0x30
   s1 ^= context->ek[1];
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040ec:	4053      	eors	r3, r2
 80040ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   s2 ^= context->ek[2];
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040f6:	4053      	eors	r3, r2
 80040f8:	62bb      	str	r3, [r7, #40]	; 0x28
   s3 ^= context->ek[3];
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004100:	4053      	eors	r3, r2
 8004102:	627b      	str	r3, [r7, #36]	; 0x24

   //The number of rounds depends on the key length
   for(i = 1; i < context->nr; i++)
 8004104:	2301      	movs	r3, #1
 8004106:	637b      	str	r3, [r7, #52]	; 0x34
 8004108:	e0d9      	b.n	80042be <aesEncryptBlock+0x29e>
   {
      //Apply round function
      t0 = te[s0 & 0xFF];
 800410a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800410c:	b2db      	uxtb	r3, r3
 800410e:	4aa2      	ldr	r2, [pc, #648]	; (8004398 <aesEncryptBlock+0x378>)
 8004110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004114:	623b      	str	r3, [r7, #32]
      temp = te[(s1 >> 8) & 0xFF];
 8004116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004118:	0a1b      	lsrs	r3, r3, #8
 800411a:	b2db      	uxtb	r3, r3
 800411c:	4a9e      	ldr	r2, [pc, #632]	; (8004398 <aesEncryptBlock+0x378>)
 800411e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004122:	613b      	str	r3, [r7, #16]
      t0 ^= ROL32(temp, 8);
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	ea4f 6333 	mov.w	r3, r3, ror #24
 800412a:	6a3a      	ldr	r2, [r7, #32]
 800412c:	4053      	eors	r3, r2
 800412e:	623b      	str	r3, [r7, #32]
      temp = te[(s2 >> 16) & 0xFF];
 8004130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004132:	0c1b      	lsrs	r3, r3, #16
 8004134:	b2db      	uxtb	r3, r3
 8004136:	4a98      	ldr	r2, [pc, #608]	; (8004398 <aesEncryptBlock+0x378>)
 8004138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800413c:	613b      	str	r3, [r7, #16]
      t0 ^= ROL32(temp, 16);
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	ea4f 4333 	mov.w	r3, r3, ror #16
 8004144:	6a3a      	ldr	r2, [r7, #32]
 8004146:	4053      	eors	r3, r2
 8004148:	623b      	str	r3, [r7, #32]
      temp = te[(s3 >> 24) & 0xFF];
 800414a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414c:	0e1b      	lsrs	r3, r3, #24
 800414e:	4a92      	ldr	r2, [pc, #584]	; (8004398 <aesEncryptBlock+0x378>)
 8004150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004154:	613b      	str	r3, [r7, #16]
      t0 ^= ROL32(temp, 24);
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	ea4f 2333 	mov.w	r3, r3, ror #8
 800415c:	6a3a      	ldr	r2, [r7, #32]
 800415e:	4053      	eors	r3, r2
 8004160:	623b      	str	r3, [r7, #32]

      t1 = te[s1 & 0xFF];
 8004162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004164:	b2db      	uxtb	r3, r3
 8004166:	4a8c      	ldr	r2, [pc, #560]	; (8004398 <aesEncryptBlock+0x378>)
 8004168:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800416c:	61fb      	str	r3, [r7, #28]
      temp = te[(s2 >> 8) & 0xFF];
 800416e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004170:	0a1b      	lsrs	r3, r3, #8
 8004172:	b2db      	uxtb	r3, r3
 8004174:	4a88      	ldr	r2, [pc, #544]	; (8004398 <aesEncryptBlock+0x378>)
 8004176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800417a:	613b      	str	r3, [r7, #16]
      t1 ^= ROL32(temp, 8);
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	ea4f 6333 	mov.w	r3, r3, ror #24
 8004182:	69fa      	ldr	r2, [r7, #28]
 8004184:	4053      	eors	r3, r2
 8004186:	61fb      	str	r3, [r7, #28]
      temp = te[(s3 >> 16) & 0xFF];
 8004188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418a:	0c1b      	lsrs	r3, r3, #16
 800418c:	b2db      	uxtb	r3, r3
 800418e:	4a82      	ldr	r2, [pc, #520]	; (8004398 <aesEncryptBlock+0x378>)
 8004190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004194:	613b      	str	r3, [r7, #16]
      t1 ^= ROL32(temp, 16);
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	ea4f 4333 	mov.w	r3, r3, ror #16
 800419c:	69fa      	ldr	r2, [r7, #28]
 800419e:	4053      	eors	r3, r2
 80041a0:	61fb      	str	r3, [r7, #28]
      temp = te[(s0 >> 24) & 0xFF];
 80041a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a4:	0e1b      	lsrs	r3, r3, #24
 80041a6:	4a7c      	ldr	r2, [pc, #496]	; (8004398 <aesEncryptBlock+0x378>)
 80041a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041ac:	613b      	str	r3, [r7, #16]
      t1 ^= ROL32(temp, 24);
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	ea4f 2333 	mov.w	r3, r3, ror #8
 80041b4:	69fa      	ldr	r2, [r7, #28]
 80041b6:	4053      	eors	r3, r2
 80041b8:	61fb      	str	r3, [r7, #28]

      t2 = te[s2 & 0xFF];
 80041ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	4a76      	ldr	r2, [pc, #472]	; (8004398 <aesEncryptBlock+0x378>)
 80041c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041c4:	61bb      	str	r3, [r7, #24]
      temp = te[(s3 >> 8) & 0xFF];
 80041c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c8:	0a1b      	lsrs	r3, r3, #8
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	4a72      	ldr	r2, [pc, #456]	; (8004398 <aesEncryptBlock+0x378>)
 80041ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041d2:	613b      	str	r3, [r7, #16]
      t2 ^= ROL32(temp, 8);
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	ea4f 6333 	mov.w	r3, r3, ror #24
 80041da:	69ba      	ldr	r2, [r7, #24]
 80041dc:	4053      	eors	r3, r2
 80041de:	61bb      	str	r3, [r7, #24]
      temp = te[(s0 >> 16) & 0xFF];
 80041e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e2:	0c1b      	lsrs	r3, r3, #16
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	4a6c      	ldr	r2, [pc, #432]	; (8004398 <aesEncryptBlock+0x378>)
 80041e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041ec:	613b      	str	r3, [r7, #16]
      t2 ^= ROL32(temp, 16);
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	ea4f 4333 	mov.w	r3, r3, ror #16
 80041f4:	69ba      	ldr	r2, [r7, #24]
 80041f6:	4053      	eors	r3, r2
 80041f8:	61bb      	str	r3, [r7, #24]
      temp = te[(s1 >> 24) & 0xFF];
 80041fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041fc:	0e1b      	lsrs	r3, r3, #24
 80041fe:	4a66      	ldr	r2, [pc, #408]	; (8004398 <aesEncryptBlock+0x378>)
 8004200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004204:	613b      	str	r3, [r7, #16]
      t2 ^= ROL32(temp, 24);
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	ea4f 2333 	mov.w	r3, r3, ror #8
 800420c:	69ba      	ldr	r2, [r7, #24]
 800420e:	4053      	eors	r3, r2
 8004210:	61bb      	str	r3, [r7, #24]

      t3 = te[s3 & 0xFF];
 8004212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004214:	b2db      	uxtb	r3, r3
 8004216:	4a60      	ldr	r2, [pc, #384]	; (8004398 <aesEncryptBlock+0x378>)
 8004218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800421c:	617b      	str	r3, [r7, #20]
      temp = te[(s0 >> 8) & 0xFF];
 800421e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004220:	0a1b      	lsrs	r3, r3, #8
 8004222:	b2db      	uxtb	r3, r3
 8004224:	4a5c      	ldr	r2, [pc, #368]	; (8004398 <aesEncryptBlock+0x378>)
 8004226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800422a:	613b      	str	r3, [r7, #16]
      t3 ^= ROL32(temp, 8);
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	ea4f 6333 	mov.w	r3, r3, ror #24
 8004232:	697a      	ldr	r2, [r7, #20]
 8004234:	4053      	eors	r3, r2
 8004236:	617b      	str	r3, [r7, #20]
      temp = te[(s1 >> 16) & 0xFF];
 8004238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800423a:	0c1b      	lsrs	r3, r3, #16
 800423c:	b2db      	uxtb	r3, r3
 800423e:	4a56      	ldr	r2, [pc, #344]	; (8004398 <aesEncryptBlock+0x378>)
 8004240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004244:	613b      	str	r3, [r7, #16]
      t3 ^= ROL32(temp, 16);
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	ea4f 4333 	mov.w	r3, r3, ror #16
 800424c:	697a      	ldr	r2, [r7, #20]
 800424e:	4053      	eors	r3, r2
 8004250:	617b      	str	r3, [r7, #20]
      temp = te[(s2 >> 24) & 0xFF];
 8004252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004254:	0e1b      	lsrs	r3, r3, #24
 8004256:	4a50      	ldr	r2, [pc, #320]	; (8004398 <aesEncryptBlock+0x378>)
 8004258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800425c:	613b      	str	r3, [r7, #16]
      t3 ^= ROL32(temp, 24);
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	ea4f 2333 	mov.w	r3, r3, ror #8
 8004264:	697a      	ldr	r2, [r7, #20]
 8004266:	4053      	eors	r3, r2
 8004268:	617b      	str	r3, [r7, #20]

      //Round key addition
      s0 = t0 ^ context->ek[i * 4];
 800426a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	68fa      	ldr	r2, [r7, #12]
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	4413      	add	r3, r2
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	6a3a      	ldr	r2, [r7, #32]
 8004278:	4053      	eors	r3, r2
 800427a:	633b      	str	r3, [r7, #48]	; 0x30
      s1 = t1 ^ context->ek[i * 4 + 1];
 800427c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	3301      	adds	r3, #1
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	4413      	add	r3, r2
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	69fa      	ldr	r2, [r7, #28]
 800428c:	4053      	eors	r3, r2
 800428e:	62fb      	str	r3, [r7, #44]	; 0x2c
      s2 = t2 ^ context->ek[i * 4 + 2];
 8004290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	3302      	adds	r3, #2
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	4413      	add	r3, r2
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	69ba      	ldr	r2, [r7, #24]
 80042a0:	4053      	eors	r3, r2
 80042a2:	62bb      	str	r3, [r7, #40]	; 0x28
      s3 = t3 ^ context->ek[i * 4 + 3];
 80042a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	3303      	adds	r3, #3
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	4413      	add	r3, r2
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	697a      	ldr	r2, [r7, #20]
 80042b4:	4053      	eors	r3, r2
 80042b6:	627b      	str	r3, [r7, #36]	; 0x24
   for(i = 1; i < context->nr; i++)
 80042b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042ba:	3301      	adds	r3, #1
 80042bc:	637b      	str	r3, [r7, #52]	; 0x34
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042c4:	429a      	cmp	r2, r3
 80042c6:	f4ff af20 	bcc.w	800410a <aesEncryptBlock+0xea>
   }

   //The last round differs slightly from the first rounds
   t0 = sbox[s0 & 0xFF];
 80042ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	4a33      	ldr	r2, [pc, #204]	; (800439c <aesEncryptBlock+0x37c>)
 80042d0:	5cd3      	ldrb	r3, [r2, r3]
 80042d2:	623b      	str	r3, [r7, #32]
   t0 |= sbox[(s1 >> 8) & 0xFF] << 8;
 80042d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042d6:	0a1b      	lsrs	r3, r3, #8
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	4a30      	ldr	r2, [pc, #192]	; (800439c <aesEncryptBlock+0x37c>)
 80042dc:	5cd3      	ldrb	r3, [r2, r3]
 80042de:	021b      	lsls	r3, r3, #8
 80042e0:	461a      	mov	r2, r3
 80042e2:	6a3b      	ldr	r3, [r7, #32]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	623b      	str	r3, [r7, #32]
   t0 |= sbox[(s2 >> 16) & 0xFF] << 16;
 80042e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ea:	0c1b      	lsrs	r3, r3, #16
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	4a2b      	ldr	r2, [pc, #172]	; (800439c <aesEncryptBlock+0x37c>)
 80042f0:	5cd3      	ldrb	r3, [r2, r3]
 80042f2:	041b      	lsls	r3, r3, #16
 80042f4:	461a      	mov	r2, r3
 80042f6:	6a3b      	ldr	r3, [r7, #32]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	623b      	str	r3, [r7, #32]
   t0 |= sbox[(s3 >> 24) & 0xFF] << 24;
 80042fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fe:	0e1b      	lsrs	r3, r3, #24
 8004300:	4a26      	ldr	r2, [pc, #152]	; (800439c <aesEncryptBlock+0x37c>)
 8004302:	5cd3      	ldrb	r3, [r2, r3]
 8004304:	061b      	lsls	r3, r3, #24
 8004306:	461a      	mov	r2, r3
 8004308:	6a3b      	ldr	r3, [r7, #32]
 800430a:	4313      	orrs	r3, r2
 800430c:	623b      	str	r3, [r7, #32]

   t1 = sbox[s1 & 0xFF];
 800430e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004310:	b2db      	uxtb	r3, r3
 8004312:	4a22      	ldr	r2, [pc, #136]	; (800439c <aesEncryptBlock+0x37c>)
 8004314:	5cd3      	ldrb	r3, [r2, r3]
 8004316:	61fb      	str	r3, [r7, #28]
   t1 |= sbox[(s2 >> 8) & 0xFF] << 8;
 8004318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800431a:	0a1b      	lsrs	r3, r3, #8
 800431c:	b2db      	uxtb	r3, r3
 800431e:	4a1f      	ldr	r2, [pc, #124]	; (800439c <aesEncryptBlock+0x37c>)
 8004320:	5cd3      	ldrb	r3, [r2, r3]
 8004322:	021b      	lsls	r3, r3, #8
 8004324:	461a      	mov	r2, r3
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	4313      	orrs	r3, r2
 800432a:	61fb      	str	r3, [r7, #28]
   t1 |= sbox[(s3 >> 16) & 0xFF] << 16;
 800432c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432e:	0c1b      	lsrs	r3, r3, #16
 8004330:	b2db      	uxtb	r3, r3
 8004332:	4a1a      	ldr	r2, [pc, #104]	; (800439c <aesEncryptBlock+0x37c>)
 8004334:	5cd3      	ldrb	r3, [r2, r3]
 8004336:	041b      	lsls	r3, r3, #16
 8004338:	461a      	mov	r2, r3
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	4313      	orrs	r3, r2
 800433e:	61fb      	str	r3, [r7, #28]
   t1 |= sbox[(s0 >> 24) & 0xFF] << 24;
 8004340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004342:	0e1b      	lsrs	r3, r3, #24
 8004344:	4a15      	ldr	r2, [pc, #84]	; (800439c <aesEncryptBlock+0x37c>)
 8004346:	5cd3      	ldrb	r3, [r2, r3]
 8004348:	061b      	lsls	r3, r3, #24
 800434a:	461a      	mov	r2, r3
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	4313      	orrs	r3, r2
 8004350:	61fb      	str	r3, [r7, #28]

   t2 = sbox[s2 & 0xFF];
 8004352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004354:	b2db      	uxtb	r3, r3
 8004356:	4a11      	ldr	r2, [pc, #68]	; (800439c <aesEncryptBlock+0x37c>)
 8004358:	5cd3      	ldrb	r3, [r2, r3]
 800435a:	61bb      	str	r3, [r7, #24]
   t2 |= sbox[(s3 >> 8) & 0xFF] << 8;
 800435c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435e:	0a1b      	lsrs	r3, r3, #8
 8004360:	b2db      	uxtb	r3, r3
 8004362:	4a0e      	ldr	r2, [pc, #56]	; (800439c <aesEncryptBlock+0x37c>)
 8004364:	5cd3      	ldrb	r3, [r2, r3]
 8004366:	021b      	lsls	r3, r3, #8
 8004368:	461a      	mov	r2, r3
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	4313      	orrs	r3, r2
 800436e:	61bb      	str	r3, [r7, #24]
   t2 |= sbox[(s0 >> 16) & 0xFF] << 16;
 8004370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004372:	0c1b      	lsrs	r3, r3, #16
 8004374:	b2db      	uxtb	r3, r3
 8004376:	4a09      	ldr	r2, [pc, #36]	; (800439c <aesEncryptBlock+0x37c>)
 8004378:	5cd3      	ldrb	r3, [r2, r3]
 800437a:	041b      	lsls	r3, r3, #16
 800437c:	461a      	mov	r2, r3
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	4313      	orrs	r3, r2
 8004382:	61bb      	str	r3, [r7, #24]
   t2 |= sbox[(s1 >> 24) & 0xFF] << 24;
 8004384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004386:	0e1b      	lsrs	r3, r3, #24
 8004388:	4a04      	ldr	r2, [pc, #16]	; (800439c <aesEncryptBlock+0x37c>)
 800438a:	5cd3      	ldrb	r3, [r2, r3]
 800438c:	061b      	lsls	r3, r3, #24
 800438e:	461a      	mov	r2, r3
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	4313      	orrs	r3, r2
 8004394:	e004      	b.n	80043a0 <aesEncryptBlock+0x380>
 8004396:	bf00      	nop
 8004398:	08008968 	.word	0x08008968
 800439c:	08008868 	.word	0x08008868
 80043a0:	61bb      	str	r3, [r7, #24]

   t3 = sbox[s3 & 0xFF];
 80043a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	4a56      	ldr	r2, [pc, #344]	; (8004500 <aesEncryptBlock+0x4e0>)
 80043a8:	5cd3      	ldrb	r3, [r2, r3]
 80043aa:	617b      	str	r3, [r7, #20]
   t3 |= sbox[(s0 >> 8) & 0xFF] << 8;
 80043ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ae:	0a1b      	lsrs	r3, r3, #8
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	4a53      	ldr	r2, [pc, #332]	; (8004500 <aesEncryptBlock+0x4e0>)
 80043b4:	5cd3      	ldrb	r3, [r2, r3]
 80043b6:	021b      	lsls	r3, r3, #8
 80043b8:	461a      	mov	r2, r3
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	4313      	orrs	r3, r2
 80043be:	617b      	str	r3, [r7, #20]
   t3 |= sbox[(s1 >> 16) & 0xFF] << 16;
 80043c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c2:	0c1b      	lsrs	r3, r3, #16
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	4a4e      	ldr	r2, [pc, #312]	; (8004500 <aesEncryptBlock+0x4e0>)
 80043c8:	5cd3      	ldrb	r3, [r2, r3]
 80043ca:	041b      	lsls	r3, r3, #16
 80043cc:	461a      	mov	r2, r3
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	617b      	str	r3, [r7, #20]
   t3 |= sbox[(s2 >> 24) & 0xFF] << 24;
 80043d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d6:	0e1b      	lsrs	r3, r3, #24
 80043d8:	4a49      	ldr	r2, [pc, #292]	; (8004500 <aesEncryptBlock+0x4e0>)
 80043da:	5cd3      	ldrb	r3, [r2, r3]
 80043dc:	061b      	lsls	r3, r3, #24
 80043de:	461a      	mov	r2, r3
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	617b      	str	r3, [r7, #20]

   //Last round key addition
   s0 = t0 ^ context->ek[context->nr * 4];
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	68fa      	ldr	r2, [r7, #12]
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	4413      	add	r3, r2
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	6a3a      	ldr	r2, [r7, #32]
 80043f6:	4053      	eors	r3, r2
 80043f8:	633b      	str	r3, [r7, #48]	; 0x30
   s1 = t1 ^ context->ek[context->nr * 4 + 1];
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	3301      	adds	r3, #1
 8004402:	68fa      	ldr	r2, [r7, #12]
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	4413      	add	r3, r2
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	69fa      	ldr	r2, [r7, #28]
 800440c:	4053      	eors	r3, r2
 800440e:	62fb      	str	r3, [r7, #44]	; 0x2c
   s2 = t2 ^ context->ek[context->nr * 4 + 2];
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	3302      	adds	r3, #2
 8004418:	68fa      	ldr	r2, [r7, #12]
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	4413      	add	r3, r2
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	69ba      	ldr	r2, [r7, #24]
 8004422:	4053      	eors	r3, r2
 8004424:	62bb      	str	r3, [r7, #40]	; 0x28
   s3 = t3 ^ context->ek[context->nr * 4 + 3];
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	3303      	adds	r3, #3
 800442e:	68fa      	ldr	r2, [r7, #12]
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	4413      	add	r3, r2
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	697a      	ldr	r2, [r7, #20]
 8004438:	4053      	eors	r3, r2
 800443a:	627b      	str	r3, [r7, #36]	; 0x24

   //The final state is then copied to the output
   STORE32LE(s0, output + 0);
 800443c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800443e:	b2da      	uxtb	r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	701a      	strb	r2, [r3, #0]
 8004444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004446:	0a1a      	lsrs	r2, r3, #8
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	3301      	adds	r3, #1
 800444c:	b2d2      	uxtb	r2, r2
 800444e:	701a      	strb	r2, [r3, #0]
 8004450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004452:	0c1a      	lsrs	r2, r3, #16
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	3302      	adds	r3, #2
 8004458:	b2d2      	uxtb	r2, r2
 800445a:	701a      	strb	r2, [r3, #0]
 800445c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800445e:	0e1a      	lsrs	r2, r3, #24
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	3303      	adds	r3, #3
 8004464:	b2d2      	uxtb	r2, r2
 8004466:	701a      	strb	r2, [r3, #0]
   STORE32LE(s1, output + 4);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	3304      	adds	r3, #4
 800446c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800446e:	b2d2      	uxtb	r2, r2
 8004470:	701a      	strb	r2, [r3, #0]
 8004472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004474:	0a1a      	lsrs	r2, r3, #8
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	3305      	adds	r3, #5
 800447a:	b2d2      	uxtb	r2, r2
 800447c:	701a      	strb	r2, [r3, #0]
 800447e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004480:	0c1a      	lsrs	r2, r3, #16
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	3306      	adds	r3, #6
 8004486:	b2d2      	uxtb	r2, r2
 8004488:	701a      	strb	r2, [r3, #0]
 800448a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800448c:	0e1a      	lsrs	r2, r3, #24
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	3307      	adds	r3, #7
 8004492:	b2d2      	uxtb	r2, r2
 8004494:	701a      	strb	r2, [r3, #0]
   STORE32LE(s2, output + 8);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	3308      	adds	r3, #8
 800449a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800449c:	b2d2      	uxtb	r2, r2
 800449e:	701a      	strb	r2, [r3, #0]
 80044a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a2:	0a1a      	lsrs	r2, r3, #8
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	3309      	adds	r3, #9
 80044a8:	b2d2      	uxtb	r2, r2
 80044aa:	701a      	strb	r2, [r3, #0]
 80044ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ae:	0c1a      	lsrs	r2, r3, #16
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	330a      	adds	r3, #10
 80044b4:	b2d2      	uxtb	r2, r2
 80044b6:	701a      	strb	r2, [r3, #0]
 80044b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ba:	0e1a      	lsrs	r2, r3, #24
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	330b      	adds	r3, #11
 80044c0:	b2d2      	uxtb	r2, r2
 80044c2:	701a      	strb	r2, [r3, #0]
   STORE32LE(s3, output + 12);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	330c      	adds	r3, #12
 80044c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044ca:	b2d2      	uxtb	r2, r2
 80044cc:	701a      	strb	r2, [r3, #0]
 80044ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d0:	0a1a      	lsrs	r2, r3, #8
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	330d      	adds	r3, #13
 80044d6:	b2d2      	uxtb	r2, r2
 80044d8:	701a      	strb	r2, [r3, #0]
 80044da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044dc:	0c1a      	lsrs	r2, r3, #16
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	330e      	adds	r3, #14
 80044e2:	b2d2      	uxtb	r2, r2
 80044e4:	701a      	strb	r2, [r3, #0]
 80044e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e8:	0e1a      	lsrs	r2, r3, #24
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	330f      	adds	r3, #15
 80044ee:	b2d2      	uxtb	r2, r2
 80044f0:	701a      	strb	r2, [r3, #0]
}
 80044f2:	bf00      	nop
 80044f4:	373c      	adds	r7, #60	; 0x3c
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	08008868 	.word	0x08008868

08004504 <aesDeinit>:
 * @brief Release AES context
 * @param[in] context Pointer to the AES context
 **/

__weak_func void aesDeinit(AesContext *context)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
   //Clear AES context
   osMemset(context, 0, sizeof(AesContext));
 800450c:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8004510:	2100      	movs	r1, #0
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f002 fc22 	bl	8006d5c <memset>
}
 8004518:	bf00      	nop
 800451a:	3708      	adds	r7, #8
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <swapInt32>:
 * @param[in] value 32-bit value
 * @return 32-bit value with byte order swapped
 **/

uint32_t swapInt32(uint32_t value)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
   return SWAPINT32(value);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	061a      	lsls	r2, r3, #24
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	021b      	lsls	r3, r3, #8
 8004530:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004534:	431a      	orrs	r2, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	0a1b      	lsrs	r3, r3, #8
 800453a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800453e:	431a      	orrs	r2, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	0e1b      	lsrs	r3, r3, #24
 8004544:	4313      	orrs	r3, r2
}
 8004546:	4618      	mov	r0, r3
 8004548:	370c      	adds	r7, #12
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr

08004552 <swapInt64>:
 * @param[in] value 64-bit value
 * @return 64-bit value with byte order swapped
 **/

uint64_t swapInt64(uint64_t value)
{
 8004552:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8004556:	b099      	sub	sp, #100	; 0x64
 8004558:	af00      	add	r7, sp, #0
 800455a:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
   return SWAPINT64(value);
 800455e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004562:	f04f 0800 	mov.w	r8, #0
 8004566:	f04f 0900 	mov.w	r9, #0
 800456a:	ea4f 6902 	mov.w	r9, r2, lsl #24
 800456e:	f04f 0800 	mov.w	r8, #0
 8004572:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004576:	f04f 0000 	mov.w	r0, #0
 800457a:	f04f 0100 	mov.w	r1, #0
 800457e:	0211      	lsls	r1, r2, #8
 8004580:	2000      	movs	r0, #0
 8004582:	2400      	movs	r4, #0
 8004584:	f401 057f 	and.w	r5, r1, #16711680	; 0xff0000
 8004588:	ea48 0304 	orr.w	r3, r8, r4
 800458c:	653b      	str	r3, [r7, #80]	; 0x50
 800458e:	ea49 0305 	orr.w	r3, r9, r5
 8004592:	657b      	str	r3, [r7, #84]	; 0x54
 8004594:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004598:	f04f 0000 	mov.w	r0, #0
 800459c:	f04f 0100 	mov.w	r1, #0
 80045a0:	0619      	lsls	r1, r3, #24
 80045a2:	ea41 2112 	orr.w	r1, r1, r2, lsr #8
 80045a6:	0610      	lsls	r0, r2, #24
 80045a8:	f04f 0a00 	mov.w	sl, #0
 80045ac:	f401 4b7f 	and.w	fp, r1, #65280	; 0xff00
 80045b0:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80045b4:	460b      	mov	r3, r1
 80045b6:	ea43 030a 	orr.w	r3, r3, sl
 80045ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80045bc:	4613      	mov	r3, r2
 80045be:	ea43 030b 	orr.w	r3, r3, fp
 80045c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045c4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80045c8:	f04f 0000 	mov.w	r0, #0
 80045cc:	f04f 0100 	mov.w	r1, #0
 80045d0:	0219      	lsls	r1, r3, #8
 80045d2:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80045d6:	0210      	lsls	r0, r2, #8
 80045d8:	2300      	movs	r3, #0
 80045da:	643b      	str	r3, [r7, #64]	; 0x40
 80045dc:	f001 03ff 	and.w	r3, r1, #255	; 0xff
 80045e0:	647b      	str	r3, [r7, #68]	; 0x44
 80045e2:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80045e6:	4623      	mov	r3, r4
 80045e8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80045ec:	4602      	mov	r2, r0
 80045ee:	4313      	orrs	r3, r2
 80045f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80045f2:	462b      	mov	r3, r5
 80045f4:	460a      	mov	r2, r1
 80045f6:	4313      	orrs	r3, r2
 80045f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80045fe:	f04f 0000 	mov.w	r0, #0
 8004602:	f04f 0100 	mov.w	r1, #0
 8004606:	0a10      	lsrs	r0, r2, #8
 8004608:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800460c:	0a19      	lsrs	r1, r3, #8
 800460e:	f000 437f 	and.w	r3, r0, #4278190080	; 0xff000000
 8004612:	633b      	str	r3, [r7, #48]	; 0x30
 8004614:	2300      	movs	r3, #0
 8004616:	637b      	str	r3, [r7, #52]	; 0x34
 8004618:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800461c:	4623      	mov	r3, r4
 800461e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004622:	4602      	mov	r2, r0
 8004624:	4313      	orrs	r3, r2
 8004626:	62bb      	str	r3, [r7, #40]	; 0x28
 8004628:	462b      	mov	r3, r5
 800462a:	460a      	mov	r2, r1
 800462c:	4313      	orrs	r3, r2
 800462e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004630:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004634:	f04f 0000 	mov.w	r0, #0
 8004638:	f04f 0100 	mov.w	r1, #0
 800463c:	0e10      	lsrs	r0, r2, #24
 800463e:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8004642:	0e19      	lsrs	r1, r3, #24
 8004644:	f400 037f 	and.w	r3, r0, #16711680	; 0xff0000
 8004648:	623b      	str	r3, [r7, #32]
 800464a:	2300      	movs	r3, #0
 800464c:	627b      	str	r3, [r7, #36]	; 0x24
 800464e:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8004652:	4623      	mov	r3, r4
 8004654:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004658:	4602      	mov	r2, r0
 800465a:	4313      	orrs	r3, r2
 800465c:	61bb      	str	r3, [r7, #24]
 800465e:	462b      	mov	r3, r5
 8004660:	460a      	mov	r2, r1
 8004662:	4313      	orrs	r3, r2
 8004664:	61fb      	str	r3, [r7, #28]
 8004666:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800466a:	f04f 0200 	mov.w	r2, #0
 800466e:	f04f 0300 	mov.w	r3, #0
 8004672:	0a0a      	lsrs	r2, r1, #8
 8004674:	2300      	movs	r3, #0
 8004676:	f402 437f 	and.w	r3, r2, #65280	; 0xff00
 800467a:	613b      	str	r3, [r7, #16]
 800467c:	2300      	movs	r3, #0
 800467e:	617b      	str	r3, [r7, #20]
 8004680:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8004684:	4623      	mov	r3, r4
 8004686:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800468a:	4602      	mov	r2, r0
 800468c:	4313      	orrs	r3, r2
 800468e:	60bb      	str	r3, [r7, #8]
 8004690:	462b      	mov	r3, r5
 8004692:	460a      	mov	r2, r1
 8004694:	4313      	orrs	r3, r2
 8004696:	60fb      	str	r3, [r7, #12]
 8004698:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800469c:	f04f 0200 	mov.w	r2, #0
 80046a0:	f04f 0300 	mov.w	r3, #0
 80046a4:	0e0a      	lsrs	r2, r1, #24
 80046a6:	2300      	movs	r3, #0
 80046a8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80046ac:	4621      	mov	r1, r4
 80046ae:	4311      	orrs	r1, r2
 80046b0:	6039      	str	r1, [r7, #0]
 80046b2:	4629      	mov	r1, r5
 80046b4:	4319      	orrs	r1, r3
 80046b6:	6079      	str	r1, [r7, #4]
 80046b8:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80046bc:	4610      	mov	r0, r2
 80046be:	4619      	mov	r1, r3
 80046c0:	3764      	adds	r7, #100	; 0x64
 80046c2:	46bd      	mov	sp, r7
 80046c4:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80046c8:	4770      	bx	lr
	...

080046cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b08a      	sub	sp, #40	; 0x28
 80046d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046d2:	f107 0314 	add.w	r3, r7, #20
 80046d6:	2200      	movs	r2, #0
 80046d8:	601a      	str	r2, [r3, #0]
 80046da:	605a      	str	r2, [r3, #4]
 80046dc:	609a      	str	r2, [r3, #8]
 80046de:	60da      	str	r2, [r3, #12]
 80046e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80046e2:	2300      	movs	r3, #0
 80046e4:	613b      	str	r3, [r7, #16]
 80046e6:	4b2d      	ldr	r3, [pc, #180]	; (800479c <MX_GPIO_Init+0xd0>)
 80046e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ea:	4a2c      	ldr	r2, [pc, #176]	; (800479c <MX_GPIO_Init+0xd0>)
 80046ec:	f043 0304 	orr.w	r3, r3, #4
 80046f0:	6313      	str	r3, [r2, #48]	; 0x30
 80046f2:	4b2a      	ldr	r3, [pc, #168]	; (800479c <MX_GPIO_Init+0xd0>)
 80046f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f6:	f003 0304 	and.w	r3, r3, #4
 80046fa:	613b      	str	r3, [r7, #16]
 80046fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80046fe:	2300      	movs	r3, #0
 8004700:	60fb      	str	r3, [r7, #12]
 8004702:	4b26      	ldr	r3, [pc, #152]	; (800479c <MX_GPIO_Init+0xd0>)
 8004704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004706:	4a25      	ldr	r2, [pc, #148]	; (800479c <MX_GPIO_Init+0xd0>)
 8004708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800470c:	6313      	str	r3, [r2, #48]	; 0x30
 800470e:	4b23      	ldr	r3, [pc, #140]	; (800479c <MX_GPIO_Init+0xd0>)
 8004710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004716:	60fb      	str	r3, [r7, #12]
 8004718:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800471a:	2300      	movs	r3, #0
 800471c:	60bb      	str	r3, [r7, #8]
 800471e:	4b1f      	ldr	r3, [pc, #124]	; (800479c <MX_GPIO_Init+0xd0>)
 8004720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004722:	4a1e      	ldr	r2, [pc, #120]	; (800479c <MX_GPIO_Init+0xd0>)
 8004724:	f043 0301 	orr.w	r3, r3, #1
 8004728:	6313      	str	r3, [r2, #48]	; 0x30
 800472a:	4b1c      	ldr	r3, [pc, #112]	; (800479c <MX_GPIO_Init+0xd0>)
 800472c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800472e:	f003 0301 	and.w	r3, r3, #1
 8004732:	60bb      	str	r3, [r7, #8]
 8004734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004736:	2300      	movs	r3, #0
 8004738:	607b      	str	r3, [r7, #4]
 800473a:	4b18      	ldr	r3, [pc, #96]	; (800479c <MX_GPIO_Init+0xd0>)
 800473c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473e:	4a17      	ldr	r2, [pc, #92]	; (800479c <MX_GPIO_Init+0xd0>)
 8004740:	f043 0302 	orr.w	r3, r3, #2
 8004744:	6313      	str	r3, [r2, #48]	; 0x30
 8004746:	4b15      	ldr	r3, [pc, #84]	; (800479c <MX_GPIO_Init+0xd0>)
 8004748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474a:	f003 0302 	and.w	r3, r3, #2
 800474e:	607b      	str	r3, [r7, #4]
 8004750:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8004752:	2200      	movs	r2, #0
 8004754:	2120      	movs	r1, #32
 8004756:	4812      	ldr	r0, [pc, #72]	; (80047a0 <MX_GPIO_Init+0xd4>)
 8004758:	f000 fe8c 	bl	8005474 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800475c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004760:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004762:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8004766:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004768:	2300      	movs	r3, #0
 800476a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800476c:	f107 0314 	add.w	r3, r7, #20
 8004770:	4619      	mov	r1, r3
 8004772:	480c      	ldr	r0, [pc, #48]	; (80047a4 <MX_GPIO_Init+0xd8>)
 8004774:	f000 fcea 	bl	800514c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8004778:	2320      	movs	r3, #32
 800477a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800477c:	2301      	movs	r3, #1
 800477e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004780:	2300      	movs	r3, #0
 8004782:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004784:	2300      	movs	r3, #0
 8004786:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8004788:	f107 0314 	add.w	r3, r7, #20
 800478c:	4619      	mov	r1, r3
 800478e:	4804      	ldr	r0, [pc, #16]	; (80047a0 <MX_GPIO_Init+0xd4>)
 8004790:	f000 fcdc 	bl	800514c <HAL_GPIO_Init>

}
 8004794:	bf00      	nop
 8004796:	3728      	adds	r7, #40	; 0x28
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	40023800 	.word	0x40023800
 80047a0:	40020000 	.word	0x40020000
 80047a4:	40020800 	.word	0x40020800

080047a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80047ac:	f000 fb76 	bl	8004e9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80047b0:	f000 f80a 	bl	80047c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80047b4:	f7ff ff8a 	bl	80046cc <MX_GPIO_Init>
  MX_TIM6_Init();
 80047b8:	f000 f9e2 	bl	8004b80 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 80047bc:	f000 fa38 	bl	8004c30 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

//  AesTest();
  RsaTest();
 80047c0:	f7fb feac 	bl	800051c <RsaTest>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80047c4:	e7fe      	b.n	80047c4 <main+0x1c>
	...

080047c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b094      	sub	sp, #80	; 0x50
 80047cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80047ce:	f107 031c 	add.w	r3, r7, #28
 80047d2:	2234      	movs	r2, #52	; 0x34
 80047d4:	2100      	movs	r1, #0
 80047d6:	4618      	mov	r0, r3
 80047d8:	f002 fac0 	bl	8006d5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80047dc:	f107 0308 	add.w	r3, r7, #8
 80047e0:	2200      	movs	r2, #0
 80047e2:	601a      	str	r2, [r3, #0]
 80047e4:	605a      	str	r2, [r3, #4]
 80047e6:	609a      	str	r2, [r3, #8]
 80047e8:	60da      	str	r2, [r3, #12]
 80047ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80047ec:	2300      	movs	r3, #0
 80047ee:	607b      	str	r3, [r7, #4]
 80047f0:	4b2c      	ldr	r3, [pc, #176]	; (80048a4 <SystemClock_Config+0xdc>)
 80047f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f4:	4a2b      	ldr	r2, [pc, #172]	; (80048a4 <SystemClock_Config+0xdc>)
 80047f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047fa:	6413      	str	r3, [r2, #64]	; 0x40
 80047fc:	4b29      	ldr	r3, [pc, #164]	; (80048a4 <SystemClock_Config+0xdc>)
 80047fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004804:	607b      	str	r3, [r7, #4]
 8004806:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004808:	2300      	movs	r3, #0
 800480a:	603b      	str	r3, [r7, #0]
 800480c:	4b26      	ldr	r3, [pc, #152]	; (80048a8 <SystemClock_Config+0xe0>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a25      	ldr	r2, [pc, #148]	; (80048a8 <SystemClock_Config+0xe0>)
 8004812:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004816:	6013      	str	r3, [r2, #0]
 8004818:	4b23      	ldr	r3, [pc, #140]	; (80048a8 <SystemClock_Config+0xe0>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004820:	603b      	str	r3, [r7, #0]
 8004822:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004824:	2302      	movs	r3, #2
 8004826:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004828:	2301      	movs	r3, #1
 800482a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800482c:	2310      	movs	r3, #16
 800482e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004830:	2302      	movs	r3, #2
 8004832:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004834:	2300      	movs	r3, #0
 8004836:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004838:	2308      	movs	r3, #8
 800483a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800483c:	23b4      	movs	r3, #180	; 0xb4
 800483e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004840:	2302      	movs	r3, #2
 8004842:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8004844:	2302      	movs	r3, #2
 8004846:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004848:	2302      	movs	r3, #2
 800484a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800484c:	f107 031c 	add.w	r3, r7, #28
 8004850:	4618      	mov	r0, r3
 8004852:	f001 f9c3 	bl	8005bdc <HAL_RCC_OscConfig>
 8004856:	4603      	mov	r3, r0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d001      	beq.n	8004860 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800485c:	f000 f826 	bl	80048ac <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8004860:	f000 fe22 	bl	80054a8 <HAL_PWREx_EnableOverDrive>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d001      	beq.n	800486e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800486a:	f000 f81f 	bl	80048ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800486e:	230f      	movs	r3, #15
 8004870:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004872:	2302      	movs	r3, #2
 8004874:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004876:	2300      	movs	r3, #0
 8004878:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800487a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800487e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004884:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004886:	f107 0308 	add.w	r3, r7, #8
 800488a:	2105      	movs	r1, #5
 800488c:	4618      	mov	r0, r3
 800488e:	f000 fe5b 	bl	8005548 <HAL_RCC_ClockConfig>
 8004892:	4603      	mov	r3, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d001      	beq.n	800489c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8004898:	f000 f808 	bl	80048ac <Error_Handler>
  }
}
 800489c:	bf00      	nop
 800489e:	3750      	adds	r7, #80	; 0x50
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	40023800 	.word	0x40023800
 80048a8:	40007000 	.word	0x40007000

080048ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80048ac:	b480      	push	{r7}
 80048ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80048b0:	b672      	cpsid	i
}
 80048b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80048b4:	e7fe      	b.n	80048b4 <Error_Handler+0x8>

080048b6 <osCreateMutex>:
 * @return The function returns TRUE if the mutex was successfully
 *   created. Otherwise, FALSE is returned
 **/

bool_t osCreateMutex(OsMutex *mutex)
{
 80048b6:	b480      	push	{r7}
 80048b8:	b083      	sub	sp, #12
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
   //The mutex was successfully created
   return TRUE;
 80048be:	2301      	movs	r3, #1
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <osAllocMem>:
 * @return A pointer to the allocated memory block or NULL if
 *   there is insufficient memory available
 **/

__weak_func void *osAllocMem(size_t size)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
   void *p;

   //Allocate a memory block
   p = malloc(size);
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f002 fa23 	bl	8006d20 <malloc>
 80048da:	4603      	mov	r3, r0
 80048dc:	60fb      	str	r3, [r7, #12]
   //Debug message
   TRACE_DEBUG("Allocating %" PRIuSIZE " bytes at 0x%08" PRIXPTR "\r\n",
      size, (uintptr_t) p);

   //Return a pointer to the newly allocated memory block
   return p;
 80048de:	68fb      	ldr	r3, [r7, #12]
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3710      	adds	r7, #16
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <osFreeMem>:
 * @brief Release a previously allocated memory block
 * @param[in] p Previously allocated memory block to be freed
 **/

__weak_func void osFreeMem(void *p)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
   //Make sure the pointer is valid
   if(p != NULL)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d002      	beq.n	80048fc <osFreeMem+0x14>
   {
      //Debug message
      TRACE_DEBUG("Freeing memory at 0x%08" PRIXPTR "\r\n", (uintptr_t) p);

      //Free memory block
      free(p);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f002 fa1a 	bl	8006d30 <free>
   }
}
 80048fc:	bf00      	nop
 80048fe:	3708      	adds	r7, #8
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <PrintInfo>:
		HAL_UART_Transmit(&huart2, (uint8_t*)"\n", strlen("\n"), HAL_MAX_DELAY);
	}
}

void PrintInfo(const uint8_t* cryptoName, uint32_t dataLength, uint16_t keySize, const uint8_t* hashName)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b08a      	sub	sp, #40	; 0x28
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	603b      	str	r3, [r7, #0]
 8004910:	4613      	mov	r3, r2
 8004912:	80fb      	strh	r3, [r7, #6]
	uint8_t keySizeTab[5];
	uint8_t dataLengthTab[10];

	itoa(keySize, (char*)keySizeTab, 10);
 8004914:	88fb      	ldrh	r3, [r7, #6]
 8004916:	f107 0120 	add.w	r1, r7, #32
 800491a:	220a      	movs	r2, #10
 800491c:	4618      	mov	r0, r3
 800491e:	f002 f9fb 	bl	8006d18 <itoa>
	itoa(dataLength, (char*)dataLengthTab, 10);
 8004922:	f107 0314 	add.w	r3, r7, #20
 8004926:	220a      	movs	r2, #10
 8004928:	4619      	mov	r1, r3
 800492a:	68b8      	ldr	r0, [r7, #8]
 800492c:	f002 f9f4 	bl	8006d18 <itoa>
	// Algorithm name
	HAL_UART_Transmit(&huart2, cryptoName, strlen((const char *)cryptoName), HAL_MAX_DELAY);
 8004930:	68f8      	ldr	r0, [r7, #12]
 8004932:	f7fb fc69 	bl	8000208 <strlen>
 8004936:	4603      	mov	r3, r0
 8004938:	b29a      	uxth	r2, r3
 800493a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800493e:	68f9      	ldr	r1, [r7, #12]
 8004940:	4829      	ldr	r0, [pc, #164]	; (80049e8 <PrintInfo+0xe4>)
 8004942:	f001 fe32 	bl	80065aa <HAL_UART_Transmit>
	// Key size
	HAL_UART_Transmit(&huart2, keySizeName, sizeof(keySizeName), HAL_MAX_DELAY);
 8004946:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800494a:	220e      	movs	r2, #14
 800494c:	4927      	ldr	r1, [pc, #156]	; (80049ec <PrintInfo+0xe8>)
 800494e:	4826      	ldr	r0, [pc, #152]	; (80049e8 <PrintInfo+0xe4>)
 8004950:	f001 fe2b 	bl	80065aa <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, keySizeTab, strlen((const char *)keySizeTab), HAL_MAX_DELAY);
 8004954:	f107 0320 	add.w	r3, r7, #32
 8004958:	4618      	mov	r0, r3
 800495a:	f7fb fc55 	bl	8000208 <strlen>
 800495e:	4603      	mov	r3, r0
 8004960:	b29a      	uxth	r2, r3
 8004962:	f107 0120 	add.w	r1, r7, #32
 8004966:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800496a:	481f      	ldr	r0, [pc, #124]	; (80049e8 <PrintInfo+0xe4>)
 800496c:	f001 fe1d 	bl	80065aa <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)"\n", strlen("\n"), HAL_MAX_DELAY);
 8004970:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004974:	2201      	movs	r2, #1
 8004976:	491e      	ldr	r1, [pc, #120]	; (80049f0 <PrintInfo+0xec>)
 8004978:	481b      	ldr	r0, [pc, #108]	; (80049e8 <PrintInfo+0xe4>)
 800497a:	f001 fe16 	bl	80065aa <HAL_UART_Transmit>
	// Data length
	HAL_UART_Transmit(&huart2, dataLengthName, sizeof(dataLengthName), HAL_MAX_DELAY);
 800497e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004982:	2218      	movs	r2, #24
 8004984:	491b      	ldr	r1, [pc, #108]	; (80049f4 <PrintInfo+0xf0>)
 8004986:	4818      	ldr	r0, [pc, #96]	; (80049e8 <PrintInfo+0xe4>)
 8004988:	f001 fe0f 	bl	80065aa <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, dataLengthTab, strlen((const char *)dataLengthTab), HAL_MAX_DELAY);
 800498c:	f107 0314 	add.w	r3, r7, #20
 8004990:	4618      	mov	r0, r3
 8004992:	f7fb fc39 	bl	8000208 <strlen>
 8004996:	4603      	mov	r3, r0
 8004998:	b29a      	uxth	r2, r3
 800499a:	f107 0114 	add.w	r1, r7, #20
 800499e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80049a2:	4811      	ldr	r0, [pc, #68]	; (80049e8 <PrintInfo+0xe4>)
 80049a4:	f001 fe01 	bl	80065aa <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)"\n", strlen("\n"), HAL_MAX_DELAY);
 80049a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80049ac:	2201      	movs	r2, #1
 80049ae:	4910      	ldr	r1, [pc, #64]	; (80049f0 <PrintInfo+0xec>)
 80049b0:	480d      	ldr	r0, [pc, #52]	; (80049e8 <PrintInfo+0xe4>)
 80049b2:	f001 fdfa 	bl	80065aa <HAL_UART_Transmit>
	if ( hashName != NULL ) {
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d011      	beq.n	80049e0 <PrintInfo+0xdc>
		HAL_UART_Transmit(&huart2, hashName, strlen((const char *)hashName), HAL_MAX_DELAY);
 80049bc:	6838      	ldr	r0, [r7, #0]
 80049be:	f7fb fc23 	bl	8000208 <strlen>
 80049c2:	4603      	mov	r3, r0
 80049c4:	b29a      	uxth	r2, r3
 80049c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80049ca:	6839      	ldr	r1, [r7, #0]
 80049cc:	4806      	ldr	r0, [pc, #24]	; (80049e8 <PrintInfo+0xe4>)
 80049ce:	f001 fdec 	bl	80065aa <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)"\n", strlen("\n"), HAL_MAX_DELAY);
 80049d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80049d6:	2201      	movs	r2, #1
 80049d8:	4905      	ldr	r1, [pc, #20]	; (80049f0 <PrintInfo+0xec>)
 80049da:	4803      	ldr	r0, [pc, #12]	; (80049e8 <PrintInfo+0xe4>)
 80049dc:	f001 fde5 	bl	80065aa <HAL_UART_Transmit>
	}
}
 80049e0:	bf00      	nop
 80049e2:	3728      	adds	r7, #40	; 0x28
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	20001640 	.word	0x20001640
 80049ec:	080099e8 	.word	0x080099e8
 80049f0:	0800701c 	.word	0x0800701c
 80049f4:	080099f8 	.word	0x080099f8

080049f8 <PrintTime>:

void PrintTime(void)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
	uint8_t time_tab[10];

	itoa(TIM6->CNT, (char*)time_tab, 10);
 80049fe:	4b10      	ldr	r3, [pc, #64]	; (8004a40 <PrintTime+0x48>)
 8004a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a02:	1d39      	adds	r1, r7, #4
 8004a04:	220a      	movs	r2, #10
 8004a06:	4618      	mov	r0, r3
 8004a08:	f002 f986 	bl	8006d18 <itoa>

	TIM6->CNT = 0;
 8004a0c:	4b0c      	ldr	r3, [pc, #48]	; (8004a40 <PrintTime+0x48>)
 8004a0e:	2200      	movs	r2, #0
 8004a10:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_UART_Transmit(&huart2, (uint8_t*)time_tab, strlen((const char *)time_tab), HAL_MAX_DELAY);
 8004a12:	1d3b      	adds	r3, r7, #4
 8004a14:	4618      	mov	r0, r3
 8004a16:	f7fb fbf7 	bl	8000208 <strlen>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	b29a      	uxth	r2, r3
 8004a1e:	1d39      	adds	r1, r7, #4
 8004a20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a24:	4807      	ldr	r0, [pc, #28]	; (8004a44 <PrintTime+0x4c>)
 8004a26:	f001 fdc0 	bl	80065aa <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)"\n", strlen("\n"), HAL_MAX_DELAY);
 8004a2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a2e:	2201      	movs	r2, #1
 8004a30:	4905      	ldr	r1, [pc, #20]	; (8004a48 <PrintTime+0x50>)
 8004a32:	4804      	ldr	r0, [pc, #16]	; (8004a44 <PrintTime+0x4c>)
 8004a34:	f001 fdb9 	bl	80065aa <HAL_UART_Transmit>

}
 8004a38:	bf00      	nop
 8004a3a:	3710      	adds	r7, #16
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	40001000 	.word	0x40001000
 8004a44:	20001640 	.word	0x20001640
 8004a48:	0800701c 	.word	0x0800701c

08004a4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a52:	2300      	movs	r3, #0
 8004a54:	607b      	str	r3, [r7, #4]
 8004a56:	4b10      	ldr	r3, [pc, #64]	; (8004a98 <HAL_MspInit+0x4c>)
 8004a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a5a:	4a0f      	ldr	r2, [pc, #60]	; (8004a98 <HAL_MspInit+0x4c>)
 8004a5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a60:	6453      	str	r3, [r2, #68]	; 0x44
 8004a62:	4b0d      	ldr	r3, [pc, #52]	; (8004a98 <HAL_MspInit+0x4c>)
 8004a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a6a:	607b      	str	r3, [r7, #4]
 8004a6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a6e:	2300      	movs	r3, #0
 8004a70:	603b      	str	r3, [r7, #0]
 8004a72:	4b09      	ldr	r3, [pc, #36]	; (8004a98 <HAL_MspInit+0x4c>)
 8004a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a76:	4a08      	ldr	r2, [pc, #32]	; (8004a98 <HAL_MspInit+0x4c>)
 8004a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8004a7e:	4b06      	ldr	r3, [pc, #24]	; (8004a98 <HAL_MspInit+0x4c>)
 8004a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a86:	603b      	str	r3, [r7, #0]
 8004a88:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004a8a:	2007      	movs	r0, #7
 8004a8c:	f000 fb2a 	bl	80050e4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004a90:	bf00      	nop
 8004a92:	3708      	adds	r7, #8
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	40023800 	.word	0x40023800

08004a9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004aa0:	e7fe      	b.n	8004aa0 <NMI_Handler+0x4>

08004aa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004aa2:	b480      	push	{r7}
 8004aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004aa6:	e7fe      	b.n	8004aa6 <HardFault_Handler+0x4>

08004aa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004aac:	e7fe      	b.n	8004aac <MemManage_Handler+0x4>

08004aae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004aae:	b480      	push	{r7}
 8004ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004ab2:	e7fe      	b.n	8004ab2 <BusFault_Handler+0x4>

08004ab4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004ab8:	e7fe      	b.n	8004ab8 <UsageFault_Handler+0x4>

08004aba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004aba:	b480      	push	{r7}
 8004abc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004abe:	bf00      	nop
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004acc:	bf00      	nop
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr

08004ad6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004ad6:	b480      	push	{r7}
 8004ad8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004ada:	bf00      	nop
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004ae8:	f000 fa2a 	bl	8004f40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004aec:	bf00      	nop
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b086      	sub	sp, #24
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004af8:	4a14      	ldr	r2, [pc, #80]	; (8004b4c <_sbrk+0x5c>)
 8004afa:	4b15      	ldr	r3, [pc, #84]	; (8004b50 <_sbrk+0x60>)
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004b04:	4b13      	ldr	r3, [pc, #76]	; (8004b54 <_sbrk+0x64>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d102      	bne.n	8004b12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004b0c:	4b11      	ldr	r3, [pc, #68]	; (8004b54 <_sbrk+0x64>)
 8004b0e:	4a12      	ldr	r2, [pc, #72]	; (8004b58 <_sbrk+0x68>)
 8004b10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004b12:	4b10      	ldr	r3, [pc, #64]	; (8004b54 <_sbrk+0x64>)
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4413      	add	r3, r2
 8004b1a:	693a      	ldr	r2, [r7, #16]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d207      	bcs.n	8004b30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004b20:	f002 f8b8 	bl	8006c94 <__errno>
 8004b24:	4603      	mov	r3, r0
 8004b26:	220c      	movs	r2, #12
 8004b28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004b2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b2e:	e009      	b.n	8004b44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004b30:	4b08      	ldr	r3, [pc, #32]	; (8004b54 <_sbrk+0x64>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004b36:	4b07      	ldr	r3, [pc, #28]	; (8004b54 <_sbrk+0x64>)
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	4a05      	ldr	r2, [pc, #20]	; (8004b54 <_sbrk+0x64>)
 8004b40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004b42:	68fb      	ldr	r3, [r7, #12]
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3718      	adds	r7, #24
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	20020000 	.word	0x20020000
 8004b50:	00000400 	.word	0x00000400
 8004b54:	200015f4 	.word	0x200015f4
 8004b58:	20001698 	.word	0x20001698

08004b5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004b60:	4b06      	ldr	r3, [pc, #24]	; (8004b7c <SystemInit+0x20>)
 8004b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b66:	4a05      	ldr	r2, [pc, #20]	; (8004b7c <SystemInit+0x20>)
 8004b68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004b70:	bf00      	nop
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr
 8004b7a:	bf00      	nop
 8004b7c:	e000ed00 	.word	0xe000ed00

08004b80 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b86:	463b      	mov	r3, r7
 8004b88:	2200      	movs	r2, #0
 8004b8a:	601a      	str	r2, [r3, #0]
 8004b8c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004b8e:	4b15      	ldr	r3, [pc, #84]	; (8004be4 <MX_TIM6_Init+0x64>)
 8004b90:	4a15      	ldr	r2, [pc, #84]	; (8004be8 <MX_TIM6_Init+0x68>)
 8004b92:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10000;
 8004b94:	4b13      	ldr	r3, [pc, #76]	; (8004be4 <MX_TIM6_Init+0x64>)
 8004b96:	f242 7210 	movw	r2, #10000	; 0x2710
 8004b9a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b9c:	4b11      	ldr	r3, [pc, #68]	; (8004be4 <MX_TIM6_Init+0x64>)
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8004ba2:	4b10      	ldr	r3, [pc, #64]	; (8004be4 <MX_TIM6_Init+0x64>)
 8004ba4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ba8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004baa:	4b0e      	ldr	r3, [pc, #56]	; (8004be4 <MX_TIM6_Init+0x64>)
 8004bac:	2200      	movs	r2, #0
 8004bae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004bb0:	480c      	ldr	r0, [pc, #48]	; (8004be4 <MX_TIM6_Init+0x64>)
 8004bb2:	f001 fab1 	bl	8006118 <HAL_TIM_Base_Init>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d001      	beq.n	8004bc0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8004bbc:	f7ff fe76 	bl	80048ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004bc8:	463b      	mov	r3, r7
 8004bca:	4619      	mov	r1, r3
 8004bcc:	4805      	ldr	r0, [pc, #20]	; (8004be4 <MX_TIM6_Init+0x64>)
 8004bce:	f001 fc23 	bl	8006418 <HAL_TIMEx_MasterConfigSynchronization>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d001      	beq.n	8004bdc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8004bd8:	f7ff fe68 	bl	80048ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004bdc:	bf00      	nop
 8004bde:	3708      	adds	r7, #8
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	200015f8 	.word	0x200015f8
 8004be8:	40001000 	.word	0x40001000

08004bec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b085      	sub	sp, #20
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a0b      	ldr	r2, [pc, #44]	; (8004c28 <HAL_TIM_Base_MspInit+0x3c>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d10d      	bne.n	8004c1a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004bfe:	2300      	movs	r3, #0
 8004c00:	60fb      	str	r3, [r7, #12]
 8004c02:	4b0a      	ldr	r3, [pc, #40]	; (8004c2c <HAL_TIM_Base_MspInit+0x40>)
 8004c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c06:	4a09      	ldr	r2, [pc, #36]	; (8004c2c <HAL_TIM_Base_MspInit+0x40>)
 8004c08:	f043 0310 	orr.w	r3, r3, #16
 8004c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8004c0e:	4b07      	ldr	r3, [pc, #28]	; (8004c2c <HAL_TIM_Base_MspInit+0x40>)
 8004c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c12:	f003 0310 	and.w	r3, r3, #16
 8004c16:	60fb      	str	r3, [r7, #12]
 8004c18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8004c1a:	bf00      	nop
 8004c1c:	3714      	adds	r7, #20
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	40001000 	.word	0x40001000
 8004c2c:	40023800 	.word	0x40023800

08004c30 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004c34:	4b11      	ldr	r3, [pc, #68]	; (8004c7c <MX_USART2_UART_Init+0x4c>)
 8004c36:	4a12      	ldr	r2, [pc, #72]	; (8004c80 <MX_USART2_UART_Init+0x50>)
 8004c38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004c3a:	4b10      	ldr	r3, [pc, #64]	; (8004c7c <MX_USART2_UART_Init+0x4c>)
 8004c3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004c40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004c42:	4b0e      	ldr	r3, [pc, #56]	; (8004c7c <MX_USART2_UART_Init+0x4c>)
 8004c44:	2200      	movs	r2, #0
 8004c46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004c48:	4b0c      	ldr	r3, [pc, #48]	; (8004c7c <MX_USART2_UART_Init+0x4c>)
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004c4e:	4b0b      	ldr	r3, [pc, #44]	; (8004c7c <MX_USART2_UART_Init+0x4c>)
 8004c50:	2200      	movs	r2, #0
 8004c52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004c54:	4b09      	ldr	r3, [pc, #36]	; (8004c7c <MX_USART2_UART_Init+0x4c>)
 8004c56:	220c      	movs	r2, #12
 8004c58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004c5a:	4b08      	ldr	r3, [pc, #32]	; (8004c7c <MX_USART2_UART_Init+0x4c>)
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004c60:	4b06      	ldr	r3, [pc, #24]	; (8004c7c <MX_USART2_UART_Init+0x4c>)
 8004c62:	2200      	movs	r2, #0
 8004c64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004c66:	4805      	ldr	r0, [pc, #20]	; (8004c7c <MX_USART2_UART_Init+0x4c>)
 8004c68:	f001 fc52 	bl	8006510 <HAL_UART_Init>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d001      	beq.n	8004c76 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004c72:	f7ff fe1b 	bl	80048ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004c76:	bf00      	nop
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	20001640 	.word	0x20001640
 8004c80:	40004400 	.word	0x40004400

08004c84 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b08a      	sub	sp, #40	; 0x28
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c8c:	f107 0314 	add.w	r3, r7, #20
 8004c90:	2200      	movs	r2, #0
 8004c92:	601a      	str	r2, [r3, #0]
 8004c94:	605a      	str	r2, [r3, #4]
 8004c96:	609a      	str	r2, [r3, #8]
 8004c98:	60da      	str	r2, [r3, #12]
 8004c9a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a19      	ldr	r2, [pc, #100]	; (8004d08 <HAL_UART_MspInit+0x84>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d12b      	bne.n	8004cfe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	613b      	str	r3, [r7, #16]
 8004caa:	4b18      	ldr	r3, [pc, #96]	; (8004d0c <HAL_UART_MspInit+0x88>)
 8004cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cae:	4a17      	ldr	r2, [pc, #92]	; (8004d0c <HAL_UART_MspInit+0x88>)
 8004cb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cb4:	6413      	str	r3, [r2, #64]	; 0x40
 8004cb6:	4b15      	ldr	r3, [pc, #84]	; (8004d0c <HAL_UART_MspInit+0x88>)
 8004cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cbe:	613b      	str	r3, [r7, #16]
 8004cc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	60fb      	str	r3, [r7, #12]
 8004cc6:	4b11      	ldr	r3, [pc, #68]	; (8004d0c <HAL_UART_MspInit+0x88>)
 8004cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cca:	4a10      	ldr	r2, [pc, #64]	; (8004d0c <HAL_UART_MspInit+0x88>)
 8004ccc:	f043 0301 	orr.w	r3, r3, #1
 8004cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8004cd2:	4b0e      	ldr	r3, [pc, #56]	; (8004d0c <HAL_UART_MspInit+0x88>)
 8004cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd6:	f003 0301 	and.w	r3, r3, #1
 8004cda:	60fb      	str	r3, [r7, #12]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004cde:	230c      	movs	r3, #12
 8004ce0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ce2:	2302      	movs	r3, #2
 8004ce4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cea:	2303      	movs	r3, #3
 8004cec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004cee:	2307      	movs	r3, #7
 8004cf0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cf2:	f107 0314 	add.w	r3, r7, #20
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	4805      	ldr	r0, [pc, #20]	; (8004d10 <HAL_UART_MspInit+0x8c>)
 8004cfa:	f000 fa27 	bl	800514c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004cfe:	bf00      	nop
 8004d00:	3728      	adds	r7, #40	; 0x28
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	40004400 	.word	0x40004400
 8004d0c:	40023800 	.word	0x40023800
 8004d10:	40020000 	.word	0x40020000

08004d14 <yarrowInit>:
 * @param[in] context Pointer to the PRNG context to initialize
 * @return Error code
 **/

error_t yarrowInit(YarrowContext *context)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b082      	sub	sp, #8
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
   //Clear PRNG state
   osMemset(context, 0, sizeof(YarrowContext));
 8004d1c:	f44f 724c 	mov.w	r2, #816	; 0x330
 8004d20:	2100      	movs	r1, #0
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f002 f81a 	bl	8006d5c <memset>

   //Create a mutex to prevent simultaneous access to the PRNG state
   if(!osCreateMutex(&context->mutex))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f7ff fdc3 	bl	80048b6 <osCreateMutex>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d101      	bne.n	8004d3a <yarrowInit+0x26>
   {
      //Failed to create mutex
      return ERROR_OUT_OF_RESOURCES;
 8004d36:	2365      	movs	r3, #101	; 0x65
 8004d38:	e00d      	b.n	8004d56 <yarrowInit+0x42>
   }

   //Initialize hash contexts
   sha256Init(&context->fastPool);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	3318      	adds	r3, #24
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f7fd ffc2 	bl	8002cc8 <sha256Init>
   sha256Init(&context->slowPool);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	3398      	adds	r3, #152	; 0x98
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f7fd ffbd 	bl	8002cc8 <sha256Init>

   //The PRNG is not ready to generate random data
   context->ready = FALSE;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	605a      	str	r2, [r3, #4]

   //Successful initialization
   return NO_ERROR;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3708      	adds	r7, #8
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <yarrowSeed>:
 * @param[in] length Length of the input data
 * @return Error code
 **/

error_t yarrowSeed(YarrowContext *context, const uint8_t *input, size_t length)
{
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b084      	sub	sp, #16
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	60f8      	str	r0, [r7, #12]
 8004d66:	60b9      	str	r1, [r7, #8]
 8004d68:	607a      	str	r2, [r7, #4]
   //Check parameters
   if(length < sizeof(context->key))
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2b1f      	cmp	r3, #31
 8004d6e:	d801      	bhi.n	8004d74 <yarrowSeed+0x16>
      return ERROR_INVALID_PARAMETER;
 8004d70:	2302      	movs	r3, #2
 8004d72:	e00a      	b.n	8004d8a <yarrowSeed+0x2c>

   //Add entropy to the fast pool
   sha256Update(&context->fastPool, input, length);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	3318      	adds	r3, #24
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	68b9      	ldr	r1, [r7, #8]
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f7fd ffdf 	bl	8002d40 <sha256Update>
   //Reseed from the fast pool
   yarrowFastReseed(context);
 8004d82:	68f8      	ldr	r0, [r7, #12]
 8004d84:	f000 f805 	bl	8004d92 <yarrowFastReseed>

   //Successful processing
   return NO_ERROR;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3710      	adds	r7, #16
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}

08004d92 <yarrowFastReseed>:
 * @brief Reseed from the fast pool
 * @param[in] context Pointer to the PRNG context
 **/

void yarrowFastReseed(YarrowContext *context)
{
 8004d92:	b580      	push	{r7, lr}
 8004d94:	b084      	sub	sp, #16
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
   size_t i;

   //Erase AES context
   if(context->ready)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d005      	beq.n	8004dae <yarrowFastReseed+0x1c>
   {
      aesDeinit(&context->cipherContext);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8004da8:	4618      	mov	r0, r3
 8004daa:	f7ff fbab 	bl	8004504 <aesDeinit>
   }

   //Reseeding from the fast pool use the current key and the hash of all
   //inputs to the fast pool since the last reseed, to generate a new key
   sha256Update(&context->fastPool, context->key, sizeof(context->key));
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f103 0018 	add.w	r0, r3, #24
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 8004dba:	2220      	movs	r2, #32
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	f7fd ffbf 	bl	8002d40 <sha256Update>
   sha256Final(&context->fastPool, context->key);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f103 0218 	add.w	r2, r3, #24
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 8004dce:	4619      	mov	r1, r3
 8004dd0:	4610      	mov	r0, r2
 8004dd2:	f7fe f801 	bl	8002dd8 <sha256Final>

   //Set the new key
   aesInit(&context->cipherContext, context->key, sizeof(context->key));
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f503 708a 	add.w	r0, r3, #276	; 0x114
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 8004de2:	2220      	movs	r2, #32
 8004de4:	4619      	mov	r1, r3
 8004de6:	f7fe ff59 	bl	8003c9c <aesInit>

   //Define the new value of the counter
   osMemset(context->counter, 0, sizeof(context->counter));
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8004df0:	2210      	movs	r2, #16
 8004df2:	2100      	movs	r1, #0
 8004df4:	4618      	mov	r0, r3
 8004df6:	f001 ffb1 	bl	8006d5c <memset>
   aesEncryptBlock(&context->cipherContext, context->counter, context->counter);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f503 708a 	add.w	r0, r3, #276	; 0x114
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f503 7146 	add.w	r1, r3, #792	; 0x318
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	f7ff f907 	bl	8004020 <aesEncryptBlock>

   //Reset the hash context
   sha256Init(&context->fastPool);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	3318      	adds	r3, #24
 8004e16:	4618      	mov	r0, r3
 8004e18:	f7fd ff56 	bl	8002cc8 <sha256Init>

   //The entropy estimates for the fast pool are all reset to zero
   for(i = 0; i < YARROW_N; i++)
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	60fb      	str	r3, [r7, #12]
 8004e20:	e008      	b.n	8004e34 <yarrowFastReseed+0xa2>
   {
      context->fastPoolEntropy[i] = 0;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	68fa      	ldr	r2, [r7, #12]
 8004e26:	3222      	adds	r2, #34	; 0x22
 8004e28:	2100      	movs	r1, #0
 8004e2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   for(i = 0; i < YARROW_N; i++)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	3301      	adds	r3, #1
 8004e32:	60fb      	str	r3, [r7, #12]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	d9f3      	bls.n	8004e22 <yarrowFastReseed+0x90>
   }

   //The PRNG is ready to generate random data
   context->ready = TRUE;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	605a      	str	r2, [r3, #4]
}
 8004e40:	bf00      	nop
 8004e42:	3710      	adds	r7, #16
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
 ldr   sp, =_estack      /* set stack pointer */
 8004e48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004e80 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004e4c:	480d      	ldr	r0, [pc, #52]	; (8004e84 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004e4e:	490e      	ldr	r1, [pc, #56]	; (8004e88 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004e50:	4a0e      	ldr	r2, [pc, #56]	; (8004e8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004e52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004e54:	e002      	b.n	8004e5c <LoopCopyDataInit>

08004e56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004e56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004e58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004e5a:	3304      	adds	r3, #4

08004e5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004e5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004e5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004e60:	d3f9      	bcc.n	8004e56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004e62:	4a0b      	ldr	r2, [pc, #44]	; (8004e90 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004e64:	4c0b      	ldr	r4, [pc, #44]	; (8004e94 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004e66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004e68:	e001      	b.n	8004e6e <LoopFillZerobss>

08004e6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004e6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004e6c:	3204      	adds	r2, #4

08004e6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004e6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004e70:	d3fb      	bcc.n	8004e6a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004e72:	f7ff fe73 	bl	8004b5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004e76:	f001 ff13 	bl	8006ca0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004e7a:	f7ff fc95 	bl	80047a8 <main>
  bx  lr    
 8004e7e:	4770      	bx	lr
 ldr   sp, =_estack      /* set stack pointer */
 8004e80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004e84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004e88:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8004e8c:	08009ac0 	.word	0x08009ac0
  ldr r2, =_sbss
 8004e90:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8004e94:	20001698 	.word	0x20001698

08004e98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004e98:	e7fe      	b.n	8004e98 <ADC_IRQHandler>
	...

08004e9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004ea0:	4b0e      	ldr	r3, [pc, #56]	; (8004edc <HAL_Init+0x40>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a0d      	ldr	r2, [pc, #52]	; (8004edc <HAL_Init+0x40>)
 8004ea6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004eaa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004eac:	4b0b      	ldr	r3, [pc, #44]	; (8004edc <HAL_Init+0x40>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a0a      	ldr	r2, [pc, #40]	; (8004edc <HAL_Init+0x40>)
 8004eb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004eb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004eb8:	4b08      	ldr	r3, [pc, #32]	; (8004edc <HAL_Init+0x40>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a07      	ldr	r2, [pc, #28]	; (8004edc <HAL_Init+0x40>)
 8004ebe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ec2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004ec4:	2003      	movs	r0, #3
 8004ec6:	f000 f90d 	bl	80050e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004eca:	2000      	movs	r0, #0
 8004ecc:	f000 f808 	bl	8004ee0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004ed0:	f7ff fdbc 	bl	8004a4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop
 8004edc:	40023c00 	.word	0x40023c00

08004ee0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b082      	sub	sp, #8
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004ee8:	4b12      	ldr	r3, [pc, #72]	; (8004f34 <HAL_InitTick+0x54>)
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	4b12      	ldr	r3, [pc, #72]	; (8004f38 <HAL_InitTick+0x58>)
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ef6:	fbb3 f3f1 	udiv	r3, r3, r1
 8004efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004efe:	4618      	mov	r0, r3
 8004f00:	f000 f917 	bl	8005132 <HAL_SYSTICK_Config>
 8004f04:	4603      	mov	r3, r0
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d001      	beq.n	8004f0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e00e      	b.n	8004f2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2b0f      	cmp	r3, #15
 8004f12:	d80a      	bhi.n	8004f2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004f14:	2200      	movs	r2, #0
 8004f16:	6879      	ldr	r1, [r7, #4]
 8004f18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f1c:	f000 f8ed 	bl	80050fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004f20:	4a06      	ldr	r2, [pc, #24]	; (8004f3c <HAL_InitTick+0x5c>)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004f26:	2300      	movs	r3, #0
 8004f28:	e000      	b.n	8004f2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3708      	adds	r7, #8
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}
 8004f34:	20000040 	.word	0x20000040
 8004f38:	20000048 	.word	0x20000048
 8004f3c:	20000044 	.word	0x20000044

08004f40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004f40:	b480      	push	{r7}
 8004f42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004f44:	4b06      	ldr	r3, [pc, #24]	; (8004f60 <HAL_IncTick+0x20>)
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	461a      	mov	r2, r3
 8004f4a:	4b06      	ldr	r3, [pc, #24]	; (8004f64 <HAL_IncTick+0x24>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4413      	add	r3, r2
 8004f50:	4a04      	ldr	r2, [pc, #16]	; (8004f64 <HAL_IncTick+0x24>)
 8004f52:	6013      	str	r3, [r2, #0]
}
 8004f54:	bf00      	nop
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr
 8004f5e:	bf00      	nop
 8004f60:	20000048 	.word	0x20000048
 8004f64:	20001684 	.word	0x20001684

08004f68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	af00      	add	r7, sp, #0
  return uwTick;
 8004f6c:	4b03      	ldr	r3, [pc, #12]	; (8004f7c <HAL_GetTick+0x14>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	20001684 	.word	0x20001684

08004f80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b085      	sub	sp, #20
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f003 0307 	and.w	r3, r3, #7
 8004f8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f90:	4b0c      	ldr	r3, [pc, #48]	; (8004fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f96:	68ba      	ldr	r2, [r7, #8]
 8004f98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004fa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004fac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004fb2:	4a04      	ldr	r2, [pc, #16]	; (8004fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	60d3      	str	r3, [r2, #12]
}
 8004fb8:	bf00      	nop
 8004fba:	3714      	adds	r7, #20
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr
 8004fc4:	e000ed00 	.word	0xe000ed00

08004fc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004fcc:	4b04      	ldr	r3, [pc, #16]	; (8004fe0 <__NVIC_GetPriorityGrouping+0x18>)
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	0a1b      	lsrs	r3, r3, #8
 8004fd2:	f003 0307 	and.w	r3, r3, #7
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr
 8004fe0:	e000ed00 	.word	0xe000ed00

08004fe4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	4603      	mov	r3, r0
 8004fec:	6039      	str	r1, [r7, #0]
 8004fee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	db0a      	blt.n	800500e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	b2da      	uxtb	r2, r3
 8004ffc:	490c      	ldr	r1, [pc, #48]	; (8005030 <__NVIC_SetPriority+0x4c>)
 8004ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005002:	0112      	lsls	r2, r2, #4
 8005004:	b2d2      	uxtb	r2, r2
 8005006:	440b      	add	r3, r1
 8005008:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800500c:	e00a      	b.n	8005024 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	b2da      	uxtb	r2, r3
 8005012:	4908      	ldr	r1, [pc, #32]	; (8005034 <__NVIC_SetPriority+0x50>)
 8005014:	79fb      	ldrb	r3, [r7, #7]
 8005016:	f003 030f 	and.w	r3, r3, #15
 800501a:	3b04      	subs	r3, #4
 800501c:	0112      	lsls	r2, r2, #4
 800501e:	b2d2      	uxtb	r2, r2
 8005020:	440b      	add	r3, r1
 8005022:	761a      	strb	r2, [r3, #24]
}
 8005024:	bf00      	nop
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr
 8005030:	e000e100 	.word	0xe000e100
 8005034:	e000ed00 	.word	0xe000ed00

08005038 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005038:	b480      	push	{r7}
 800503a:	b089      	sub	sp, #36	; 0x24
 800503c:	af00      	add	r7, sp, #0
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	60b9      	str	r1, [r7, #8]
 8005042:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f003 0307 	and.w	r3, r3, #7
 800504a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	f1c3 0307 	rsb	r3, r3, #7
 8005052:	2b04      	cmp	r3, #4
 8005054:	bf28      	it	cs
 8005056:	2304      	movcs	r3, #4
 8005058:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	3304      	adds	r3, #4
 800505e:	2b06      	cmp	r3, #6
 8005060:	d902      	bls.n	8005068 <NVIC_EncodePriority+0x30>
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	3b03      	subs	r3, #3
 8005066:	e000      	b.n	800506a <NVIC_EncodePriority+0x32>
 8005068:	2300      	movs	r3, #0
 800506a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800506c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	fa02 f303 	lsl.w	r3, r2, r3
 8005076:	43da      	mvns	r2, r3
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	401a      	ands	r2, r3
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005080:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	fa01 f303 	lsl.w	r3, r1, r3
 800508a:	43d9      	mvns	r1, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005090:	4313      	orrs	r3, r2
         );
}
 8005092:	4618      	mov	r0, r3
 8005094:	3724      	adds	r7, #36	; 0x24
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
	...

080050a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	3b01      	subs	r3, #1
 80050ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80050b0:	d301      	bcc.n	80050b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80050b2:	2301      	movs	r3, #1
 80050b4:	e00f      	b.n	80050d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80050b6:	4a0a      	ldr	r2, [pc, #40]	; (80050e0 <SysTick_Config+0x40>)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	3b01      	subs	r3, #1
 80050bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80050be:	210f      	movs	r1, #15
 80050c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80050c4:	f7ff ff8e 	bl	8004fe4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80050c8:	4b05      	ldr	r3, [pc, #20]	; (80050e0 <SysTick_Config+0x40>)
 80050ca:	2200      	movs	r2, #0
 80050cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80050ce:	4b04      	ldr	r3, [pc, #16]	; (80050e0 <SysTick_Config+0x40>)
 80050d0:	2207      	movs	r2, #7
 80050d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3708      	adds	r7, #8
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	e000e010 	.word	0xe000e010

080050e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b082      	sub	sp, #8
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f7ff ff47 	bl	8004f80 <__NVIC_SetPriorityGrouping>
}
 80050f2:	bf00      	nop
 80050f4:	3708      	adds	r7, #8
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}

080050fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80050fa:	b580      	push	{r7, lr}
 80050fc:	b086      	sub	sp, #24
 80050fe:	af00      	add	r7, sp, #0
 8005100:	4603      	mov	r3, r0
 8005102:	60b9      	str	r1, [r7, #8]
 8005104:	607a      	str	r2, [r7, #4]
 8005106:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005108:	2300      	movs	r3, #0
 800510a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800510c:	f7ff ff5c 	bl	8004fc8 <__NVIC_GetPriorityGrouping>
 8005110:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	68b9      	ldr	r1, [r7, #8]
 8005116:	6978      	ldr	r0, [r7, #20]
 8005118:	f7ff ff8e 	bl	8005038 <NVIC_EncodePriority>
 800511c:	4602      	mov	r2, r0
 800511e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005122:	4611      	mov	r1, r2
 8005124:	4618      	mov	r0, r3
 8005126:	f7ff ff5d 	bl	8004fe4 <__NVIC_SetPriority>
}
 800512a:	bf00      	nop
 800512c:	3718      	adds	r7, #24
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}

08005132 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005132:	b580      	push	{r7, lr}
 8005134:	b082      	sub	sp, #8
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f7ff ffb0 	bl	80050a0 <SysTick_Config>
 8005140:	4603      	mov	r3, r0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3708      	adds	r7, #8
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
	...

0800514c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800514c:	b480      	push	{r7}
 800514e:	b089      	sub	sp, #36	; 0x24
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005156:	2300      	movs	r3, #0
 8005158:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800515a:	2300      	movs	r3, #0
 800515c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800515e:	2300      	movs	r3, #0
 8005160:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005162:	2300      	movs	r3, #0
 8005164:	61fb      	str	r3, [r7, #28]
 8005166:	e165      	b.n	8005434 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005168:	2201      	movs	r2, #1
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	fa02 f303 	lsl.w	r3, r2, r3
 8005170:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	697a      	ldr	r2, [r7, #20]
 8005178:	4013      	ands	r3, r2
 800517a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800517c:	693a      	ldr	r2, [r7, #16]
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	429a      	cmp	r2, r3
 8005182:	f040 8154 	bne.w	800542e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	f003 0303 	and.w	r3, r3, #3
 800518e:	2b01      	cmp	r3, #1
 8005190:	d005      	beq.n	800519e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800519a:	2b02      	cmp	r3, #2
 800519c:	d130      	bne.n	8005200 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	005b      	lsls	r3, r3, #1
 80051a8:	2203      	movs	r2, #3
 80051aa:	fa02 f303 	lsl.w	r3, r2, r3
 80051ae:	43db      	mvns	r3, r3
 80051b0:	69ba      	ldr	r2, [r7, #24]
 80051b2:	4013      	ands	r3, r2
 80051b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	68da      	ldr	r2, [r3, #12]
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	005b      	lsls	r3, r3, #1
 80051be:	fa02 f303 	lsl.w	r3, r2, r3
 80051c2:	69ba      	ldr	r2, [r7, #24]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	69ba      	ldr	r2, [r7, #24]
 80051cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80051d4:	2201      	movs	r2, #1
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	fa02 f303 	lsl.w	r3, r2, r3
 80051dc:	43db      	mvns	r3, r3
 80051de:	69ba      	ldr	r2, [r7, #24]
 80051e0:	4013      	ands	r3, r2
 80051e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	091b      	lsrs	r3, r3, #4
 80051ea:	f003 0201 	and.w	r2, r3, #1
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	fa02 f303 	lsl.w	r3, r2, r3
 80051f4:	69ba      	ldr	r2, [r7, #24]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	69ba      	ldr	r2, [r7, #24]
 80051fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	f003 0303 	and.w	r3, r3, #3
 8005208:	2b03      	cmp	r3, #3
 800520a:	d017      	beq.n	800523c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	005b      	lsls	r3, r3, #1
 8005216:	2203      	movs	r2, #3
 8005218:	fa02 f303 	lsl.w	r3, r2, r3
 800521c:	43db      	mvns	r3, r3
 800521e:	69ba      	ldr	r2, [r7, #24]
 8005220:	4013      	ands	r3, r2
 8005222:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	689a      	ldr	r2, [r3, #8]
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	005b      	lsls	r3, r3, #1
 800522c:	fa02 f303 	lsl.w	r3, r2, r3
 8005230:	69ba      	ldr	r2, [r7, #24]
 8005232:	4313      	orrs	r3, r2
 8005234:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	69ba      	ldr	r2, [r7, #24]
 800523a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	f003 0303 	and.w	r3, r3, #3
 8005244:	2b02      	cmp	r3, #2
 8005246:	d123      	bne.n	8005290 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	08da      	lsrs	r2, r3, #3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	3208      	adds	r2, #8
 8005250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005254:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	f003 0307 	and.w	r3, r3, #7
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	220f      	movs	r2, #15
 8005260:	fa02 f303 	lsl.w	r3, r2, r3
 8005264:	43db      	mvns	r3, r3
 8005266:	69ba      	ldr	r2, [r7, #24]
 8005268:	4013      	ands	r3, r2
 800526a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	691a      	ldr	r2, [r3, #16]
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	f003 0307 	and.w	r3, r3, #7
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	fa02 f303 	lsl.w	r3, r2, r3
 800527c:	69ba      	ldr	r2, [r7, #24]
 800527e:	4313      	orrs	r3, r2
 8005280:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	08da      	lsrs	r2, r3, #3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	3208      	adds	r2, #8
 800528a:	69b9      	ldr	r1, [r7, #24]
 800528c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	005b      	lsls	r3, r3, #1
 800529a:	2203      	movs	r2, #3
 800529c:	fa02 f303 	lsl.w	r3, r2, r3
 80052a0:	43db      	mvns	r3, r3
 80052a2:	69ba      	ldr	r2, [r7, #24]
 80052a4:	4013      	ands	r3, r2
 80052a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	f003 0203 	and.w	r2, r3, #3
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	005b      	lsls	r3, r3, #1
 80052b4:	fa02 f303 	lsl.w	r3, r2, r3
 80052b8:	69ba      	ldr	r2, [r7, #24]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	69ba      	ldr	r2, [r7, #24]
 80052c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	f000 80ae 	beq.w	800542e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052d2:	2300      	movs	r3, #0
 80052d4:	60fb      	str	r3, [r7, #12]
 80052d6:	4b5d      	ldr	r3, [pc, #372]	; (800544c <HAL_GPIO_Init+0x300>)
 80052d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052da:	4a5c      	ldr	r2, [pc, #368]	; (800544c <HAL_GPIO_Init+0x300>)
 80052dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80052e0:	6453      	str	r3, [r2, #68]	; 0x44
 80052e2:	4b5a      	ldr	r3, [pc, #360]	; (800544c <HAL_GPIO_Init+0x300>)
 80052e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052ea:	60fb      	str	r3, [r7, #12]
 80052ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80052ee:	4a58      	ldr	r2, [pc, #352]	; (8005450 <HAL_GPIO_Init+0x304>)
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	089b      	lsrs	r3, r3, #2
 80052f4:	3302      	adds	r3, #2
 80052f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	f003 0303 	and.w	r3, r3, #3
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	220f      	movs	r2, #15
 8005306:	fa02 f303 	lsl.w	r3, r2, r3
 800530a:	43db      	mvns	r3, r3
 800530c:	69ba      	ldr	r2, [r7, #24]
 800530e:	4013      	ands	r3, r2
 8005310:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4a4f      	ldr	r2, [pc, #316]	; (8005454 <HAL_GPIO_Init+0x308>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d025      	beq.n	8005366 <HAL_GPIO_Init+0x21a>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a4e      	ldr	r2, [pc, #312]	; (8005458 <HAL_GPIO_Init+0x30c>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d01f      	beq.n	8005362 <HAL_GPIO_Init+0x216>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4a4d      	ldr	r2, [pc, #308]	; (800545c <HAL_GPIO_Init+0x310>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d019      	beq.n	800535e <HAL_GPIO_Init+0x212>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a4c      	ldr	r2, [pc, #304]	; (8005460 <HAL_GPIO_Init+0x314>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d013      	beq.n	800535a <HAL_GPIO_Init+0x20e>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4a4b      	ldr	r2, [pc, #300]	; (8005464 <HAL_GPIO_Init+0x318>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d00d      	beq.n	8005356 <HAL_GPIO_Init+0x20a>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4a4a      	ldr	r2, [pc, #296]	; (8005468 <HAL_GPIO_Init+0x31c>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d007      	beq.n	8005352 <HAL_GPIO_Init+0x206>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4a49      	ldr	r2, [pc, #292]	; (800546c <HAL_GPIO_Init+0x320>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d101      	bne.n	800534e <HAL_GPIO_Init+0x202>
 800534a:	2306      	movs	r3, #6
 800534c:	e00c      	b.n	8005368 <HAL_GPIO_Init+0x21c>
 800534e:	2307      	movs	r3, #7
 8005350:	e00a      	b.n	8005368 <HAL_GPIO_Init+0x21c>
 8005352:	2305      	movs	r3, #5
 8005354:	e008      	b.n	8005368 <HAL_GPIO_Init+0x21c>
 8005356:	2304      	movs	r3, #4
 8005358:	e006      	b.n	8005368 <HAL_GPIO_Init+0x21c>
 800535a:	2303      	movs	r3, #3
 800535c:	e004      	b.n	8005368 <HAL_GPIO_Init+0x21c>
 800535e:	2302      	movs	r3, #2
 8005360:	e002      	b.n	8005368 <HAL_GPIO_Init+0x21c>
 8005362:	2301      	movs	r3, #1
 8005364:	e000      	b.n	8005368 <HAL_GPIO_Init+0x21c>
 8005366:	2300      	movs	r3, #0
 8005368:	69fa      	ldr	r2, [r7, #28]
 800536a:	f002 0203 	and.w	r2, r2, #3
 800536e:	0092      	lsls	r2, r2, #2
 8005370:	4093      	lsls	r3, r2
 8005372:	69ba      	ldr	r2, [r7, #24]
 8005374:	4313      	orrs	r3, r2
 8005376:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005378:	4935      	ldr	r1, [pc, #212]	; (8005450 <HAL_GPIO_Init+0x304>)
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	089b      	lsrs	r3, r3, #2
 800537e:	3302      	adds	r3, #2
 8005380:	69ba      	ldr	r2, [r7, #24]
 8005382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005386:	4b3a      	ldr	r3, [pc, #232]	; (8005470 <HAL_GPIO_Init+0x324>)
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	43db      	mvns	r3, r3
 8005390:	69ba      	ldr	r2, [r7, #24]
 8005392:	4013      	ands	r3, r2
 8005394:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d003      	beq.n	80053aa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80053a2:	69ba      	ldr	r2, [r7, #24]
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80053aa:	4a31      	ldr	r2, [pc, #196]	; (8005470 <HAL_GPIO_Init+0x324>)
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80053b0:	4b2f      	ldr	r3, [pc, #188]	; (8005470 <HAL_GPIO_Init+0x324>)
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	43db      	mvns	r3, r3
 80053ba:	69ba      	ldr	r2, [r7, #24]
 80053bc:	4013      	ands	r3, r2
 80053be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d003      	beq.n	80053d4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80053cc:	69ba      	ldr	r2, [r7, #24]
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80053d4:	4a26      	ldr	r2, [pc, #152]	; (8005470 <HAL_GPIO_Init+0x324>)
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80053da:	4b25      	ldr	r3, [pc, #148]	; (8005470 <HAL_GPIO_Init+0x324>)
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	43db      	mvns	r3, r3
 80053e4:	69ba      	ldr	r2, [r7, #24]
 80053e6:	4013      	ands	r3, r2
 80053e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d003      	beq.n	80053fe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80053f6:	69ba      	ldr	r2, [r7, #24]
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80053fe:	4a1c      	ldr	r2, [pc, #112]	; (8005470 <HAL_GPIO_Init+0x324>)
 8005400:	69bb      	ldr	r3, [r7, #24]
 8005402:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005404:	4b1a      	ldr	r3, [pc, #104]	; (8005470 <HAL_GPIO_Init+0x324>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	43db      	mvns	r3, r3
 800540e:	69ba      	ldr	r2, [r7, #24]
 8005410:	4013      	ands	r3, r2
 8005412:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800541c:	2b00      	cmp	r3, #0
 800541e:	d003      	beq.n	8005428 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005420:	69ba      	ldr	r2, [r7, #24]
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	4313      	orrs	r3, r2
 8005426:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005428:	4a11      	ldr	r2, [pc, #68]	; (8005470 <HAL_GPIO_Init+0x324>)
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	3301      	adds	r3, #1
 8005432:	61fb      	str	r3, [r7, #28]
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	2b0f      	cmp	r3, #15
 8005438:	f67f ae96 	bls.w	8005168 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800543c:	bf00      	nop
 800543e:	bf00      	nop
 8005440:	3724      	adds	r7, #36	; 0x24
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	40023800 	.word	0x40023800
 8005450:	40013800 	.word	0x40013800
 8005454:	40020000 	.word	0x40020000
 8005458:	40020400 	.word	0x40020400
 800545c:	40020800 	.word	0x40020800
 8005460:	40020c00 	.word	0x40020c00
 8005464:	40021000 	.word	0x40021000
 8005468:	40021400 	.word	0x40021400
 800546c:	40021800 	.word	0x40021800
 8005470:	40013c00 	.word	0x40013c00

08005474 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	460b      	mov	r3, r1
 800547e:	807b      	strh	r3, [r7, #2]
 8005480:	4613      	mov	r3, r2
 8005482:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005484:	787b      	ldrb	r3, [r7, #1]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d003      	beq.n	8005492 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800548a:	887a      	ldrh	r2, [r7, #2]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005490:	e003      	b.n	800549a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005492:	887b      	ldrh	r3, [r7, #2]
 8005494:	041a      	lsls	r2, r3, #16
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	619a      	str	r2, [r3, #24]
}
 800549a:	bf00      	nop
 800549c:	370c      	adds	r7, #12
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr
	...

080054a8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80054ae:	2300      	movs	r3, #0
 80054b0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80054b2:	2300      	movs	r3, #0
 80054b4:	603b      	str	r3, [r7, #0]
 80054b6:	4b20      	ldr	r3, [pc, #128]	; (8005538 <HAL_PWREx_EnableOverDrive+0x90>)
 80054b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ba:	4a1f      	ldr	r2, [pc, #124]	; (8005538 <HAL_PWREx_EnableOverDrive+0x90>)
 80054bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054c0:	6413      	str	r3, [r2, #64]	; 0x40
 80054c2:	4b1d      	ldr	r3, [pc, #116]	; (8005538 <HAL_PWREx_EnableOverDrive+0x90>)
 80054c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054ca:	603b      	str	r3, [r7, #0]
 80054cc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80054ce:	4b1b      	ldr	r3, [pc, #108]	; (800553c <HAL_PWREx_EnableOverDrive+0x94>)
 80054d0:	2201      	movs	r2, #1
 80054d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80054d4:	f7ff fd48 	bl	8004f68 <HAL_GetTick>
 80054d8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80054da:	e009      	b.n	80054f0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80054dc:	f7ff fd44 	bl	8004f68 <HAL_GetTick>
 80054e0:	4602      	mov	r2, r0
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054ea:	d901      	bls.n	80054f0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e01f      	b.n	8005530 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80054f0:	4b13      	ldr	r3, [pc, #76]	; (8005540 <HAL_PWREx_EnableOverDrive+0x98>)
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054fc:	d1ee      	bne.n	80054dc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80054fe:	4b11      	ldr	r3, [pc, #68]	; (8005544 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005500:	2201      	movs	r2, #1
 8005502:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005504:	f7ff fd30 	bl	8004f68 <HAL_GetTick>
 8005508:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800550a:	e009      	b.n	8005520 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800550c:	f7ff fd2c 	bl	8004f68 <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800551a:	d901      	bls.n	8005520 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800551c:	2303      	movs	r3, #3
 800551e:	e007      	b.n	8005530 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005520:	4b07      	ldr	r3, [pc, #28]	; (8005540 <HAL_PWREx_EnableOverDrive+0x98>)
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005528:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800552c:	d1ee      	bne.n	800550c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800552e:	2300      	movs	r3, #0
}
 8005530:	4618      	mov	r0, r3
 8005532:	3708      	adds	r7, #8
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}
 8005538:	40023800 	.word	0x40023800
 800553c:	420e0040 	.word	0x420e0040
 8005540:	40007000 	.word	0x40007000
 8005544:	420e0044 	.word	0x420e0044

08005548 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d101      	bne.n	800555c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	e0cc      	b.n	80056f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800555c:	4b68      	ldr	r3, [pc, #416]	; (8005700 <HAL_RCC_ClockConfig+0x1b8>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 030f 	and.w	r3, r3, #15
 8005564:	683a      	ldr	r2, [r7, #0]
 8005566:	429a      	cmp	r2, r3
 8005568:	d90c      	bls.n	8005584 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800556a:	4b65      	ldr	r3, [pc, #404]	; (8005700 <HAL_RCC_ClockConfig+0x1b8>)
 800556c:	683a      	ldr	r2, [r7, #0]
 800556e:	b2d2      	uxtb	r2, r2
 8005570:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005572:	4b63      	ldr	r3, [pc, #396]	; (8005700 <HAL_RCC_ClockConfig+0x1b8>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 030f 	and.w	r3, r3, #15
 800557a:	683a      	ldr	r2, [r7, #0]
 800557c:	429a      	cmp	r2, r3
 800557e:	d001      	beq.n	8005584 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	e0b8      	b.n	80056f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 0302 	and.w	r3, r3, #2
 800558c:	2b00      	cmp	r3, #0
 800558e:	d020      	beq.n	80055d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 0304 	and.w	r3, r3, #4
 8005598:	2b00      	cmp	r3, #0
 800559a:	d005      	beq.n	80055a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800559c:	4b59      	ldr	r3, [pc, #356]	; (8005704 <HAL_RCC_ClockConfig+0x1bc>)
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	4a58      	ldr	r2, [pc, #352]	; (8005704 <HAL_RCC_ClockConfig+0x1bc>)
 80055a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80055a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 0308 	and.w	r3, r3, #8
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d005      	beq.n	80055c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80055b4:	4b53      	ldr	r3, [pc, #332]	; (8005704 <HAL_RCC_ClockConfig+0x1bc>)
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	4a52      	ldr	r2, [pc, #328]	; (8005704 <HAL_RCC_ClockConfig+0x1bc>)
 80055ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80055be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055c0:	4b50      	ldr	r3, [pc, #320]	; (8005704 <HAL_RCC_ClockConfig+0x1bc>)
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	494d      	ldr	r1, [pc, #308]	; (8005704 <HAL_RCC_ClockConfig+0x1bc>)
 80055ce:	4313      	orrs	r3, r2
 80055d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 0301 	and.w	r3, r3, #1
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d044      	beq.n	8005668 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d107      	bne.n	80055f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055e6:	4b47      	ldr	r3, [pc, #284]	; (8005704 <HAL_RCC_ClockConfig+0x1bc>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d119      	bne.n	8005626 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e07f      	b.n	80056f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	2b02      	cmp	r3, #2
 80055fc:	d003      	beq.n	8005606 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005602:	2b03      	cmp	r3, #3
 8005604:	d107      	bne.n	8005616 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005606:	4b3f      	ldr	r3, [pc, #252]	; (8005704 <HAL_RCC_ClockConfig+0x1bc>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800560e:	2b00      	cmp	r3, #0
 8005610:	d109      	bne.n	8005626 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e06f      	b.n	80056f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005616:	4b3b      	ldr	r3, [pc, #236]	; (8005704 <HAL_RCC_ClockConfig+0x1bc>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 0302 	and.w	r3, r3, #2
 800561e:	2b00      	cmp	r3, #0
 8005620:	d101      	bne.n	8005626 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e067      	b.n	80056f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005626:	4b37      	ldr	r3, [pc, #220]	; (8005704 <HAL_RCC_ClockConfig+0x1bc>)
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	f023 0203 	bic.w	r2, r3, #3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	4934      	ldr	r1, [pc, #208]	; (8005704 <HAL_RCC_ClockConfig+0x1bc>)
 8005634:	4313      	orrs	r3, r2
 8005636:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005638:	f7ff fc96 	bl	8004f68 <HAL_GetTick>
 800563c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800563e:	e00a      	b.n	8005656 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005640:	f7ff fc92 	bl	8004f68 <HAL_GetTick>
 8005644:	4602      	mov	r2, r0
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	f241 3288 	movw	r2, #5000	; 0x1388
 800564e:	4293      	cmp	r3, r2
 8005650:	d901      	bls.n	8005656 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005652:	2303      	movs	r3, #3
 8005654:	e04f      	b.n	80056f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005656:	4b2b      	ldr	r3, [pc, #172]	; (8005704 <HAL_RCC_ClockConfig+0x1bc>)
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	f003 020c 	and.w	r2, r3, #12
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	429a      	cmp	r2, r3
 8005666:	d1eb      	bne.n	8005640 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005668:	4b25      	ldr	r3, [pc, #148]	; (8005700 <HAL_RCC_ClockConfig+0x1b8>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 030f 	and.w	r3, r3, #15
 8005670:	683a      	ldr	r2, [r7, #0]
 8005672:	429a      	cmp	r2, r3
 8005674:	d20c      	bcs.n	8005690 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005676:	4b22      	ldr	r3, [pc, #136]	; (8005700 <HAL_RCC_ClockConfig+0x1b8>)
 8005678:	683a      	ldr	r2, [r7, #0]
 800567a:	b2d2      	uxtb	r2, r2
 800567c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800567e:	4b20      	ldr	r3, [pc, #128]	; (8005700 <HAL_RCC_ClockConfig+0x1b8>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f003 030f 	and.w	r3, r3, #15
 8005686:	683a      	ldr	r2, [r7, #0]
 8005688:	429a      	cmp	r2, r3
 800568a:	d001      	beq.n	8005690 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e032      	b.n	80056f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 0304 	and.w	r3, r3, #4
 8005698:	2b00      	cmp	r3, #0
 800569a:	d008      	beq.n	80056ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800569c:	4b19      	ldr	r3, [pc, #100]	; (8005704 <HAL_RCC_ClockConfig+0x1bc>)
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	4916      	ldr	r1, [pc, #88]	; (8005704 <HAL_RCC_ClockConfig+0x1bc>)
 80056aa:	4313      	orrs	r3, r2
 80056ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 0308 	and.w	r3, r3, #8
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d009      	beq.n	80056ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056ba:	4b12      	ldr	r3, [pc, #72]	; (8005704 <HAL_RCC_ClockConfig+0x1bc>)
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	00db      	lsls	r3, r3, #3
 80056c8:	490e      	ldr	r1, [pc, #56]	; (8005704 <HAL_RCC_ClockConfig+0x1bc>)
 80056ca:	4313      	orrs	r3, r2
 80056cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80056ce:	f000 f855 	bl	800577c <HAL_RCC_GetSysClockFreq>
 80056d2:	4602      	mov	r2, r0
 80056d4:	4b0b      	ldr	r3, [pc, #44]	; (8005704 <HAL_RCC_ClockConfig+0x1bc>)
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	091b      	lsrs	r3, r3, #4
 80056da:	f003 030f 	and.w	r3, r3, #15
 80056de:	490a      	ldr	r1, [pc, #40]	; (8005708 <HAL_RCC_ClockConfig+0x1c0>)
 80056e0:	5ccb      	ldrb	r3, [r1, r3]
 80056e2:	fa22 f303 	lsr.w	r3, r2, r3
 80056e6:	4a09      	ldr	r2, [pc, #36]	; (800570c <HAL_RCC_ClockConfig+0x1c4>)
 80056e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80056ea:	4b09      	ldr	r3, [pc, #36]	; (8005710 <HAL_RCC_ClockConfig+0x1c8>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4618      	mov	r0, r3
 80056f0:	f7ff fbf6 	bl	8004ee0 <HAL_InitTick>

  return HAL_OK;
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3710      	adds	r7, #16
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}
 80056fe:	bf00      	nop
 8005700:	40023c00 	.word	0x40023c00
 8005704:	40023800 	.word	0x40023800
 8005708:	08009a10 	.word	0x08009a10
 800570c:	20000040 	.word	0x20000040
 8005710:	20000044 	.word	0x20000044

08005714 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005714:	b480      	push	{r7}
 8005716:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005718:	4b03      	ldr	r3, [pc, #12]	; (8005728 <HAL_RCC_GetHCLKFreq+0x14>)
 800571a:	681b      	ldr	r3, [r3, #0]
}
 800571c:	4618      	mov	r0, r3
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr
 8005726:	bf00      	nop
 8005728:	20000040 	.word	0x20000040

0800572c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005730:	f7ff fff0 	bl	8005714 <HAL_RCC_GetHCLKFreq>
 8005734:	4602      	mov	r2, r0
 8005736:	4b05      	ldr	r3, [pc, #20]	; (800574c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	0a9b      	lsrs	r3, r3, #10
 800573c:	f003 0307 	and.w	r3, r3, #7
 8005740:	4903      	ldr	r1, [pc, #12]	; (8005750 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005742:	5ccb      	ldrb	r3, [r1, r3]
 8005744:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005748:	4618      	mov	r0, r3
 800574a:	bd80      	pop	{r7, pc}
 800574c:	40023800 	.word	0x40023800
 8005750:	08009a20 	.word	0x08009a20

08005754 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005758:	f7ff ffdc 	bl	8005714 <HAL_RCC_GetHCLKFreq>
 800575c:	4602      	mov	r2, r0
 800575e:	4b05      	ldr	r3, [pc, #20]	; (8005774 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	0b5b      	lsrs	r3, r3, #13
 8005764:	f003 0307 	and.w	r3, r3, #7
 8005768:	4903      	ldr	r1, [pc, #12]	; (8005778 <HAL_RCC_GetPCLK2Freq+0x24>)
 800576a:	5ccb      	ldrb	r3, [r1, r3]
 800576c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005770:	4618      	mov	r0, r3
 8005772:	bd80      	pop	{r7, pc}
 8005774:	40023800 	.word	0x40023800
 8005778:	08009a20 	.word	0x08009a20

0800577c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800577c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005780:	b0ae      	sub	sp, #184	; 0xb8
 8005782:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005784:	2300      	movs	r3, #0
 8005786:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800578a:	2300      	movs	r3, #0
 800578c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8005790:	2300      	movs	r3, #0
 8005792:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8005796:	2300      	movs	r3, #0
 8005798:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800579c:	2300      	movs	r3, #0
 800579e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80057a2:	4bcb      	ldr	r3, [pc, #812]	; (8005ad0 <HAL_RCC_GetSysClockFreq+0x354>)
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	f003 030c 	and.w	r3, r3, #12
 80057aa:	2b0c      	cmp	r3, #12
 80057ac:	f200 8206 	bhi.w	8005bbc <HAL_RCC_GetSysClockFreq+0x440>
 80057b0:	a201      	add	r2, pc, #4	; (adr r2, 80057b8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80057b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057b6:	bf00      	nop
 80057b8:	080057ed 	.word	0x080057ed
 80057bc:	08005bbd 	.word	0x08005bbd
 80057c0:	08005bbd 	.word	0x08005bbd
 80057c4:	08005bbd 	.word	0x08005bbd
 80057c8:	080057f5 	.word	0x080057f5
 80057cc:	08005bbd 	.word	0x08005bbd
 80057d0:	08005bbd 	.word	0x08005bbd
 80057d4:	08005bbd 	.word	0x08005bbd
 80057d8:	080057fd 	.word	0x080057fd
 80057dc:	08005bbd 	.word	0x08005bbd
 80057e0:	08005bbd 	.word	0x08005bbd
 80057e4:	08005bbd 	.word	0x08005bbd
 80057e8:	080059ed 	.word	0x080059ed
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80057ec:	4bb9      	ldr	r3, [pc, #740]	; (8005ad4 <HAL_RCC_GetSysClockFreq+0x358>)
 80057ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80057f2:	e1e7      	b.n	8005bc4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80057f4:	4bb8      	ldr	r3, [pc, #736]	; (8005ad8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80057f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80057fa:	e1e3      	b.n	8005bc4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80057fc:	4bb4      	ldr	r3, [pc, #720]	; (8005ad0 <HAL_RCC_GetSysClockFreq+0x354>)
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005804:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005808:	4bb1      	ldr	r3, [pc, #708]	; (8005ad0 <HAL_RCC_GetSysClockFreq+0x354>)
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005810:	2b00      	cmp	r3, #0
 8005812:	d071      	beq.n	80058f8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005814:	4bae      	ldr	r3, [pc, #696]	; (8005ad0 <HAL_RCC_GetSysClockFreq+0x354>)
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	099b      	lsrs	r3, r3, #6
 800581a:	2200      	movs	r2, #0
 800581c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005820:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8005824:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005828:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800582c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005830:	2300      	movs	r3, #0
 8005832:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005836:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800583a:	4622      	mov	r2, r4
 800583c:	462b      	mov	r3, r5
 800583e:	f04f 0000 	mov.w	r0, #0
 8005842:	f04f 0100 	mov.w	r1, #0
 8005846:	0159      	lsls	r1, r3, #5
 8005848:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800584c:	0150      	lsls	r0, r2, #5
 800584e:	4602      	mov	r2, r0
 8005850:	460b      	mov	r3, r1
 8005852:	4621      	mov	r1, r4
 8005854:	1a51      	subs	r1, r2, r1
 8005856:	6439      	str	r1, [r7, #64]	; 0x40
 8005858:	4629      	mov	r1, r5
 800585a:	eb63 0301 	sbc.w	r3, r3, r1
 800585e:	647b      	str	r3, [r7, #68]	; 0x44
 8005860:	f04f 0200 	mov.w	r2, #0
 8005864:	f04f 0300 	mov.w	r3, #0
 8005868:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800586c:	4649      	mov	r1, r9
 800586e:	018b      	lsls	r3, r1, #6
 8005870:	4641      	mov	r1, r8
 8005872:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005876:	4641      	mov	r1, r8
 8005878:	018a      	lsls	r2, r1, #6
 800587a:	4641      	mov	r1, r8
 800587c:	1a51      	subs	r1, r2, r1
 800587e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005880:	4649      	mov	r1, r9
 8005882:	eb63 0301 	sbc.w	r3, r3, r1
 8005886:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005888:	f04f 0200 	mov.w	r2, #0
 800588c:	f04f 0300 	mov.w	r3, #0
 8005890:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8005894:	4649      	mov	r1, r9
 8005896:	00cb      	lsls	r3, r1, #3
 8005898:	4641      	mov	r1, r8
 800589a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800589e:	4641      	mov	r1, r8
 80058a0:	00ca      	lsls	r2, r1, #3
 80058a2:	4610      	mov	r0, r2
 80058a4:	4619      	mov	r1, r3
 80058a6:	4603      	mov	r3, r0
 80058a8:	4622      	mov	r2, r4
 80058aa:	189b      	adds	r3, r3, r2
 80058ac:	633b      	str	r3, [r7, #48]	; 0x30
 80058ae:	462b      	mov	r3, r5
 80058b0:	460a      	mov	r2, r1
 80058b2:	eb42 0303 	adc.w	r3, r2, r3
 80058b6:	637b      	str	r3, [r7, #52]	; 0x34
 80058b8:	f04f 0200 	mov.w	r2, #0
 80058bc:	f04f 0300 	mov.w	r3, #0
 80058c0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80058c4:	4629      	mov	r1, r5
 80058c6:	024b      	lsls	r3, r1, #9
 80058c8:	4621      	mov	r1, r4
 80058ca:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80058ce:	4621      	mov	r1, r4
 80058d0:	024a      	lsls	r2, r1, #9
 80058d2:	4610      	mov	r0, r2
 80058d4:	4619      	mov	r1, r3
 80058d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80058da:	2200      	movs	r2, #0
 80058dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80058e0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80058e4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80058e8:	f7fa fc96 	bl	8000218 <__aeabi_uldivmod>
 80058ec:	4602      	mov	r2, r0
 80058ee:	460b      	mov	r3, r1
 80058f0:	4613      	mov	r3, r2
 80058f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80058f6:	e067      	b.n	80059c8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058f8:	4b75      	ldr	r3, [pc, #468]	; (8005ad0 <HAL_RCC_GetSysClockFreq+0x354>)
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	099b      	lsrs	r3, r3, #6
 80058fe:	2200      	movs	r2, #0
 8005900:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005904:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8005908:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800590c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005910:	67bb      	str	r3, [r7, #120]	; 0x78
 8005912:	2300      	movs	r3, #0
 8005914:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005916:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800591a:	4622      	mov	r2, r4
 800591c:	462b      	mov	r3, r5
 800591e:	f04f 0000 	mov.w	r0, #0
 8005922:	f04f 0100 	mov.w	r1, #0
 8005926:	0159      	lsls	r1, r3, #5
 8005928:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800592c:	0150      	lsls	r0, r2, #5
 800592e:	4602      	mov	r2, r0
 8005930:	460b      	mov	r3, r1
 8005932:	4621      	mov	r1, r4
 8005934:	1a51      	subs	r1, r2, r1
 8005936:	62b9      	str	r1, [r7, #40]	; 0x28
 8005938:	4629      	mov	r1, r5
 800593a:	eb63 0301 	sbc.w	r3, r3, r1
 800593e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005940:	f04f 0200 	mov.w	r2, #0
 8005944:	f04f 0300 	mov.w	r3, #0
 8005948:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800594c:	4649      	mov	r1, r9
 800594e:	018b      	lsls	r3, r1, #6
 8005950:	4641      	mov	r1, r8
 8005952:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005956:	4641      	mov	r1, r8
 8005958:	018a      	lsls	r2, r1, #6
 800595a:	4641      	mov	r1, r8
 800595c:	ebb2 0a01 	subs.w	sl, r2, r1
 8005960:	4649      	mov	r1, r9
 8005962:	eb63 0b01 	sbc.w	fp, r3, r1
 8005966:	f04f 0200 	mov.w	r2, #0
 800596a:	f04f 0300 	mov.w	r3, #0
 800596e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005972:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005976:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800597a:	4692      	mov	sl, r2
 800597c:	469b      	mov	fp, r3
 800597e:	4623      	mov	r3, r4
 8005980:	eb1a 0303 	adds.w	r3, sl, r3
 8005984:	623b      	str	r3, [r7, #32]
 8005986:	462b      	mov	r3, r5
 8005988:	eb4b 0303 	adc.w	r3, fp, r3
 800598c:	627b      	str	r3, [r7, #36]	; 0x24
 800598e:	f04f 0200 	mov.w	r2, #0
 8005992:	f04f 0300 	mov.w	r3, #0
 8005996:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800599a:	4629      	mov	r1, r5
 800599c:	028b      	lsls	r3, r1, #10
 800599e:	4621      	mov	r1, r4
 80059a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80059a4:	4621      	mov	r1, r4
 80059a6:	028a      	lsls	r2, r1, #10
 80059a8:	4610      	mov	r0, r2
 80059aa:	4619      	mov	r1, r3
 80059ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80059b0:	2200      	movs	r2, #0
 80059b2:	673b      	str	r3, [r7, #112]	; 0x70
 80059b4:	677a      	str	r2, [r7, #116]	; 0x74
 80059b6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80059ba:	f7fa fc2d 	bl	8000218 <__aeabi_uldivmod>
 80059be:	4602      	mov	r2, r0
 80059c0:	460b      	mov	r3, r1
 80059c2:	4613      	mov	r3, r2
 80059c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80059c8:	4b41      	ldr	r3, [pc, #260]	; (8005ad0 <HAL_RCC_GetSysClockFreq+0x354>)
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	0c1b      	lsrs	r3, r3, #16
 80059ce:	f003 0303 	and.w	r3, r3, #3
 80059d2:	3301      	adds	r3, #1
 80059d4:	005b      	lsls	r3, r3, #1
 80059d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80059da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80059de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80059e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80059e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80059ea:	e0eb      	b.n	8005bc4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80059ec:	4b38      	ldr	r3, [pc, #224]	; (8005ad0 <HAL_RCC_GetSysClockFreq+0x354>)
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80059f8:	4b35      	ldr	r3, [pc, #212]	; (8005ad0 <HAL_RCC_GetSysClockFreq+0x354>)
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d06b      	beq.n	8005adc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a04:	4b32      	ldr	r3, [pc, #200]	; (8005ad0 <HAL_RCC_GetSysClockFreq+0x354>)
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	099b      	lsrs	r3, r3, #6
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a0e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005a10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a16:	663b      	str	r3, [r7, #96]	; 0x60
 8005a18:	2300      	movs	r3, #0
 8005a1a:	667b      	str	r3, [r7, #100]	; 0x64
 8005a1c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8005a20:	4622      	mov	r2, r4
 8005a22:	462b      	mov	r3, r5
 8005a24:	f04f 0000 	mov.w	r0, #0
 8005a28:	f04f 0100 	mov.w	r1, #0
 8005a2c:	0159      	lsls	r1, r3, #5
 8005a2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a32:	0150      	lsls	r0, r2, #5
 8005a34:	4602      	mov	r2, r0
 8005a36:	460b      	mov	r3, r1
 8005a38:	4621      	mov	r1, r4
 8005a3a:	1a51      	subs	r1, r2, r1
 8005a3c:	61b9      	str	r1, [r7, #24]
 8005a3e:	4629      	mov	r1, r5
 8005a40:	eb63 0301 	sbc.w	r3, r3, r1
 8005a44:	61fb      	str	r3, [r7, #28]
 8005a46:	f04f 0200 	mov.w	r2, #0
 8005a4a:	f04f 0300 	mov.w	r3, #0
 8005a4e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005a52:	4659      	mov	r1, fp
 8005a54:	018b      	lsls	r3, r1, #6
 8005a56:	4651      	mov	r1, sl
 8005a58:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005a5c:	4651      	mov	r1, sl
 8005a5e:	018a      	lsls	r2, r1, #6
 8005a60:	4651      	mov	r1, sl
 8005a62:	ebb2 0801 	subs.w	r8, r2, r1
 8005a66:	4659      	mov	r1, fp
 8005a68:	eb63 0901 	sbc.w	r9, r3, r1
 8005a6c:	f04f 0200 	mov.w	r2, #0
 8005a70:	f04f 0300 	mov.w	r3, #0
 8005a74:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a78:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a7c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a80:	4690      	mov	r8, r2
 8005a82:	4699      	mov	r9, r3
 8005a84:	4623      	mov	r3, r4
 8005a86:	eb18 0303 	adds.w	r3, r8, r3
 8005a8a:	613b      	str	r3, [r7, #16]
 8005a8c:	462b      	mov	r3, r5
 8005a8e:	eb49 0303 	adc.w	r3, r9, r3
 8005a92:	617b      	str	r3, [r7, #20]
 8005a94:	f04f 0200 	mov.w	r2, #0
 8005a98:	f04f 0300 	mov.w	r3, #0
 8005a9c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005aa0:	4629      	mov	r1, r5
 8005aa2:	024b      	lsls	r3, r1, #9
 8005aa4:	4621      	mov	r1, r4
 8005aa6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005aaa:	4621      	mov	r1, r4
 8005aac:	024a      	lsls	r2, r1, #9
 8005aae:	4610      	mov	r0, r2
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	65bb      	str	r3, [r7, #88]	; 0x58
 8005aba:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005abc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005ac0:	f7fa fbaa 	bl	8000218 <__aeabi_uldivmod>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	460b      	mov	r3, r1
 8005ac8:	4613      	mov	r3, r2
 8005aca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ace:	e065      	b.n	8005b9c <HAL_RCC_GetSysClockFreq+0x420>
 8005ad0:	40023800 	.word	0x40023800
 8005ad4:	00f42400 	.word	0x00f42400
 8005ad8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005adc:	4b3d      	ldr	r3, [pc, #244]	; (8005bd4 <HAL_RCC_GetSysClockFreq+0x458>)
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	099b      	lsrs	r3, r3, #6
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	4611      	mov	r1, r2
 8005ae8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005aec:	653b      	str	r3, [r7, #80]	; 0x50
 8005aee:	2300      	movs	r3, #0
 8005af0:	657b      	str	r3, [r7, #84]	; 0x54
 8005af2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8005af6:	4642      	mov	r2, r8
 8005af8:	464b      	mov	r3, r9
 8005afa:	f04f 0000 	mov.w	r0, #0
 8005afe:	f04f 0100 	mov.w	r1, #0
 8005b02:	0159      	lsls	r1, r3, #5
 8005b04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b08:	0150      	lsls	r0, r2, #5
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	460b      	mov	r3, r1
 8005b0e:	4641      	mov	r1, r8
 8005b10:	1a51      	subs	r1, r2, r1
 8005b12:	60b9      	str	r1, [r7, #8]
 8005b14:	4649      	mov	r1, r9
 8005b16:	eb63 0301 	sbc.w	r3, r3, r1
 8005b1a:	60fb      	str	r3, [r7, #12]
 8005b1c:	f04f 0200 	mov.w	r2, #0
 8005b20:	f04f 0300 	mov.w	r3, #0
 8005b24:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005b28:	4659      	mov	r1, fp
 8005b2a:	018b      	lsls	r3, r1, #6
 8005b2c:	4651      	mov	r1, sl
 8005b2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005b32:	4651      	mov	r1, sl
 8005b34:	018a      	lsls	r2, r1, #6
 8005b36:	4651      	mov	r1, sl
 8005b38:	1a54      	subs	r4, r2, r1
 8005b3a:	4659      	mov	r1, fp
 8005b3c:	eb63 0501 	sbc.w	r5, r3, r1
 8005b40:	f04f 0200 	mov.w	r2, #0
 8005b44:	f04f 0300 	mov.w	r3, #0
 8005b48:	00eb      	lsls	r3, r5, #3
 8005b4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b4e:	00e2      	lsls	r2, r4, #3
 8005b50:	4614      	mov	r4, r2
 8005b52:	461d      	mov	r5, r3
 8005b54:	4643      	mov	r3, r8
 8005b56:	18e3      	adds	r3, r4, r3
 8005b58:	603b      	str	r3, [r7, #0]
 8005b5a:	464b      	mov	r3, r9
 8005b5c:	eb45 0303 	adc.w	r3, r5, r3
 8005b60:	607b      	str	r3, [r7, #4]
 8005b62:	f04f 0200 	mov.w	r2, #0
 8005b66:	f04f 0300 	mov.w	r3, #0
 8005b6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005b6e:	4629      	mov	r1, r5
 8005b70:	028b      	lsls	r3, r1, #10
 8005b72:	4621      	mov	r1, r4
 8005b74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005b78:	4621      	mov	r1, r4
 8005b7a:	028a      	lsls	r2, r1, #10
 8005b7c:	4610      	mov	r0, r2
 8005b7e:	4619      	mov	r1, r3
 8005b80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005b84:	2200      	movs	r2, #0
 8005b86:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b88:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005b8a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005b8e:	f7fa fb43 	bl	8000218 <__aeabi_uldivmod>
 8005b92:	4602      	mov	r2, r0
 8005b94:	460b      	mov	r3, r1
 8005b96:	4613      	mov	r3, r2
 8005b98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005b9c:	4b0d      	ldr	r3, [pc, #52]	; (8005bd4 <HAL_RCC_GetSysClockFreq+0x458>)
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	0f1b      	lsrs	r3, r3, #28
 8005ba2:	f003 0307 	and.w	r3, r3, #7
 8005ba6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8005baa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005bae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bb6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005bba:	e003      	b.n	8005bc4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005bbc:	4b06      	ldr	r3, [pc, #24]	; (8005bd8 <HAL_RCC_GetSysClockFreq+0x45c>)
 8005bbe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005bc2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005bc4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	37b8      	adds	r7, #184	; 0xb8
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005bd2:	bf00      	nop
 8005bd4:	40023800 	.word	0x40023800
 8005bd8:	00f42400 	.word	0x00f42400

08005bdc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b086      	sub	sp, #24
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d101      	bne.n	8005bee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e28d      	b.n	800610a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 0301 	and.w	r3, r3, #1
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	f000 8083 	beq.w	8005d02 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005bfc:	4b94      	ldr	r3, [pc, #592]	; (8005e50 <HAL_RCC_OscConfig+0x274>)
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	f003 030c 	and.w	r3, r3, #12
 8005c04:	2b04      	cmp	r3, #4
 8005c06:	d019      	beq.n	8005c3c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005c08:	4b91      	ldr	r3, [pc, #580]	; (8005e50 <HAL_RCC_OscConfig+0x274>)
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005c10:	2b08      	cmp	r3, #8
 8005c12:	d106      	bne.n	8005c22 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005c14:	4b8e      	ldr	r3, [pc, #568]	; (8005e50 <HAL_RCC_OscConfig+0x274>)
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c20:	d00c      	beq.n	8005c3c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c22:	4b8b      	ldr	r3, [pc, #556]	; (8005e50 <HAL_RCC_OscConfig+0x274>)
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005c2a:	2b0c      	cmp	r3, #12
 8005c2c:	d112      	bne.n	8005c54 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c2e:	4b88      	ldr	r3, [pc, #544]	; (8005e50 <HAL_RCC_OscConfig+0x274>)
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c3a:	d10b      	bne.n	8005c54 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c3c:	4b84      	ldr	r3, [pc, #528]	; (8005e50 <HAL_RCC_OscConfig+0x274>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d05b      	beq.n	8005d00 <HAL_RCC_OscConfig+0x124>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d157      	bne.n	8005d00 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	e25a      	b.n	800610a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c5c:	d106      	bne.n	8005c6c <HAL_RCC_OscConfig+0x90>
 8005c5e:	4b7c      	ldr	r3, [pc, #496]	; (8005e50 <HAL_RCC_OscConfig+0x274>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a7b      	ldr	r2, [pc, #492]	; (8005e50 <HAL_RCC_OscConfig+0x274>)
 8005c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c68:	6013      	str	r3, [r2, #0]
 8005c6a:	e01d      	b.n	8005ca8 <HAL_RCC_OscConfig+0xcc>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c74:	d10c      	bne.n	8005c90 <HAL_RCC_OscConfig+0xb4>
 8005c76:	4b76      	ldr	r3, [pc, #472]	; (8005e50 <HAL_RCC_OscConfig+0x274>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a75      	ldr	r2, [pc, #468]	; (8005e50 <HAL_RCC_OscConfig+0x274>)
 8005c7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c80:	6013      	str	r3, [r2, #0]
 8005c82:	4b73      	ldr	r3, [pc, #460]	; (8005e50 <HAL_RCC_OscConfig+0x274>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a72      	ldr	r2, [pc, #456]	; (8005e50 <HAL_RCC_OscConfig+0x274>)
 8005c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c8c:	6013      	str	r3, [r2, #0]
 8005c8e:	e00b      	b.n	8005ca8 <HAL_RCC_OscConfig+0xcc>
 8005c90:	4b6f      	ldr	r3, [pc, #444]	; (8005e50 <HAL_RCC_OscConfig+0x274>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a6e      	ldr	r2, [pc, #440]	; (8005e50 <HAL_RCC_OscConfig+0x274>)
 8005c96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c9a:	6013      	str	r3, [r2, #0]
 8005c9c:	4b6c      	ldr	r3, [pc, #432]	; (8005e50 <HAL_RCC_OscConfig+0x274>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a6b      	ldr	r2, [pc, #428]	; (8005e50 <HAL_RCC_OscConfig+0x274>)
 8005ca2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ca6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d013      	beq.n	8005cd8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cb0:	f7ff f95a 	bl	8004f68 <HAL_GetTick>
 8005cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cb6:	e008      	b.n	8005cca <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005cb8:	f7ff f956 	bl	8004f68 <HAL_GetTick>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	1ad3      	subs	r3, r2, r3
 8005cc2:	2b64      	cmp	r3, #100	; 0x64
 8005cc4:	d901      	bls.n	8005cca <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005cc6:	2303      	movs	r3, #3
 8005cc8:	e21f      	b.n	800610a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cca:	4b61      	ldr	r3, [pc, #388]	; (8005e50 <HAL_RCC_OscConfig+0x274>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d0f0      	beq.n	8005cb8 <HAL_RCC_OscConfig+0xdc>
 8005cd6:	e014      	b.n	8005d02 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cd8:	f7ff f946 	bl	8004f68 <HAL_GetTick>
 8005cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005cde:	e008      	b.n	8005cf2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ce0:	f7ff f942 	bl	8004f68 <HAL_GetTick>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	2b64      	cmp	r3, #100	; 0x64
 8005cec:	d901      	bls.n	8005cf2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005cee:	2303      	movs	r3, #3
 8005cf0:	e20b      	b.n	800610a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005cf2:	4b57      	ldr	r3, [pc, #348]	; (8005e50 <HAL_RCC_OscConfig+0x274>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d1f0      	bne.n	8005ce0 <HAL_RCC_OscConfig+0x104>
 8005cfe:	e000      	b.n	8005d02 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 0302 	and.w	r3, r3, #2
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d06f      	beq.n	8005dee <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005d0e:	4b50      	ldr	r3, [pc, #320]	; (8005e50 <HAL_RCC_OscConfig+0x274>)
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	f003 030c 	and.w	r3, r3, #12
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d017      	beq.n	8005d4a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005d1a:	4b4d      	ldr	r3, [pc, #308]	; (8005e50 <HAL_RCC_OscConfig+0x274>)
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005d22:	2b08      	cmp	r3, #8
 8005d24:	d105      	bne.n	8005d32 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005d26:	4b4a      	ldr	r3, [pc, #296]	; (8005e50 <HAL_RCC_OscConfig+0x274>)
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d00b      	beq.n	8005d4a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d32:	4b47      	ldr	r3, [pc, #284]	; (8005e50 <HAL_RCC_OscConfig+0x274>)
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005d3a:	2b0c      	cmp	r3, #12
 8005d3c:	d11c      	bne.n	8005d78 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d3e:	4b44      	ldr	r3, [pc, #272]	; (8005e50 <HAL_RCC_OscConfig+0x274>)
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d116      	bne.n	8005d78 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d4a:	4b41      	ldr	r3, [pc, #260]	; (8005e50 <HAL_RCC_OscConfig+0x274>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 0302 	and.w	r3, r3, #2
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d005      	beq.n	8005d62 <HAL_RCC_OscConfig+0x186>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d001      	beq.n	8005d62 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e1d3      	b.n	800610a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d62:	4b3b      	ldr	r3, [pc, #236]	; (8005e50 <HAL_RCC_OscConfig+0x274>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	00db      	lsls	r3, r3, #3
 8005d70:	4937      	ldr	r1, [pc, #220]	; (8005e50 <HAL_RCC_OscConfig+0x274>)
 8005d72:	4313      	orrs	r3, r2
 8005d74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d76:	e03a      	b.n	8005dee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d020      	beq.n	8005dc2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d80:	4b34      	ldr	r3, [pc, #208]	; (8005e54 <HAL_RCC_OscConfig+0x278>)
 8005d82:	2201      	movs	r2, #1
 8005d84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d86:	f7ff f8ef 	bl	8004f68 <HAL_GetTick>
 8005d8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d8c:	e008      	b.n	8005da0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d8e:	f7ff f8eb 	bl	8004f68 <HAL_GetTick>
 8005d92:	4602      	mov	r2, r0
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	1ad3      	subs	r3, r2, r3
 8005d98:	2b02      	cmp	r3, #2
 8005d9a:	d901      	bls.n	8005da0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005d9c:	2303      	movs	r3, #3
 8005d9e:	e1b4      	b.n	800610a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005da0:	4b2b      	ldr	r3, [pc, #172]	; (8005e50 <HAL_RCC_OscConfig+0x274>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f003 0302 	and.w	r3, r3, #2
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d0f0      	beq.n	8005d8e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dac:	4b28      	ldr	r3, [pc, #160]	; (8005e50 <HAL_RCC_OscConfig+0x274>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	691b      	ldr	r3, [r3, #16]
 8005db8:	00db      	lsls	r3, r3, #3
 8005dba:	4925      	ldr	r1, [pc, #148]	; (8005e50 <HAL_RCC_OscConfig+0x274>)
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	600b      	str	r3, [r1, #0]
 8005dc0:	e015      	b.n	8005dee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005dc2:	4b24      	ldr	r3, [pc, #144]	; (8005e54 <HAL_RCC_OscConfig+0x278>)
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dc8:	f7ff f8ce 	bl	8004f68 <HAL_GetTick>
 8005dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005dce:	e008      	b.n	8005de2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005dd0:	f7ff f8ca 	bl	8004f68 <HAL_GetTick>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	1ad3      	subs	r3, r2, r3
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	d901      	bls.n	8005de2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005dde:	2303      	movs	r3, #3
 8005de0:	e193      	b.n	800610a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005de2:	4b1b      	ldr	r3, [pc, #108]	; (8005e50 <HAL_RCC_OscConfig+0x274>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f003 0302 	and.w	r3, r3, #2
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d1f0      	bne.n	8005dd0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f003 0308 	and.w	r3, r3, #8
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d036      	beq.n	8005e68 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	695b      	ldr	r3, [r3, #20]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d016      	beq.n	8005e30 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e02:	4b15      	ldr	r3, [pc, #84]	; (8005e58 <HAL_RCC_OscConfig+0x27c>)
 8005e04:	2201      	movs	r2, #1
 8005e06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e08:	f7ff f8ae 	bl	8004f68 <HAL_GetTick>
 8005e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e0e:	e008      	b.n	8005e22 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e10:	f7ff f8aa 	bl	8004f68 <HAL_GetTick>
 8005e14:	4602      	mov	r2, r0
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	1ad3      	subs	r3, r2, r3
 8005e1a:	2b02      	cmp	r3, #2
 8005e1c:	d901      	bls.n	8005e22 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005e1e:	2303      	movs	r3, #3
 8005e20:	e173      	b.n	800610a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e22:	4b0b      	ldr	r3, [pc, #44]	; (8005e50 <HAL_RCC_OscConfig+0x274>)
 8005e24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e26:	f003 0302 	and.w	r3, r3, #2
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d0f0      	beq.n	8005e10 <HAL_RCC_OscConfig+0x234>
 8005e2e:	e01b      	b.n	8005e68 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e30:	4b09      	ldr	r3, [pc, #36]	; (8005e58 <HAL_RCC_OscConfig+0x27c>)
 8005e32:	2200      	movs	r2, #0
 8005e34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e36:	f7ff f897 	bl	8004f68 <HAL_GetTick>
 8005e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e3c:	e00e      	b.n	8005e5c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e3e:	f7ff f893 	bl	8004f68 <HAL_GetTick>
 8005e42:	4602      	mov	r2, r0
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	1ad3      	subs	r3, r2, r3
 8005e48:	2b02      	cmp	r3, #2
 8005e4a:	d907      	bls.n	8005e5c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005e4c:	2303      	movs	r3, #3
 8005e4e:	e15c      	b.n	800610a <HAL_RCC_OscConfig+0x52e>
 8005e50:	40023800 	.word	0x40023800
 8005e54:	42470000 	.word	0x42470000
 8005e58:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e5c:	4b8a      	ldr	r3, [pc, #552]	; (8006088 <HAL_RCC_OscConfig+0x4ac>)
 8005e5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e60:	f003 0302 	and.w	r3, r3, #2
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d1ea      	bne.n	8005e3e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f003 0304 	and.w	r3, r3, #4
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	f000 8097 	beq.w	8005fa4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e76:	2300      	movs	r3, #0
 8005e78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e7a:	4b83      	ldr	r3, [pc, #524]	; (8006088 <HAL_RCC_OscConfig+0x4ac>)
 8005e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d10f      	bne.n	8005ea6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e86:	2300      	movs	r3, #0
 8005e88:	60bb      	str	r3, [r7, #8]
 8005e8a:	4b7f      	ldr	r3, [pc, #508]	; (8006088 <HAL_RCC_OscConfig+0x4ac>)
 8005e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8e:	4a7e      	ldr	r2, [pc, #504]	; (8006088 <HAL_RCC_OscConfig+0x4ac>)
 8005e90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e94:	6413      	str	r3, [r2, #64]	; 0x40
 8005e96:	4b7c      	ldr	r3, [pc, #496]	; (8006088 <HAL_RCC_OscConfig+0x4ac>)
 8005e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e9e:	60bb      	str	r3, [r7, #8]
 8005ea0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ea6:	4b79      	ldr	r3, [pc, #484]	; (800608c <HAL_RCC_OscConfig+0x4b0>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d118      	bne.n	8005ee4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005eb2:	4b76      	ldr	r3, [pc, #472]	; (800608c <HAL_RCC_OscConfig+0x4b0>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a75      	ldr	r2, [pc, #468]	; (800608c <HAL_RCC_OscConfig+0x4b0>)
 8005eb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ebc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ebe:	f7ff f853 	bl	8004f68 <HAL_GetTick>
 8005ec2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ec4:	e008      	b.n	8005ed8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ec6:	f7ff f84f 	bl	8004f68 <HAL_GetTick>
 8005eca:	4602      	mov	r2, r0
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	1ad3      	subs	r3, r2, r3
 8005ed0:	2b02      	cmp	r3, #2
 8005ed2:	d901      	bls.n	8005ed8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005ed4:	2303      	movs	r3, #3
 8005ed6:	e118      	b.n	800610a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ed8:	4b6c      	ldr	r3, [pc, #432]	; (800608c <HAL_RCC_OscConfig+0x4b0>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d0f0      	beq.n	8005ec6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d106      	bne.n	8005efa <HAL_RCC_OscConfig+0x31e>
 8005eec:	4b66      	ldr	r3, [pc, #408]	; (8006088 <HAL_RCC_OscConfig+0x4ac>)
 8005eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ef0:	4a65      	ldr	r2, [pc, #404]	; (8006088 <HAL_RCC_OscConfig+0x4ac>)
 8005ef2:	f043 0301 	orr.w	r3, r3, #1
 8005ef6:	6713      	str	r3, [r2, #112]	; 0x70
 8005ef8:	e01c      	b.n	8005f34 <HAL_RCC_OscConfig+0x358>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	2b05      	cmp	r3, #5
 8005f00:	d10c      	bne.n	8005f1c <HAL_RCC_OscConfig+0x340>
 8005f02:	4b61      	ldr	r3, [pc, #388]	; (8006088 <HAL_RCC_OscConfig+0x4ac>)
 8005f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f06:	4a60      	ldr	r2, [pc, #384]	; (8006088 <HAL_RCC_OscConfig+0x4ac>)
 8005f08:	f043 0304 	orr.w	r3, r3, #4
 8005f0c:	6713      	str	r3, [r2, #112]	; 0x70
 8005f0e:	4b5e      	ldr	r3, [pc, #376]	; (8006088 <HAL_RCC_OscConfig+0x4ac>)
 8005f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f12:	4a5d      	ldr	r2, [pc, #372]	; (8006088 <HAL_RCC_OscConfig+0x4ac>)
 8005f14:	f043 0301 	orr.w	r3, r3, #1
 8005f18:	6713      	str	r3, [r2, #112]	; 0x70
 8005f1a:	e00b      	b.n	8005f34 <HAL_RCC_OscConfig+0x358>
 8005f1c:	4b5a      	ldr	r3, [pc, #360]	; (8006088 <HAL_RCC_OscConfig+0x4ac>)
 8005f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f20:	4a59      	ldr	r2, [pc, #356]	; (8006088 <HAL_RCC_OscConfig+0x4ac>)
 8005f22:	f023 0301 	bic.w	r3, r3, #1
 8005f26:	6713      	str	r3, [r2, #112]	; 0x70
 8005f28:	4b57      	ldr	r3, [pc, #348]	; (8006088 <HAL_RCC_OscConfig+0x4ac>)
 8005f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f2c:	4a56      	ldr	r2, [pc, #344]	; (8006088 <HAL_RCC_OscConfig+0x4ac>)
 8005f2e:	f023 0304 	bic.w	r3, r3, #4
 8005f32:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d015      	beq.n	8005f68 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f3c:	f7ff f814 	bl	8004f68 <HAL_GetTick>
 8005f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f42:	e00a      	b.n	8005f5a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f44:	f7ff f810 	bl	8004f68 <HAL_GetTick>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	1ad3      	subs	r3, r2, r3
 8005f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d901      	bls.n	8005f5a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005f56:	2303      	movs	r3, #3
 8005f58:	e0d7      	b.n	800610a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f5a:	4b4b      	ldr	r3, [pc, #300]	; (8006088 <HAL_RCC_OscConfig+0x4ac>)
 8005f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f5e:	f003 0302 	and.w	r3, r3, #2
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d0ee      	beq.n	8005f44 <HAL_RCC_OscConfig+0x368>
 8005f66:	e014      	b.n	8005f92 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f68:	f7fe fffe 	bl	8004f68 <HAL_GetTick>
 8005f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f6e:	e00a      	b.n	8005f86 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f70:	f7fe fffa 	bl	8004f68 <HAL_GetTick>
 8005f74:	4602      	mov	r2, r0
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	1ad3      	subs	r3, r2, r3
 8005f7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d901      	bls.n	8005f86 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005f82:	2303      	movs	r3, #3
 8005f84:	e0c1      	b.n	800610a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f86:	4b40      	ldr	r3, [pc, #256]	; (8006088 <HAL_RCC_OscConfig+0x4ac>)
 8005f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f8a:	f003 0302 	and.w	r3, r3, #2
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d1ee      	bne.n	8005f70 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f92:	7dfb      	ldrb	r3, [r7, #23]
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d105      	bne.n	8005fa4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f98:	4b3b      	ldr	r3, [pc, #236]	; (8006088 <HAL_RCC_OscConfig+0x4ac>)
 8005f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f9c:	4a3a      	ldr	r2, [pc, #232]	; (8006088 <HAL_RCC_OscConfig+0x4ac>)
 8005f9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fa2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	699b      	ldr	r3, [r3, #24]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	f000 80ad 	beq.w	8006108 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005fae:	4b36      	ldr	r3, [pc, #216]	; (8006088 <HAL_RCC_OscConfig+0x4ac>)
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	f003 030c 	and.w	r3, r3, #12
 8005fb6:	2b08      	cmp	r3, #8
 8005fb8:	d060      	beq.n	800607c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	699b      	ldr	r3, [r3, #24]
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	d145      	bne.n	800604e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fc2:	4b33      	ldr	r3, [pc, #204]	; (8006090 <HAL_RCC_OscConfig+0x4b4>)
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fc8:	f7fe ffce 	bl	8004f68 <HAL_GetTick>
 8005fcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fce:	e008      	b.n	8005fe2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fd0:	f7fe ffca 	bl	8004f68 <HAL_GetTick>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	1ad3      	subs	r3, r2, r3
 8005fda:	2b02      	cmp	r3, #2
 8005fdc:	d901      	bls.n	8005fe2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005fde:	2303      	movs	r3, #3
 8005fe0:	e093      	b.n	800610a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fe2:	4b29      	ldr	r3, [pc, #164]	; (8006088 <HAL_RCC_OscConfig+0x4ac>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d1f0      	bne.n	8005fd0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	69da      	ldr	r2, [r3, #28]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a1b      	ldr	r3, [r3, #32]
 8005ff6:	431a      	orrs	r2, r3
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffc:	019b      	lsls	r3, r3, #6
 8005ffe:	431a      	orrs	r2, r3
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006004:	085b      	lsrs	r3, r3, #1
 8006006:	3b01      	subs	r3, #1
 8006008:	041b      	lsls	r3, r3, #16
 800600a:	431a      	orrs	r2, r3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006010:	061b      	lsls	r3, r3, #24
 8006012:	431a      	orrs	r2, r3
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006018:	071b      	lsls	r3, r3, #28
 800601a:	491b      	ldr	r1, [pc, #108]	; (8006088 <HAL_RCC_OscConfig+0x4ac>)
 800601c:	4313      	orrs	r3, r2
 800601e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006020:	4b1b      	ldr	r3, [pc, #108]	; (8006090 <HAL_RCC_OscConfig+0x4b4>)
 8006022:	2201      	movs	r2, #1
 8006024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006026:	f7fe ff9f 	bl	8004f68 <HAL_GetTick>
 800602a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800602c:	e008      	b.n	8006040 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800602e:	f7fe ff9b 	bl	8004f68 <HAL_GetTick>
 8006032:	4602      	mov	r2, r0
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	1ad3      	subs	r3, r2, r3
 8006038:	2b02      	cmp	r3, #2
 800603a:	d901      	bls.n	8006040 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800603c:	2303      	movs	r3, #3
 800603e:	e064      	b.n	800610a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006040:	4b11      	ldr	r3, [pc, #68]	; (8006088 <HAL_RCC_OscConfig+0x4ac>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006048:	2b00      	cmp	r3, #0
 800604a:	d0f0      	beq.n	800602e <HAL_RCC_OscConfig+0x452>
 800604c:	e05c      	b.n	8006108 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800604e:	4b10      	ldr	r3, [pc, #64]	; (8006090 <HAL_RCC_OscConfig+0x4b4>)
 8006050:	2200      	movs	r2, #0
 8006052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006054:	f7fe ff88 	bl	8004f68 <HAL_GetTick>
 8006058:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800605a:	e008      	b.n	800606e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800605c:	f7fe ff84 	bl	8004f68 <HAL_GetTick>
 8006060:	4602      	mov	r2, r0
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	1ad3      	subs	r3, r2, r3
 8006066:	2b02      	cmp	r3, #2
 8006068:	d901      	bls.n	800606e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800606a:	2303      	movs	r3, #3
 800606c:	e04d      	b.n	800610a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800606e:	4b06      	ldr	r3, [pc, #24]	; (8006088 <HAL_RCC_OscConfig+0x4ac>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006076:	2b00      	cmp	r3, #0
 8006078:	d1f0      	bne.n	800605c <HAL_RCC_OscConfig+0x480>
 800607a:	e045      	b.n	8006108 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	699b      	ldr	r3, [r3, #24]
 8006080:	2b01      	cmp	r3, #1
 8006082:	d107      	bne.n	8006094 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006084:	2301      	movs	r3, #1
 8006086:	e040      	b.n	800610a <HAL_RCC_OscConfig+0x52e>
 8006088:	40023800 	.word	0x40023800
 800608c:	40007000 	.word	0x40007000
 8006090:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006094:	4b1f      	ldr	r3, [pc, #124]	; (8006114 <HAL_RCC_OscConfig+0x538>)
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	699b      	ldr	r3, [r3, #24]
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d030      	beq.n	8006104 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d129      	bne.n	8006104 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d122      	bne.n	8006104 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80060c4:	4013      	ands	r3, r2
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80060ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d119      	bne.n	8006104 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060da:	085b      	lsrs	r3, r3, #1
 80060dc:	3b01      	subs	r3, #1
 80060de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d10f      	bne.n	8006104 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d107      	bne.n	8006104 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060fe:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006100:	429a      	cmp	r2, r3
 8006102:	d001      	beq.n	8006108 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	e000      	b.n	800610a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	3718      	adds	r7, #24
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
 8006112:	bf00      	nop
 8006114:	40023800 	.word	0x40023800

08006118 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b082      	sub	sp, #8
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d101      	bne.n	800612a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	e041      	b.n	80061ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006130:	b2db      	uxtb	r3, r3
 8006132:	2b00      	cmp	r3, #0
 8006134:	d106      	bne.n	8006144 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f7fe fd54 	bl	8004bec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2202      	movs	r2, #2
 8006148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	3304      	adds	r3, #4
 8006154:	4619      	mov	r1, r3
 8006156:	4610      	mov	r0, r2
 8006158:	f000 f8be 	bl	80062d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2201      	movs	r2, #1
 8006160:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2201      	movs	r2, #1
 80061a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061ac:	2300      	movs	r3, #0
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3708      	adds	r7, #8
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
	...

080061b8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b085      	sub	sp, #20
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d001      	beq.n	80061d0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e046      	b.n	800625e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2202      	movs	r2, #2
 80061d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a23      	ldr	r2, [pc, #140]	; (800626c <HAL_TIM_Base_Start+0xb4>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d022      	beq.n	8006228 <HAL_TIM_Base_Start+0x70>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061ea:	d01d      	beq.n	8006228 <HAL_TIM_Base_Start+0x70>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a1f      	ldr	r2, [pc, #124]	; (8006270 <HAL_TIM_Base_Start+0xb8>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d018      	beq.n	8006228 <HAL_TIM_Base_Start+0x70>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a1e      	ldr	r2, [pc, #120]	; (8006274 <HAL_TIM_Base_Start+0xbc>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d013      	beq.n	8006228 <HAL_TIM_Base_Start+0x70>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a1c      	ldr	r2, [pc, #112]	; (8006278 <HAL_TIM_Base_Start+0xc0>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d00e      	beq.n	8006228 <HAL_TIM_Base_Start+0x70>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a1b      	ldr	r2, [pc, #108]	; (800627c <HAL_TIM_Base_Start+0xc4>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d009      	beq.n	8006228 <HAL_TIM_Base_Start+0x70>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a19      	ldr	r2, [pc, #100]	; (8006280 <HAL_TIM_Base_Start+0xc8>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d004      	beq.n	8006228 <HAL_TIM_Base_Start+0x70>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a18      	ldr	r2, [pc, #96]	; (8006284 <HAL_TIM_Base_Start+0xcc>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d111      	bne.n	800624c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	f003 0307 	and.w	r3, r3, #7
 8006232:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2b06      	cmp	r3, #6
 8006238:	d010      	beq.n	800625c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f042 0201 	orr.w	r2, r2, #1
 8006248:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800624a:	e007      	b.n	800625c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f042 0201 	orr.w	r2, r2, #1
 800625a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	4618      	mov	r0, r3
 8006260:	3714      	adds	r7, #20
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr
 800626a:	bf00      	nop
 800626c:	40010000 	.word	0x40010000
 8006270:	40000400 	.word	0x40000400
 8006274:	40000800 	.word	0x40000800
 8006278:	40000c00 	.word	0x40000c00
 800627c:	40010400 	.word	0x40010400
 8006280:	40014000 	.word	0x40014000
 8006284:	40001800 	.word	0x40001800

08006288 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8006288:	b480      	push	{r7}
 800628a:	b083      	sub	sp, #12
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	6a1a      	ldr	r2, [r3, #32]
 8006296:	f241 1311 	movw	r3, #4369	; 0x1111
 800629a:	4013      	ands	r3, r2
 800629c:	2b00      	cmp	r3, #0
 800629e:	d10f      	bne.n	80062c0 <HAL_TIM_Base_Stop+0x38>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	6a1a      	ldr	r2, [r3, #32]
 80062a6:	f240 4344 	movw	r3, #1092	; 0x444
 80062aa:	4013      	ands	r3, r2
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d107      	bne.n	80062c0 <HAL_TIM_Base_Stop+0x38>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f022 0201 	bic.w	r2, r2, #1
 80062be:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	370c      	adds	r7, #12
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr
	...

080062d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80062d8:	b480      	push	{r7}
 80062da:	b085      	sub	sp, #20
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	4a40      	ldr	r2, [pc, #256]	; (80063ec <TIM_Base_SetConfig+0x114>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d013      	beq.n	8006318 <TIM_Base_SetConfig+0x40>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062f6:	d00f      	beq.n	8006318 <TIM_Base_SetConfig+0x40>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	4a3d      	ldr	r2, [pc, #244]	; (80063f0 <TIM_Base_SetConfig+0x118>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d00b      	beq.n	8006318 <TIM_Base_SetConfig+0x40>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	4a3c      	ldr	r2, [pc, #240]	; (80063f4 <TIM_Base_SetConfig+0x11c>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d007      	beq.n	8006318 <TIM_Base_SetConfig+0x40>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	4a3b      	ldr	r2, [pc, #236]	; (80063f8 <TIM_Base_SetConfig+0x120>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d003      	beq.n	8006318 <TIM_Base_SetConfig+0x40>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	4a3a      	ldr	r2, [pc, #232]	; (80063fc <TIM_Base_SetConfig+0x124>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d108      	bne.n	800632a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800631e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	68fa      	ldr	r2, [r7, #12]
 8006326:	4313      	orrs	r3, r2
 8006328:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4a2f      	ldr	r2, [pc, #188]	; (80063ec <TIM_Base_SetConfig+0x114>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d02b      	beq.n	800638a <TIM_Base_SetConfig+0xb2>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006338:	d027      	beq.n	800638a <TIM_Base_SetConfig+0xb2>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	4a2c      	ldr	r2, [pc, #176]	; (80063f0 <TIM_Base_SetConfig+0x118>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d023      	beq.n	800638a <TIM_Base_SetConfig+0xb2>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	4a2b      	ldr	r2, [pc, #172]	; (80063f4 <TIM_Base_SetConfig+0x11c>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d01f      	beq.n	800638a <TIM_Base_SetConfig+0xb2>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	4a2a      	ldr	r2, [pc, #168]	; (80063f8 <TIM_Base_SetConfig+0x120>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d01b      	beq.n	800638a <TIM_Base_SetConfig+0xb2>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	4a29      	ldr	r2, [pc, #164]	; (80063fc <TIM_Base_SetConfig+0x124>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d017      	beq.n	800638a <TIM_Base_SetConfig+0xb2>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	4a28      	ldr	r2, [pc, #160]	; (8006400 <TIM_Base_SetConfig+0x128>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d013      	beq.n	800638a <TIM_Base_SetConfig+0xb2>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	4a27      	ldr	r2, [pc, #156]	; (8006404 <TIM_Base_SetConfig+0x12c>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d00f      	beq.n	800638a <TIM_Base_SetConfig+0xb2>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4a26      	ldr	r2, [pc, #152]	; (8006408 <TIM_Base_SetConfig+0x130>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d00b      	beq.n	800638a <TIM_Base_SetConfig+0xb2>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	4a25      	ldr	r2, [pc, #148]	; (800640c <TIM_Base_SetConfig+0x134>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d007      	beq.n	800638a <TIM_Base_SetConfig+0xb2>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4a24      	ldr	r2, [pc, #144]	; (8006410 <TIM_Base_SetConfig+0x138>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d003      	beq.n	800638a <TIM_Base_SetConfig+0xb2>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a23      	ldr	r2, [pc, #140]	; (8006414 <TIM_Base_SetConfig+0x13c>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d108      	bne.n	800639c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006390:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	68db      	ldr	r3, [r3, #12]
 8006396:	68fa      	ldr	r2, [r7, #12]
 8006398:	4313      	orrs	r3, r2
 800639a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	695b      	ldr	r3, [r3, #20]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	68fa      	ldr	r2, [r7, #12]
 80063ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	689a      	ldr	r2, [r3, #8]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	4a0a      	ldr	r2, [pc, #40]	; (80063ec <TIM_Base_SetConfig+0x114>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d003      	beq.n	80063d0 <TIM_Base_SetConfig+0xf8>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	4a0c      	ldr	r2, [pc, #48]	; (80063fc <TIM_Base_SetConfig+0x124>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d103      	bne.n	80063d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	691a      	ldr	r2, [r3, #16]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2201      	movs	r2, #1
 80063dc:	615a      	str	r2, [r3, #20]
}
 80063de:	bf00      	nop
 80063e0:	3714      	adds	r7, #20
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr
 80063ea:	bf00      	nop
 80063ec:	40010000 	.word	0x40010000
 80063f0:	40000400 	.word	0x40000400
 80063f4:	40000800 	.word	0x40000800
 80063f8:	40000c00 	.word	0x40000c00
 80063fc:	40010400 	.word	0x40010400
 8006400:	40014000 	.word	0x40014000
 8006404:	40014400 	.word	0x40014400
 8006408:	40014800 	.word	0x40014800
 800640c:	40001800 	.word	0x40001800
 8006410:	40001c00 	.word	0x40001c00
 8006414:	40002000 	.word	0x40002000

08006418 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006418:	b480      	push	{r7}
 800641a:	b085      	sub	sp, #20
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006428:	2b01      	cmp	r3, #1
 800642a:	d101      	bne.n	8006430 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800642c:	2302      	movs	r3, #2
 800642e:	e05a      	b.n	80064e6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2201      	movs	r2, #1
 8006434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2202      	movs	r2, #2
 800643c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006456:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	68fa      	ldr	r2, [r7, #12]
 800645e:	4313      	orrs	r3, r2
 8006460:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	68fa      	ldr	r2, [r7, #12]
 8006468:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a21      	ldr	r2, [pc, #132]	; (80064f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d022      	beq.n	80064ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800647c:	d01d      	beq.n	80064ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a1d      	ldr	r2, [pc, #116]	; (80064f8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d018      	beq.n	80064ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a1b      	ldr	r2, [pc, #108]	; (80064fc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d013      	beq.n	80064ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a1a      	ldr	r2, [pc, #104]	; (8006500 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d00e      	beq.n	80064ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a18      	ldr	r2, [pc, #96]	; (8006504 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d009      	beq.n	80064ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a17      	ldr	r2, [pc, #92]	; (8006508 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d004      	beq.n	80064ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a15      	ldr	r2, [pc, #84]	; (800650c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d10c      	bne.n	80064d4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	68ba      	ldr	r2, [r7, #8]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	68ba      	ldr	r2, [r7, #8]
 80064d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064e4:	2300      	movs	r3, #0
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3714      	adds	r7, #20
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr
 80064f2:	bf00      	nop
 80064f4:	40010000 	.word	0x40010000
 80064f8:	40000400 	.word	0x40000400
 80064fc:	40000800 	.word	0x40000800
 8006500:	40000c00 	.word	0x40000c00
 8006504:	40010400 	.word	0x40010400
 8006508:	40014000 	.word	0x40014000
 800650c:	40001800 	.word	0x40001800

08006510 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b082      	sub	sp, #8
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d101      	bne.n	8006522 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	e03f      	b.n	80065a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006528:	b2db      	uxtb	r3, r3
 800652a:	2b00      	cmp	r3, #0
 800652c:	d106      	bne.n	800653c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f7fe fba4 	bl	8004c84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2224      	movs	r2, #36	; 0x24
 8006540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	68da      	ldr	r2, [r3, #12]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006552:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 f929 	bl	80067ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	691a      	ldr	r2, [r3, #16]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006568:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	695a      	ldr	r2, [r3, #20]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006578:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	68da      	ldr	r2, [r3, #12]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006588:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2200      	movs	r2, #0
 800658e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2220      	movs	r2, #32
 8006594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2220      	movs	r2, #32
 800659c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3708      	adds	r7, #8
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}

080065aa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065aa:	b580      	push	{r7, lr}
 80065ac:	b08a      	sub	sp, #40	; 0x28
 80065ae:	af02      	add	r7, sp, #8
 80065b0:	60f8      	str	r0, [r7, #12]
 80065b2:	60b9      	str	r1, [r7, #8]
 80065b4:	603b      	str	r3, [r7, #0]
 80065b6:	4613      	mov	r3, r2
 80065b8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80065ba:	2300      	movs	r3, #0
 80065bc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	2b20      	cmp	r3, #32
 80065c8:	d17c      	bne.n	80066c4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d002      	beq.n	80065d6 <HAL_UART_Transmit+0x2c>
 80065d0:	88fb      	ldrh	r3, [r7, #6]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d101      	bne.n	80065da <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	e075      	b.n	80066c6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d101      	bne.n	80065e8 <HAL_UART_Transmit+0x3e>
 80065e4:	2302      	movs	r3, #2
 80065e6:	e06e      	b.n	80066c6 <HAL_UART_Transmit+0x11c>
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2201      	movs	r2, #1
 80065ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2200      	movs	r2, #0
 80065f4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2221      	movs	r2, #33	; 0x21
 80065fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80065fe:	f7fe fcb3 	bl	8004f68 <HAL_GetTick>
 8006602:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	88fa      	ldrh	r2, [r7, #6]
 8006608:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	88fa      	ldrh	r2, [r7, #6]
 800660e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006618:	d108      	bne.n	800662c <HAL_UART_Transmit+0x82>
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	691b      	ldr	r3, [r3, #16]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d104      	bne.n	800662c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006622:	2300      	movs	r3, #0
 8006624:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	61bb      	str	r3, [r7, #24]
 800662a:	e003      	b.n	8006634 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006630:	2300      	movs	r3, #0
 8006632:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2200      	movs	r2, #0
 8006638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800663c:	e02a      	b.n	8006694 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	9300      	str	r3, [sp, #0]
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	2200      	movs	r2, #0
 8006646:	2180      	movs	r1, #128	; 0x80
 8006648:	68f8      	ldr	r0, [r7, #12]
 800664a:	f000 f840 	bl	80066ce <UART_WaitOnFlagUntilTimeout>
 800664e:	4603      	mov	r3, r0
 8006650:	2b00      	cmp	r3, #0
 8006652:	d001      	beq.n	8006658 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006654:	2303      	movs	r3, #3
 8006656:	e036      	b.n	80066c6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006658:	69fb      	ldr	r3, [r7, #28]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d10b      	bne.n	8006676 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800665e:	69bb      	ldr	r3, [r7, #24]
 8006660:	881b      	ldrh	r3, [r3, #0]
 8006662:	461a      	mov	r2, r3
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800666c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800666e:	69bb      	ldr	r3, [r7, #24]
 8006670:	3302      	adds	r3, #2
 8006672:	61bb      	str	r3, [r7, #24]
 8006674:	e007      	b.n	8006686 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006676:	69fb      	ldr	r3, [r7, #28]
 8006678:	781a      	ldrb	r2, [r3, #0]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006680:	69fb      	ldr	r3, [r7, #28]
 8006682:	3301      	adds	r3, #1
 8006684:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800668a:	b29b      	uxth	r3, r3
 800668c:	3b01      	subs	r3, #1
 800668e:	b29a      	uxth	r2, r3
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006698:	b29b      	uxth	r3, r3
 800669a:	2b00      	cmp	r3, #0
 800669c:	d1cf      	bne.n	800663e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	9300      	str	r3, [sp, #0]
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	2200      	movs	r2, #0
 80066a6:	2140      	movs	r1, #64	; 0x40
 80066a8:	68f8      	ldr	r0, [r7, #12]
 80066aa:	f000 f810 	bl	80066ce <UART_WaitOnFlagUntilTimeout>
 80066ae:	4603      	mov	r3, r0
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d001      	beq.n	80066b8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80066b4:	2303      	movs	r3, #3
 80066b6:	e006      	b.n	80066c6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2220      	movs	r2, #32
 80066bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80066c0:	2300      	movs	r3, #0
 80066c2:	e000      	b.n	80066c6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80066c4:	2302      	movs	r3, #2
  }
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3720      	adds	r7, #32
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}

080066ce <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80066ce:	b580      	push	{r7, lr}
 80066d0:	b090      	sub	sp, #64	; 0x40
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	60f8      	str	r0, [r7, #12]
 80066d6:	60b9      	str	r1, [r7, #8]
 80066d8:	603b      	str	r3, [r7, #0]
 80066da:	4613      	mov	r3, r2
 80066dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066de:	e050      	b.n	8006782 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066e6:	d04c      	beq.n	8006782 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80066e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d007      	beq.n	80066fe <UART_WaitOnFlagUntilTimeout+0x30>
 80066ee:	f7fe fc3b 	bl	8004f68 <HAL_GetTick>
 80066f2:	4602      	mov	r2, r0
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	1ad3      	subs	r3, r2, r3
 80066f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d241      	bcs.n	8006782 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	330c      	adds	r3, #12
 8006704:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006708:	e853 3f00 	ldrex	r3, [r3]
 800670c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800670e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006710:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006714:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	330c      	adds	r3, #12
 800671c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800671e:	637a      	str	r2, [r7, #52]	; 0x34
 8006720:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006722:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006724:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006726:	e841 2300 	strex	r3, r2, [r1]
 800672a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800672c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800672e:	2b00      	cmp	r3, #0
 8006730:	d1e5      	bne.n	80066fe <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	3314      	adds	r3, #20
 8006738:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	e853 3f00 	ldrex	r3, [r3]
 8006740:	613b      	str	r3, [r7, #16]
   return(result);
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	f023 0301 	bic.w	r3, r3, #1
 8006748:	63bb      	str	r3, [r7, #56]	; 0x38
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	3314      	adds	r3, #20
 8006750:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006752:	623a      	str	r2, [r7, #32]
 8006754:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006756:	69f9      	ldr	r1, [r7, #28]
 8006758:	6a3a      	ldr	r2, [r7, #32]
 800675a:	e841 2300 	strex	r3, r2, [r1]
 800675e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d1e5      	bne.n	8006732 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2220      	movs	r2, #32
 800676a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2220      	movs	r2, #32
 8006772:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2200      	movs	r2, #0
 800677a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800677e:	2303      	movs	r3, #3
 8006780:	e00f      	b.n	80067a2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	4013      	ands	r3, r2
 800678c:	68ba      	ldr	r2, [r7, #8]
 800678e:	429a      	cmp	r2, r3
 8006790:	bf0c      	ite	eq
 8006792:	2301      	moveq	r3, #1
 8006794:	2300      	movne	r3, #0
 8006796:	b2db      	uxtb	r3, r3
 8006798:	461a      	mov	r2, r3
 800679a:	79fb      	ldrb	r3, [r7, #7]
 800679c:	429a      	cmp	r2, r3
 800679e:	d09f      	beq.n	80066e0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80067a0:	2300      	movs	r3, #0
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3740      	adds	r7, #64	; 0x40
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
	...

080067ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067b0:	b0c0      	sub	sp, #256	; 0x100
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	691b      	ldr	r3, [r3, #16]
 80067c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80067c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067c8:	68d9      	ldr	r1, [r3, #12]
 80067ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	ea40 0301 	orr.w	r3, r0, r1
 80067d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80067d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067da:	689a      	ldr	r2, [r3, #8]
 80067dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067e0:	691b      	ldr	r3, [r3, #16]
 80067e2:	431a      	orrs	r2, r3
 80067e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067e8:	695b      	ldr	r3, [r3, #20]
 80067ea:	431a      	orrs	r2, r3
 80067ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067f0:	69db      	ldr	r3, [r3, #28]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80067f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006804:	f021 010c 	bic.w	r1, r1, #12
 8006808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800680c:	681a      	ldr	r2, [r3, #0]
 800680e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006812:	430b      	orrs	r3, r1
 8006814:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	695b      	ldr	r3, [r3, #20]
 800681e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006826:	6999      	ldr	r1, [r3, #24]
 8006828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	ea40 0301 	orr.w	r3, r0, r1
 8006832:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	4b8f      	ldr	r3, [pc, #572]	; (8006a78 <UART_SetConfig+0x2cc>)
 800683c:	429a      	cmp	r2, r3
 800683e:	d005      	beq.n	800684c <UART_SetConfig+0xa0>
 8006840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	4b8d      	ldr	r3, [pc, #564]	; (8006a7c <UART_SetConfig+0x2d0>)
 8006848:	429a      	cmp	r2, r3
 800684a:	d104      	bne.n	8006856 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800684c:	f7fe ff82 	bl	8005754 <HAL_RCC_GetPCLK2Freq>
 8006850:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006854:	e003      	b.n	800685e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006856:	f7fe ff69 	bl	800572c <HAL_RCC_GetPCLK1Freq>
 800685a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800685e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006862:	69db      	ldr	r3, [r3, #28]
 8006864:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006868:	f040 810c 	bne.w	8006a84 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800686c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006870:	2200      	movs	r2, #0
 8006872:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006876:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800687a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800687e:	4622      	mov	r2, r4
 8006880:	462b      	mov	r3, r5
 8006882:	1891      	adds	r1, r2, r2
 8006884:	65b9      	str	r1, [r7, #88]	; 0x58
 8006886:	415b      	adcs	r3, r3
 8006888:	65fb      	str	r3, [r7, #92]	; 0x5c
 800688a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800688e:	4621      	mov	r1, r4
 8006890:	eb12 0801 	adds.w	r8, r2, r1
 8006894:	4629      	mov	r1, r5
 8006896:	eb43 0901 	adc.w	r9, r3, r1
 800689a:	f04f 0200 	mov.w	r2, #0
 800689e:	f04f 0300 	mov.w	r3, #0
 80068a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80068a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80068aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80068ae:	4690      	mov	r8, r2
 80068b0:	4699      	mov	r9, r3
 80068b2:	4623      	mov	r3, r4
 80068b4:	eb18 0303 	adds.w	r3, r8, r3
 80068b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80068bc:	462b      	mov	r3, r5
 80068be:	eb49 0303 	adc.w	r3, r9, r3
 80068c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80068c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	2200      	movs	r2, #0
 80068ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80068d2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80068d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80068da:	460b      	mov	r3, r1
 80068dc:	18db      	adds	r3, r3, r3
 80068de:	653b      	str	r3, [r7, #80]	; 0x50
 80068e0:	4613      	mov	r3, r2
 80068e2:	eb42 0303 	adc.w	r3, r2, r3
 80068e6:	657b      	str	r3, [r7, #84]	; 0x54
 80068e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80068ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80068f0:	f7f9 fc92 	bl	8000218 <__aeabi_uldivmod>
 80068f4:	4602      	mov	r2, r0
 80068f6:	460b      	mov	r3, r1
 80068f8:	4b61      	ldr	r3, [pc, #388]	; (8006a80 <UART_SetConfig+0x2d4>)
 80068fa:	fba3 2302 	umull	r2, r3, r3, r2
 80068fe:	095b      	lsrs	r3, r3, #5
 8006900:	011c      	lsls	r4, r3, #4
 8006902:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006906:	2200      	movs	r2, #0
 8006908:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800690c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006910:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006914:	4642      	mov	r2, r8
 8006916:	464b      	mov	r3, r9
 8006918:	1891      	adds	r1, r2, r2
 800691a:	64b9      	str	r1, [r7, #72]	; 0x48
 800691c:	415b      	adcs	r3, r3
 800691e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006920:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006924:	4641      	mov	r1, r8
 8006926:	eb12 0a01 	adds.w	sl, r2, r1
 800692a:	4649      	mov	r1, r9
 800692c:	eb43 0b01 	adc.w	fp, r3, r1
 8006930:	f04f 0200 	mov.w	r2, #0
 8006934:	f04f 0300 	mov.w	r3, #0
 8006938:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800693c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006940:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006944:	4692      	mov	sl, r2
 8006946:	469b      	mov	fp, r3
 8006948:	4643      	mov	r3, r8
 800694a:	eb1a 0303 	adds.w	r3, sl, r3
 800694e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006952:	464b      	mov	r3, r9
 8006954:	eb4b 0303 	adc.w	r3, fp, r3
 8006958:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800695c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006968:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800696c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006970:	460b      	mov	r3, r1
 8006972:	18db      	adds	r3, r3, r3
 8006974:	643b      	str	r3, [r7, #64]	; 0x40
 8006976:	4613      	mov	r3, r2
 8006978:	eb42 0303 	adc.w	r3, r2, r3
 800697c:	647b      	str	r3, [r7, #68]	; 0x44
 800697e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006982:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006986:	f7f9 fc47 	bl	8000218 <__aeabi_uldivmod>
 800698a:	4602      	mov	r2, r0
 800698c:	460b      	mov	r3, r1
 800698e:	4611      	mov	r1, r2
 8006990:	4b3b      	ldr	r3, [pc, #236]	; (8006a80 <UART_SetConfig+0x2d4>)
 8006992:	fba3 2301 	umull	r2, r3, r3, r1
 8006996:	095b      	lsrs	r3, r3, #5
 8006998:	2264      	movs	r2, #100	; 0x64
 800699a:	fb02 f303 	mul.w	r3, r2, r3
 800699e:	1acb      	subs	r3, r1, r3
 80069a0:	00db      	lsls	r3, r3, #3
 80069a2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80069a6:	4b36      	ldr	r3, [pc, #216]	; (8006a80 <UART_SetConfig+0x2d4>)
 80069a8:	fba3 2302 	umull	r2, r3, r3, r2
 80069ac:	095b      	lsrs	r3, r3, #5
 80069ae:	005b      	lsls	r3, r3, #1
 80069b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80069b4:	441c      	add	r4, r3
 80069b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069ba:	2200      	movs	r2, #0
 80069bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80069c0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80069c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80069c8:	4642      	mov	r2, r8
 80069ca:	464b      	mov	r3, r9
 80069cc:	1891      	adds	r1, r2, r2
 80069ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80069d0:	415b      	adcs	r3, r3
 80069d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80069d8:	4641      	mov	r1, r8
 80069da:	1851      	adds	r1, r2, r1
 80069dc:	6339      	str	r1, [r7, #48]	; 0x30
 80069de:	4649      	mov	r1, r9
 80069e0:	414b      	adcs	r3, r1
 80069e2:	637b      	str	r3, [r7, #52]	; 0x34
 80069e4:	f04f 0200 	mov.w	r2, #0
 80069e8:	f04f 0300 	mov.w	r3, #0
 80069ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80069f0:	4659      	mov	r1, fp
 80069f2:	00cb      	lsls	r3, r1, #3
 80069f4:	4651      	mov	r1, sl
 80069f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069fa:	4651      	mov	r1, sl
 80069fc:	00ca      	lsls	r2, r1, #3
 80069fe:	4610      	mov	r0, r2
 8006a00:	4619      	mov	r1, r3
 8006a02:	4603      	mov	r3, r0
 8006a04:	4642      	mov	r2, r8
 8006a06:	189b      	adds	r3, r3, r2
 8006a08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a0c:	464b      	mov	r3, r9
 8006a0e:	460a      	mov	r2, r1
 8006a10:	eb42 0303 	adc.w	r3, r2, r3
 8006a14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006a24:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006a28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006a2c:	460b      	mov	r3, r1
 8006a2e:	18db      	adds	r3, r3, r3
 8006a30:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a32:	4613      	mov	r3, r2
 8006a34:	eb42 0303 	adc.w	r3, r2, r3
 8006a38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006a3e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006a42:	f7f9 fbe9 	bl	8000218 <__aeabi_uldivmod>
 8006a46:	4602      	mov	r2, r0
 8006a48:	460b      	mov	r3, r1
 8006a4a:	4b0d      	ldr	r3, [pc, #52]	; (8006a80 <UART_SetConfig+0x2d4>)
 8006a4c:	fba3 1302 	umull	r1, r3, r3, r2
 8006a50:	095b      	lsrs	r3, r3, #5
 8006a52:	2164      	movs	r1, #100	; 0x64
 8006a54:	fb01 f303 	mul.w	r3, r1, r3
 8006a58:	1ad3      	subs	r3, r2, r3
 8006a5a:	00db      	lsls	r3, r3, #3
 8006a5c:	3332      	adds	r3, #50	; 0x32
 8006a5e:	4a08      	ldr	r2, [pc, #32]	; (8006a80 <UART_SetConfig+0x2d4>)
 8006a60:	fba2 2303 	umull	r2, r3, r2, r3
 8006a64:	095b      	lsrs	r3, r3, #5
 8006a66:	f003 0207 	and.w	r2, r3, #7
 8006a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4422      	add	r2, r4
 8006a72:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006a74:	e105      	b.n	8006c82 <UART_SetConfig+0x4d6>
 8006a76:	bf00      	nop
 8006a78:	40011000 	.word	0x40011000
 8006a7c:	40011400 	.word	0x40011400
 8006a80:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006a8e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006a92:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006a96:	4642      	mov	r2, r8
 8006a98:	464b      	mov	r3, r9
 8006a9a:	1891      	adds	r1, r2, r2
 8006a9c:	6239      	str	r1, [r7, #32]
 8006a9e:	415b      	adcs	r3, r3
 8006aa0:	627b      	str	r3, [r7, #36]	; 0x24
 8006aa2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006aa6:	4641      	mov	r1, r8
 8006aa8:	1854      	adds	r4, r2, r1
 8006aaa:	4649      	mov	r1, r9
 8006aac:	eb43 0501 	adc.w	r5, r3, r1
 8006ab0:	f04f 0200 	mov.w	r2, #0
 8006ab4:	f04f 0300 	mov.w	r3, #0
 8006ab8:	00eb      	lsls	r3, r5, #3
 8006aba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006abe:	00e2      	lsls	r2, r4, #3
 8006ac0:	4614      	mov	r4, r2
 8006ac2:	461d      	mov	r5, r3
 8006ac4:	4643      	mov	r3, r8
 8006ac6:	18e3      	adds	r3, r4, r3
 8006ac8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006acc:	464b      	mov	r3, r9
 8006ace:	eb45 0303 	adc.w	r3, r5, r3
 8006ad2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	2200      	movs	r2, #0
 8006ade:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006ae2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006ae6:	f04f 0200 	mov.w	r2, #0
 8006aea:	f04f 0300 	mov.w	r3, #0
 8006aee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006af2:	4629      	mov	r1, r5
 8006af4:	008b      	lsls	r3, r1, #2
 8006af6:	4621      	mov	r1, r4
 8006af8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006afc:	4621      	mov	r1, r4
 8006afe:	008a      	lsls	r2, r1, #2
 8006b00:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006b04:	f7f9 fb88 	bl	8000218 <__aeabi_uldivmod>
 8006b08:	4602      	mov	r2, r0
 8006b0a:	460b      	mov	r3, r1
 8006b0c:	4b60      	ldr	r3, [pc, #384]	; (8006c90 <UART_SetConfig+0x4e4>)
 8006b0e:	fba3 2302 	umull	r2, r3, r3, r2
 8006b12:	095b      	lsrs	r3, r3, #5
 8006b14:	011c      	lsls	r4, r3, #4
 8006b16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006b20:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006b24:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006b28:	4642      	mov	r2, r8
 8006b2a:	464b      	mov	r3, r9
 8006b2c:	1891      	adds	r1, r2, r2
 8006b2e:	61b9      	str	r1, [r7, #24]
 8006b30:	415b      	adcs	r3, r3
 8006b32:	61fb      	str	r3, [r7, #28]
 8006b34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b38:	4641      	mov	r1, r8
 8006b3a:	1851      	adds	r1, r2, r1
 8006b3c:	6139      	str	r1, [r7, #16]
 8006b3e:	4649      	mov	r1, r9
 8006b40:	414b      	adcs	r3, r1
 8006b42:	617b      	str	r3, [r7, #20]
 8006b44:	f04f 0200 	mov.w	r2, #0
 8006b48:	f04f 0300 	mov.w	r3, #0
 8006b4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006b50:	4659      	mov	r1, fp
 8006b52:	00cb      	lsls	r3, r1, #3
 8006b54:	4651      	mov	r1, sl
 8006b56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b5a:	4651      	mov	r1, sl
 8006b5c:	00ca      	lsls	r2, r1, #3
 8006b5e:	4610      	mov	r0, r2
 8006b60:	4619      	mov	r1, r3
 8006b62:	4603      	mov	r3, r0
 8006b64:	4642      	mov	r2, r8
 8006b66:	189b      	adds	r3, r3, r2
 8006b68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006b6c:	464b      	mov	r3, r9
 8006b6e:	460a      	mov	r2, r1
 8006b70:	eb42 0303 	adc.w	r3, r2, r3
 8006b74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	67bb      	str	r3, [r7, #120]	; 0x78
 8006b82:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006b84:	f04f 0200 	mov.w	r2, #0
 8006b88:	f04f 0300 	mov.w	r3, #0
 8006b8c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006b90:	4649      	mov	r1, r9
 8006b92:	008b      	lsls	r3, r1, #2
 8006b94:	4641      	mov	r1, r8
 8006b96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b9a:	4641      	mov	r1, r8
 8006b9c:	008a      	lsls	r2, r1, #2
 8006b9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006ba2:	f7f9 fb39 	bl	8000218 <__aeabi_uldivmod>
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	460b      	mov	r3, r1
 8006baa:	4b39      	ldr	r3, [pc, #228]	; (8006c90 <UART_SetConfig+0x4e4>)
 8006bac:	fba3 1302 	umull	r1, r3, r3, r2
 8006bb0:	095b      	lsrs	r3, r3, #5
 8006bb2:	2164      	movs	r1, #100	; 0x64
 8006bb4:	fb01 f303 	mul.w	r3, r1, r3
 8006bb8:	1ad3      	subs	r3, r2, r3
 8006bba:	011b      	lsls	r3, r3, #4
 8006bbc:	3332      	adds	r3, #50	; 0x32
 8006bbe:	4a34      	ldr	r2, [pc, #208]	; (8006c90 <UART_SetConfig+0x4e4>)
 8006bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8006bc4:	095b      	lsrs	r3, r3, #5
 8006bc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006bca:	441c      	add	r4, r3
 8006bcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	673b      	str	r3, [r7, #112]	; 0x70
 8006bd4:	677a      	str	r2, [r7, #116]	; 0x74
 8006bd6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006bda:	4642      	mov	r2, r8
 8006bdc:	464b      	mov	r3, r9
 8006bde:	1891      	adds	r1, r2, r2
 8006be0:	60b9      	str	r1, [r7, #8]
 8006be2:	415b      	adcs	r3, r3
 8006be4:	60fb      	str	r3, [r7, #12]
 8006be6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006bea:	4641      	mov	r1, r8
 8006bec:	1851      	adds	r1, r2, r1
 8006bee:	6039      	str	r1, [r7, #0]
 8006bf0:	4649      	mov	r1, r9
 8006bf2:	414b      	adcs	r3, r1
 8006bf4:	607b      	str	r3, [r7, #4]
 8006bf6:	f04f 0200 	mov.w	r2, #0
 8006bfa:	f04f 0300 	mov.w	r3, #0
 8006bfe:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006c02:	4659      	mov	r1, fp
 8006c04:	00cb      	lsls	r3, r1, #3
 8006c06:	4651      	mov	r1, sl
 8006c08:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c0c:	4651      	mov	r1, sl
 8006c0e:	00ca      	lsls	r2, r1, #3
 8006c10:	4610      	mov	r0, r2
 8006c12:	4619      	mov	r1, r3
 8006c14:	4603      	mov	r3, r0
 8006c16:	4642      	mov	r2, r8
 8006c18:	189b      	adds	r3, r3, r2
 8006c1a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c1c:	464b      	mov	r3, r9
 8006c1e:	460a      	mov	r2, r1
 8006c20:	eb42 0303 	adc.w	r3, r2, r3
 8006c24:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	663b      	str	r3, [r7, #96]	; 0x60
 8006c30:	667a      	str	r2, [r7, #100]	; 0x64
 8006c32:	f04f 0200 	mov.w	r2, #0
 8006c36:	f04f 0300 	mov.w	r3, #0
 8006c3a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006c3e:	4649      	mov	r1, r9
 8006c40:	008b      	lsls	r3, r1, #2
 8006c42:	4641      	mov	r1, r8
 8006c44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c48:	4641      	mov	r1, r8
 8006c4a:	008a      	lsls	r2, r1, #2
 8006c4c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006c50:	f7f9 fae2 	bl	8000218 <__aeabi_uldivmod>
 8006c54:	4602      	mov	r2, r0
 8006c56:	460b      	mov	r3, r1
 8006c58:	4b0d      	ldr	r3, [pc, #52]	; (8006c90 <UART_SetConfig+0x4e4>)
 8006c5a:	fba3 1302 	umull	r1, r3, r3, r2
 8006c5e:	095b      	lsrs	r3, r3, #5
 8006c60:	2164      	movs	r1, #100	; 0x64
 8006c62:	fb01 f303 	mul.w	r3, r1, r3
 8006c66:	1ad3      	subs	r3, r2, r3
 8006c68:	011b      	lsls	r3, r3, #4
 8006c6a:	3332      	adds	r3, #50	; 0x32
 8006c6c:	4a08      	ldr	r2, [pc, #32]	; (8006c90 <UART_SetConfig+0x4e4>)
 8006c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c72:	095b      	lsrs	r3, r3, #5
 8006c74:	f003 020f 	and.w	r2, r3, #15
 8006c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4422      	add	r2, r4
 8006c80:	609a      	str	r2, [r3, #8]
}
 8006c82:	bf00      	nop
 8006c84:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c8e:	bf00      	nop
 8006c90:	51eb851f 	.word	0x51eb851f

08006c94 <__errno>:
 8006c94:	4b01      	ldr	r3, [pc, #4]	; (8006c9c <__errno+0x8>)
 8006c96:	6818      	ldr	r0, [r3, #0]
 8006c98:	4770      	bx	lr
 8006c9a:	bf00      	nop
 8006c9c:	2000004c 	.word	0x2000004c

08006ca0 <__libc_init_array>:
 8006ca0:	b570      	push	{r4, r5, r6, lr}
 8006ca2:	4d0d      	ldr	r5, [pc, #52]	; (8006cd8 <__libc_init_array+0x38>)
 8006ca4:	4c0d      	ldr	r4, [pc, #52]	; (8006cdc <__libc_init_array+0x3c>)
 8006ca6:	1b64      	subs	r4, r4, r5
 8006ca8:	10a4      	asrs	r4, r4, #2
 8006caa:	2600      	movs	r6, #0
 8006cac:	42a6      	cmp	r6, r4
 8006cae:	d109      	bne.n	8006cc4 <__libc_init_array+0x24>
 8006cb0:	4d0b      	ldr	r5, [pc, #44]	; (8006ce0 <__libc_init_array+0x40>)
 8006cb2:	4c0c      	ldr	r4, [pc, #48]	; (8006ce4 <__libc_init_array+0x44>)
 8006cb4:	f000 f998 	bl	8006fe8 <_init>
 8006cb8:	1b64      	subs	r4, r4, r5
 8006cba:	10a4      	asrs	r4, r4, #2
 8006cbc:	2600      	movs	r6, #0
 8006cbe:	42a6      	cmp	r6, r4
 8006cc0:	d105      	bne.n	8006cce <__libc_init_array+0x2e>
 8006cc2:	bd70      	pop	{r4, r5, r6, pc}
 8006cc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cc8:	4798      	blx	r3
 8006cca:	3601      	adds	r6, #1
 8006ccc:	e7ee      	b.n	8006cac <__libc_init_array+0xc>
 8006cce:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cd2:	4798      	blx	r3
 8006cd4:	3601      	adds	r6, #1
 8006cd6:	e7f2      	b.n	8006cbe <__libc_init_array+0x1e>
 8006cd8:	08009ab8 	.word	0x08009ab8
 8006cdc:	08009ab8 	.word	0x08009ab8
 8006ce0:	08009ab8 	.word	0x08009ab8
 8006ce4:	08009abc 	.word	0x08009abc

08006ce8 <__itoa>:
 8006ce8:	1e93      	subs	r3, r2, #2
 8006cea:	2b22      	cmp	r3, #34	; 0x22
 8006cec:	b510      	push	{r4, lr}
 8006cee:	460c      	mov	r4, r1
 8006cf0:	d904      	bls.n	8006cfc <__itoa+0x14>
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	700b      	strb	r3, [r1, #0]
 8006cf6:	461c      	mov	r4, r3
 8006cf8:	4620      	mov	r0, r4
 8006cfa:	bd10      	pop	{r4, pc}
 8006cfc:	2a0a      	cmp	r2, #10
 8006cfe:	d109      	bne.n	8006d14 <__itoa+0x2c>
 8006d00:	2800      	cmp	r0, #0
 8006d02:	da07      	bge.n	8006d14 <__itoa+0x2c>
 8006d04:	232d      	movs	r3, #45	; 0x2d
 8006d06:	700b      	strb	r3, [r1, #0]
 8006d08:	4240      	negs	r0, r0
 8006d0a:	2101      	movs	r1, #1
 8006d0c:	4421      	add	r1, r4
 8006d0e:	f000 f91d 	bl	8006f4c <__utoa>
 8006d12:	e7f1      	b.n	8006cf8 <__itoa+0x10>
 8006d14:	2100      	movs	r1, #0
 8006d16:	e7f9      	b.n	8006d0c <__itoa+0x24>

08006d18 <itoa>:
 8006d18:	f7ff bfe6 	b.w	8006ce8 <__itoa>

08006d1c <__retarget_lock_acquire_recursive>:
 8006d1c:	4770      	bx	lr

08006d1e <__retarget_lock_release_recursive>:
 8006d1e:	4770      	bx	lr

08006d20 <malloc>:
 8006d20:	4b02      	ldr	r3, [pc, #8]	; (8006d2c <malloc+0xc>)
 8006d22:	4601      	mov	r1, r0
 8006d24:	6818      	ldr	r0, [r3, #0]
 8006d26:	f000 b88d 	b.w	8006e44 <_malloc_r>
 8006d2a:	bf00      	nop
 8006d2c:	2000004c 	.word	0x2000004c

08006d30 <free>:
 8006d30:	4b02      	ldr	r3, [pc, #8]	; (8006d3c <free+0xc>)
 8006d32:	4601      	mov	r1, r0
 8006d34:	6818      	ldr	r0, [r3, #0]
 8006d36:	f000 b819 	b.w	8006d6c <_free_r>
 8006d3a:	bf00      	nop
 8006d3c:	2000004c 	.word	0x2000004c

08006d40 <memcpy>:
 8006d40:	440a      	add	r2, r1
 8006d42:	4291      	cmp	r1, r2
 8006d44:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006d48:	d100      	bne.n	8006d4c <memcpy+0xc>
 8006d4a:	4770      	bx	lr
 8006d4c:	b510      	push	{r4, lr}
 8006d4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d56:	4291      	cmp	r1, r2
 8006d58:	d1f9      	bne.n	8006d4e <memcpy+0xe>
 8006d5a:	bd10      	pop	{r4, pc}

08006d5c <memset>:
 8006d5c:	4402      	add	r2, r0
 8006d5e:	4603      	mov	r3, r0
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d100      	bne.n	8006d66 <memset+0xa>
 8006d64:	4770      	bx	lr
 8006d66:	f803 1b01 	strb.w	r1, [r3], #1
 8006d6a:	e7f9      	b.n	8006d60 <memset+0x4>

08006d6c <_free_r>:
 8006d6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d6e:	2900      	cmp	r1, #0
 8006d70:	d044      	beq.n	8006dfc <_free_r+0x90>
 8006d72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d76:	9001      	str	r0, [sp, #4]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	f1a1 0404 	sub.w	r4, r1, #4
 8006d7e:	bfb8      	it	lt
 8006d80:	18e4      	addlt	r4, r4, r3
 8006d82:	f000 f925 	bl	8006fd0 <__malloc_lock>
 8006d86:	4a1e      	ldr	r2, [pc, #120]	; (8006e00 <_free_r+0x94>)
 8006d88:	9801      	ldr	r0, [sp, #4]
 8006d8a:	6813      	ldr	r3, [r2, #0]
 8006d8c:	b933      	cbnz	r3, 8006d9c <_free_r+0x30>
 8006d8e:	6063      	str	r3, [r4, #4]
 8006d90:	6014      	str	r4, [r2, #0]
 8006d92:	b003      	add	sp, #12
 8006d94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d98:	f000 b920 	b.w	8006fdc <__malloc_unlock>
 8006d9c:	42a3      	cmp	r3, r4
 8006d9e:	d908      	bls.n	8006db2 <_free_r+0x46>
 8006da0:	6825      	ldr	r5, [r4, #0]
 8006da2:	1961      	adds	r1, r4, r5
 8006da4:	428b      	cmp	r3, r1
 8006da6:	bf01      	itttt	eq
 8006da8:	6819      	ldreq	r1, [r3, #0]
 8006daa:	685b      	ldreq	r3, [r3, #4]
 8006dac:	1949      	addeq	r1, r1, r5
 8006dae:	6021      	streq	r1, [r4, #0]
 8006db0:	e7ed      	b.n	8006d8e <_free_r+0x22>
 8006db2:	461a      	mov	r2, r3
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	b10b      	cbz	r3, 8006dbc <_free_r+0x50>
 8006db8:	42a3      	cmp	r3, r4
 8006dba:	d9fa      	bls.n	8006db2 <_free_r+0x46>
 8006dbc:	6811      	ldr	r1, [r2, #0]
 8006dbe:	1855      	adds	r5, r2, r1
 8006dc0:	42a5      	cmp	r5, r4
 8006dc2:	d10b      	bne.n	8006ddc <_free_r+0x70>
 8006dc4:	6824      	ldr	r4, [r4, #0]
 8006dc6:	4421      	add	r1, r4
 8006dc8:	1854      	adds	r4, r2, r1
 8006dca:	42a3      	cmp	r3, r4
 8006dcc:	6011      	str	r1, [r2, #0]
 8006dce:	d1e0      	bne.n	8006d92 <_free_r+0x26>
 8006dd0:	681c      	ldr	r4, [r3, #0]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	6053      	str	r3, [r2, #4]
 8006dd6:	4421      	add	r1, r4
 8006dd8:	6011      	str	r1, [r2, #0]
 8006dda:	e7da      	b.n	8006d92 <_free_r+0x26>
 8006ddc:	d902      	bls.n	8006de4 <_free_r+0x78>
 8006dde:	230c      	movs	r3, #12
 8006de0:	6003      	str	r3, [r0, #0]
 8006de2:	e7d6      	b.n	8006d92 <_free_r+0x26>
 8006de4:	6825      	ldr	r5, [r4, #0]
 8006de6:	1961      	adds	r1, r4, r5
 8006de8:	428b      	cmp	r3, r1
 8006dea:	bf04      	itt	eq
 8006dec:	6819      	ldreq	r1, [r3, #0]
 8006dee:	685b      	ldreq	r3, [r3, #4]
 8006df0:	6063      	str	r3, [r4, #4]
 8006df2:	bf04      	itt	eq
 8006df4:	1949      	addeq	r1, r1, r5
 8006df6:	6021      	streq	r1, [r4, #0]
 8006df8:	6054      	str	r4, [r2, #4]
 8006dfa:	e7ca      	b.n	8006d92 <_free_r+0x26>
 8006dfc:	b003      	add	sp, #12
 8006dfe:	bd30      	pop	{r4, r5, pc}
 8006e00:	2000168c 	.word	0x2000168c

08006e04 <sbrk_aligned>:
 8006e04:	b570      	push	{r4, r5, r6, lr}
 8006e06:	4e0e      	ldr	r6, [pc, #56]	; (8006e40 <sbrk_aligned+0x3c>)
 8006e08:	460c      	mov	r4, r1
 8006e0a:	6831      	ldr	r1, [r6, #0]
 8006e0c:	4605      	mov	r5, r0
 8006e0e:	b911      	cbnz	r1, 8006e16 <sbrk_aligned+0x12>
 8006e10:	f000 f88c 	bl	8006f2c <_sbrk_r>
 8006e14:	6030      	str	r0, [r6, #0]
 8006e16:	4621      	mov	r1, r4
 8006e18:	4628      	mov	r0, r5
 8006e1a:	f000 f887 	bl	8006f2c <_sbrk_r>
 8006e1e:	1c43      	adds	r3, r0, #1
 8006e20:	d00a      	beq.n	8006e38 <sbrk_aligned+0x34>
 8006e22:	1cc4      	adds	r4, r0, #3
 8006e24:	f024 0403 	bic.w	r4, r4, #3
 8006e28:	42a0      	cmp	r0, r4
 8006e2a:	d007      	beq.n	8006e3c <sbrk_aligned+0x38>
 8006e2c:	1a21      	subs	r1, r4, r0
 8006e2e:	4628      	mov	r0, r5
 8006e30:	f000 f87c 	bl	8006f2c <_sbrk_r>
 8006e34:	3001      	adds	r0, #1
 8006e36:	d101      	bne.n	8006e3c <sbrk_aligned+0x38>
 8006e38:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006e3c:	4620      	mov	r0, r4
 8006e3e:	bd70      	pop	{r4, r5, r6, pc}
 8006e40:	20001690 	.word	0x20001690

08006e44 <_malloc_r>:
 8006e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e48:	1ccd      	adds	r5, r1, #3
 8006e4a:	f025 0503 	bic.w	r5, r5, #3
 8006e4e:	3508      	adds	r5, #8
 8006e50:	2d0c      	cmp	r5, #12
 8006e52:	bf38      	it	cc
 8006e54:	250c      	movcc	r5, #12
 8006e56:	2d00      	cmp	r5, #0
 8006e58:	4607      	mov	r7, r0
 8006e5a:	db01      	blt.n	8006e60 <_malloc_r+0x1c>
 8006e5c:	42a9      	cmp	r1, r5
 8006e5e:	d905      	bls.n	8006e6c <_malloc_r+0x28>
 8006e60:	230c      	movs	r3, #12
 8006e62:	603b      	str	r3, [r7, #0]
 8006e64:	2600      	movs	r6, #0
 8006e66:	4630      	mov	r0, r6
 8006e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e6c:	4e2e      	ldr	r6, [pc, #184]	; (8006f28 <_malloc_r+0xe4>)
 8006e6e:	f000 f8af 	bl	8006fd0 <__malloc_lock>
 8006e72:	6833      	ldr	r3, [r6, #0]
 8006e74:	461c      	mov	r4, r3
 8006e76:	bb34      	cbnz	r4, 8006ec6 <_malloc_r+0x82>
 8006e78:	4629      	mov	r1, r5
 8006e7a:	4638      	mov	r0, r7
 8006e7c:	f7ff ffc2 	bl	8006e04 <sbrk_aligned>
 8006e80:	1c43      	adds	r3, r0, #1
 8006e82:	4604      	mov	r4, r0
 8006e84:	d14d      	bne.n	8006f22 <_malloc_r+0xde>
 8006e86:	6834      	ldr	r4, [r6, #0]
 8006e88:	4626      	mov	r6, r4
 8006e8a:	2e00      	cmp	r6, #0
 8006e8c:	d140      	bne.n	8006f10 <_malloc_r+0xcc>
 8006e8e:	6823      	ldr	r3, [r4, #0]
 8006e90:	4631      	mov	r1, r6
 8006e92:	4638      	mov	r0, r7
 8006e94:	eb04 0803 	add.w	r8, r4, r3
 8006e98:	f000 f848 	bl	8006f2c <_sbrk_r>
 8006e9c:	4580      	cmp	r8, r0
 8006e9e:	d13a      	bne.n	8006f16 <_malloc_r+0xd2>
 8006ea0:	6821      	ldr	r1, [r4, #0]
 8006ea2:	3503      	adds	r5, #3
 8006ea4:	1a6d      	subs	r5, r5, r1
 8006ea6:	f025 0503 	bic.w	r5, r5, #3
 8006eaa:	3508      	adds	r5, #8
 8006eac:	2d0c      	cmp	r5, #12
 8006eae:	bf38      	it	cc
 8006eb0:	250c      	movcc	r5, #12
 8006eb2:	4629      	mov	r1, r5
 8006eb4:	4638      	mov	r0, r7
 8006eb6:	f7ff ffa5 	bl	8006e04 <sbrk_aligned>
 8006eba:	3001      	adds	r0, #1
 8006ebc:	d02b      	beq.n	8006f16 <_malloc_r+0xd2>
 8006ebe:	6823      	ldr	r3, [r4, #0]
 8006ec0:	442b      	add	r3, r5
 8006ec2:	6023      	str	r3, [r4, #0]
 8006ec4:	e00e      	b.n	8006ee4 <_malloc_r+0xa0>
 8006ec6:	6822      	ldr	r2, [r4, #0]
 8006ec8:	1b52      	subs	r2, r2, r5
 8006eca:	d41e      	bmi.n	8006f0a <_malloc_r+0xc6>
 8006ecc:	2a0b      	cmp	r2, #11
 8006ece:	d916      	bls.n	8006efe <_malloc_r+0xba>
 8006ed0:	1961      	adds	r1, r4, r5
 8006ed2:	42a3      	cmp	r3, r4
 8006ed4:	6025      	str	r5, [r4, #0]
 8006ed6:	bf18      	it	ne
 8006ed8:	6059      	strne	r1, [r3, #4]
 8006eda:	6863      	ldr	r3, [r4, #4]
 8006edc:	bf08      	it	eq
 8006ede:	6031      	streq	r1, [r6, #0]
 8006ee0:	5162      	str	r2, [r4, r5]
 8006ee2:	604b      	str	r3, [r1, #4]
 8006ee4:	4638      	mov	r0, r7
 8006ee6:	f104 060b 	add.w	r6, r4, #11
 8006eea:	f000 f877 	bl	8006fdc <__malloc_unlock>
 8006eee:	f026 0607 	bic.w	r6, r6, #7
 8006ef2:	1d23      	adds	r3, r4, #4
 8006ef4:	1af2      	subs	r2, r6, r3
 8006ef6:	d0b6      	beq.n	8006e66 <_malloc_r+0x22>
 8006ef8:	1b9b      	subs	r3, r3, r6
 8006efa:	50a3      	str	r3, [r4, r2]
 8006efc:	e7b3      	b.n	8006e66 <_malloc_r+0x22>
 8006efe:	6862      	ldr	r2, [r4, #4]
 8006f00:	42a3      	cmp	r3, r4
 8006f02:	bf0c      	ite	eq
 8006f04:	6032      	streq	r2, [r6, #0]
 8006f06:	605a      	strne	r2, [r3, #4]
 8006f08:	e7ec      	b.n	8006ee4 <_malloc_r+0xa0>
 8006f0a:	4623      	mov	r3, r4
 8006f0c:	6864      	ldr	r4, [r4, #4]
 8006f0e:	e7b2      	b.n	8006e76 <_malloc_r+0x32>
 8006f10:	4634      	mov	r4, r6
 8006f12:	6876      	ldr	r6, [r6, #4]
 8006f14:	e7b9      	b.n	8006e8a <_malloc_r+0x46>
 8006f16:	230c      	movs	r3, #12
 8006f18:	603b      	str	r3, [r7, #0]
 8006f1a:	4638      	mov	r0, r7
 8006f1c:	f000 f85e 	bl	8006fdc <__malloc_unlock>
 8006f20:	e7a1      	b.n	8006e66 <_malloc_r+0x22>
 8006f22:	6025      	str	r5, [r4, #0]
 8006f24:	e7de      	b.n	8006ee4 <_malloc_r+0xa0>
 8006f26:	bf00      	nop
 8006f28:	2000168c 	.word	0x2000168c

08006f2c <_sbrk_r>:
 8006f2c:	b538      	push	{r3, r4, r5, lr}
 8006f2e:	4d06      	ldr	r5, [pc, #24]	; (8006f48 <_sbrk_r+0x1c>)
 8006f30:	2300      	movs	r3, #0
 8006f32:	4604      	mov	r4, r0
 8006f34:	4608      	mov	r0, r1
 8006f36:	602b      	str	r3, [r5, #0]
 8006f38:	f7fd fdda 	bl	8004af0 <_sbrk>
 8006f3c:	1c43      	adds	r3, r0, #1
 8006f3e:	d102      	bne.n	8006f46 <_sbrk_r+0x1a>
 8006f40:	682b      	ldr	r3, [r5, #0]
 8006f42:	b103      	cbz	r3, 8006f46 <_sbrk_r+0x1a>
 8006f44:	6023      	str	r3, [r4, #0]
 8006f46:	bd38      	pop	{r3, r4, r5, pc}
 8006f48:	20001694 	.word	0x20001694

08006f4c <__utoa>:
 8006f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f4e:	4c1f      	ldr	r4, [pc, #124]	; (8006fcc <__utoa+0x80>)
 8006f50:	b08b      	sub	sp, #44	; 0x2c
 8006f52:	4605      	mov	r5, r0
 8006f54:	460b      	mov	r3, r1
 8006f56:	466e      	mov	r6, sp
 8006f58:	f104 0c20 	add.w	ip, r4, #32
 8006f5c:	6820      	ldr	r0, [r4, #0]
 8006f5e:	6861      	ldr	r1, [r4, #4]
 8006f60:	4637      	mov	r7, r6
 8006f62:	c703      	stmia	r7!, {r0, r1}
 8006f64:	3408      	adds	r4, #8
 8006f66:	4564      	cmp	r4, ip
 8006f68:	463e      	mov	r6, r7
 8006f6a:	d1f7      	bne.n	8006f5c <__utoa+0x10>
 8006f6c:	7921      	ldrb	r1, [r4, #4]
 8006f6e:	7139      	strb	r1, [r7, #4]
 8006f70:	1e91      	subs	r1, r2, #2
 8006f72:	6820      	ldr	r0, [r4, #0]
 8006f74:	6038      	str	r0, [r7, #0]
 8006f76:	2922      	cmp	r1, #34	; 0x22
 8006f78:	f04f 0100 	mov.w	r1, #0
 8006f7c:	d904      	bls.n	8006f88 <__utoa+0x3c>
 8006f7e:	7019      	strb	r1, [r3, #0]
 8006f80:	460b      	mov	r3, r1
 8006f82:	4618      	mov	r0, r3
 8006f84:	b00b      	add	sp, #44	; 0x2c
 8006f86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f88:	1e58      	subs	r0, r3, #1
 8006f8a:	4684      	mov	ip, r0
 8006f8c:	fbb5 f7f2 	udiv	r7, r5, r2
 8006f90:	fb02 5617 	mls	r6, r2, r7, r5
 8006f94:	3628      	adds	r6, #40	; 0x28
 8006f96:	446e      	add	r6, sp
 8006f98:	460c      	mov	r4, r1
 8006f9a:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8006f9e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8006fa2:	462e      	mov	r6, r5
 8006fa4:	42b2      	cmp	r2, r6
 8006fa6:	f101 0101 	add.w	r1, r1, #1
 8006faa:	463d      	mov	r5, r7
 8006fac:	d9ee      	bls.n	8006f8c <__utoa+0x40>
 8006fae:	2200      	movs	r2, #0
 8006fb0:	545a      	strb	r2, [r3, r1]
 8006fb2:	1919      	adds	r1, r3, r4
 8006fb4:	1aa5      	subs	r5, r4, r2
 8006fb6:	42aa      	cmp	r2, r5
 8006fb8:	dae3      	bge.n	8006f82 <__utoa+0x36>
 8006fba:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8006fbe:	780e      	ldrb	r6, [r1, #0]
 8006fc0:	7006      	strb	r6, [r0, #0]
 8006fc2:	3201      	adds	r2, #1
 8006fc4:	f801 5901 	strb.w	r5, [r1], #-1
 8006fc8:	e7f4      	b.n	8006fb4 <__utoa+0x68>
 8006fca:	bf00      	nop
 8006fcc:	08009a28 	.word	0x08009a28

08006fd0 <__malloc_lock>:
 8006fd0:	4801      	ldr	r0, [pc, #4]	; (8006fd8 <__malloc_lock+0x8>)
 8006fd2:	f7ff bea3 	b.w	8006d1c <__retarget_lock_acquire_recursive>
 8006fd6:	bf00      	nop
 8006fd8:	20001688 	.word	0x20001688

08006fdc <__malloc_unlock>:
 8006fdc:	4801      	ldr	r0, [pc, #4]	; (8006fe4 <__malloc_unlock+0x8>)
 8006fde:	f7ff be9e 	b.w	8006d1e <__retarget_lock_release_recursive>
 8006fe2:	bf00      	nop
 8006fe4:	20001688 	.word	0x20001688

08006fe8 <_init>:
 8006fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fea:	bf00      	nop
 8006fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fee:	bc08      	pop	{r3}
 8006ff0:	469e      	mov	lr, r3
 8006ff2:	4770      	bx	lr

08006ff4 <_fini>:
 8006ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ff6:	bf00      	nop
 8006ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ffa:	bc08      	pop	{r3}
 8006ffc:	469e      	mov	lr, r3
 8006ffe:	4770      	bx	lr
