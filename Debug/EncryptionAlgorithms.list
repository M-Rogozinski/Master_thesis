
EncryptionAlgorithms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007118  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001518  080072dc  080072dc  000172dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080087f4  080087f4  000200b0  2**0
                  CONTENTS
  4 .ARM          00000008  080087f4  080087f4  000187f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080087fc  080087fc  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080087fc  080087fc  000187fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008800  08008800  00018800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  08008804  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a4  200000b0  080088b4  000200b0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000554  080088b4  00020554  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018f2b  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003858  00000000  00000000  0003900b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001240  00000000  00000000  0003c868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010c0  00000000  00000000  0003daa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022f0c  00000000  00000000  0003eb68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000186ee  00000000  00000000  00061a74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000da41d  00000000  00000000  0007a162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015457f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004da4  00000000  00000000  001545d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	200000b0 	.word	0x200000b0
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080072c4 	.word	0x080072c4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	200000b4 	.word	0x200000b4
 8000200:	080072c4 	.word	0x080072c4

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <EcTest>:
uint8_t sig[4096];

size_t sigLen;

void EcTest(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
	RngInit();
 800050c:	f000 f856 	bl	80005bc <RngInit>

	EcInit();
 8000510:	f000 f804 	bl	800051c <EcInit>

	EcDSA();
 8000514:	f000 f828 	bl	8000568 <EcDSA>
}
 8000518:	bf00      	nop
 800051a:	bd80      	pop	{r7, pc}

0800051c <EcInit>:

void EcInit(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af02      	add	r7, sp, #8
	ecInitDomainParameters(&ecParams);
 8000522:	480a      	ldr	r0, [pc, #40]	; (800054c <EcInit+0x30>)
 8000524:	f000 f85a 	bl	80005dc <ecInitDomainParameters>
	ecLoadDomainParameters(&ecParams, &secp112r1Curve);
 8000528:	4909      	ldr	r1, [pc, #36]	; (8000550 <EcInit+0x34>)
 800052a:	4808      	ldr	r0, [pc, #32]	; (800054c <EcInit+0x30>)
 800052c:	f000 f880 	bl	8000630 <ecLoadDomainParameters>

	ecGenerateKeyPair(&yarrowPrngAlgo, &contextYarrow, &ecParams, &ecPrivateKeys, &ecPublicKeys);
 8000530:	4b08      	ldr	r3, [pc, #32]	; (8000554 <EcInit+0x38>)
 8000532:	9300      	str	r3, [sp, #0]
 8000534:	4b08      	ldr	r3, [pc, #32]	; (8000558 <EcInit+0x3c>)
 8000536:	4a05      	ldr	r2, [pc, #20]	; (800054c <EcInit+0x30>)
 8000538:	4908      	ldr	r1, [pc, #32]	; (800055c <EcInit+0x40>)
 800053a:	4809      	ldr	r0, [pc, #36]	; (8000560 <EcInit+0x44>)
 800053c:	f000 f91a 	bl	8000774 <ecGenerateKeyPair>

	ecdsaInitSignature(&ecdsaSig);
 8000540:	4808      	ldr	r0, [pc, #32]	; (8000564 <EcInit+0x48>)
 8000542:	f001 feba 	bl	80022ba <ecdsaInitSignature>
}
 8000546:	bf00      	nop
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	20000434 	.word	0x20000434
 8000550:	08007330 	.word	0x08007330
 8000554:	20000410 	.word	0x20000410
 8000558:	20000400 	.word	0x20000400
 800055c:	200000d0 	.word	0x200000d0
 8000560:	08008778 	.word	0x08008778
 8000564:	20000498 	.word	0x20000498

08000568 <EcDSA>:

void EcDSA(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b084      	sub	sp, #16
 800056c:	af04      	add	r7, sp, #16
	ecdsaGenerateSignature(&yarrowPrngAlgo, &contextYarrow, &ecParams, &ecPrivateKeys, input, 2048, &ecdsaSig);
 800056e:	4b0c      	ldr	r3, [pc, #48]	; (80005a0 <EcDSA+0x38>)
 8000570:	9302      	str	r3, [sp, #8]
 8000572:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000576:	9301      	str	r3, [sp, #4]
 8000578:	4b0a      	ldr	r3, [pc, #40]	; (80005a4 <EcDSA+0x3c>)
 800057a:	9300      	str	r3, [sp, #0]
 800057c:	4b0a      	ldr	r3, [pc, #40]	; (80005a8 <EcDSA+0x40>)
 800057e:	4a0b      	ldr	r2, [pc, #44]	; (80005ac <EcDSA+0x44>)
 8000580:	490b      	ldr	r1, [pc, #44]	; (80005b0 <EcDSA+0x48>)
 8000582:	480c      	ldr	r0, [pc, #48]	; (80005b4 <EcDSA+0x4c>)
 8000584:	f001 feaa 	bl	80022dc <ecdsaGenerateSignature>

	ecdsaVerifySignature(&ecParams, &ecPublicKeys, input, 2048, &ecdsaSig);
 8000588:	4b05      	ldr	r3, [pc, #20]	; (80005a0 <EcDSA+0x38>)
 800058a:	9300      	str	r3, [sp, #0]
 800058c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000590:	4a04      	ldr	r2, [pc, #16]	; (80005a4 <EcDSA+0x3c>)
 8000592:	4909      	ldr	r1, [pc, #36]	; (80005b8 <EcDSA+0x50>)
 8000594:	4805      	ldr	r0, [pc, #20]	; (80005ac <EcDSA+0x44>)
 8000596:	f001 ffc5 	bl	8002524 <ecdsaVerifySignature>
}
 800059a:	bf00      	nop
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	20000498 	.word	0x20000498
 80005a4:	08007f60 	.word	0x08007f60
 80005a8:	20000400 	.word	0x20000400
 80005ac:	20000434 	.word	0x20000434
 80005b0:	200000d0 	.word	0x200000d0
 80005b4:	08008778 	.word	0x08008778
 80005b8:	20000410 	.word	0x20000410

080005bc <RngInit>:

	mpiImport(&rsaPublicKeys[3].n, n4, sizeof(n4), MPI_FORMAT_BIG_ENDIAN);
	mpiImport(&rsaPublicKeys[3].e, e, sizeof(e), MPI_FORMAT_BIG_ENDIAN);
}
void RngInit(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
	yarrowInit(&contextYarrow);
 80005c0:	4804      	ldr	r0, [pc, #16]	; (80005d4 <RngInit+0x18>)
 80005c2:	f004 fd57 	bl	8005074 <yarrowInit>
	yarrowSeed(&contextYarrow, seed, sizeof(seed));
 80005c6:	2240      	movs	r2, #64	; 0x40
 80005c8:	4903      	ldr	r1, [pc, #12]	; (80005d8 <RngInit+0x1c>)
 80005ca:	4802      	ldr	r0, [pc, #8]	; (80005d4 <RngInit+0x18>)
 80005cc:	f004 fd77 	bl	80050be <yarrowSeed>
}
 80005d0:	bf00      	nop
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	200000d0 	.word	0x200000d0
 80005d8:	20000000 	.word	0x20000000

080005dc <ecInitDomainParameters>:
 * @brief Initialize EC domain parameters
 * @param[in] params Pointer to the EC domain parameters to initialize
 **/

void ecInitDomainParameters(EcDomainParameters *params)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
   //Initialize structure
   params->name = NULL;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
   params->type = EC_CURVE_TYPE_NONE;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	2200      	movs	r2, #0
 80005ee:	711a      	strb	r2, [r3, #4]
   params->mod = NULL;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	2200      	movs	r2, #0
 80005f4:	661a      	str	r2, [r3, #96]	; 0x60

   //Initialize EC domain parameters
   mpiInit(&params->p);
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	3308      	adds	r3, #8
 80005fa:	4618      	mov	r0, r3
 80005fc:	f002 f901 	bl	8002802 <mpiInit>
   mpiInit(&params->a);
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	3314      	adds	r3, #20
 8000604:	4618      	mov	r0, r3
 8000606:	f002 f8fc 	bl	8002802 <mpiInit>
   mpiInit(&params->b);
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	3320      	adds	r3, #32
 800060e:	4618      	mov	r0, r3
 8000610:	f002 f8f7 	bl	8002802 <mpiInit>
   ecInit(&params->g);
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	332c      	adds	r3, #44	; 0x2c
 8000618:	4618      	mov	r0, r3
 800061a:	f000 f91b 	bl	8000854 <ecInit>
   mpiInit(&params->q);
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	3350      	adds	r3, #80	; 0x50
 8000622:	4618      	mov	r0, r3
 8000624:	f002 f8ed 	bl	8002802 <mpiInit>
}
 8000628:	bf00      	nop
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}

08000630 <ecLoadDomainParameters>:
 * @return Error code
 **/

error_t ecLoadDomainParameters(EcDomainParameters *params,
   const EcCurveInfo *curveInfo)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
 8000638:	6039      	str	r1, [r7, #0]
   error_t error;

   //Check parameters
   if(params == NULL || curveInfo == NULL)
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d002      	beq.n	8000646 <ecLoadDomainParameters+0x16>
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d101      	bne.n	800064a <ecLoadDomainParameters+0x1a>
      return ERROR_INVALID_PARAMETER;
 8000646:	2302      	movs	r3, #2
 8000648:	e090      	b.n	800076c <ecLoadDomainParameters+0x13c>

   //Debug message
   TRACE_DEBUG("Loading %s EC domain parameters...\r\n", curveInfo->name);

   //Curve name
   params->name = curveInfo->name;
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	681a      	ldr	r2, [r3, #0]
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	601a      	str	r2, [r3, #0]
   //Curve type
   params->type = curveInfo->type;
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	7b1a      	ldrb	r2, [r3, #12]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	711a      	strb	r2, [r3, #4]

   //Import prime modulus
   MPI_CHECK(mpiReadRaw(&params->p, curveInfo->p, curveInfo->pLen));
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	f103 0008 	add.w	r0, r3, #8
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	f103 010d 	add.w	r1, r3, #13
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800066a:	2301      	movs	r3, #1
 800066c:	f002 fbf2 	bl	8002e54 <mpiImport>
 8000670:	4603      	mov	r3, r0
 8000672:	81fb      	strh	r3, [r7, #14]
 8000674:	89fb      	ldrh	r3, [r7, #14]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d16a      	bne.n	8000750 <ecLoadDomainParameters+0x120>
   //Import parameter a
   MPI_CHECK(mpiReadRaw(&params->a, curveInfo->a, curveInfo->aLen));
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	f103 0014 	add.w	r0, r3, #20
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800068c:	2301      	movs	r3, #1
 800068e:	f002 fbe1 	bl	8002e54 <mpiImport>
 8000692:	4603      	mov	r3, r0
 8000694:	81fb      	strh	r3, [r7, #14]
 8000696:	89fb      	ldrh	r3, [r7, #14]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d15b      	bne.n	8000754 <ecLoadDomainParameters+0x124>
   //Import parameter b
   MPI_CHECK(mpiReadRaw(&params->b, curveInfo->b, curveInfo->bLen));
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	f103 0020 	add.w	r0, r3, #32
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	f103 019c 	add.w	r1, r3, #156	; 0x9c
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80006ae:	2301      	movs	r3, #1
 80006b0:	f002 fbd0 	bl	8002e54 <mpiImport>
 80006b4:	4603      	mov	r3, r0
 80006b6:	81fb      	strh	r3, [r7, #14]
 80006b8:	89fb      	ldrh	r3, [r7, #14]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d14c      	bne.n	8000758 <ecLoadDomainParameters+0x128>
   //Import the x-coordinate of the base point G
   MPI_CHECK(mpiReadRaw(&params->g.x, curveInfo->gx, curveInfo->gxLen));
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	f103 01e4 	add.w	r1, r3, #228	; 0xe4
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
 80006d0:	2301      	movs	r3, #1
 80006d2:	f002 fbbf 	bl	8002e54 <mpiImport>
 80006d6:	4603      	mov	r3, r0
 80006d8:	81fb      	strh	r3, [r7, #14]
 80006da:	89fb      	ldrh	r3, [r7, #14]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d13d      	bne.n	800075c <ecLoadDomainParameters+0x12c>
   //Import the y-coordinate of the base point G
   MPI_CHECK(mpiReadRaw(&params->g.y, curveInfo->gy, curveInfo->gyLen));
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	f503 7196 	add.w	r1, r3, #300	; 0x12c
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
 80006f2:	2301      	movs	r3, #1
 80006f4:	f002 fbae 	bl	8002e54 <mpiImport>
 80006f8:	4603      	mov	r3, r0
 80006fa:	81fb      	strh	r3, [r7, #14]
 80006fc:	89fb      	ldrh	r3, [r7, #14]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d12e      	bne.n	8000760 <ecLoadDomainParameters+0x130>
   //Import base point order q
   MPI_CHECK(mpiReadRaw(&params->q, curveInfo->q, curveInfo->qLen));
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	f103 0050 	add.w	r0, r3, #80	; 0x50
 8000708:	683b      	ldr	r3, [r7, #0]
 800070a:	f503 71ba 	add.w	r1, r3, #372	; 0x174
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	f8d3 21b8 	ldr.w	r2, [r3, #440]	; 0x1b8
 8000714:	2301      	movs	r3, #1
 8000716:	f002 fb9d 	bl	8002e54 <mpiImport>
 800071a:	4603      	mov	r3, r0
 800071c:	81fb      	strh	r3, [r7, #14]
 800071e:	89fb      	ldrh	r3, [r7, #14]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d11f      	bne.n	8000764 <ecLoadDomainParameters+0x134>

   //Normalize base point G
   MPI_CHECK(mpiSetValue(&params->g.z, 1));
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	3344      	adds	r3, #68	; 0x44
 8000728:	2101      	movs	r1, #1
 800072a:	4618      	mov	r0, r3
 800072c:	f002 fab3 	bl	8002c96 <mpiSetValue>
 8000730:	4603      	mov	r3, r0
 8000732:	81fb      	strh	r3, [r7, #14]
 8000734:	89fb      	ldrh	r3, [r7, #14]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d116      	bne.n	8000768 <ecLoadDomainParameters+0x138>

   //Cofactor h
   params->h = curveInfo->h;
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	65da      	str	r2, [r3, #92]	; 0x5c
   //Fast modular reduction
   params->mod = curveInfo->mod;
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	f8d3 21c0 	ldr.w	r2, [r3, #448]	; 0x1c0
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	661a      	str	r2, [r3, #96]	; 0x60
 800074e:	e00c      	b.n	800076a <ecLoadDomainParameters+0x13a>
   MPI_CHECK(mpiReadRaw(&params->p, curveInfo->p, curveInfo->pLen));
 8000750:	bf00      	nop
 8000752:	e00a      	b.n	800076a <ecLoadDomainParameters+0x13a>
   MPI_CHECK(mpiReadRaw(&params->a, curveInfo->a, curveInfo->aLen));
 8000754:	bf00      	nop
 8000756:	e008      	b.n	800076a <ecLoadDomainParameters+0x13a>
   MPI_CHECK(mpiReadRaw(&params->b, curveInfo->b, curveInfo->bLen));
 8000758:	bf00      	nop
 800075a:	e006      	b.n	800076a <ecLoadDomainParameters+0x13a>
   MPI_CHECK(mpiReadRaw(&params->g.x, curveInfo->gx, curveInfo->gxLen));
 800075c:	bf00      	nop
 800075e:	e004      	b.n	800076a <ecLoadDomainParameters+0x13a>
   MPI_CHECK(mpiReadRaw(&params->g.y, curveInfo->gy, curveInfo->gyLen));
 8000760:	bf00      	nop
 8000762:	e002      	b.n	800076a <ecLoadDomainParameters+0x13a>
   MPI_CHECK(mpiReadRaw(&params->q, curveInfo->q, curveInfo->qLen));
 8000764:	bf00      	nop
 8000766:	e000      	b.n	800076a <ecLoadDomainParameters+0x13a>
   MPI_CHECK(mpiSetValue(&params->g.z, 1));
 8000768:	bf00      	nop
   TRACE_DEBUG("  q:\r\n");
   TRACE_DEBUG_MPI("    ", &params->q);

end:
   //Return status code
   return error;
 800076a:	89fb      	ldrh	r3, [r7, #14]
}
 800076c:	4618      	mov	r0, r3
 800076e:	3710      	adds	r7, #16
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <ecGenerateKeyPair>:
 **/

__weak_func error_t ecGenerateKeyPair(const PrngAlgo *prngAlgo, void *prngContext,
   const EcDomainParameters *params, EcPrivateKey *privateKey,
   EcPublicKey *publicKey)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b086      	sub	sp, #24
 8000778:	af00      	add	r7, sp, #0
 800077a:	60f8      	str	r0, [r7, #12]
 800077c:	60b9      	str	r1, [r7, #8]
 800077e:	607a      	str	r2, [r7, #4]
 8000780:	603b      	str	r3, [r7, #0]
   error_t error;

   //Generate a private key
   error = ecGeneratePrivateKey(prngAlgo, prngContext, params, privateKey);
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	687a      	ldr	r2, [r7, #4]
 8000786:	68b9      	ldr	r1, [r7, #8]
 8000788:	68f8      	ldr	r0, [r7, #12]
 800078a:	f000 f811 	bl	80007b0 <ecGeneratePrivateKey>
 800078e:	4603      	mov	r3, r0
 8000790:	82fb      	strh	r3, [r7, #22]

   //Check status code
   if(!error)
 8000792:	8afb      	ldrh	r3, [r7, #22]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d106      	bne.n	80007a6 <ecGenerateKeyPair+0x32>
   {
      //Derive the public key from the private key
      error = ecGeneratePublicKey(params, privateKey, publicKey);
 8000798:	6a3a      	ldr	r2, [r7, #32]
 800079a:	6839      	ldr	r1, [r7, #0]
 800079c:	6878      	ldr	r0, [r7, #4]
 800079e:	f000 f82b 	bl	80007f8 <ecGeneratePublicKey>
 80007a2:	4603      	mov	r3, r0
 80007a4:	82fb      	strh	r3, [r7, #22]
   }

   //Return status code
   return error;
 80007a6:	8afb      	ldrh	r3, [r7, #22]
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3718      	adds	r7, #24
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <ecGeneratePrivateKey>:
 * @return Error code
 **/

error_t ecGeneratePrivateKey(const PrngAlgo *prngAlgo, void *prngContext,
   const EcDomainParameters *params, EcPrivateKey *privateKey)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b086      	sub	sp, #24
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	60f8      	str	r0, [r7, #12]
 80007b8:	60b9      	str	r1, [r7, #8]
 80007ba:	607a      	str	r2, [r7, #4]
 80007bc:	603b      	str	r3, [r7, #0]
   error_t error;

   //Check parameters
   if(prngAlgo == NULL || prngContext == NULL || params == NULL ||
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d008      	beq.n	80007d6 <ecGeneratePrivateKey+0x26>
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d005      	beq.n	80007d6 <ecGeneratePrivateKey+0x26>
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d002      	beq.n	80007d6 <ecGeneratePrivateKey+0x26>
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d101      	bne.n	80007da <ecGeneratePrivateKey+0x2a>
      privateKey == NULL)
   {
      return ERROR_INVALID_PARAMETER;
 80007d6:	2302      	movs	r3, #2
 80007d8:	e00a      	b.n	80007f0 <ecGeneratePrivateKey+0x40>
   }

   //Generate a random number d such as 0 < d < q - 1
   error = mpiRandRange(&privateKey->d, &params->q, prngAlgo, prngContext);
 80007da:	6838      	ldr	r0, [r7, #0]
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	f103 0150 	add.w	r1, r3, #80	; 0x50
 80007e2:	68bb      	ldr	r3, [r7, #8]
 80007e4:	68fa      	ldr	r2, [r7, #12]
 80007e6:	f002 fade 	bl	8002da6 <mpiRandRange>
 80007ea:	4603      	mov	r3, r0
 80007ec:	82fb      	strh	r3, [r7, #22]
      TRACE_DEBUG("  Private key:\r\n");
      TRACE_DEBUG_MPI("    ", &privateKey->d);
   }

   //Return status code
   return error;
 80007ee:	8afb      	ldrh	r3, [r7, #22]
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	3718      	adds	r7, #24
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <ecGeneratePublicKey>:
 * @return Error code
 **/

error_t ecGeneratePublicKey(const EcDomainParameters *params,
   const EcPrivateKey *privateKey, EcPublicKey *publicKey)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b086      	sub	sp, #24
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	60f8      	str	r0, [r7, #12]
 8000800:	60b9      	str	r1, [r7, #8]
 8000802:	607a      	str	r2, [r7, #4]
   error_t error;

   //Check parameters
   if(params == NULL || privateKey == NULL || publicKey == NULL)
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d005      	beq.n	8000816 <ecGeneratePublicKey+0x1e>
 800080a:	68bb      	ldr	r3, [r7, #8]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d002      	beq.n	8000816 <ecGeneratePublicKey+0x1e>
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d101      	bne.n	800081a <ecGeneratePublicKey+0x22>
      return ERROR_INVALID_PARAMETER;
 8000816:	2302      	movs	r3, #2
 8000818:	e018      	b.n	800084c <ecGeneratePublicKey+0x54>

   //Compute Q = d.G
   EC_CHECK(ecMult(params, &publicKey->q, &privateKey->d, &params->g));
 800081a:	6879      	ldr	r1, [r7, #4]
 800081c:	68ba      	ldr	r2, [r7, #8]
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	332c      	adds	r3, #44	; 0x2c
 8000822:	68f8      	ldr	r0, [r7, #12]
 8000824:	f001 f8dd 	bl	80019e2 <ecMult>
 8000828:	4603      	mov	r3, r0
 800082a:	82fb      	strh	r3, [r7, #22]
 800082c:	8afb      	ldrh	r3, [r7, #22]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d10a      	bne.n	8000848 <ecGeneratePublicKey+0x50>

   //Convert the public key to affine representation
   EC_CHECK(ecAffinify(params, &publicKey->q, &publicKey->q));
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	687a      	ldr	r2, [r7, #4]
 8000836:	4619      	mov	r1, r3
 8000838:	68f8      	ldr	r0, [r7, #12]
 800083a:	f000 f891 	bl	8000960 <ecAffinify>
 800083e:	4603      	mov	r3, r0
 8000840:	82fb      	strh	r3, [r7, #22]
 8000842:	8afb      	ldrh	r3, [r7, #22]
 8000844:	2b00      	cmp	r3, #0
   TRACE_DEBUG("  Public key X:\r\n");
   TRACE_DEBUG_MPI("    ", &publicKey->q.x);
   TRACE_DEBUG("  Public key Y:\r\n");
   TRACE_DEBUG_MPI("    ", &publicKey->q.y);

end:
 8000846:	e000      	b.n	800084a <ecGeneratePublicKey+0x52>
   EC_CHECK(ecMult(params, &publicKey->q, &privateKey->d, &params->g));
 8000848:	bf00      	nop
   //Return status code
   return error;
 800084a:	8afb      	ldrh	r3, [r7, #22]
}
 800084c:	4618      	mov	r0, r3
 800084e:	3718      	adds	r7, #24
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}

08000854 <ecInit>:
 * @brief Initialize elliptic curve point
 * @param[in,out] r Pointer to the EC point to be initialized
 **/

void ecInit(EcPoint *r)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
   //Initialize structure
   mpiInit(&r->x);
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	4618      	mov	r0, r3
 8000860:	f001 ffcf 	bl	8002802 <mpiInit>
   mpiInit(&r->y);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	330c      	adds	r3, #12
 8000868:	4618      	mov	r0, r3
 800086a:	f001 ffca 	bl	8002802 <mpiInit>
   mpiInit(&r->z);
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	3318      	adds	r3, #24
 8000872:	4618      	mov	r0, r3
 8000874:	f001 ffc5 	bl	8002802 <mpiInit>
}
 8000878:	bf00      	nop
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}

08000880 <ecFree>:
 * @brief Release an elliptic curve point
 * @param[in,out] r Pointer to the EC point to initialize to free
 **/

void ecFree(EcPoint *r)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
   //Release previously allocated resources
   mpiFree(&r->x);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	4618      	mov	r0, r3
 800088c:	f001 ffcc 	bl	8002828 <mpiFree>
   mpiFree(&r->y);
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	330c      	adds	r3, #12
 8000894:	4618      	mov	r0, r3
 8000896:	f001 ffc7 	bl	8002828 <mpiFree>
   mpiFree(&r->z);
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	3318      	adds	r3, #24
 800089e:	4618      	mov	r0, r3
 80008a0:	f001 ffc2 	bl	8002828 <mpiFree>
}
 80008a4:	bf00      	nop
 80008a6:	3708      	adds	r7, #8
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}

080008ac <ecCopy>:
 * @param[in] s Source EC point
 * @return Error code
 **/

error_t ecCopy(EcPoint *r, const EcPoint *s)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
 80008b4:	6039      	str	r1, [r7, #0]
   error_t error;

   //R and S are the same instance?
   if(r == s)
 80008b6:	687a      	ldr	r2, [r7, #4]
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	429a      	cmp	r2, r3
 80008bc:	d101      	bne.n	80008c2 <ecCopy+0x16>
      return NO_ERROR;
 80008be:	2300      	movs	r3, #0
 80008c0:	e02a      	b.n	8000918 <ecCopy+0x6c>

   //Copy coordinates
   MPI_CHECK(mpiCopy(&r->x, &s->x));
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	683a      	ldr	r2, [r7, #0]
 80008c6:	4611      	mov	r1, r2
 80008c8:	4618      	mov	r0, r3
 80008ca:	f002 f9af 	bl	8002c2c <mpiCopy>
 80008ce:	4603      	mov	r3, r0
 80008d0:	81fb      	strh	r3, [r7, #14]
 80008d2:	89fb      	ldrh	r3, [r7, #14]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d11b      	bne.n	8000910 <ecCopy+0x64>
   MPI_CHECK(mpiCopy(&r->y, &s->y));
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	f103 020c 	add.w	r2, r3, #12
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	330c      	adds	r3, #12
 80008e2:	4619      	mov	r1, r3
 80008e4:	4610      	mov	r0, r2
 80008e6:	f002 f9a1 	bl	8002c2c <mpiCopy>
 80008ea:	4603      	mov	r3, r0
 80008ec:	81fb      	strh	r3, [r7, #14]
 80008ee:	89fb      	ldrh	r3, [r7, #14]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d10f      	bne.n	8000914 <ecCopy+0x68>
   MPI_CHECK(mpiCopy(&r->z, &s->z));
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	f103 0218 	add.w	r2, r3, #24
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	3318      	adds	r3, #24
 80008fe:	4619      	mov	r1, r3
 8000900:	4610      	mov	r0, r2
 8000902:	f002 f993 	bl	8002c2c <mpiCopy>
 8000906:	4603      	mov	r3, r0
 8000908:	81fb      	strh	r3, [r7, #14]
 800090a:	89fb      	ldrh	r3, [r7, #14]
 800090c:	2b00      	cmp	r3, #0

end:
 800090e:	e002      	b.n	8000916 <ecCopy+0x6a>
   MPI_CHECK(mpiCopy(&r->x, &s->x));
 8000910:	bf00      	nop
 8000912:	e000      	b.n	8000916 <ecCopy+0x6a>
   MPI_CHECK(mpiCopy(&r->y, &s->y));
 8000914:	bf00      	nop
   //Return status code
   return error;
 8000916:	89fb      	ldrh	r3, [r7, #14]
}
 8000918:	4618      	mov	r0, r3
 800091a:	3710      	adds	r7, #16
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}

08000920 <ecProjectify>:
 * @return Error code
 **/

error_t ecProjectify(const EcDomainParameters *params, EcPoint *r,
   const EcPoint *s)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b086      	sub	sp, #24
 8000924:	af00      	add	r7, sp, #0
 8000926:	60f8      	str	r0, [r7, #12]
 8000928:	60b9      	str	r1, [r7, #8]
 800092a:	607a      	str	r2, [r7, #4]
   error_t error;

   //Copy point
   EC_CHECK(ecCopy(r, s));
 800092c:	6879      	ldr	r1, [r7, #4]
 800092e:	68b8      	ldr	r0, [r7, #8]
 8000930:	f7ff ffbc 	bl	80008ac <ecCopy>
 8000934:	4603      	mov	r3, r0
 8000936:	82fb      	strh	r3, [r7, #22]
 8000938:	8afb      	ldrh	r3, [r7, #22]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d10a      	bne.n	8000954 <ecProjectify+0x34>
   //Map the point to projective space
   MPI_CHECK(mpiSetValue(&r->z, 1));
 800093e:	68bb      	ldr	r3, [r7, #8]
 8000940:	3318      	adds	r3, #24
 8000942:	2101      	movs	r1, #1
 8000944:	4618      	mov	r0, r3
 8000946:	f002 f9a6 	bl	8002c96 <mpiSetValue>
 800094a:	4603      	mov	r3, r0
 800094c:	82fb      	strh	r3, [r7, #22]
 800094e:	8afb      	ldrh	r3, [r7, #22]
 8000950:	2b00      	cmp	r3, #0

end:
 8000952:	e000      	b.n	8000956 <ecProjectify+0x36>
   EC_CHECK(ecCopy(r, s));
 8000954:	bf00      	nop
   //Return status code
   return error;
 8000956:	8afb      	ldrh	r3, [r7, #22]
}
 8000958:	4618      	mov	r0, r3
 800095a:	3718      	adds	r7, #24
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}

08000960 <ecAffinify>:
 * @return Error code
 **/

__weak_func error_t ecAffinify(const EcDomainParameters *params, EcPoint *r,
   const EcPoint *s)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b08c      	sub	sp, #48	; 0x30
 8000964:	af00      	add	r7, sp, #0
 8000966:	60f8      	str	r0, [r7, #12]
 8000968:	60b9      	str	r1, [r7, #8]
 800096a:	607a      	str	r2, [r7, #4]
   error_t error;
   Mpi a;
   Mpi b;

   //Point at the infinity?
   if(mpiCompInt(&s->z, 0) == 0)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	3318      	adds	r3, #24
 8000970:	2100      	movs	r1, #0
 8000972:	4618      	mov	r0, r3
 8000974:	f002 f8eb 	bl	8002b4e <mpiCompInt>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d101      	bne.n	8000982 <ecAffinify+0x22>
      return ERROR_INVALID_PARAMETER;
 800097e:	2302      	movs	r3, #2
 8000980:	e06e      	b.n	8000a60 <ecAffinify+0x100>

   //Initialize multiple precision integers
   mpiInit(&a);
 8000982:	f107 0320 	add.w	r3, r7, #32
 8000986:	4618      	mov	r0, r3
 8000988:	f001 ff3b 	bl	8002802 <mpiInit>
   mpiInit(&b);
 800098c:	f107 0314 	add.w	r3, r7, #20
 8000990:	4618      	mov	r0, r3
 8000992:	f001 ff36 	bl	8002802 <mpiInit>

   //Compute a = 1/Sz mod p
   MPI_CHECK(mpiInvMod(&a, &s->z, &params->p));
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	f103 0118 	add.w	r1, r3, #24
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	f103 0208 	add.w	r2, r3, #8
 80009a2:	f107 0320 	add.w	r3, r7, #32
 80009a6:	4618      	mov	r0, r3
 80009a8:	f003 f88c 	bl	8003ac4 <mpiInvMod>
 80009ac:	4603      	mov	r3, r0
 80009ae:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80009b0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d140      	bne.n	8000a38 <ecAffinify+0xd8>

   //Set Rx = a^2 * Sx mod p
   EC_CHECK(ecSqrMod(params, &b, &a));
 80009b6:	f107 0220 	add.w	r2, r7, #32
 80009ba:	f107 0314 	add.w	r3, r7, #20
 80009be:	4619      	mov	r1, r3
 80009c0:	68f8      	ldr	r0, [r7, #12]
 80009c2:	f001 fc48 	bl	8002256 <ecSqrMod>
 80009c6:	4603      	mov	r3, r0
 80009c8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80009ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d135      	bne.n	8000a3c <ecAffinify+0xdc>
   EC_CHECK(ecMulMod(params, &r->x, &b, &s->x));
 80009d0:	68b9      	ldr	r1, [r7, #8]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	f107 0214 	add.w	r2, r7, #20
 80009d8:	68f8      	ldr	r0, [r7, #12]
 80009da:	f001 fc09 	bl	80021f0 <ecMulMod>
 80009de:	4603      	mov	r3, r0
 80009e0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80009e2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d12b      	bne.n	8000a40 <ecAffinify+0xe0>

   //Set Ry = a^3 * Sy mod p
   EC_CHECK(ecMulMod(params, &b, &b, &a));
 80009e8:	f107 0320 	add.w	r3, r7, #32
 80009ec:	f107 0214 	add.w	r2, r7, #20
 80009f0:	f107 0114 	add.w	r1, r7, #20
 80009f4:	68f8      	ldr	r0, [r7, #12]
 80009f6:	f001 fbfb 	bl	80021f0 <ecMulMod>
 80009fa:	4603      	mov	r3, r0
 80009fc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80009fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d11f      	bne.n	8000a44 <ecAffinify+0xe4>
   EC_CHECK(ecMulMod(params, &r->y, &b, &s->y));
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	f103 010c 	add.w	r1, r3, #12
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	330c      	adds	r3, #12
 8000a0e:	f107 0214 	add.w	r2, r7, #20
 8000a12:	68f8      	ldr	r0, [r7, #12]
 8000a14:	f001 fbec 	bl	80021f0 <ecMulMod>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8000a1c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d112      	bne.n	8000a48 <ecAffinify+0xe8>

   //Set Rz = 1
   MPI_CHECK(mpiSetValue(&r->z, 1));
 8000a22:	68bb      	ldr	r3, [r7, #8]
 8000a24:	3318      	adds	r3, #24
 8000a26:	2101      	movs	r1, #1
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f002 f934 	bl	8002c96 <mpiSetValue>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8000a32:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000a34:	2b00      	cmp	r3, #0

end:
 8000a36:	e008      	b.n	8000a4a <ecAffinify+0xea>
   MPI_CHECK(mpiInvMod(&a, &s->z, &params->p));
 8000a38:	bf00      	nop
 8000a3a:	e006      	b.n	8000a4a <ecAffinify+0xea>
   EC_CHECK(ecSqrMod(params, &b, &a));
 8000a3c:	bf00      	nop
 8000a3e:	e004      	b.n	8000a4a <ecAffinify+0xea>
   EC_CHECK(ecMulMod(params, &r->x, &b, &s->x));
 8000a40:	bf00      	nop
 8000a42:	e002      	b.n	8000a4a <ecAffinify+0xea>
   EC_CHECK(ecMulMod(params, &b, &b, &a));
 8000a44:	bf00      	nop
 8000a46:	e000      	b.n	8000a4a <ecAffinify+0xea>
   EC_CHECK(ecMulMod(params, &r->y, &b, &s->y));
 8000a48:	bf00      	nop
   //Release multiple precision integers
   mpiFree(&a);
 8000a4a:	f107 0320 	add.w	r3, r7, #32
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f001 feea 	bl	8002828 <mpiFree>
   mpiFree(&b);
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f001 fee5 	bl	8002828 <mpiFree>

   //Return status code
   return error;
 8000a5e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3730      	adds	r7, #48	; 0x30
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}

08000a68 <ecDouble>:
 * @return Error code
 **/

error_t ecDouble(const EcDomainParameters *params, EcPoint *r,
   const EcPoint *s)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b094      	sub	sp, #80	; 0x50
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60f8      	str	r0, [r7, #12]
 8000a70:	60b9      	str	r1, [r7, #8]
 8000a72:	607a      	str	r2, [r7, #4]
   Mpi t3;
   Mpi t4;
   Mpi t5;

   //Initialize multiple precision integers
   mpiInit(&t1);
 8000a74:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f001 fec2 	bl	8002802 <mpiInit>
   mpiInit(&t2);
 8000a7e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a82:	4618      	mov	r0, r3
 8000a84:	f001 febd 	bl	8002802 <mpiInit>
   mpiInit(&t3);
 8000a88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f001 feb8 	bl	8002802 <mpiInit>
   mpiInit(&t4);
 8000a92:	f107 031c 	add.w	r3, r7, #28
 8000a96:	4618      	mov	r0, r3
 8000a98:	f001 feb3 	bl	8002802 <mpiInit>
   mpiInit(&t5);
 8000a9c:	f107 0310 	add.w	r3, r7, #16
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f001 feae 	bl	8002802 <mpiInit>

   //Set t1 = Sx
   MPI_CHECK(mpiCopy(&t1, &s->x));
 8000aa6:	687a      	ldr	r2, [r7, #4]
 8000aa8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000aac:	4611      	mov	r1, r2
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f002 f8bc 	bl	8002c2c <mpiCopy>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8000aba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	f040 829e 	bne.w	8001000 <ecDouble+0x598>
   //Set t2 = Sy
   MPI_CHECK(mpiCopy(&t2, &s->y));
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	f103 020c 	add.w	r2, r3, #12
 8000aca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ace:	4611      	mov	r1, r2
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f002 f8ab 	bl	8002c2c <mpiCopy>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8000adc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	f040 828f 	bne.w	8001004 <ecDouble+0x59c>
   //Set t3 = Sz
   MPI_CHECK(mpiCopy(&t3, &s->z));
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	f103 0218 	add.w	r2, r3, #24
 8000aec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000af0:	4611      	mov	r1, r2
 8000af2:	4618      	mov	r0, r3
 8000af4:	f002 f89a 	bl	8002c2c <mpiCopy>
 8000af8:	4603      	mov	r3, r0
 8000afa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8000afe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	f040 8280 	bne.w	8001008 <ecDouble+0x5a0>

   //Point at the infinity?
   if(mpiCompInt(&t3, 0) == 0)
 8000b08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f002 f81d 	bl	8002b4e <mpiCompInt>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d127      	bne.n	8000b6a <ecDouble+0x102>
   {
      //Set R = (1, 1, 0)
      MPI_CHECK(mpiSetValue(&r->x, 1));
 8000b1a:	68bb      	ldr	r3, [r7, #8]
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f002 f8b9 	bl	8002c96 <mpiSetValue>
 8000b24:	4603      	mov	r3, r0
 8000b26:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8000b2a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	f040 826c 	bne.w	800100c <ecDouble+0x5a4>
      MPI_CHECK(mpiSetValue(&r->y, 1));
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	330c      	adds	r3, #12
 8000b38:	2101      	movs	r1, #1
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f002 f8ab 	bl	8002c96 <mpiSetValue>
 8000b40:	4603      	mov	r3, r0
 8000b42:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8000b46:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	f040 8260 	bne.w	8001010 <ecDouble+0x5a8>
      MPI_CHECK(mpiSetValue(&r->z, 0));
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	3318      	adds	r3, #24
 8000b54:	2100      	movs	r1, #0
 8000b56:	4618      	mov	r0, r3
 8000b58:	f002 f89d 	bl	8002c96 <mpiSetValue>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8000b62:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	e293      	b.n	8001092 <ecDouble+0x62a>
   }
   else
   {
      //SECP K1 elliptic curve?
      if(params->type == EC_CURVE_TYPE_SECP_K1)
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	791b      	ldrb	r3, [r3, #4]
 8000b6e:	2b04      	cmp	r3, #4
 8000b70:	d132      	bne.n	8000bd8 <ecDouble+0x170>
      {
         //Compute t5 = t1^2
         EC_CHECK(ecSqrMod(params, &t5, &t1));
 8000b72:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000b76:	f107 0310 	add.w	r3, r7, #16
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	68f8      	ldr	r0, [r7, #12]
 8000b7e:	f001 fb6a 	bl	8002256 <ecSqrMod>
 8000b82:	4603      	mov	r3, r0
 8000b84:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8000b88:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	f040 8241 	bne.w	8001014 <ecDouble+0x5ac>
         //Compute t4 = 3 * t5
         EC_CHECK(ecAddMod(params, &t4, &t5, &t5));
 8000b92:	f107 0310 	add.w	r3, r7, #16
 8000b96:	f107 0210 	add.w	r2, r7, #16
 8000b9a:	f107 011c 	add.w	r1, r7, #28
 8000b9e:	68f8      	ldr	r0, [r7, #12]
 8000ba0:	f001 facc 	bl	800213c <ecAddMod>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8000baa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	f040 8232 	bne.w	8001018 <ecDouble+0x5b0>
         EC_CHECK(ecAddMod(params, &t4, &t4, &t5));
 8000bb4:	f107 0310 	add.w	r3, r7, #16
 8000bb8:	f107 021c 	add.w	r2, r7, #28
 8000bbc:	f107 011c 	add.w	r1, r7, #28
 8000bc0:	68f8      	ldr	r0, [r7, #12]
 8000bc2:	f001 fabb 	bl	800213c <ecAddMod>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8000bcc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	f000 80de 	beq.w	8000d92 <ecDouble+0x32a>
 8000bd6:	e25c      	b.n	8001092 <ecDouble+0x62a>
      }
      //SECP R1 elliptic curve?
      else if(params->type == EC_CURVE_TYPE_SECP_R1)
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	791b      	ldrb	r3, [r3, #4]
 8000bdc:	2b05      	cmp	r3, #5
 8000bde:	d164      	bne.n	8000caa <ecDouble+0x242>
      {
         //Compute t4 = t3^2
         EC_CHECK(ecSqrMod(params, &t4, &t3));
 8000be0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000be4:	f107 031c 	add.w	r3, r7, #28
 8000be8:	4619      	mov	r1, r3
 8000bea:	68f8      	ldr	r0, [r7, #12]
 8000bec:	f001 fb33 	bl	8002256 <ecSqrMod>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8000bf6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	f040 820e 	bne.w	800101c <ecDouble+0x5b4>
         //Compute t5 = t1 - t4
         EC_CHECK(ecSubMod(params, &t5, &t1, &t4));
 8000c00:	f107 031c 	add.w	r3, r7, #28
 8000c04:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000c08:	f107 0110 	add.w	r1, r7, #16
 8000c0c:	68f8      	ldr	r0, [r7, #12]
 8000c0e:	f001 fac3 	bl	8002198 <ecSubMod>
 8000c12:	4603      	mov	r3, r0
 8000c14:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8000c18:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	f040 81ff 	bne.w	8001020 <ecDouble+0x5b8>
         //Compute t4 = t1 + t4
         EC_CHECK(ecAddMod(params, &t4, &t1, &t4));
 8000c22:	f107 031c 	add.w	r3, r7, #28
 8000c26:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000c2a:	f107 011c 	add.w	r1, r7, #28
 8000c2e:	68f8      	ldr	r0, [r7, #12]
 8000c30:	f001 fa84 	bl	800213c <ecAddMod>
 8000c34:	4603      	mov	r3, r0
 8000c36:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8000c3a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	f040 81f0 	bne.w	8001024 <ecDouble+0x5bc>
         //Compute t5 = t4 * t5
         EC_CHECK(ecMulMod(params, &t5, &t4, &t5));
 8000c44:	f107 0310 	add.w	r3, r7, #16
 8000c48:	f107 021c 	add.w	r2, r7, #28
 8000c4c:	f107 0110 	add.w	r1, r7, #16
 8000c50:	68f8      	ldr	r0, [r7, #12]
 8000c52:	f001 facd 	bl	80021f0 <ecMulMod>
 8000c56:	4603      	mov	r3, r0
 8000c58:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8000c5c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	f040 81e1 	bne.w	8001028 <ecDouble+0x5c0>
         //Compute t4 = 3 * t5
         EC_CHECK(ecAddMod(params, &t4, &t5, &t5));
 8000c66:	f107 0310 	add.w	r3, r7, #16
 8000c6a:	f107 0210 	add.w	r2, r7, #16
 8000c6e:	f107 011c 	add.w	r1, r7, #28
 8000c72:	68f8      	ldr	r0, [r7, #12]
 8000c74:	f001 fa62 	bl	800213c <ecAddMod>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8000c7e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 81d2 	bne.w	800102c <ecDouble+0x5c4>
         EC_CHECK(ecAddMod(params, &t4, &t4, &t5));
 8000c88:	f107 0310 	add.w	r3, r7, #16
 8000c8c:	f107 021c 	add.w	r2, r7, #28
 8000c90:	f107 011c 	add.w	r1, r7, #28
 8000c94:	68f8      	ldr	r0, [r7, #12]
 8000c96:	f001 fa51 	bl	800213c <ecAddMod>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8000ca0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d074      	beq.n	8000d92 <ecDouble+0x32a>
 8000ca8:	e1f3      	b.n	8001092 <ecDouble+0x62a>
      }
      else
      {
         //Compute t4 = t3^4
         EC_CHECK(ecSqrMod(params, &t4, &t3));
 8000caa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000cae:	f107 031c 	add.w	r3, r7, #28
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	68f8      	ldr	r0, [r7, #12]
 8000cb6:	f001 face 	bl	8002256 <ecSqrMod>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8000cc0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	f040 81b3 	bne.w	8001030 <ecDouble+0x5c8>
         EC_CHECK(ecSqrMod(params, &t4, &t4));
 8000cca:	f107 021c 	add.w	r2, r7, #28
 8000cce:	f107 031c 	add.w	r3, r7, #28
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	68f8      	ldr	r0, [r7, #12]
 8000cd6:	f001 fabe 	bl	8002256 <ecSqrMod>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8000ce0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	f040 81a5 	bne.w	8001034 <ecDouble+0x5cc>
         //Compute t4 = a * t4
         EC_CHECK(ecMulMod(params, &t4, &t4, &params->a));
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	3314      	adds	r3, #20
 8000cee:	f107 021c 	add.w	r2, r7, #28
 8000cf2:	f107 011c 	add.w	r1, r7, #28
 8000cf6:	68f8      	ldr	r0, [r7, #12]
 8000cf8:	f001 fa7a 	bl	80021f0 <ecMulMod>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8000d02:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	f040 8196 	bne.w	8001038 <ecDouble+0x5d0>
         //Compute t5 = t1^2
         EC_CHECK(ecSqrMod(params, &t5, &t1));
 8000d0c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000d10:	f107 0310 	add.w	r3, r7, #16
 8000d14:	4619      	mov	r1, r3
 8000d16:	68f8      	ldr	r0, [r7, #12]
 8000d18:	f001 fa9d 	bl	8002256 <ecSqrMod>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8000d22:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	f040 8188 	bne.w	800103c <ecDouble+0x5d4>
         //Compute t4 = t4 + 3 * t5
         EC_CHECK(ecAddMod(params, &t4, &t4, &t5));
 8000d2c:	f107 0310 	add.w	r3, r7, #16
 8000d30:	f107 021c 	add.w	r2, r7, #28
 8000d34:	f107 011c 	add.w	r1, r7, #28
 8000d38:	68f8      	ldr	r0, [r7, #12]
 8000d3a:	f001 f9ff 	bl	800213c <ecAddMod>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8000d44:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	f040 8179 	bne.w	8001040 <ecDouble+0x5d8>
         EC_CHECK(ecAddMod(params, &t4, &t4, &t5));
 8000d4e:	f107 0310 	add.w	r3, r7, #16
 8000d52:	f107 021c 	add.w	r2, r7, #28
 8000d56:	f107 011c 	add.w	r1, r7, #28
 8000d5a:	68f8      	ldr	r0, [r7, #12]
 8000d5c:	f001 f9ee 	bl	800213c <ecAddMod>
 8000d60:	4603      	mov	r3, r0
 8000d62:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8000d66:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	f040 816a 	bne.w	8001044 <ecDouble+0x5dc>
         EC_CHECK(ecAddMod(params, &t4, &t4, &t5));
 8000d70:	f107 0310 	add.w	r3, r7, #16
 8000d74:	f107 021c 	add.w	r2, r7, #28
 8000d78:	f107 011c 	add.w	r1, r7, #28
 8000d7c:	68f8      	ldr	r0, [r7, #12]
 8000d7e:	f001 f9dd 	bl	800213c <ecAddMod>
 8000d82:	4603      	mov	r3, r0
 8000d84:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8000d88:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	f040 815b 	bne.w	8001048 <ecDouble+0x5e0>
      }

      //Compute t3 = t3 * t2
      EC_CHECK(ecMulMod(params, &t3, &t3, &t2));
 8000d92:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d96:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000d9a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000d9e:	68f8      	ldr	r0, [r7, #12]
 8000da0:	f001 fa26 	bl	80021f0 <ecMulMod>
 8000da4:	4603      	mov	r3, r0
 8000da6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8000daa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	f040 814c 	bne.w	800104c <ecDouble+0x5e4>
      //Compute t3 = 2 * t3
      EC_CHECK(ecAddMod(params, &t3, &t3, &t3));
 8000db4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000db8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000dbc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000dc0:	68f8      	ldr	r0, [r7, #12]
 8000dc2:	f001 f9bb 	bl	800213c <ecAddMod>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8000dcc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	f040 813d 	bne.w	8001050 <ecDouble+0x5e8>
      //Compute t2 = t2^2
      EC_CHECK(ecSqrMod(params, &t2, &t2));
 8000dd6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000dda:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000dde:	4619      	mov	r1, r3
 8000de0:	68f8      	ldr	r0, [r7, #12]
 8000de2:	f001 fa38 	bl	8002256 <ecSqrMod>
 8000de6:	4603      	mov	r3, r0
 8000de8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8000dec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	f040 812f 	bne.w	8001054 <ecDouble+0x5ec>
      //Compute t5 = t1 * t2
      EC_CHECK(ecMulMod(params, &t5, &t1, &t2));
 8000df6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000dfa:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000dfe:	f107 0110 	add.w	r1, r7, #16
 8000e02:	68f8      	ldr	r0, [r7, #12]
 8000e04:	f001 f9f4 	bl	80021f0 <ecMulMod>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8000e0e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	f040 8120 	bne.w	8001058 <ecDouble+0x5f0>
      //Compute t5 = 4 * t5
      EC_CHECK(ecAddMod(params, &t5, &t5, &t5));
 8000e18:	f107 0310 	add.w	r3, r7, #16
 8000e1c:	f107 0210 	add.w	r2, r7, #16
 8000e20:	f107 0110 	add.w	r1, r7, #16
 8000e24:	68f8      	ldr	r0, [r7, #12]
 8000e26:	f001 f989 	bl	800213c <ecAddMod>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8000e30:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	f040 8111 	bne.w	800105c <ecDouble+0x5f4>
      EC_CHECK(ecAddMod(params, &t5, &t5, &t5));
 8000e3a:	f107 0310 	add.w	r3, r7, #16
 8000e3e:	f107 0210 	add.w	r2, r7, #16
 8000e42:	f107 0110 	add.w	r1, r7, #16
 8000e46:	68f8      	ldr	r0, [r7, #12]
 8000e48:	f001 f978 	bl	800213c <ecAddMod>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8000e52:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	f040 8102 	bne.w	8001060 <ecDouble+0x5f8>
      //Compute t1 = t4^2
      EC_CHECK(ecSqrMod(params, &t1, &t4));
 8000e5c:	f107 021c 	add.w	r2, r7, #28
 8000e60:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e64:	4619      	mov	r1, r3
 8000e66:	68f8      	ldr	r0, [r7, #12]
 8000e68:	f001 f9f5 	bl	8002256 <ecSqrMod>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8000e72:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	f040 80f4 	bne.w	8001064 <ecDouble+0x5fc>
      //Compute t1 = t1 - 2 * t5
      EC_CHECK(ecSubMod(params, &t1, &t1, &t5));
 8000e7c:	f107 0310 	add.w	r3, r7, #16
 8000e80:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000e84:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000e88:	68f8      	ldr	r0, [r7, #12]
 8000e8a:	f001 f985 	bl	8002198 <ecSubMod>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8000e94:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	f040 80e5 	bne.w	8001068 <ecDouble+0x600>
      EC_CHECK(ecSubMod(params, &t1, &t1, &t5));
 8000e9e:	f107 0310 	add.w	r3, r7, #16
 8000ea2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000ea6:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000eaa:	68f8      	ldr	r0, [r7, #12]
 8000eac:	f001 f974 	bl	8002198 <ecSubMod>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8000eb6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	f040 80d6 	bne.w	800106c <ecDouble+0x604>
      //Compute t2 = t2^2
      EC_CHECK(ecSqrMod(params, &t2, &t2));
 8000ec0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000ec4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ec8:	4619      	mov	r1, r3
 8000eca:	68f8      	ldr	r0, [r7, #12]
 8000ecc:	f001 f9c3 	bl	8002256 <ecSqrMod>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8000ed6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	f040 80c8 	bne.w	8001070 <ecDouble+0x608>
      //Compute t2 = 8 * t2
      EC_CHECK(ecAddMod(params, &t2, &t2, &t2));
 8000ee0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ee4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000ee8:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000eec:	68f8      	ldr	r0, [r7, #12]
 8000eee:	f001 f925 	bl	800213c <ecAddMod>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8000ef8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	f040 80b9 	bne.w	8001074 <ecDouble+0x60c>
      EC_CHECK(ecAddMod(params, &t2, &t2, &t2));
 8000f02:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f06:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000f0a:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000f0e:	68f8      	ldr	r0, [r7, #12]
 8000f10:	f001 f914 	bl	800213c <ecAddMod>
 8000f14:	4603      	mov	r3, r0
 8000f16:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8000f1a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	f040 80aa 	bne.w	8001078 <ecDouble+0x610>
      EC_CHECK(ecAddMod(params, &t2, &t2, &t2));
 8000f24:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f28:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000f2c:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000f30:	68f8      	ldr	r0, [r7, #12]
 8000f32:	f001 f903 	bl	800213c <ecAddMod>
 8000f36:	4603      	mov	r3, r0
 8000f38:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8000f3c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	f040 809b 	bne.w	800107c <ecDouble+0x614>
      //Compute t5 = t5 - t1
      EC_CHECK(ecSubMod(params, &t5, &t5, &t1));
 8000f46:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f4a:	f107 0210 	add.w	r2, r7, #16
 8000f4e:	f107 0110 	add.w	r1, r7, #16
 8000f52:	68f8      	ldr	r0, [r7, #12]
 8000f54:	f001 f920 	bl	8002198 <ecSubMod>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8000f5e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	f040 808c 	bne.w	8001080 <ecDouble+0x618>
      //Compute t5 = t4 * t5
      EC_CHECK(ecMulMod(params, &t5, &t4, &t5));
 8000f68:	f107 0310 	add.w	r3, r7, #16
 8000f6c:	f107 021c 	add.w	r2, r7, #28
 8000f70:	f107 0110 	add.w	r1, r7, #16
 8000f74:	68f8      	ldr	r0, [r7, #12]
 8000f76:	f001 f93b 	bl	80021f0 <ecMulMod>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8000f80:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d17d      	bne.n	8001084 <ecDouble+0x61c>
      //Compute t2 = t5 - t2
      EC_CHECK(ecSubMod(params, &t2, &t5, &t2));
 8000f88:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f8c:	f107 0210 	add.w	r2, r7, #16
 8000f90:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000f94:	68f8      	ldr	r0, [r7, #12]
 8000f96:	f001 f8ff 	bl	8002198 <ecSubMod>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8000fa0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d16f      	bne.n	8001088 <ecDouble+0x620>

      //Set Rx = t1
      MPI_CHECK(mpiCopy(&r->x, &t1));
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000fae:	4611      	mov	r1, r2
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f001 fe3b 	bl	8002c2c <mpiCopy>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8000fbc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d163      	bne.n	800108c <ecDouble+0x624>
      //Set Ry = t2
      MPI_CHECK(mpiCopy(&r->y, &t2));
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	330c      	adds	r3, #12
 8000fc8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000fcc:	4611      	mov	r1, r2
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f001 fe2c 	bl	8002c2c <mpiCopy>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8000fda:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d156      	bne.n	8001090 <ecDouble+0x628>
      //Set Rz = t3
      MPI_CHECK(mpiCopy(&r->z, &t3));
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	3318      	adds	r3, #24
 8000fe6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000fea:	4611      	mov	r1, r2
 8000fec:	4618      	mov	r0, r3
 8000fee:	f001 fe1d 	bl	8002c2c <mpiCopy>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8000ff8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000ffc:	2b00      	cmp	r3, #0
   }

end:
 8000ffe:	e048      	b.n	8001092 <ecDouble+0x62a>
   MPI_CHECK(mpiCopy(&t1, &s->x));
 8001000:	bf00      	nop
 8001002:	e046      	b.n	8001092 <ecDouble+0x62a>
   MPI_CHECK(mpiCopy(&t2, &s->y));
 8001004:	bf00      	nop
 8001006:	e044      	b.n	8001092 <ecDouble+0x62a>
   MPI_CHECK(mpiCopy(&t3, &s->z));
 8001008:	bf00      	nop
 800100a:	e042      	b.n	8001092 <ecDouble+0x62a>
      MPI_CHECK(mpiSetValue(&r->x, 1));
 800100c:	bf00      	nop
 800100e:	e040      	b.n	8001092 <ecDouble+0x62a>
      MPI_CHECK(mpiSetValue(&r->y, 1));
 8001010:	bf00      	nop
 8001012:	e03e      	b.n	8001092 <ecDouble+0x62a>
         EC_CHECK(ecSqrMod(params, &t5, &t1));
 8001014:	bf00      	nop
 8001016:	e03c      	b.n	8001092 <ecDouble+0x62a>
         EC_CHECK(ecAddMod(params, &t4, &t5, &t5));
 8001018:	bf00      	nop
 800101a:	e03a      	b.n	8001092 <ecDouble+0x62a>
         EC_CHECK(ecSqrMod(params, &t4, &t3));
 800101c:	bf00      	nop
 800101e:	e038      	b.n	8001092 <ecDouble+0x62a>
         EC_CHECK(ecSubMod(params, &t5, &t1, &t4));
 8001020:	bf00      	nop
 8001022:	e036      	b.n	8001092 <ecDouble+0x62a>
         EC_CHECK(ecAddMod(params, &t4, &t1, &t4));
 8001024:	bf00      	nop
 8001026:	e034      	b.n	8001092 <ecDouble+0x62a>
         EC_CHECK(ecMulMod(params, &t5, &t4, &t5));
 8001028:	bf00      	nop
 800102a:	e032      	b.n	8001092 <ecDouble+0x62a>
         EC_CHECK(ecAddMod(params, &t4, &t5, &t5));
 800102c:	bf00      	nop
 800102e:	e030      	b.n	8001092 <ecDouble+0x62a>
         EC_CHECK(ecSqrMod(params, &t4, &t3));
 8001030:	bf00      	nop
 8001032:	e02e      	b.n	8001092 <ecDouble+0x62a>
         EC_CHECK(ecSqrMod(params, &t4, &t4));
 8001034:	bf00      	nop
 8001036:	e02c      	b.n	8001092 <ecDouble+0x62a>
         EC_CHECK(ecMulMod(params, &t4, &t4, &params->a));
 8001038:	bf00      	nop
 800103a:	e02a      	b.n	8001092 <ecDouble+0x62a>
         EC_CHECK(ecSqrMod(params, &t5, &t1));
 800103c:	bf00      	nop
 800103e:	e028      	b.n	8001092 <ecDouble+0x62a>
         EC_CHECK(ecAddMod(params, &t4, &t4, &t5));
 8001040:	bf00      	nop
 8001042:	e026      	b.n	8001092 <ecDouble+0x62a>
         EC_CHECK(ecAddMod(params, &t4, &t4, &t5));
 8001044:	bf00      	nop
 8001046:	e024      	b.n	8001092 <ecDouble+0x62a>
         EC_CHECK(ecAddMod(params, &t4, &t4, &t5));
 8001048:	bf00      	nop
 800104a:	e022      	b.n	8001092 <ecDouble+0x62a>
      EC_CHECK(ecMulMod(params, &t3, &t3, &t2));
 800104c:	bf00      	nop
 800104e:	e020      	b.n	8001092 <ecDouble+0x62a>
      EC_CHECK(ecAddMod(params, &t3, &t3, &t3));
 8001050:	bf00      	nop
 8001052:	e01e      	b.n	8001092 <ecDouble+0x62a>
      EC_CHECK(ecSqrMod(params, &t2, &t2));
 8001054:	bf00      	nop
 8001056:	e01c      	b.n	8001092 <ecDouble+0x62a>
      EC_CHECK(ecMulMod(params, &t5, &t1, &t2));
 8001058:	bf00      	nop
 800105a:	e01a      	b.n	8001092 <ecDouble+0x62a>
      EC_CHECK(ecAddMod(params, &t5, &t5, &t5));
 800105c:	bf00      	nop
 800105e:	e018      	b.n	8001092 <ecDouble+0x62a>
      EC_CHECK(ecAddMod(params, &t5, &t5, &t5));
 8001060:	bf00      	nop
 8001062:	e016      	b.n	8001092 <ecDouble+0x62a>
      EC_CHECK(ecSqrMod(params, &t1, &t4));
 8001064:	bf00      	nop
 8001066:	e014      	b.n	8001092 <ecDouble+0x62a>
      EC_CHECK(ecSubMod(params, &t1, &t1, &t5));
 8001068:	bf00      	nop
 800106a:	e012      	b.n	8001092 <ecDouble+0x62a>
      EC_CHECK(ecSubMod(params, &t1, &t1, &t5));
 800106c:	bf00      	nop
 800106e:	e010      	b.n	8001092 <ecDouble+0x62a>
      EC_CHECK(ecSqrMod(params, &t2, &t2));
 8001070:	bf00      	nop
 8001072:	e00e      	b.n	8001092 <ecDouble+0x62a>
      EC_CHECK(ecAddMod(params, &t2, &t2, &t2));
 8001074:	bf00      	nop
 8001076:	e00c      	b.n	8001092 <ecDouble+0x62a>
      EC_CHECK(ecAddMod(params, &t2, &t2, &t2));
 8001078:	bf00      	nop
 800107a:	e00a      	b.n	8001092 <ecDouble+0x62a>
      EC_CHECK(ecAddMod(params, &t2, &t2, &t2));
 800107c:	bf00      	nop
 800107e:	e008      	b.n	8001092 <ecDouble+0x62a>
      EC_CHECK(ecSubMod(params, &t5, &t5, &t1));
 8001080:	bf00      	nop
 8001082:	e006      	b.n	8001092 <ecDouble+0x62a>
      EC_CHECK(ecMulMod(params, &t5, &t4, &t5));
 8001084:	bf00      	nop
 8001086:	e004      	b.n	8001092 <ecDouble+0x62a>
      EC_CHECK(ecSubMod(params, &t2, &t5, &t2));
 8001088:	bf00      	nop
 800108a:	e002      	b.n	8001092 <ecDouble+0x62a>
      MPI_CHECK(mpiCopy(&r->x, &t1));
 800108c:	bf00      	nop
 800108e:	e000      	b.n	8001092 <ecDouble+0x62a>
      MPI_CHECK(mpiCopy(&r->y, &t2));
 8001090:	bf00      	nop
   //Release multiple precision integers
   mpiFree(&t1);
 8001092:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001096:	4618      	mov	r0, r3
 8001098:	f001 fbc6 	bl	8002828 <mpiFree>
   mpiFree(&t2);
 800109c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80010a0:	4618      	mov	r0, r3
 80010a2:	f001 fbc1 	bl	8002828 <mpiFree>
   mpiFree(&t3);
 80010a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010aa:	4618      	mov	r0, r3
 80010ac:	f001 fbbc 	bl	8002828 <mpiFree>
   mpiFree(&t4);
 80010b0:	f107 031c 	add.w	r3, r7, #28
 80010b4:	4618      	mov	r0, r3
 80010b6:	f001 fbb7 	bl	8002828 <mpiFree>
   mpiFree(&t5);
 80010ba:	f107 0310 	add.w	r3, r7, #16
 80010be:	4618      	mov	r0, r3
 80010c0:	f001 fbb2 	bl	8002828 <mpiFree>

   //Return status code
   return error;
 80010c4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3750      	adds	r7, #80	; 0x50
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <ecAdd>:
 * @return Error code
 **/

error_t ecAdd(const EcDomainParameters *params, EcPoint *r,
   const EcPoint *s, const EcPoint *t)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b09a      	sub	sp, #104	; 0x68
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
 80010dc:	603b      	str	r3, [r7, #0]
   Mpi t5;
   Mpi t6;
   Mpi t7;

   //Initialize multiple precision integers
   mpiInit(&t1);
 80010de:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80010e2:	4618      	mov	r0, r3
 80010e4:	f001 fb8d 	bl	8002802 <mpiInit>
   mpiInit(&t2);
 80010e8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010ec:	4618      	mov	r0, r3
 80010ee:	f001 fb88 	bl	8002802 <mpiInit>
   mpiInit(&t3);
 80010f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010f6:	4618      	mov	r0, r3
 80010f8:	f001 fb83 	bl	8002802 <mpiInit>
   mpiInit(&t4);
 80010fc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001100:	4618      	mov	r0, r3
 8001102:	f001 fb7e 	bl	8002802 <mpiInit>
   mpiInit(&t5);
 8001106:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800110a:	4618      	mov	r0, r3
 800110c:	f001 fb79 	bl	8002802 <mpiInit>
   mpiInit(&t6);
 8001110:	f107 031c 	add.w	r3, r7, #28
 8001114:	4618      	mov	r0, r3
 8001116:	f001 fb74 	bl	8002802 <mpiInit>
   mpiInit(&t7);
 800111a:	f107 0310 	add.w	r3, r7, #16
 800111e:	4618      	mov	r0, r3
 8001120:	f001 fb6f 	bl	8002802 <mpiInit>

   //Set t1 = Sx
   MPI_CHECK(mpiCopy(&t1, &s->x));
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800112a:	4611      	mov	r1, r2
 800112c:	4618      	mov	r0, r3
 800112e:	f001 fd7d 	bl	8002c2c <mpiCopy>
 8001132:	4603      	mov	r3, r0
 8001134:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8001138:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800113c:	2b00      	cmp	r3, #0
 800113e:	f040 82df 	bne.w	8001700 <ecAdd+0x630>
   //Set t2 = Sy
   MPI_CHECK(mpiCopy(&t2, &s->y));
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f103 020c 	add.w	r2, r3, #12
 8001148:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800114c:	4611      	mov	r1, r2
 800114e:	4618      	mov	r0, r3
 8001150:	f001 fd6c 	bl	8002c2c <mpiCopy>
 8001154:	4603      	mov	r3, r0
 8001156:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800115a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800115e:	2b00      	cmp	r3, #0
 8001160:	f040 82d0 	bne.w	8001704 <ecAdd+0x634>
   //Set t3 = Sz
   MPI_CHECK(mpiCopy(&t3, &s->z));
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f103 0218 	add.w	r2, r3, #24
 800116a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800116e:	4611      	mov	r1, r2
 8001170:	4618      	mov	r0, r3
 8001172:	f001 fd5b 	bl	8002c2c <mpiCopy>
 8001176:	4603      	mov	r3, r0
 8001178:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800117c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001180:	2b00      	cmp	r3, #0
 8001182:	f040 82c1 	bne.w	8001708 <ecAdd+0x638>
   //Set t4 = Tx
   MPI_CHECK(mpiCopy(&t4, &t->x));
 8001186:	683a      	ldr	r2, [r7, #0]
 8001188:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800118c:	4611      	mov	r1, r2
 800118e:	4618      	mov	r0, r3
 8001190:	f001 fd4c 	bl	8002c2c <mpiCopy>
 8001194:	4603      	mov	r3, r0
 8001196:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800119a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800119e:	2b00      	cmp	r3, #0
 80011a0:	f040 82b4 	bne.w	800170c <ecAdd+0x63c>
   //Set t5 = Ty
   MPI_CHECK(mpiCopy(&t5, &t->y));
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	f103 020c 	add.w	r2, r3, #12
 80011aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011ae:	4611      	mov	r1, r2
 80011b0:	4618      	mov	r0, r3
 80011b2:	f001 fd3b 	bl	8002c2c <mpiCopy>
 80011b6:	4603      	mov	r3, r0
 80011b8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80011bc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	f040 82a5 	bne.w	8001710 <ecAdd+0x640>

   //Check whether Tz != 1
   if(mpiCompInt(&t->z, 1) != 0)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	3318      	adds	r3, #24
 80011ca:	2101      	movs	r1, #1
 80011cc:	4618      	mov	r0, r3
 80011ce:	f001 fcbe 	bl	8002b4e <mpiCompInt>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d053      	beq.n	8001280 <ecAdd+0x1b0>
   {
      //Compute t6 = Tz
      MPI_CHECK(mpiCopy(&t6, &t->z));
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	f103 0218 	add.w	r2, r3, #24
 80011de:	f107 031c 	add.w	r3, r7, #28
 80011e2:	4611      	mov	r1, r2
 80011e4:	4618      	mov	r0, r3
 80011e6:	f001 fd21 	bl	8002c2c <mpiCopy>
 80011ea:	4603      	mov	r3, r0
 80011ec:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80011f0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	f040 828d 	bne.w	8001714 <ecAdd+0x644>
      //Compute t7 = t6^2
      EC_CHECK(ecSqrMod(params, &t7, &t6));
 80011fa:	f107 021c 	add.w	r2, r7, #28
 80011fe:	f107 0310 	add.w	r3, r7, #16
 8001202:	4619      	mov	r1, r3
 8001204:	68f8      	ldr	r0, [r7, #12]
 8001206:	f001 f826 	bl	8002256 <ecSqrMod>
 800120a:	4603      	mov	r3, r0
 800120c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8001210:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001214:	2b00      	cmp	r3, #0
 8001216:	f040 827f 	bne.w	8001718 <ecAdd+0x648>
      //Compute t1 = t1 * t7
      EC_CHECK(ecMulMod(params, &t1, &t1, &t7));
 800121a:	f107 0310 	add.w	r3, r7, #16
 800121e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001222:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001226:	68f8      	ldr	r0, [r7, #12]
 8001228:	f000 ffe2 	bl	80021f0 <ecMulMod>
 800122c:	4603      	mov	r3, r0
 800122e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8001232:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001236:	2b00      	cmp	r3, #0
 8001238:	f040 8270 	bne.w	800171c <ecAdd+0x64c>
      //Compute t7 = t6 * t7
      EC_CHECK(ecMulMod(params, &t7, &t6, &t7));
 800123c:	f107 0310 	add.w	r3, r7, #16
 8001240:	f107 021c 	add.w	r2, r7, #28
 8001244:	f107 0110 	add.w	r1, r7, #16
 8001248:	68f8      	ldr	r0, [r7, #12]
 800124a:	f000 ffd1 	bl	80021f0 <ecMulMod>
 800124e:	4603      	mov	r3, r0
 8001250:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8001254:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001258:	2b00      	cmp	r3, #0
 800125a:	f040 8261 	bne.w	8001720 <ecAdd+0x650>
      //Compute t2 = t2 * t7
      EC_CHECK(ecMulMod(params, &t2, &t2, &t7));
 800125e:	f107 0310 	add.w	r3, r7, #16
 8001262:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001266:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800126a:	68f8      	ldr	r0, [r7, #12]
 800126c:	f000 ffc0 	bl	80021f0 <ecMulMod>
 8001270:	4603      	mov	r3, r0
 8001272:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8001276:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800127a:	2b00      	cmp	r3, #0
 800127c:	f040 8252 	bne.w	8001724 <ecAdd+0x654>
   }

   //Compute t7 = t3^2
   EC_CHECK(ecSqrMod(params, &t7, &t3));
 8001280:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001284:	f107 0310 	add.w	r3, r7, #16
 8001288:	4619      	mov	r1, r3
 800128a:	68f8      	ldr	r0, [r7, #12]
 800128c:	f000 ffe3 	bl	8002256 <ecSqrMod>
 8001290:	4603      	mov	r3, r0
 8001292:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8001296:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800129a:	2b00      	cmp	r3, #0
 800129c:	f040 8244 	bne.w	8001728 <ecAdd+0x658>
   //Compute t4 = t4 * t7
   EC_CHECK(ecMulMod(params, &t4, &t4, &t7));
 80012a0:	f107 0310 	add.w	r3, r7, #16
 80012a4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80012a8:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80012ac:	68f8      	ldr	r0, [r7, #12]
 80012ae:	f000 ff9f 	bl	80021f0 <ecMulMod>
 80012b2:	4603      	mov	r3, r0
 80012b4:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80012b8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80012bc:	2b00      	cmp	r3, #0
 80012be:	f040 8235 	bne.w	800172c <ecAdd+0x65c>
   //Compute t7 = t3 * t7
   EC_CHECK(ecMulMod(params, &t7, &t3, &t7));
 80012c2:	f107 0310 	add.w	r3, r7, #16
 80012c6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80012ca:	f107 0110 	add.w	r1, r7, #16
 80012ce:	68f8      	ldr	r0, [r7, #12]
 80012d0:	f000 ff8e 	bl	80021f0 <ecMulMod>
 80012d4:	4603      	mov	r3, r0
 80012d6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80012da:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80012de:	2b00      	cmp	r3, #0
 80012e0:	f040 8226 	bne.w	8001730 <ecAdd+0x660>
   //Compute t5 = t5 * t7
   EC_CHECK(ecMulMod(params, &t5, &t5, &t7));
 80012e4:	f107 0310 	add.w	r3, r7, #16
 80012e8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80012ec:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80012f0:	68f8      	ldr	r0, [r7, #12]
 80012f2:	f000 ff7d 	bl	80021f0 <ecMulMod>
 80012f6:	4603      	mov	r3, r0
 80012f8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80012fc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001300:	2b00      	cmp	r3, #0
 8001302:	f040 8217 	bne.w	8001734 <ecAdd+0x664>
   //Compute t4 = t1 - t4
   EC_CHECK(ecSubMod(params, &t4, &t1, &t4));
 8001306:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800130a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800130e:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001312:	68f8      	ldr	r0, [r7, #12]
 8001314:	f000 ff40 	bl	8002198 <ecSubMod>
 8001318:	4603      	mov	r3, r0
 800131a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800131e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001322:	2b00      	cmp	r3, #0
 8001324:	f040 8208 	bne.w	8001738 <ecAdd+0x668>
   //Compute t5 = t2 - t5
   EC_CHECK(ecSubMod(params, &t5, &t2, &t5));
 8001328:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800132c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001330:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001334:	68f8      	ldr	r0, [r7, #12]
 8001336:	f000 ff2f 	bl	8002198 <ecSubMod>
 800133a:	4603      	mov	r3, r0
 800133c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8001340:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001344:	2b00      	cmp	r3, #0
 8001346:	f040 81f9 	bne.w	800173c <ecAdd+0x66c>

   //Check whether t4 == 0
   if(mpiCompInt(&t4, 0) == 0)
 800134a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800134e:	2100      	movs	r1, #0
 8001350:	4618      	mov	r0, r3
 8001352:	f001 fbfc 	bl	8002b4e <mpiCompInt>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d158      	bne.n	800140e <ecAdd+0x33e>
   {
      //Check whether t5 == 0
      if(mpiCompInt(&t5, 0) == 0)
 800135c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001360:	2100      	movs	r1, #0
 8001362:	4618      	mov	r0, r3
 8001364:	f001 fbf3 	bl	8002b4e <mpiCompInt>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d127      	bne.n	80013be <ecAdd+0x2ee>
      {
         //Set R = (0, 0, 0)
         MPI_CHECK(mpiSetValue(&r->x, 0));
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	2100      	movs	r1, #0
 8001372:	4618      	mov	r0, r3
 8001374:	f001 fc8f 	bl	8002c96 <mpiSetValue>
 8001378:	4603      	mov	r3, r0
 800137a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800137e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001382:	2b00      	cmp	r3, #0
 8001384:	f040 81dc 	bne.w	8001740 <ecAdd+0x670>
         MPI_CHECK(mpiSetValue(&r->y, 0));
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	330c      	adds	r3, #12
 800138c:	2100      	movs	r1, #0
 800138e:	4618      	mov	r0, r3
 8001390:	f001 fc81 	bl	8002c96 <mpiSetValue>
 8001394:	4603      	mov	r3, r0
 8001396:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800139a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800139e:	2b00      	cmp	r3, #0
 80013a0:	f040 81d0 	bne.w	8001744 <ecAdd+0x674>
         MPI_CHECK(mpiSetValue(&r->z, 0));
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	3318      	adds	r3, #24
 80013a8:	2100      	movs	r1, #0
 80013aa:	4618      	mov	r0, r3
 80013ac:	f001 fc73 	bl	8002c96 <mpiSetValue>
 80013b0:	4603      	mov	r3, r0
 80013b2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80013b6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	e1ef      	b.n	800179e <ecAdd+0x6ce>
      }
      else
      {
         //Set R = (1, 1, 0)
         MPI_CHECK(mpiSetValue(&r->x, 1));
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	2101      	movs	r1, #1
 80013c2:	4618      	mov	r0, r3
 80013c4:	f001 fc67 	bl	8002c96 <mpiSetValue>
 80013c8:	4603      	mov	r3, r0
 80013ca:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80013ce:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	f040 81b8 	bne.w	8001748 <ecAdd+0x678>
         MPI_CHECK(mpiSetValue(&r->y, 1));
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	330c      	adds	r3, #12
 80013dc:	2101      	movs	r1, #1
 80013de:	4618      	mov	r0, r3
 80013e0:	f001 fc59 	bl	8002c96 <mpiSetValue>
 80013e4:	4603      	mov	r3, r0
 80013e6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80013ea:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	f040 81ac 	bne.w	800174c <ecAdd+0x67c>
         MPI_CHECK(mpiSetValue(&r->z, 0));
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	3318      	adds	r3, #24
 80013f8:	2100      	movs	r1, #0
 80013fa:	4618      	mov	r0, r3
 80013fc:	f001 fc4b 	bl	8002c96 <mpiSetValue>
 8001400:	4603      	mov	r3, r0
 8001402:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8001406:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800140a:	2b00      	cmp	r3, #0
 800140c:	e1c7      	b.n	800179e <ecAdd+0x6ce>
      }
   }
   else
   {
      //Compute t1 = 2 * t1 - t4
      EC_CHECK(ecAddMod(params, &t1, &t1, &t1));
 800140e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001412:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001416:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800141a:	68f8      	ldr	r0, [r7, #12]
 800141c:	f000 fe8e 	bl	800213c <ecAddMod>
 8001420:	4603      	mov	r3, r0
 8001422:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8001426:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800142a:	2b00      	cmp	r3, #0
 800142c:	f040 8190 	bne.w	8001750 <ecAdd+0x680>
      EC_CHECK(ecSubMod(params, &t1, &t1, &t4));
 8001430:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001434:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001438:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800143c:	68f8      	ldr	r0, [r7, #12]
 800143e:	f000 feab 	bl	8002198 <ecSubMod>
 8001442:	4603      	mov	r3, r0
 8001444:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8001448:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800144c:	2b00      	cmp	r3, #0
 800144e:	f040 8181 	bne.w	8001754 <ecAdd+0x684>
      //Compute t2 = 2 * t2 - t5
      EC_CHECK(ecAddMod(params, &t2, &t2, &t2));
 8001452:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001456:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800145a:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800145e:	68f8      	ldr	r0, [r7, #12]
 8001460:	f000 fe6c 	bl	800213c <ecAddMod>
 8001464:	4603      	mov	r3, r0
 8001466:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800146a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800146e:	2b00      	cmp	r3, #0
 8001470:	f040 8172 	bne.w	8001758 <ecAdd+0x688>
      EC_CHECK(ecSubMod(params, &t2, &t2, &t5));
 8001474:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001478:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800147c:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8001480:	68f8      	ldr	r0, [r7, #12]
 8001482:	f000 fe89 	bl	8002198 <ecSubMod>
 8001486:	4603      	mov	r3, r0
 8001488:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800148c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001490:	2b00      	cmp	r3, #0
 8001492:	f040 8163 	bne.w	800175c <ecAdd+0x68c>

      //Check whether Tz != 1
      if(mpiCompInt(&t->z, 1) != 0)
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	3318      	adds	r3, #24
 800149a:	2101      	movs	r1, #1
 800149c:	4618      	mov	r0, r3
 800149e:	f001 fb56 	bl	8002b4e <mpiCompInt>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d010      	beq.n	80014ca <ecAdd+0x3fa>
      {
         //Compute t3 = t3 * t6
         EC_CHECK(ecMulMod(params, &t3, &t3, &t6));
 80014a8:	f107 031c 	add.w	r3, r7, #28
 80014ac:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80014b0:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80014b4:	68f8      	ldr	r0, [r7, #12]
 80014b6:	f000 fe9b 	bl	80021f0 <ecMulMod>
 80014ba:	4603      	mov	r3, r0
 80014bc:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80014c0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	f040 814b 	bne.w	8001760 <ecAdd+0x690>
      }

      //Compute t3 = t3 * t4
      EC_CHECK(ecMulMod(params, &t3, &t3, &t4));
 80014ca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80014ce:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80014d2:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80014d6:	68f8      	ldr	r0, [r7, #12]
 80014d8:	f000 fe8a 	bl	80021f0 <ecMulMod>
 80014dc:	4603      	mov	r3, r0
 80014de:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80014e2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	f040 813c 	bne.w	8001764 <ecAdd+0x694>
      //Compute t7 = t4^2
      EC_CHECK(ecSqrMod(params, &t7, &t4));
 80014ec:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80014f0:	f107 0310 	add.w	r3, r7, #16
 80014f4:	4619      	mov	r1, r3
 80014f6:	68f8      	ldr	r0, [r7, #12]
 80014f8:	f000 fead 	bl	8002256 <ecSqrMod>
 80014fc:	4603      	mov	r3, r0
 80014fe:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8001502:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001506:	2b00      	cmp	r3, #0
 8001508:	f040 812e 	bne.w	8001768 <ecAdd+0x698>
      //Compute t4 = t4 * t7
      EC_CHECK(ecMulMod(params, &t4, &t4, &t7));
 800150c:	f107 0310 	add.w	r3, r7, #16
 8001510:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001514:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001518:	68f8      	ldr	r0, [r7, #12]
 800151a:	f000 fe69 	bl	80021f0 <ecMulMod>
 800151e:	4603      	mov	r3, r0
 8001520:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8001524:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001528:	2b00      	cmp	r3, #0
 800152a:	f040 811f 	bne.w	800176c <ecAdd+0x69c>
      //Compute t7 = t1 * t7
      EC_CHECK(ecMulMod(params, &t7, &t1, &t7));
 800152e:	f107 0310 	add.w	r3, r7, #16
 8001532:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001536:	f107 0110 	add.w	r1, r7, #16
 800153a:	68f8      	ldr	r0, [r7, #12]
 800153c:	f000 fe58 	bl	80021f0 <ecMulMod>
 8001540:	4603      	mov	r3, r0
 8001542:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8001546:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800154a:	2b00      	cmp	r3, #0
 800154c:	f040 8110 	bne.w	8001770 <ecAdd+0x6a0>
      //Compute t1 = t5^2
      EC_CHECK(ecSqrMod(params, &t1, &t5));
 8001550:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001554:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001558:	4619      	mov	r1, r3
 800155a:	68f8      	ldr	r0, [r7, #12]
 800155c:	f000 fe7b 	bl	8002256 <ecSqrMod>
 8001560:	4603      	mov	r3, r0
 8001562:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8001566:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800156a:	2b00      	cmp	r3, #0
 800156c:	f040 8102 	bne.w	8001774 <ecAdd+0x6a4>
      //Compute t1 = t1 - t7
      EC_CHECK(ecSubMod(params, &t1, &t1, &t7));
 8001570:	f107 0310 	add.w	r3, r7, #16
 8001574:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001578:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800157c:	68f8      	ldr	r0, [r7, #12]
 800157e:	f000 fe0b 	bl	8002198 <ecSubMod>
 8001582:	4603      	mov	r3, r0
 8001584:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8001588:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800158c:	2b00      	cmp	r3, #0
 800158e:	f040 80f3 	bne.w	8001778 <ecAdd+0x6a8>
      //Compute t7 = t7 - 2 * t1
      EC_CHECK(ecAddMod(params, &t6, &t1, &t1));
 8001592:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001596:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800159a:	f107 011c 	add.w	r1, r7, #28
 800159e:	68f8      	ldr	r0, [r7, #12]
 80015a0:	f000 fdcc 	bl	800213c <ecAddMod>
 80015a4:	4603      	mov	r3, r0
 80015a6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80015aa:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	f040 80e4 	bne.w	800177c <ecAdd+0x6ac>
      EC_CHECK(ecSubMod(params, &t7, &t7, &t6));
 80015b4:	f107 031c 	add.w	r3, r7, #28
 80015b8:	f107 0210 	add.w	r2, r7, #16
 80015bc:	f107 0110 	add.w	r1, r7, #16
 80015c0:	68f8      	ldr	r0, [r7, #12]
 80015c2:	f000 fde9 	bl	8002198 <ecSubMod>
 80015c6:	4603      	mov	r3, r0
 80015c8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80015cc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	f040 80d5 	bne.w	8001780 <ecAdd+0x6b0>
      //Compute t5 = t5 * t7
      EC_CHECK(ecMulMod(params, &t5, &t5, &t7));
 80015d6:	f107 0310 	add.w	r3, r7, #16
 80015da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80015de:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80015e2:	68f8      	ldr	r0, [r7, #12]
 80015e4:	f000 fe04 	bl	80021f0 <ecMulMod>
 80015e8:	4603      	mov	r3, r0
 80015ea:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80015ee:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	f040 80c6 	bne.w	8001784 <ecAdd+0x6b4>
      //Compute t4 = t2 * t4
      EC_CHECK(ecMulMod(params, &t4, &t2, &t4));
 80015f8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80015fc:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001600:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001604:	68f8      	ldr	r0, [r7, #12]
 8001606:	f000 fdf3 	bl	80021f0 <ecMulMod>
 800160a:	4603      	mov	r3, r0
 800160c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8001610:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001614:	2b00      	cmp	r3, #0
 8001616:	f040 80b7 	bne.w	8001788 <ecAdd+0x6b8>
      //Compute t2 = t5 - t4
      EC_CHECK(ecSubMod(params, &t2, &t5, &t4));
 800161a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800161e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001622:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8001626:	68f8      	ldr	r0, [r7, #12]
 8001628:	f000 fdb6 	bl	8002198 <ecSubMod>
 800162c:	4603      	mov	r3, r0
 800162e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8001632:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001636:	2b00      	cmp	r3, #0
 8001638:	f040 80a8 	bne.w	800178c <ecAdd+0x6bc>

      //Compute t2 = t2 / 2
      if(mpiIsEven(&t2))
 800163c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001640:	2100      	movs	r1, #0
 8001642:	4618      	mov	r0, r3
 8001644:	f001 f9f9 	bl	8002a3a <mpiGetBitValue>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d10d      	bne.n	800166a <ecAdd+0x59a>
      {
         MPI_CHECK(mpiShiftRight(&t2, 1));
 800164e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001652:	2101      	movs	r1, #1
 8001654:	4618      	mov	r0, r3
 8001656:	f001 ff63 	bl	8003520 <mpiShiftRight>
 800165a:	4603      	mov	r3, r0
 800165c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8001660:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001664:	2b00      	cmp	r3, #0
 8001666:	d01f      	beq.n	80016a8 <ecAdd+0x5d8>
 8001668:	e099      	b.n	800179e <ecAdd+0x6ce>
      }
      else
      {
         MPI_CHECK(mpiAdd(&t2, &t2, &params->p));
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	f103 0208 	add.w	r2, r3, #8
 8001670:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8001674:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001678:	4618      	mov	r0, r3
 800167a:	f001 fc9f 	bl	8002fbc <mpiAdd>
 800167e:	4603      	mov	r3, r0
 8001680:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8001684:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001688:	2b00      	cmp	r3, #0
 800168a:	f040 8081 	bne.w	8001790 <ecAdd+0x6c0>
         MPI_CHECK(mpiShiftRight(&t2, 1));
 800168e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001692:	2101      	movs	r1, #1
 8001694:	4618      	mov	r0, r3
 8001696:	f001 ff43 	bl	8003520 <mpiShiftRight>
 800169a:	4603      	mov	r3, r0
 800169c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80016a0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d175      	bne.n	8001794 <ecAdd+0x6c4>
      }

      //Set Rx = t1
      MPI_CHECK(mpiCopy(&r->x, &t1));
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80016ae:	4611      	mov	r1, r2
 80016b0:	4618      	mov	r0, r3
 80016b2:	f001 fabb 	bl	8002c2c <mpiCopy>
 80016b6:	4603      	mov	r3, r0
 80016b8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80016bc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d169      	bne.n	8001798 <ecAdd+0x6c8>
      //Set Ry = t2
      MPI_CHECK(mpiCopy(&r->y, &t2));
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	330c      	adds	r3, #12
 80016c8:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80016cc:	4611      	mov	r1, r2
 80016ce:	4618      	mov	r0, r3
 80016d0:	f001 faac 	bl	8002c2c <mpiCopy>
 80016d4:	4603      	mov	r3, r0
 80016d6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80016da:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d15c      	bne.n	800179c <ecAdd+0x6cc>
      //Set Rz = t3
      MPI_CHECK(mpiCopy(&r->z, &t3));
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	3318      	adds	r3, #24
 80016e6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80016ea:	4611      	mov	r1, r2
 80016ec:	4618      	mov	r0, r3
 80016ee:	f001 fa9d 	bl	8002c2c <mpiCopy>
 80016f2:	4603      	mov	r3, r0
 80016f4:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80016f8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80016fc:	2b00      	cmp	r3, #0
   }

end:
 80016fe:	e04e      	b.n	800179e <ecAdd+0x6ce>
   MPI_CHECK(mpiCopy(&t1, &s->x));
 8001700:	bf00      	nop
 8001702:	e04c      	b.n	800179e <ecAdd+0x6ce>
   MPI_CHECK(mpiCopy(&t2, &s->y));
 8001704:	bf00      	nop
 8001706:	e04a      	b.n	800179e <ecAdd+0x6ce>
   MPI_CHECK(mpiCopy(&t3, &s->z));
 8001708:	bf00      	nop
 800170a:	e048      	b.n	800179e <ecAdd+0x6ce>
   MPI_CHECK(mpiCopy(&t4, &t->x));
 800170c:	bf00      	nop
 800170e:	e046      	b.n	800179e <ecAdd+0x6ce>
   MPI_CHECK(mpiCopy(&t5, &t->y));
 8001710:	bf00      	nop
 8001712:	e044      	b.n	800179e <ecAdd+0x6ce>
      MPI_CHECK(mpiCopy(&t6, &t->z));
 8001714:	bf00      	nop
 8001716:	e042      	b.n	800179e <ecAdd+0x6ce>
      EC_CHECK(ecSqrMod(params, &t7, &t6));
 8001718:	bf00      	nop
 800171a:	e040      	b.n	800179e <ecAdd+0x6ce>
      EC_CHECK(ecMulMod(params, &t1, &t1, &t7));
 800171c:	bf00      	nop
 800171e:	e03e      	b.n	800179e <ecAdd+0x6ce>
      EC_CHECK(ecMulMod(params, &t7, &t6, &t7));
 8001720:	bf00      	nop
 8001722:	e03c      	b.n	800179e <ecAdd+0x6ce>
      EC_CHECK(ecMulMod(params, &t2, &t2, &t7));
 8001724:	bf00      	nop
 8001726:	e03a      	b.n	800179e <ecAdd+0x6ce>
   EC_CHECK(ecSqrMod(params, &t7, &t3));
 8001728:	bf00      	nop
 800172a:	e038      	b.n	800179e <ecAdd+0x6ce>
   EC_CHECK(ecMulMod(params, &t4, &t4, &t7));
 800172c:	bf00      	nop
 800172e:	e036      	b.n	800179e <ecAdd+0x6ce>
   EC_CHECK(ecMulMod(params, &t7, &t3, &t7));
 8001730:	bf00      	nop
 8001732:	e034      	b.n	800179e <ecAdd+0x6ce>
   EC_CHECK(ecMulMod(params, &t5, &t5, &t7));
 8001734:	bf00      	nop
 8001736:	e032      	b.n	800179e <ecAdd+0x6ce>
   EC_CHECK(ecSubMod(params, &t4, &t1, &t4));
 8001738:	bf00      	nop
 800173a:	e030      	b.n	800179e <ecAdd+0x6ce>
   EC_CHECK(ecSubMod(params, &t5, &t2, &t5));
 800173c:	bf00      	nop
 800173e:	e02e      	b.n	800179e <ecAdd+0x6ce>
         MPI_CHECK(mpiSetValue(&r->x, 0));
 8001740:	bf00      	nop
 8001742:	e02c      	b.n	800179e <ecAdd+0x6ce>
         MPI_CHECK(mpiSetValue(&r->y, 0));
 8001744:	bf00      	nop
 8001746:	e02a      	b.n	800179e <ecAdd+0x6ce>
         MPI_CHECK(mpiSetValue(&r->x, 1));
 8001748:	bf00      	nop
 800174a:	e028      	b.n	800179e <ecAdd+0x6ce>
         MPI_CHECK(mpiSetValue(&r->y, 1));
 800174c:	bf00      	nop
 800174e:	e026      	b.n	800179e <ecAdd+0x6ce>
      EC_CHECK(ecAddMod(params, &t1, &t1, &t1));
 8001750:	bf00      	nop
 8001752:	e024      	b.n	800179e <ecAdd+0x6ce>
      EC_CHECK(ecSubMod(params, &t1, &t1, &t4));
 8001754:	bf00      	nop
 8001756:	e022      	b.n	800179e <ecAdd+0x6ce>
      EC_CHECK(ecAddMod(params, &t2, &t2, &t2));
 8001758:	bf00      	nop
 800175a:	e020      	b.n	800179e <ecAdd+0x6ce>
      EC_CHECK(ecSubMod(params, &t2, &t2, &t5));
 800175c:	bf00      	nop
 800175e:	e01e      	b.n	800179e <ecAdd+0x6ce>
         EC_CHECK(ecMulMod(params, &t3, &t3, &t6));
 8001760:	bf00      	nop
 8001762:	e01c      	b.n	800179e <ecAdd+0x6ce>
      EC_CHECK(ecMulMod(params, &t3, &t3, &t4));
 8001764:	bf00      	nop
 8001766:	e01a      	b.n	800179e <ecAdd+0x6ce>
      EC_CHECK(ecSqrMod(params, &t7, &t4));
 8001768:	bf00      	nop
 800176a:	e018      	b.n	800179e <ecAdd+0x6ce>
      EC_CHECK(ecMulMod(params, &t4, &t4, &t7));
 800176c:	bf00      	nop
 800176e:	e016      	b.n	800179e <ecAdd+0x6ce>
      EC_CHECK(ecMulMod(params, &t7, &t1, &t7));
 8001770:	bf00      	nop
 8001772:	e014      	b.n	800179e <ecAdd+0x6ce>
      EC_CHECK(ecSqrMod(params, &t1, &t5));
 8001774:	bf00      	nop
 8001776:	e012      	b.n	800179e <ecAdd+0x6ce>
      EC_CHECK(ecSubMod(params, &t1, &t1, &t7));
 8001778:	bf00      	nop
 800177a:	e010      	b.n	800179e <ecAdd+0x6ce>
      EC_CHECK(ecAddMod(params, &t6, &t1, &t1));
 800177c:	bf00      	nop
 800177e:	e00e      	b.n	800179e <ecAdd+0x6ce>
      EC_CHECK(ecSubMod(params, &t7, &t7, &t6));
 8001780:	bf00      	nop
 8001782:	e00c      	b.n	800179e <ecAdd+0x6ce>
      EC_CHECK(ecMulMod(params, &t5, &t5, &t7));
 8001784:	bf00      	nop
 8001786:	e00a      	b.n	800179e <ecAdd+0x6ce>
      EC_CHECK(ecMulMod(params, &t4, &t2, &t4));
 8001788:	bf00      	nop
 800178a:	e008      	b.n	800179e <ecAdd+0x6ce>
      EC_CHECK(ecSubMod(params, &t2, &t5, &t4));
 800178c:	bf00      	nop
 800178e:	e006      	b.n	800179e <ecAdd+0x6ce>
         MPI_CHECK(mpiAdd(&t2, &t2, &params->p));
 8001790:	bf00      	nop
 8001792:	e004      	b.n	800179e <ecAdd+0x6ce>
         MPI_CHECK(mpiShiftRight(&t2, 1));
 8001794:	bf00      	nop
 8001796:	e002      	b.n	800179e <ecAdd+0x6ce>
      MPI_CHECK(mpiCopy(&r->x, &t1));
 8001798:	bf00      	nop
 800179a:	e000      	b.n	800179e <ecAdd+0x6ce>
      MPI_CHECK(mpiCopy(&r->y, &t2));
 800179c:	bf00      	nop
   //Release multiple precision integers
   mpiFree(&t1);
 800179e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80017a2:	4618      	mov	r0, r3
 80017a4:	f001 f840 	bl	8002828 <mpiFree>
   mpiFree(&t2);
 80017a8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017ac:	4618      	mov	r0, r3
 80017ae:	f001 f83b 	bl	8002828 <mpiFree>
   mpiFree(&t3);
 80017b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017b6:	4618      	mov	r0, r3
 80017b8:	f001 f836 	bl	8002828 <mpiFree>
   mpiFree(&t4);
 80017bc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017c0:	4618      	mov	r0, r3
 80017c2:	f001 f831 	bl	8002828 <mpiFree>
   mpiFree(&t5);
 80017c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017ca:	4618      	mov	r0, r3
 80017cc:	f001 f82c 	bl	8002828 <mpiFree>
   mpiFree(&t6);
 80017d0:	f107 031c 	add.w	r3, r7, #28
 80017d4:	4618      	mov	r0, r3
 80017d6:	f001 f827 	bl	8002828 <mpiFree>
   mpiFree(&t7);
 80017da:	f107 0310 	add.w	r3, r7, #16
 80017de:	4618      	mov	r0, r3
 80017e0:	f001 f822 	bl	8002828 <mpiFree>

   //Return status code
   return error;
 80017e4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3768      	adds	r7, #104	; 0x68
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <ecFullAdd>:
 * @return Error code
 **/

error_t ecFullAdd(const EcDomainParameters *params, EcPoint *r,
   const EcPoint *s, const EcPoint *t)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
 80017fc:	603b      	str	r3, [r7, #0]
   error_t error;

   //Check whether Sz == 0
   if(mpiCompInt(&s->z, 0) == 0)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	3318      	adds	r3, #24
 8001802:	2100      	movs	r1, #0
 8001804:	4618      	mov	r0, r3
 8001806:	f001 f9a2 	bl	8002b4e <mpiCompInt>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d126      	bne.n	800185e <ecFullAdd+0x6e>
   {
      //Set R = T
      MPI_CHECK(mpiCopy(&r->x, &t->x));
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	683a      	ldr	r2, [r7, #0]
 8001814:	4611      	mov	r1, r2
 8001816:	4618      	mov	r0, r3
 8001818:	f001 fa08 	bl	8002c2c <mpiCopy>
 800181c:	4603      	mov	r3, r0
 800181e:	82fb      	strh	r3, [r7, #22]
 8001820:	8afb      	ldrh	r3, [r7, #22]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d17a      	bne.n	800191c <ecFullAdd+0x12c>
      MPI_CHECK(mpiCopy(&r->y, &t->y));
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	f103 020c 	add.w	r2, r3, #12
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	330c      	adds	r3, #12
 8001830:	4619      	mov	r1, r3
 8001832:	4610      	mov	r0, r2
 8001834:	f001 f9fa 	bl	8002c2c <mpiCopy>
 8001838:	4603      	mov	r3, r0
 800183a:	82fb      	strh	r3, [r7, #22]
 800183c:	8afb      	ldrh	r3, [r7, #22]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d16e      	bne.n	8001920 <ecFullAdd+0x130>
      MPI_CHECK(mpiCopy(&r->z, &t->z));
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	f103 0218 	add.w	r2, r3, #24
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	3318      	adds	r3, #24
 800184c:	4619      	mov	r1, r3
 800184e:	4610      	mov	r0, r2
 8001850:	f001 f9ec 	bl	8002c2c <mpiCopy>
 8001854:	4603      	mov	r3, r0
 8001856:	82fb      	strh	r3, [r7, #22]
 8001858:	8afb      	ldrh	r3, [r7, #22]
 800185a:	2b00      	cmp	r3, #0
 800185c:	e069      	b.n	8001932 <ecFullAdd+0x142>
   }
   //Check whether Tz == 0
   else if(mpiCompInt(&t->z, 0) == 0)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	3318      	adds	r3, #24
 8001862:	2100      	movs	r1, #0
 8001864:	4618      	mov	r0, r3
 8001866:	f001 f972 	bl	8002b4e <mpiCompInt>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d126      	bne.n	80018be <ecFullAdd+0xce>
   {
      //Set R = S
      MPI_CHECK(mpiCopy(&r->x, &s->x));
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	4611      	mov	r1, r2
 8001876:	4618      	mov	r0, r3
 8001878:	f001 f9d8 	bl	8002c2c <mpiCopy>
 800187c:	4603      	mov	r3, r0
 800187e:	82fb      	strh	r3, [r7, #22]
 8001880:	8afb      	ldrh	r3, [r7, #22]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d14e      	bne.n	8001924 <ecFullAdd+0x134>
      MPI_CHECK(mpiCopy(&r->y, &s->y));
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	f103 020c 	add.w	r2, r3, #12
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	330c      	adds	r3, #12
 8001890:	4619      	mov	r1, r3
 8001892:	4610      	mov	r0, r2
 8001894:	f001 f9ca 	bl	8002c2c <mpiCopy>
 8001898:	4603      	mov	r3, r0
 800189a:	82fb      	strh	r3, [r7, #22]
 800189c:	8afb      	ldrh	r3, [r7, #22]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d142      	bne.n	8001928 <ecFullAdd+0x138>
      MPI_CHECK(mpiCopy(&r->z, &s->z));
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	f103 0218 	add.w	r2, r3, #24
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3318      	adds	r3, #24
 80018ac:	4619      	mov	r1, r3
 80018ae:	4610      	mov	r0, r2
 80018b0:	f001 f9bc 	bl	8002c2c <mpiCopy>
 80018b4:	4603      	mov	r3, r0
 80018b6:	82fb      	strh	r3, [r7, #22]
 80018b8:	8afb      	ldrh	r3, [r7, #22]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	e039      	b.n	8001932 <ecFullAdd+0x142>
   }
   else
   {
      //Compute R = S + T
      EC_CHECK(ecAdd(params, r, s, t));
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	68b9      	ldr	r1, [r7, #8]
 80018c4:	68f8      	ldr	r0, [r7, #12]
 80018c6:	f7ff fc03 	bl	80010d0 <ecAdd>
 80018ca:	4603      	mov	r3, r0
 80018cc:	82fb      	strh	r3, [r7, #22]
 80018ce:	8afb      	ldrh	r3, [r7, #22]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d12b      	bne.n	800192c <ecFullAdd+0x13c>

      //Check whether R == (0, 0, 0)
      if(mpiCompInt(&r->x, 0) == 0 &&
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	2100      	movs	r1, #0
 80018d8:	4618      	mov	r0, r3
 80018da:	f001 f938 	bl	8002b4e <mpiCompInt>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d125      	bne.n	8001930 <ecFullAdd+0x140>
         mpiCompInt(&r->y, 0) == 0 &&
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	330c      	adds	r3, #12
 80018e8:	2100      	movs	r1, #0
 80018ea:	4618      	mov	r0, r3
 80018ec:	f001 f92f 	bl	8002b4e <mpiCompInt>
 80018f0:	4603      	mov	r3, r0
      if(mpiCompInt(&r->x, 0) == 0 &&
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d11c      	bne.n	8001930 <ecFullAdd+0x140>
         mpiCompInt(&r->z, 0) == 0)
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	3318      	adds	r3, #24
 80018fa:	2100      	movs	r1, #0
 80018fc:	4618      	mov	r0, r3
 80018fe:	f001 f926 	bl	8002b4e <mpiCompInt>
 8001902:	4603      	mov	r3, r0
         mpiCompInt(&r->y, 0) == 0 &&
 8001904:	2b00      	cmp	r3, #0
 8001906:	d113      	bne.n	8001930 <ecFullAdd+0x140>
      {
         //Compute R = 2 * S
         EC_CHECK(ecDouble(params, r, s));
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	68b9      	ldr	r1, [r7, #8]
 800190c:	68f8      	ldr	r0, [r7, #12]
 800190e:	f7ff f8ab 	bl	8000a68 <ecDouble>
 8001912:	4603      	mov	r3, r0
 8001914:	82fb      	strh	r3, [r7, #22]
 8001916:	8afb      	ldrh	r3, [r7, #22]
 8001918:	2b00      	cmp	r3, #0
      }
   }

end:
 800191a:	e009      	b.n	8001930 <ecFullAdd+0x140>
      MPI_CHECK(mpiCopy(&r->x, &t->x));
 800191c:	bf00      	nop
 800191e:	e008      	b.n	8001932 <ecFullAdd+0x142>
      MPI_CHECK(mpiCopy(&r->y, &t->y));
 8001920:	bf00      	nop
 8001922:	e006      	b.n	8001932 <ecFullAdd+0x142>
      MPI_CHECK(mpiCopy(&r->x, &s->x));
 8001924:	bf00      	nop
 8001926:	e004      	b.n	8001932 <ecFullAdd+0x142>
      MPI_CHECK(mpiCopy(&r->y, &s->y));
 8001928:	bf00      	nop
 800192a:	e002      	b.n	8001932 <ecFullAdd+0x142>
      EC_CHECK(ecAdd(params, r, s, t));
 800192c:	bf00      	nop
 800192e:	e000      	b.n	8001932 <ecFullAdd+0x142>
end:
 8001930:	bf00      	nop
   //Return status code
   return error;
 8001932:	8afb      	ldrh	r3, [r7, #22]
}
 8001934:	4618      	mov	r0, r3
 8001936:	3718      	adds	r7, #24
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}

0800193c <ecFullSub>:
 * @return Error code
 **/

error_t ecFullSub(const EcDomainParameters *params, EcPoint *r,
   const EcPoint *s, const EcPoint *t)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b08e      	sub	sp, #56	; 0x38
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	607a      	str	r2, [r7, #4]
 8001948:	603b      	str	r3, [r7, #0]
   error_t error;
   EcPoint u;

   //Initialize EC point
   ecInit(&u);
 800194a:	f107 0310 	add.w	r3, r7, #16
 800194e:	4618      	mov	r0, r3
 8001950:	f7fe ff80 	bl	8000854 <ecInit>

   //Set Ux = Tx and Uz = Tz
   MPI_CHECK(mpiCopy(&u.x, &t->x));
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	f107 0310 	add.w	r3, r7, #16
 800195a:	4611      	mov	r1, r2
 800195c:	4618      	mov	r0, r3
 800195e:	f001 f965 	bl	8002c2c <mpiCopy>
 8001962:	4603      	mov	r3, r0
 8001964:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001966:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001968:	2b00      	cmp	r3, #0
 800196a:	d12b      	bne.n	80019c4 <ecFullSub+0x88>
   MPI_CHECK(mpiCopy(&u.z, &t->z));
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	f103 0218 	add.w	r2, r3, #24
 8001972:	f107 0310 	add.w	r3, r7, #16
 8001976:	3318      	adds	r3, #24
 8001978:	4611      	mov	r1, r2
 800197a:	4618      	mov	r0, r3
 800197c:	f001 f956 	bl	8002c2c <mpiCopy>
 8001980:	4603      	mov	r3, r0
 8001982:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001984:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001986:	2b00      	cmp	r3, #0
 8001988:	d11e      	bne.n	80019c8 <ecFullSub+0x8c>
   //Set Uy = p - Ty
   MPI_CHECK(mpiSub(&u.y, &params->p, &t->y));
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	f103 0108 	add.w	r1, r3, #8
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	f103 020c 	add.w	r2, r3, #12
 8001996:	f107 0310 	add.w	r3, r7, #16
 800199a:	330c      	adds	r3, #12
 800199c:	4618      	mov	r0, r3
 800199e:	f001 fb6d 	bl	800307c <mpiSub>
 80019a2:	4603      	mov	r3, r0
 80019a4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80019a6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d10f      	bne.n	80019cc <ecFullSub+0x90>

   //Compute R = S + U
   EC_CHECK(ecFullAdd(params, r, s, &u));
 80019ac:	f107 0310 	add.w	r3, r7, #16
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	68b9      	ldr	r1, [r7, #8]
 80019b4:	68f8      	ldr	r0, [r7, #12]
 80019b6:	f7ff ff1b 	bl	80017f0 <ecFullAdd>
 80019ba:	4603      	mov	r3, r0
 80019bc:	86fb      	strh	r3, [r7, #54]	; 0x36
 80019be:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80019c0:	2b00      	cmp	r3, #0

end:
 80019c2:	e004      	b.n	80019ce <ecFullSub+0x92>
   MPI_CHECK(mpiCopy(&u.x, &t->x));
 80019c4:	bf00      	nop
 80019c6:	e002      	b.n	80019ce <ecFullSub+0x92>
   MPI_CHECK(mpiCopy(&u.z, &t->z));
 80019c8:	bf00      	nop
 80019ca:	e000      	b.n	80019ce <ecFullSub+0x92>
   MPI_CHECK(mpiSub(&u.y, &params->p, &t->y));
 80019cc:	bf00      	nop
   //Release EC point
   ecFree(&u);
 80019ce:	f107 0310 	add.w	r3, r7, #16
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7fe ff54 	bl	8000880 <ecFree>

   //Return status code
   return error;
 80019d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3738      	adds	r7, #56	; 0x38
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <ecMult>:
 * @return Error code
 **/

__weak_func error_t ecMult(const EcDomainParameters *params, EcPoint *r, const Mpi *d,
   const EcPoint *s)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b08a      	sub	sp, #40	; 0x28
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	60f8      	str	r0, [r7, #12]
 80019ea:	60b9      	str	r1, [r7, #8]
 80019ec:	607a      	str	r2, [r7, #4]
 80019ee:	603b      	str	r3, [r7, #0]
   error_t error;
   uint_t i;
   Mpi h;

   //Initialize multiple precision integer
   mpiInit(&h);
 80019f0:	f107 0314 	add.w	r3, r7, #20
 80019f4:	4618      	mov	r0, r3
 80019f6:	f000 ff04 	bl	8002802 <mpiInit>

   //Check whether d == 0
   if(mpiCompInt(d, 0) == 0)
 80019fa:	2100      	movs	r1, #0
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f001 f8a6 	bl	8002b4e <mpiCompInt>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d121      	bne.n	8001a4c <ecMult+0x6a>
   {
      //Set R = (1, 1, 0)
      MPI_CHECK(mpiSetValue(&r->x, 1));
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	2101      	movs	r1, #1
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f001 f942 	bl	8002c96 <mpiSetValue>
 8001a12:	4603      	mov	r3, r0
 8001a14:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001a16:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	f040 8124 	bne.w	8001c66 <ecMult+0x284>
      MPI_CHECK(mpiSetValue(&r->y, 1));
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	330c      	adds	r3, #12
 8001a22:	2101      	movs	r1, #1
 8001a24:	4618      	mov	r0, r3
 8001a26:	f001 f936 	bl	8002c96 <mpiSetValue>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001a2e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	f040 811a 	bne.w	8001c6a <ecMult+0x288>
      MPI_CHECK(mpiSetValue(&r->z, 0));
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	3318      	adds	r3, #24
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f001 f92a 	bl	8002c96 <mpiSetValue>
 8001a42:	4603      	mov	r3, r0
 8001a44:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001a46:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	e127      	b.n	8001c9c <ecMult+0x2ba>
   }
   //Check whether d == 1
   else if(mpiCompInt(d, 1) == 0)
 8001a4c:	2101      	movs	r1, #1
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f001 f87d 	bl	8002b4e <mpiCompInt>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d128      	bne.n	8001aac <ecMult+0xca>
   {
      //Set R = S
      MPI_CHECK(mpiCopy(&r->x, &s->x));
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	683a      	ldr	r2, [r7, #0]
 8001a5e:	4611      	mov	r1, r2
 8001a60:	4618      	mov	r0, r3
 8001a62:	f001 f8e3 	bl	8002c2c <mpiCopy>
 8001a66:	4603      	mov	r3, r0
 8001a68:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001a6a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	f040 80fe 	bne.w	8001c6e <ecMult+0x28c>
      MPI_CHECK(mpiCopy(&r->y, &s->y));
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	f103 020c 	add.w	r2, r3, #12
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	330c      	adds	r3, #12
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4610      	mov	r0, r2
 8001a80:	f001 f8d4 	bl	8002c2c <mpiCopy>
 8001a84:	4603      	mov	r3, r0
 8001a86:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001a88:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	f040 80f1 	bne.w	8001c72 <ecMult+0x290>
      MPI_CHECK(mpiCopy(&r->z, &s->z));
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	f103 0218 	add.w	r2, r3, #24
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	3318      	adds	r3, #24
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	4610      	mov	r0, r2
 8001a9e:	f001 f8c5 	bl	8002c2c <mpiCopy>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001aa6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	e0f7      	b.n	8001c9c <ecMult+0x2ba>
   }
   //Check whether Sz == 0
   else if(mpiCompInt(&s->z, 0) == 0)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	3318      	adds	r3, #24
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f001 f84b 	bl	8002b4e <mpiCompInt>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d121      	bne.n	8001b02 <ecMult+0x120>
   {
      //Set R = (1, 1, 0)
      MPI_CHECK(mpiSetValue(&r->x, 1));
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	2101      	movs	r1, #1
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f001 f8e7 	bl	8002c96 <mpiSetValue>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001acc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f040 80d1 	bne.w	8001c76 <ecMult+0x294>
      MPI_CHECK(mpiSetValue(&r->y, 1));
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	330c      	adds	r3, #12
 8001ad8:	2101      	movs	r1, #1
 8001ada:	4618      	mov	r0, r3
 8001adc:	f001 f8db 	bl	8002c96 <mpiSetValue>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001ae4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	f040 80c7 	bne.w	8001c7a <ecMult+0x298>
      MPI_CHECK(mpiSetValue(&r->z, 0));
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	3318      	adds	r3, #24
 8001af0:	2100      	movs	r1, #0
 8001af2:	4618      	mov	r0, r3
 8001af4:	f001 f8cf 	bl	8002c96 <mpiSetValue>
 8001af8:	4603      	mov	r3, r0
 8001afa:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001afc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	e0cc      	b.n	8001c9c <ecMult+0x2ba>
   }
   else
   {
      //Check whether Sz != 1
      if(mpiCompInt(&s->z, 1) != 0)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	3318      	adds	r3, #24
 8001b06:	2101      	movs	r1, #1
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f001 f820 	bl	8002b4e <mpiCompInt>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d015      	beq.n	8001b40 <ecMult+0x15e>
      {
         //Normalize S
         EC_CHECK(ecAffinify(params, r, s));
 8001b14:	683a      	ldr	r2, [r7, #0]
 8001b16:	68b9      	ldr	r1, [r7, #8]
 8001b18:	68f8      	ldr	r0, [r7, #12]
 8001b1a:	f7fe ff21 	bl	8000960 <ecAffinify>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001b22:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	f040 80aa 	bne.w	8001c7e <ecMult+0x29c>
         EC_CHECK(ecProjectify(params, r, r));
 8001b2a:	68ba      	ldr	r2, [r7, #8]
 8001b2c:	68b9      	ldr	r1, [r7, #8]
 8001b2e:	68f8      	ldr	r0, [r7, #12]
 8001b30:	f7fe fef6 	bl	8000920 <ecProjectify>
 8001b34:	4603      	mov	r3, r0
 8001b36:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001b38:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d029      	beq.n	8001b92 <ecMult+0x1b0>
 8001b3e:	e0ad      	b.n	8001c9c <ecMult+0x2ba>
      }
      else
      {
         //Set R = S
         MPI_CHECK(mpiCopy(&r->x, &s->x));
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	683a      	ldr	r2, [r7, #0]
 8001b44:	4611      	mov	r1, r2
 8001b46:	4618      	mov	r0, r3
 8001b48:	f001 f870 	bl	8002c2c <mpiCopy>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001b50:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f040 8095 	bne.w	8001c82 <ecMult+0x2a0>
         MPI_CHECK(mpiCopy(&r->y, &s->y));
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	f103 020c 	add.w	r2, r3, #12
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	330c      	adds	r3, #12
 8001b62:	4619      	mov	r1, r3
 8001b64:	4610      	mov	r0, r2
 8001b66:	f001 f861 	bl	8002c2c <mpiCopy>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001b6e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	f040 8088 	bne.w	8001c86 <ecMult+0x2a4>
         MPI_CHECK(mpiCopy(&r->z, &s->z));
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	f103 0218 	add.w	r2, r3, #24
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	3318      	adds	r3, #24
 8001b80:	4619      	mov	r1, r3
 8001b82:	4610      	mov	r0, r2
 8001b84:	f001 f852 	bl	8002c2c <mpiCopy>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001b8c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d17b      	bne.n	8001c8a <ecMult+0x2a8>
         }
      }
//Fast left-to-right binary method
#else
      //Precompute h = 3 * d
      MPI_CHECK(mpiAdd(&h, d, d));
 8001b92:	f107 0314 	add.w	r3, r7, #20
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	6879      	ldr	r1, [r7, #4]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f001 fa0e 	bl	8002fbc <mpiAdd>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001ba4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d171      	bne.n	8001c8e <ecMult+0x2ac>
      MPI_CHECK(mpiAdd(&h, &h, d));
 8001baa:	f107 0114 	add.w	r1, r7, #20
 8001bae:	f107 0314 	add.w	r3, r7, #20
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f001 fa01 	bl	8002fbc <mpiAdd>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001bbe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d166      	bne.n	8001c92 <ecMult+0x2b0>

      //Scalar multiplication
      for(i = mpiGetBitLength(&h) - 2; i >= 1; i--)
 8001bc4:	f107 0314 	add.w	r3, r7, #20
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f000 feb4 	bl	8002936 <mpiGetBitLength>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	3b02      	subs	r3, #2
 8001bd2:	623b      	str	r3, [r7, #32]
 8001bd4:	e043      	b.n	8001c5e <ecMult+0x27c>
      {
         //Point doubling
         EC_CHECK(ecDouble(params, r, r));
 8001bd6:	68ba      	ldr	r2, [r7, #8]
 8001bd8:	68b9      	ldr	r1, [r7, #8]
 8001bda:	68f8      	ldr	r0, [r7, #12]
 8001bdc:	f7fe ff44 	bl	8000a68 <ecDouble>
 8001be0:	4603      	mov	r3, r0
 8001be2:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001be4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d155      	bne.n	8001c96 <ecMult+0x2b4>

         //Check whether h(i) == 1 and k(i) == 0
         if(mpiGetBitValue(&h, i) && !mpiGetBitValue(d, i))
 8001bea:	f107 0314 	add.w	r3, r7, #20
 8001bee:	6a39      	ldr	r1, [r7, #32]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f000 ff22 	bl	8002a3a <mpiGetBitValue>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d012      	beq.n	8001c22 <ecMult+0x240>
 8001bfc:	6a39      	ldr	r1, [r7, #32]
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f000 ff1b 	bl	8002a3a <mpiGetBitValue>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d10b      	bne.n	8001c22 <ecMult+0x240>
         {
            //Compute R = R + S
            EC_CHECK(ecFullAdd(params, r, r, s));
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	68ba      	ldr	r2, [r7, #8]
 8001c0e:	68b9      	ldr	r1, [r7, #8]
 8001c10:	68f8      	ldr	r0, [r7, #12]
 8001c12:	f7ff fded 	bl	80017f0 <ecFullAdd>
 8001c16:	4603      	mov	r3, r0
 8001c18:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001c1a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d01b      	beq.n	8001c58 <ecMult+0x276>
 8001c20:	e03c      	b.n	8001c9c <ecMult+0x2ba>
         }
         //Check whether h(i) == 0 and k(i) == 1
         else if(!mpiGetBitValue(&h, i) && mpiGetBitValue(d, i))
 8001c22:	f107 0314 	add.w	r3, r7, #20
 8001c26:	6a39      	ldr	r1, [r7, #32]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f000 ff06 	bl	8002a3a <mpiGetBitValue>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d111      	bne.n	8001c58 <ecMult+0x276>
 8001c34:	6a39      	ldr	r1, [r7, #32]
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 feff 	bl	8002a3a <mpiGetBitValue>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d00a      	beq.n	8001c58 <ecMult+0x276>
         {
            //Compute R = R - S
            EC_CHECK(ecFullSub(params, r, r, s));
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	68ba      	ldr	r2, [r7, #8]
 8001c46:	68b9      	ldr	r1, [r7, #8]
 8001c48:	68f8      	ldr	r0, [r7, #12]
 8001c4a:	f7ff fe77 	bl	800193c <ecFullSub>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001c52:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d120      	bne.n	8001c9a <ecMult+0x2b8>
      for(i = mpiGetBitLength(&h) - 2; i >= 1; i--)
 8001c58:	6a3b      	ldr	r3, [r7, #32]
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	623b      	str	r3, [r7, #32]
 8001c5e:	6a3b      	ldr	r3, [r7, #32]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d1b8      	bne.n	8001bd6 <ecMult+0x1f4>
         }
      }
#endif
   }

end:
 8001c64:	e01a      	b.n	8001c9c <ecMult+0x2ba>
      MPI_CHECK(mpiSetValue(&r->x, 1));
 8001c66:	bf00      	nop
 8001c68:	e018      	b.n	8001c9c <ecMult+0x2ba>
      MPI_CHECK(mpiSetValue(&r->y, 1));
 8001c6a:	bf00      	nop
 8001c6c:	e016      	b.n	8001c9c <ecMult+0x2ba>
      MPI_CHECK(mpiCopy(&r->x, &s->x));
 8001c6e:	bf00      	nop
 8001c70:	e014      	b.n	8001c9c <ecMult+0x2ba>
      MPI_CHECK(mpiCopy(&r->y, &s->y));
 8001c72:	bf00      	nop
 8001c74:	e012      	b.n	8001c9c <ecMult+0x2ba>
      MPI_CHECK(mpiSetValue(&r->x, 1));
 8001c76:	bf00      	nop
 8001c78:	e010      	b.n	8001c9c <ecMult+0x2ba>
      MPI_CHECK(mpiSetValue(&r->y, 1));
 8001c7a:	bf00      	nop
 8001c7c:	e00e      	b.n	8001c9c <ecMult+0x2ba>
         EC_CHECK(ecAffinify(params, r, s));
 8001c7e:	bf00      	nop
 8001c80:	e00c      	b.n	8001c9c <ecMult+0x2ba>
         MPI_CHECK(mpiCopy(&r->x, &s->x));
 8001c82:	bf00      	nop
 8001c84:	e00a      	b.n	8001c9c <ecMult+0x2ba>
         MPI_CHECK(mpiCopy(&r->y, &s->y));
 8001c86:	bf00      	nop
 8001c88:	e008      	b.n	8001c9c <ecMult+0x2ba>
         MPI_CHECK(mpiCopy(&r->z, &s->z));
 8001c8a:	bf00      	nop
 8001c8c:	e006      	b.n	8001c9c <ecMult+0x2ba>
      MPI_CHECK(mpiAdd(&h, d, d));
 8001c8e:	bf00      	nop
 8001c90:	e004      	b.n	8001c9c <ecMult+0x2ba>
      MPI_CHECK(mpiAdd(&h, &h, d));
 8001c92:	bf00      	nop
 8001c94:	e002      	b.n	8001c9c <ecMult+0x2ba>
         EC_CHECK(ecDouble(params, r, r));
 8001c96:	bf00      	nop
 8001c98:	e000      	b.n	8001c9c <ecMult+0x2ba>
            EC_CHECK(ecFullSub(params, r, r, s));
 8001c9a:	bf00      	nop
   //Release multiple precision integer
   mpiFree(&h);
 8001c9c:	f107 0314 	add.w	r3, r7, #20
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f000 fdc1 	bl	8002828 <mpiFree>

   //Return status code
   return error;
 8001ca6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3728      	adds	r7, #40	; 0x28
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <ecTwinMultF>:
 * @param[in] t An integer T such as 0 <= T <= 31
 * @return Output value
 **/

uint_t ecTwinMultF(uint_t t)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
   uint_t h;

   //Check the value of T
   if(18 <= t && t < 22)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2b11      	cmp	r3, #17
 8001cbc:	d905      	bls.n	8001cca <ecTwinMultF+0x1a>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2b15      	cmp	r3, #21
 8001cc2:	d802      	bhi.n	8001cca <ecTwinMultF+0x1a>
   {
      h = 9;
 8001cc4:	2309      	movs	r3, #9
 8001cc6:	60fb      	str	r3, [r7, #12]
 8001cc8:	e01c      	b.n	8001d04 <ecTwinMultF+0x54>
   }
   else if(14 <= t && t < 18)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2b0d      	cmp	r3, #13
 8001cce:	d905      	bls.n	8001cdc <ecTwinMultF+0x2c>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2b11      	cmp	r3, #17
 8001cd4:	d802      	bhi.n	8001cdc <ecTwinMultF+0x2c>
   {
      h = 10;
 8001cd6:	230a      	movs	r3, #10
 8001cd8:	60fb      	str	r3, [r7, #12]
 8001cda:	e013      	b.n	8001d04 <ecTwinMultF+0x54>
   }
   else if(22 <= t && t < 24)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2b15      	cmp	r3, #21
 8001ce0:	d905      	bls.n	8001cee <ecTwinMultF+0x3e>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2b17      	cmp	r3, #23
 8001ce6:	d802      	bhi.n	8001cee <ecTwinMultF+0x3e>
   {
      h = 11;
 8001ce8:	230b      	movs	r3, #11
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	e00a      	b.n	8001d04 <ecTwinMultF+0x54>
   }
   else if(4 <= t && t < 12)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2b03      	cmp	r3, #3
 8001cf2:	d905      	bls.n	8001d00 <ecTwinMultF+0x50>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2b0b      	cmp	r3, #11
 8001cf8:	d802      	bhi.n	8001d00 <ecTwinMultF+0x50>
   {
      h = 14;
 8001cfa:	230e      	movs	r3, #14
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	e001      	b.n	8001d04 <ecTwinMultF+0x54>
   }
   else
   {
      h = 12;
 8001d00:	230c      	movs	r3, #12
 8001d02:	60fb      	str	r3, [r7, #12]
   }

   //Return value
   return h;
 8001d04:	68fb      	ldr	r3, [r7, #12]
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3714      	adds	r7, #20
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <ecTwinMult>:
 * @return Error code
 **/

error_t ecTwinMult(const EcDomainParameters *params, EcPoint *r,
   const Mpi *d0, const EcPoint *s, const Mpi *d1, const EcPoint *t)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b0a2      	sub	sp, #136	; 0x88
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	60f8      	str	r0, [r7, #12]
 8001d1a:	60b9      	str	r1, [r7, #8]
 8001d1c:	607a      	str	r2, [r7, #4]
 8001d1e:	603b      	str	r3, [r7, #0]
   int_t u1;
   EcPoint spt;
   EcPoint smt;

   //Initialize EC points
   ecInit(&spt);
 8001d20:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7fe fd95 	bl	8000854 <ecInit>
   ecInit(&smt);
 8001d2a:	f107 0314 	add.w	r3, r7, #20
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7fe fd90 	bl	8000854 <ecInit>

   //Precompute SpT = S + T
   EC_CHECK(ecFullAdd(params, &spt, s, t));
 8001d34:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001d38:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	68f8      	ldr	r0, [r7, #12]
 8001d40:	f7ff fd56 	bl	80017f0 <ecFullAdd>
 8001d44:	4603      	mov	r3, r0
 8001d46:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 8001d4a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	f040 81d7 	bne.w	8002102 <ecTwinMult+0x3f0>
   //Precompute SmT = S - T
   EC_CHECK(ecFullSub(params, &smt, s, t));
 8001d54:	f107 0114 	add.w	r1, r7, #20
 8001d58:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	68f8      	ldr	r0, [r7, #12]
 8001d60:	f7ff fdec 	bl	800193c <ecFullSub>
 8001d64:	4603      	mov	r3, r0
 8001d66:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 8001d6a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f040 81c9 	bne.w	8002106 <ecTwinMult+0x3f4>

   //Let m0 be the bit length of d0
   m0 = mpiGetBitLength(d0);
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f000 fdde 	bl	8002936 <mpiGetBitLength>
 8001d7a:	6678      	str	r0, [r7, #100]	; 0x64
   //Let m1 be the bit length of d1
   m1 = mpiGetBitLength(d1);
 8001d7c:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8001d80:	f000 fdd9 	bl	8002936 <mpiGetBitLength>
 8001d84:	6638      	str	r0, [r7, #96]	; 0x60
   //Let m = MAX(m0, m1)
   m = MAX(m0, m1);
 8001d86:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	bf38      	it	cc
 8001d8e:	4613      	movcc	r3, r2
 8001d90:	65fb      	str	r3, [r7, #92]	; 0x5c

   //Let c be a 2 x 6 binary matrix
   c0 = mpiGetBitValue(d0, m - 4);
 8001d92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d94:	3b04      	subs	r3, #4
 8001d96:	4619      	mov	r1, r3
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f000 fe4e 	bl	8002a3a <mpiGetBitValue>
 8001d9e:	67f8      	str	r0, [r7, #124]	; 0x7c
   c0 |= mpiGetBitValue(d0, m - 3) << 1;
 8001da0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001da2:	3b03      	subs	r3, #3
 8001da4:	4619      	mov	r1, r3
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f000 fe47 	bl	8002a3a <mpiGetBitValue>
 8001dac:	4603      	mov	r3, r0
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001db2:	4313      	orrs	r3, r2
 8001db4:	67fb      	str	r3, [r7, #124]	; 0x7c
   c0 |= mpiGetBitValue(d0, m - 2) << 2;
 8001db6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001db8:	3b02      	subs	r3, #2
 8001dba:	4619      	mov	r1, r3
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f000 fe3c 	bl	8002a3a <mpiGetBitValue>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	67fb      	str	r3, [r7, #124]	; 0x7c
   c0 |= mpiGetBitValue(d0, m - 1) << 3;
 8001dcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f000 fe31 	bl	8002a3a <mpiGetBitValue>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	00db      	lsls	r3, r3, #3
 8001ddc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001dde:	4313      	orrs	r3, r2
 8001de0:	67fb      	str	r3, [r7, #124]	; 0x7c
   c1 = mpiGetBitValue(d1, m - 4);
 8001de2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001de4:	3b04      	subs	r3, #4
 8001de6:	4619      	mov	r1, r3
 8001de8:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8001dec:	f000 fe25 	bl	8002a3a <mpiGetBitValue>
 8001df0:	67b8      	str	r0, [r7, #120]	; 0x78
   c1 |= mpiGetBitValue(d1, m - 3) << 1;
 8001df2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001df4:	3b03      	subs	r3, #3
 8001df6:	4619      	mov	r1, r3
 8001df8:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8001dfc:	f000 fe1d 	bl	8002a3a <mpiGetBitValue>
 8001e00:	4603      	mov	r3, r0
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001e06:	4313      	orrs	r3, r2
 8001e08:	67bb      	str	r3, [r7, #120]	; 0x78
   c1 |= mpiGetBitValue(d1, m - 2) << 2;
 8001e0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e0c:	3b02      	subs	r3, #2
 8001e0e:	4619      	mov	r1, r3
 8001e10:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8001e14:	f000 fe11 	bl	8002a3a <mpiGetBitValue>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	67bb      	str	r3, [r7, #120]	; 0x78
   c1 |= mpiGetBitValue(d1, m - 1) << 3;
 8001e22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e24:	3b01      	subs	r3, #1
 8001e26:	4619      	mov	r1, r3
 8001e28:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8001e2c:	f000 fe05 	bl	8002a3a <mpiGetBitValue>
 8001e30:	4603      	mov	r3, r0
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001e36:	4313      	orrs	r3, r2
 8001e38:	67bb      	str	r3, [r7, #120]	; 0x78

   //Set R = (1, 1, 0)
   MPI_CHECK(mpiSetValue(&r->x, 1));
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	2101      	movs	r1, #1
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f000 ff29 	bl	8002c96 <mpiSetValue>
 8001e44:	4603      	mov	r3, r0
 8001e46:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 8001e4a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	f040 815b 	bne.w	800210a <ecTwinMult+0x3f8>
   MPI_CHECK(mpiSetValue(&r->y, 1));
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	330c      	adds	r3, #12
 8001e58:	2101      	movs	r1, #1
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f000 ff1b 	bl	8002c96 <mpiSetValue>
 8001e60:	4603      	mov	r3, r0
 8001e62:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 8001e66:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f040 814f 	bne.w	800210e <ecTwinMult+0x3fc>
   MPI_CHECK(mpiSetValue(&r->z, 0));
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	3318      	adds	r3, #24
 8001e74:	2100      	movs	r1, #0
 8001e76:	4618      	mov	r0, r3
 8001e78:	f000 ff0d 	bl	8002c96 <mpiSetValue>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 8001e82:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	f040 8143 	bne.w	8002112 <ecTwinMult+0x400>

   //Calculate both multiplications at the same time
   for(k = m; k >= 0; k--)
 8001e8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e8e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001e92:	e130      	b.n	80020f6 <ecTwinMult+0x3e4>
   {
      //Compute h(0) = 16 * c(0,1) + 8 * c(0,2) + 4 * c(0,3) + 2 * c(0,4) + c(0,5)
      h0 = c0 & 0x1F;
 8001e94:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e96:	f003 031f 	and.w	r3, r3, #31
 8001e9a:	677b      	str	r3, [r7, #116]	; 0x74

      //Check whether c(0,0) == 1
      if(c0 & 0x20)
 8001e9c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e9e:	f003 0320 	and.w	r3, r3, #32
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d003      	beq.n	8001eae <ecTwinMult+0x19c>
      {
         h0 = 31 - h0;
 8001ea6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ea8:	f1c3 031f 	rsb	r3, r3, #31
 8001eac:	677b      	str	r3, [r7, #116]	; 0x74
      }

      //Compute h(1) = 16 * c(1,1) + 8 * c(1,2) + 4 * c(1,3) + 2 * c(1,4) + c(1,5)
      h1 = c1 & 0x1F;
 8001eae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001eb0:	f003 031f 	and.w	r3, r3, #31
 8001eb4:	673b      	str	r3, [r7, #112]	; 0x70

      //Check whether c(1,0) == 1
      if(c1 & 0x20)
 8001eb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001eb8:	f003 0320 	and.w	r3, r3, #32
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d003      	beq.n	8001ec8 <ecTwinMult+0x1b6>
      {
         h1 = 31 - h1;
 8001ec0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ec2:	f1c3 031f 	rsb	r3, r3, #31
 8001ec6:	673b      	str	r3, [r7, #112]	; 0x70
      }

      //Compute u(0)
      if(h0 < ecTwinMultF(h1))
 8001ec8:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001eca:	f7ff fef1 	bl	8001cb0 <ecTwinMultF>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d202      	bcs.n	8001edc <ecTwinMult+0x1ca>
      {
         u0 = 0;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001eda:	e00a      	b.n	8001ef2 <ecTwinMult+0x1e0>
      }
      else if(c0 & 0x20)
 8001edc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ede:	f003 0320 	and.w	r3, r3, #32
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d003      	beq.n	8001eee <ecTwinMult+0x1dc>
      {
         u0 = -1;
 8001ee6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001eea:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001eec:	e001      	b.n	8001ef2 <ecTwinMult+0x1e0>
      }
      else
      {
         u0 = 1;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	66fb      	str	r3, [r7, #108]	; 0x6c
      }

      //Compute u(1)
      if(h1 < ecTwinMultF(h0))
 8001ef2:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001ef4:	f7ff fedc 	bl	8001cb0 <ecTwinMultF>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d202      	bcs.n	8001f06 <ecTwinMult+0x1f4>
      {
         u1 = 0;
 8001f00:	2300      	movs	r3, #0
 8001f02:	66bb      	str	r3, [r7, #104]	; 0x68
 8001f04:	e00a      	b.n	8001f1c <ecTwinMult+0x20a>
      }
      else if(c1 & 0x20)
 8001f06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f08:	f003 0320 	and.w	r3, r3, #32
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d003      	beq.n	8001f18 <ecTwinMult+0x206>
      {
         u1 = -1;
 8001f10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f14:	66bb      	str	r3, [r7, #104]	; 0x68
 8001f16:	e001      	b.n	8001f1c <ecTwinMult+0x20a>
      }
      else
      {
         u1 = 1;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	66bb      	str	r3, [r7, #104]	; 0x68
      }

      //Update c matrix
      c0 <<= 1;
 8001f1c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	67fb      	str	r3, [r7, #124]	; 0x7c
      c0 |= mpiGetBitValue(d0, k - 5);
 8001f22:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f26:	3b05      	subs	r3, #5
 8001f28:	4619      	mov	r1, r3
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 fd85 	bl	8002a3a <mpiGetBitValue>
 8001f30:	4602      	mov	r2, r0
 8001f32:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f34:	4313      	orrs	r3, r2
 8001f36:	67fb      	str	r3, [r7, #124]	; 0x7c
      c0 ^= u0 ? 0x20 : 0x00;
 8001f38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <ecTwinMult+0x230>
 8001f3e:	2320      	movs	r3, #32
 8001f40:	e000      	b.n	8001f44 <ecTwinMult+0x232>
 8001f42:	2300      	movs	r3, #0
 8001f44:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001f46:	4053      	eors	r3, r2
 8001f48:	67fb      	str	r3, [r7, #124]	; 0x7c
      c1 <<= 1;
 8001f4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	67bb      	str	r3, [r7, #120]	; 0x78
      c1 |= mpiGetBitValue(d1, k - 5);
 8001f50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f54:	3b05      	subs	r3, #5
 8001f56:	4619      	mov	r1, r3
 8001f58:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8001f5c:	f000 fd6d 	bl	8002a3a <mpiGetBitValue>
 8001f60:	4602      	mov	r2, r0
 8001f62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f64:	4313      	orrs	r3, r2
 8001f66:	67bb      	str	r3, [r7, #120]	; 0x78
      c1 ^= u1 ? 0x20 : 0x00;
 8001f68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <ecTwinMult+0x260>
 8001f6e:	2320      	movs	r3, #32
 8001f70:	e000      	b.n	8001f74 <ecTwinMult+0x262>
 8001f72:	2300      	movs	r3, #0
 8001f74:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001f76:	4053      	eors	r3, r2
 8001f78:	67bb      	str	r3, [r7, #120]	; 0x78

      //Point doubling
      EC_CHECK(ecDouble(params, r, r));
 8001f7a:	68ba      	ldr	r2, [r7, #8]
 8001f7c:	68b9      	ldr	r1, [r7, #8]
 8001f7e:	68f8      	ldr	r0, [r7, #12]
 8001f80:	f7fe fd72 	bl	8000a68 <ecDouble>
 8001f84:	4603      	mov	r3, r0
 8001f86:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 8001f8a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f040 80c1 	bne.w	8002116 <ecTwinMult+0x404>

      //Check u(0) and u(1)
      if(u0 == -1 && u1 == -1)
 8001f94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f9a:	d113      	bne.n	8001fc4 <ecTwinMult+0x2b2>
 8001f9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001fa2:	d10f      	bne.n	8001fc4 <ecTwinMult+0x2b2>
      {
         //Compute R = R - SpT
         EC_CHECK(ecFullSub(params, r, r, &spt));
 8001fa4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001fa8:	68ba      	ldr	r2, [r7, #8]
 8001faa:	68b9      	ldr	r1, [r7, #8]
 8001fac:	68f8      	ldr	r0, [r7, #12]
 8001fae:	f7ff fcc5 	bl	800193c <ecFullSub>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 8001fb8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	f000 8095 	beq.w	80020ec <ecTwinMult+0x3da>
 8001fc2:	e0ab      	b.n	800211c <ecTwinMult+0x40a>
      }
      else if(u0 == -1 && u1 == 0)
 8001fc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001fca:	d110      	bne.n	8001fee <ecTwinMult+0x2dc>
 8001fcc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d10d      	bne.n	8001fee <ecTwinMult+0x2dc>
      {
         //Compute R = R - S
         EC_CHECK(ecFullSub(params, r, r, s));
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	68ba      	ldr	r2, [r7, #8]
 8001fd6:	68b9      	ldr	r1, [r7, #8]
 8001fd8:	68f8      	ldr	r0, [r7, #12]
 8001fda:	f7ff fcaf 	bl	800193c <ecFullSub>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 8001fe4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d07f      	beq.n	80020ec <ecTwinMult+0x3da>
 8001fec:	e096      	b.n	800211c <ecTwinMult+0x40a>
      }
      else if(u0 == -1 && u1 == 1)
 8001fee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ff0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ff4:	d111      	bne.n	800201a <ecTwinMult+0x308>
 8001ff6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d10e      	bne.n	800201a <ecTwinMult+0x308>
      {
         //Compute R = R - SmT
         EC_CHECK(ecFullSub(params, r, r, &smt));
 8001ffc:	f107 0314 	add.w	r3, r7, #20
 8002000:	68ba      	ldr	r2, [r7, #8]
 8002002:	68b9      	ldr	r1, [r7, #8]
 8002004:	68f8      	ldr	r0, [r7, #12]
 8002006:	f7ff fc99 	bl	800193c <ecFullSub>
 800200a:	4603      	mov	r3, r0
 800200c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 8002010:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002014:	2b00      	cmp	r3, #0
 8002016:	d069      	beq.n	80020ec <ecTwinMult+0x3da>
 8002018:	e080      	b.n	800211c <ecTwinMult+0x40a>
      }
      else if(u0 == 0 && u1 == -1)
 800201a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800201c:	2b00      	cmp	r3, #0
 800201e:	d112      	bne.n	8002046 <ecTwinMult+0x334>
 8002020:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002022:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002026:	d10e      	bne.n	8002046 <ecTwinMult+0x334>
      {
         //Compute R = R - T
         EC_CHECK(ecFullSub(params, r, r, t));
 8002028:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800202c:	68ba      	ldr	r2, [r7, #8]
 800202e:	68b9      	ldr	r1, [r7, #8]
 8002030:	68f8      	ldr	r0, [r7, #12]
 8002032:	f7ff fc83 	bl	800193c <ecFullSub>
 8002036:	4603      	mov	r3, r0
 8002038:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 800203c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002040:	2b00      	cmp	r3, #0
 8002042:	d053      	beq.n	80020ec <ecTwinMult+0x3da>
 8002044:	e06a      	b.n	800211c <ecTwinMult+0x40a>
      }
      else if(u0 == 0 && u1 == 1)
 8002046:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002048:	2b00      	cmp	r3, #0
 800204a:	d111      	bne.n	8002070 <ecTwinMult+0x35e>
 800204c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800204e:	2b01      	cmp	r3, #1
 8002050:	d10e      	bne.n	8002070 <ecTwinMult+0x35e>
      {
         //Compute R = R + T
         EC_CHECK(ecFullAdd(params, r, r, t));
 8002052:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002056:	68ba      	ldr	r2, [r7, #8]
 8002058:	68b9      	ldr	r1, [r7, #8]
 800205a:	68f8      	ldr	r0, [r7, #12]
 800205c:	f7ff fbc8 	bl	80017f0 <ecFullAdd>
 8002060:	4603      	mov	r3, r0
 8002062:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 8002066:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800206a:	2b00      	cmp	r3, #0
 800206c:	d03e      	beq.n	80020ec <ecTwinMult+0x3da>
 800206e:	e055      	b.n	800211c <ecTwinMult+0x40a>
      }
      else if(u0 == 1 && u1 == -1)
 8002070:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002072:	2b01      	cmp	r3, #1
 8002074:	d112      	bne.n	800209c <ecTwinMult+0x38a>
 8002076:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002078:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800207c:	d10e      	bne.n	800209c <ecTwinMult+0x38a>
      {
         //Compute R = R + SmT
         EC_CHECK(ecFullAdd(params, r, r, &smt));
 800207e:	f107 0314 	add.w	r3, r7, #20
 8002082:	68ba      	ldr	r2, [r7, #8]
 8002084:	68b9      	ldr	r1, [r7, #8]
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	f7ff fbb2 	bl	80017f0 <ecFullAdd>
 800208c:	4603      	mov	r3, r0
 800208e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 8002092:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002096:	2b00      	cmp	r3, #0
 8002098:	d028      	beq.n	80020ec <ecTwinMult+0x3da>
 800209a:	e03f      	b.n	800211c <ecTwinMult+0x40a>
      }
      else if(u0 == 1 && u1 == 0)
 800209c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d110      	bne.n	80020c4 <ecTwinMult+0x3b2>
 80020a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d10d      	bne.n	80020c4 <ecTwinMult+0x3b2>
      {
         //Compute R = R + S
         EC_CHECK(ecFullAdd(params, r, r, s));
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	68ba      	ldr	r2, [r7, #8]
 80020ac:	68b9      	ldr	r1, [r7, #8]
 80020ae:	68f8      	ldr	r0, [r7, #12]
 80020b0:	f7ff fb9e 	bl	80017f0 <ecFullAdd>
 80020b4:	4603      	mov	r3, r0
 80020b6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 80020ba:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d014      	beq.n	80020ec <ecTwinMult+0x3da>
 80020c2:	e02b      	b.n	800211c <ecTwinMult+0x40a>
      }
      else if(u0 == 1 && u1 == 1)
 80020c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d110      	bne.n	80020ec <ecTwinMult+0x3da>
 80020ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d10d      	bne.n	80020ec <ecTwinMult+0x3da>
      {
         //Compute R = R + SpT
         EC_CHECK(ecFullAdd(params, r, r, &spt));
 80020d0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80020d4:	68ba      	ldr	r2, [r7, #8]
 80020d6:	68b9      	ldr	r1, [r7, #8]
 80020d8:	68f8      	ldr	r0, [r7, #12]
 80020da:	f7ff fb89 	bl	80017f0 <ecFullAdd>
 80020de:	4603      	mov	r3, r0
 80020e0:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 80020e4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d116      	bne.n	800211a <ecTwinMult+0x408>
   for(k = m; k >= 0; k--)
 80020ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80020f0:	3b01      	subs	r3, #1
 80020f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80020f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f6bf aeca 	bge.w	8001e94 <ecTwinMult+0x182>
      }
   }

end:
 8002100:	e00c      	b.n	800211c <ecTwinMult+0x40a>
   EC_CHECK(ecFullAdd(params, &spt, s, t));
 8002102:	bf00      	nop
 8002104:	e00a      	b.n	800211c <ecTwinMult+0x40a>
   EC_CHECK(ecFullSub(params, &smt, s, t));
 8002106:	bf00      	nop
 8002108:	e008      	b.n	800211c <ecTwinMult+0x40a>
   MPI_CHECK(mpiSetValue(&r->x, 1));
 800210a:	bf00      	nop
 800210c:	e006      	b.n	800211c <ecTwinMult+0x40a>
   MPI_CHECK(mpiSetValue(&r->y, 1));
 800210e:	bf00      	nop
 8002110:	e004      	b.n	800211c <ecTwinMult+0x40a>
   MPI_CHECK(mpiSetValue(&r->z, 0));
 8002112:	bf00      	nop
 8002114:	e002      	b.n	800211c <ecTwinMult+0x40a>
      EC_CHECK(ecDouble(params, r, r));
 8002116:	bf00      	nop
 8002118:	e000      	b.n	800211c <ecTwinMult+0x40a>
         EC_CHECK(ecFullAdd(params, r, r, &spt));
 800211a:	bf00      	nop
   //Release EC points
   ecFree(&spt);
 800211c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002120:	4618      	mov	r0, r3
 8002122:	f7fe fbad 	bl	8000880 <ecFree>
   ecFree(&smt);
 8002126:	f107 0314 	add.w	r3, r7, #20
 800212a:	4618      	mov	r0, r3
 800212c:	f7fe fba8 	bl	8000880 <ecFree>

   //Return status code
   return error;
 8002130:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
}
 8002134:	4618      	mov	r0, r3
 8002136:	3788      	adds	r7, #136	; 0x88
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <ecAddMod>:
 * @return Error code
 **/

error_t ecAddMod(const EcDomainParameters *params, Mpi *r, const Mpi *a,
   const Mpi *b)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	607a      	str	r2, [r7, #4]
 8002148:	603b      	str	r3, [r7, #0]
   error_t error;

   //Compute R = A + B
   MPI_CHECK(mpiAdd(r, a, b));
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	6879      	ldr	r1, [r7, #4]
 800214e:	68b8      	ldr	r0, [r7, #8]
 8002150:	f000 ff34 	bl	8002fbc <mpiAdd>
 8002154:	4603      	mov	r3, r0
 8002156:	82fb      	strh	r3, [r7, #22]
 8002158:	8afb      	ldrh	r3, [r7, #22]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d114      	bne.n	8002188 <ecAddMod+0x4c>

   //Compute R = (A + B) mod p
   if(mpiComp(r, &params->p) >= 0)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	3308      	adds	r3, #8
 8002162:	4619      	mov	r1, r3
 8002164:	68b8      	ldr	r0, [r7, #8]
 8002166:	f000 fc8c 	bl	8002a82 <mpiComp>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	db0d      	blt.n	800218c <ecAddMod+0x50>
   {
      MPI_CHECK(mpiSub(r, r, &params->p));
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	3308      	adds	r3, #8
 8002174:	461a      	mov	r2, r3
 8002176:	68b9      	ldr	r1, [r7, #8]
 8002178:	68b8      	ldr	r0, [r7, #8]
 800217a:	f000 ff7f 	bl	800307c <mpiSub>
 800217e:	4603      	mov	r3, r0
 8002180:	82fb      	strh	r3, [r7, #22]
 8002182:	8afb      	ldrh	r3, [r7, #22]
 8002184:	2b00      	cmp	r3, #0
   }

end:
 8002186:	e001      	b.n	800218c <ecAddMod+0x50>
   MPI_CHECK(mpiAdd(r, a, b));
 8002188:	bf00      	nop
 800218a:	e000      	b.n	800218e <ecAddMod+0x52>
end:
 800218c:	bf00      	nop
   //Return status code
   return error;
 800218e:	8afb      	ldrh	r3, [r7, #22]
}
 8002190:	4618      	mov	r0, r3
 8002192:	3718      	adds	r7, #24
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <ecSubMod>:
 * @return Error code
 **/

error_t ecSubMod(const EcDomainParameters *params, Mpi *r, const Mpi *a,
   const Mpi *b)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
 80021a4:	603b      	str	r3, [r7, #0]
   error_t error;

   //Compute R = A - B
   MPI_CHECK(mpiSub(r, a, b));
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	6879      	ldr	r1, [r7, #4]
 80021aa:	68b8      	ldr	r0, [r7, #8]
 80021ac:	f000 ff66 	bl	800307c <mpiSub>
 80021b0:	4603      	mov	r3, r0
 80021b2:	82fb      	strh	r3, [r7, #22]
 80021b4:	8afb      	ldrh	r3, [r7, #22]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d112      	bne.n	80021e0 <ecSubMod+0x48>

   //Compute R = (A - B) mod p
   if(mpiCompInt(r, 0) < 0)
 80021ba:	2100      	movs	r1, #0
 80021bc:	68b8      	ldr	r0, [r7, #8]
 80021be:	f000 fcc6 	bl	8002b4e <mpiCompInt>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	da0d      	bge.n	80021e4 <ecSubMod+0x4c>
   {
      MPI_CHECK(mpiAdd(r, r, &params->p));
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	3308      	adds	r3, #8
 80021cc:	461a      	mov	r2, r3
 80021ce:	68b9      	ldr	r1, [r7, #8]
 80021d0:	68b8      	ldr	r0, [r7, #8]
 80021d2:	f000 fef3 	bl	8002fbc <mpiAdd>
 80021d6:	4603      	mov	r3, r0
 80021d8:	82fb      	strh	r3, [r7, #22]
 80021da:	8afb      	ldrh	r3, [r7, #22]
 80021dc:	2b00      	cmp	r3, #0
   }

end:
 80021de:	e001      	b.n	80021e4 <ecSubMod+0x4c>
   MPI_CHECK(mpiSub(r, a, b));
 80021e0:	bf00      	nop
 80021e2:	e000      	b.n	80021e6 <ecSubMod+0x4e>
end:
 80021e4:	bf00      	nop
   //Return status code
   return error;
 80021e6:	8afb      	ldrh	r3, [r7, #22]
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3718      	adds	r7, #24
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <ecMulMod>:
 * @return Error code
 **/

__weak_func error_t ecMulMod(const EcDomainParameters *params, Mpi *r, const Mpi *a,
   const Mpi *b)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
 80021fc:	603b      	str	r3, [r7, #0]
   error_t error;

   //Compute R = A * B
   MPI_CHECK(mpiMul(r, a, b));
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	6879      	ldr	r1, [r7, #4]
 8002202:	68b8      	ldr	r0, [r7, #8]
 8002204:	f001 fa1c 	bl	8003640 <mpiMul>
 8002208:	4603      	mov	r3, r0
 800220a:	82fb      	strh	r3, [r7, #22]
 800220c:	8afb      	ldrh	r3, [r7, #22]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d11b      	bne.n	800224a <ecMulMod+0x5a>

   //Compute R = (A * B) mod p
   if(params->mod != NULL)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002216:	2b00      	cmp	r3, #0
 8002218:	d00b      	beq.n	8002232 <ecMulMod+0x42>
   {
      MPI_CHECK(params->mod(r, &params->p));
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	3208      	adds	r2, #8
 8002222:	4611      	mov	r1, r2
 8002224:	68b8      	ldr	r0, [r7, #8]
 8002226:	4798      	blx	r3
 8002228:	4603      	mov	r3, r0
 800222a:	82fb      	strh	r3, [r7, #22]
 800222c:	8afb      	ldrh	r3, [r7, #22]
 800222e:	2b00      	cmp	r3, #0
 8002230:	e00c      	b.n	800224c <ecMulMod+0x5c>
   }
   else
   {
      MPI_CHECK(mpiMod(r, r, &params->p));
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	3308      	adds	r3, #8
 8002236:	461a      	mov	r2, r3
 8002238:	68b9      	ldr	r1, [r7, #8]
 800223a:	68b8      	ldr	r0, [r7, #8]
 800223c:	f001 fb92 	bl	8003964 <mpiMod>
 8002240:	4603      	mov	r3, r0
 8002242:	82fb      	strh	r3, [r7, #22]
 8002244:	8afb      	ldrh	r3, [r7, #22]
 8002246:	2b00      	cmp	r3, #0
   }

end:
 8002248:	e000      	b.n	800224c <ecMulMod+0x5c>
   MPI_CHECK(mpiMul(r, a, b));
 800224a:	bf00      	nop
   //Return status code
   return error;
 800224c:	8afb      	ldrh	r3, [r7, #22]
}
 800224e:	4618      	mov	r0, r3
 8002250:	3718      	adds	r7, #24
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <ecSqrMod>:
 * @param[in] a An integer such as 0 <= A < p
 * @return Error code
 **/

__weak_func error_t ecSqrMod(const EcDomainParameters *params, Mpi *r, const Mpi *a)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b086      	sub	sp, #24
 800225a:	af00      	add	r7, sp, #0
 800225c:	60f8      	str	r0, [r7, #12]
 800225e:	60b9      	str	r1, [r7, #8]
 8002260:	607a      	str	r2, [r7, #4]
   error_t error;

   //Compute R = A ^ 2
   MPI_CHECK(mpiMul(r, a, a));
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	6879      	ldr	r1, [r7, #4]
 8002266:	68b8      	ldr	r0, [r7, #8]
 8002268:	f001 f9ea 	bl	8003640 <mpiMul>
 800226c:	4603      	mov	r3, r0
 800226e:	82fb      	strh	r3, [r7, #22]
 8002270:	8afb      	ldrh	r3, [r7, #22]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d11b      	bne.n	80022ae <ecSqrMod+0x58>

   //Compute R = (A ^ 2) mod p
   if(params->mod != NULL)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00b      	beq.n	8002296 <ecSqrMod+0x40>
   {
      MPI_CHECK(params->mod(r, &params->p));
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	3208      	adds	r2, #8
 8002286:	4611      	mov	r1, r2
 8002288:	68b8      	ldr	r0, [r7, #8]
 800228a:	4798      	blx	r3
 800228c:	4603      	mov	r3, r0
 800228e:	82fb      	strh	r3, [r7, #22]
 8002290:	8afb      	ldrh	r3, [r7, #22]
 8002292:	2b00      	cmp	r3, #0
 8002294:	e00c      	b.n	80022b0 <ecSqrMod+0x5a>
   }
   else
   {
      MPI_CHECK(mpiMod(r, r, &params->p));
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	3308      	adds	r3, #8
 800229a:	461a      	mov	r2, r3
 800229c:	68b9      	ldr	r1, [r7, #8]
 800229e:	68b8      	ldr	r0, [r7, #8]
 80022a0:	f001 fb60 	bl	8003964 <mpiMod>
 80022a4:	4603      	mov	r3, r0
 80022a6:	82fb      	strh	r3, [r7, #22]
 80022a8:	8afb      	ldrh	r3, [r7, #22]
 80022aa:	2b00      	cmp	r3, #0
   }

end:
 80022ac:	e000      	b.n	80022b0 <ecSqrMod+0x5a>
   MPI_CHECK(mpiMul(r, a, a));
 80022ae:	bf00      	nop
   //Return status code
   return error;
 80022b0:	8afb      	ldrh	r3, [r7, #22]
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3718      	adds	r7, #24
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}

080022ba <ecdsaInitSignature>:
 * @brief Initialize an ECDSA signature
 * @param[in] signature Pointer to the ECDSA signature to initialize
 **/

void ecdsaInitSignature(EcdsaSignature *signature)
{
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b082      	sub	sp, #8
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
   //Initialize multiple precision integers
   mpiInit(&signature->r);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f000 fa9c 	bl	8002802 <mpiInit>
   mpiInit(&signature->s);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	330c      	adds	r3, #12
 80022ce:	4618      	mov	r0, r3
 80022d0:	f000 fa97 	bl	8002802 <mpiInit>
}
 80022d4:	bf00      	nop
 80022d6:	3708      	adds	r7, #8
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <ecdsaGenerateSignature>:
 **/

__weak_func error_t ecdsaGenerateSignature(const PrngAlgo *prngAlgo, void *prngContext,
   const EcDomainParameters *params, const EcPrivateKey *privateKey,
   const uint8_t *digest, size_t digestLen, EcdsaSignature *signature)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b096      	sub	sp, #88	; 0x58
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
 80022e8:	603b      	str	r3, [r7, #0]
   Mpi k;
   Mpi z;
   EcPoint r1;

   //Check parameters
   if(params == NULL || privateKey == NULL || digest == NULL || signature == NULL)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d008      	beq.n	8002302 <ecdsaGenerateSignature+0x26>
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d005      	beq.n	8002302 <ecdsaGenerateSignature+0x26>
 80022f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d002      	beq.n	8002302 <ecdsaGenerateSignature+0x26>
 80022fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <ecdsaGenerateSignature+0x2a>
      return ERROR_INVALID_PARAMETER;
 8002302:	2302      	movs	r3, #2
 8002304:	e10a      	b.n	800251c <ecdsaGenerateSignature+0x240>
   TRACE_DEBUG_MPI("    ", &privateKey->d);
   TRACE_DEBUG("  digest:\r\n");
   TRACE_DEBUG_ARRAY("    ", digest, digestLen);

   //Initialize multiple precision integers
   mpiInit(&k);
 8002306:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800230a:	4618      	mov	r0, r3
 800230c:	f000 fa79 	bl	8002802 <mpiInit>
   mpiInit(&z);
 8002310:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002314:	4618      	mov	r0, r3
 8002316:	f000 fa74 	bl	8002802 <mpiInit>
   //Initialize EC point
   ecInit(&r1);
 800231a:	f107 0314 	add.w	r3, r7, #20
 800231e:	4618      	mov	r0, r3
 8002320:	f7fe fa98 	bl	8000854 <ecInit>

   //Generate a random number k such as 0 < k < q - 1
   MPI_CHECK(mpiRandRange(&k, &params->q, prngAlgo, prngContext));
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f103 0150 	add.w	r1, r3, #80	; 0x50
 800232a:	f107 0044 	add.w	r0, r7, #68	; 0x44
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	68fa      	ldr	r2, [r7, #12]
 8002332:	f000 fd38 	bl	8002da6 <mpiRandRange>
 8002336:	4603      	mov	r3, r0
 8002338:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800233c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002340:	2b00      	cmp	r3, #0
 8002342:	f040 80ba 	bne.w	80024ba <ecdsaGenerateSignature+0x1de>
   //Debug message
   TRACE_DEBUG("  k:\r\n");
   TRACE_DEBUG_MPI("    ", &k);

   //Let N be the bit length of q
   n = mpiGetBitLength(&params->q);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	3350      	adds	r3, #80	; 0x50
 800234a:	4618      	mov	r0, r3
 800234c:	f000 faf3 	bl	8002936 <mpiGetBitLength>
 8002350:	6538      	str	r0, [r7, #80]	; 0x50
   //Compute N = MIN(N, outlen)
   n = MIN(n, digestLen * 8);
 8002352:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002354:	00db      	lsls	r3, r3, #3
 8002356:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002358:	4293      	cmp	r3, r2
 800235a:	bf28      	it	cs
 800235c:	4613      	movcs	r3, r2
 800235e:	653b      	str	r3, [r7, #80]	; 0x50

   //Convert the digest to a multiple precision integer
   MPI_CHECK(mpiReadRaw(&z, digest, (n + 7) / 8));
 8002360:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002362:	3307      	adds	r3, #7
 8002364:	08da      	lsrs	r2, r3, #3
 8002366:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800236a:	2301      	movs	r3, #1
 800236c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800236e:	f000 fd71 	bl	8002e54 <mpiImport>
 8002372:	4603      	mov	r3, r0
 8002374:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8002378:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800237c:	2b00      	cmp	r3, #0
 800237e:	f040 809e 	bne.w	80024be <ecdsaGenerateSignature+0x1e2>

   //Keep the leftmost N bits of the hash value
   if((n % 8) != 0)
 8002382:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002384:	f003 0307 	and.w	r3, r3, #7
 8002388:	2b00      	cmp	r3, #0
 800238a:	d012      	beq.n	80023b2 <ecdsaGenerateSignature+0xd6>
   {
      MPI_CHECK(mpiShiftRight(&z, 8 - (n % 8)));
 800238c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	f1c3 0208 	rsb	r2, r3, #8
 8002396:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800239a:	4611      	mov	r1, r2
 800239c:	4618      	mov	r0, r3
 800239e:	f001 f8bf 	bl	8003520 <mpiShiftRight>
 80023a2:	4603      	mov	r3, r0
 80023a4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80023a8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f040 8088 	bne.w	80024c2 <ecdsaGenerateSignature+0x1e6>
   //Debug message
   TRACE_DEBUG("  z:\r\n");
   TRACE_DEBUG_MPI("    ", &z);

   //Compute R1 = (x1, y1) = k.G
   EC_CHECK(ecMult(params, &r1, &k, &params->g));
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	332c      	adds	r3, #44	; 0x2c
 80023b6:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80023ba:	f107 0114 	add.w	r1, r7, #20
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f7ff fb0f 	bl	80019e2 <ecMult>
 80023c4:	4603      	mov	r3, r0
 80023c6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80023ca:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d179      	bne.n	80024c6 <ecdsaGenerateSignature+0x1ea>
   EC_CHECK(ecAffinify(params, &r1, &r1));
 80023d2:	f107 0214 	add.w	r2, r7, #20
 80023d6:	f107 0314 	add.w	r3, r7, #20
 80023da:	4619      	mov	r1, r3
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f7fe fabf 	bl	8000960 <ecAffinify>
 80023e2:	4603      	mov	r3, r0
 80023e4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80023e8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d16c      	bne.n	80024ca <ecdsaGenerateSignature+0x1ee>
   TRACE_DEBUG_MPI("    ", &r1.x);
   TRACE_DEBUG("  y1:\r\n");
   TRACE_DEBUG_MPI("    ", &r1.y);

   //Compute r = x1 mod q
   MPI_CHECK(mpiMod(&signature->r, &r1.x, &params->q));
 80023f0:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f103 0250 	add.w	r2, r3, #80	; 0x50
 80023f8:	f107 0314 	add.w	r3, r7, #20
 80023fc:	4619      	mov	r1, r3
 80023fe:	f001 fab1 	bl	8003964 <mpiMod>
 8002402:	4603      	mov	r3, r0
 8002404:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8002408:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800240c:	2b00      	cmp	r3, #0
 800240e:	d15e      	bne.n	80024ce <ecdsaGenerateSignature+0x1f2>

   //Compute k ^ -1 mod q
   MPI_CHECK(mpiInvMod(&k, &k, &params->q));
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8002416:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800241a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800241e:	4618      	mov	r0, r3
 8002420:	f001 fb50 	bl	8003ac4 <mpiInvMod>
 8002424:	4603      	mov	r3, r0
 8002426:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800242a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800242e:	2b00      	cmp	r3, #0
 8002430:	d14f      	bne.n	80024d2 <ecdsaGenerateSignature+0x1f6>

   //Compute s = k ^ -1 * (z + x * r) mod q
   MPI_CHECK(mpiMul(&signature->s, &privateKey->d, &signature->r));
 8002432:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002434:	330c      	adds	r3, #12
 8002436:	6839      	ldr	r1, [r7, #0]
 8002438:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800243a:	4618      	mov	r0, r3
 800243c:	f001 f900 	bl	8003640 <mpiMul>
 8002440:	4603      	mov	r3, r0
 8002442:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8002446:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800244a:	2b00      	cmp	r3, #0
 800244c:	d143      	bne.n	80024d6 <ecdsaGenerateSignature+0x1fa>
   MPI_CHECK(mpiAdd(&signature->s, &signature->s, &z));
 800244e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002450:	f103 000c 	add.w	r0, r3, #12
 8002454:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002456:	330c      	adds	r3, #12
 8002458:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800245c:	4619      	mov	r1, r3
 800245e:	f000 fdad 	bl	8002fbc <mpiAdd>
 8002462:	4603      	mov	r3, r0
 8002464:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8002468:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800246c:	2b00      	cmp	r3, #0
 800246e:	d134      	bne.n	80024da <ecdsaGenerateSignature+0x1fe>
   MPI_CHECK(mpiMod(&signature->s, &signature->s, &params->q));
 8002470:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002472:	f103 000c 	add.w	r0, r3, #12
 8002476:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002478:	f103 010c 	add.w	r1, r3, #12
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3350      	adds	r3, #80	; 0x50
 8002480:	461a      	mov	r2, r3
 8002482:	f001 fa6f 	bl	8003964 <mpiMod>
 8002486:	4603      	mov	r3, r0
 8002488:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800248c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002490:	2b00      	cmp	r3, #0
 8002492:	d124      	bne.n	80024de <ecdsaGenerateSignature+0x202>
   MPI_CHECK(mpiMulMod(&signature->s, &signature->s, &k, &params->q));
 8002494:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002496:	f103 000c 	add.w	r0, r3, #12
 800249a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800249c:	f103 010c 	add.w	r1, r3, #12
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	3350      	adds	r3, #80	; 0x50
 80024a4:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80024a8:	f001 faeb 	bl	8003a82 <mpiMulMod>
 80024ac:	4603      	mov	r3, r0
 80024ae:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80024b2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80024b6:	2b00      	cmp	r3, #0
   TRACE_DEBUG("  r:\r\n");
   TRACE_DEBUG_MPI("    ", &signature->r);
   TRACE_DEBUG("  s:\r\n");
   TRACE_DEBUG_MPI("    ", &signature->s);

end:
 80024b8:	e012      	b.n	80024e0 <ecdsaGenerateSignature+0x204>
   MPI_CHECK(mpiRandRange(&k, &params->q, prngAlgo, prngContext));
 80024ba:	bf00      	nop
 80024bc:	e010      	b.n	80024e0 <ecdsaGenerateSignature+0x204>
   MPI_CHECK(mpiReadRaw(&z, digest, (n + 7) / 8));
 80024be:	bf00      	nop
 80024c0:	e00e      	b.n	80024e0 <ecdsaGenerateSignature+0x204>
      MPI_CHECK(mpiShiftRight(&z, 8 - (n % 8)));
 80024c2:	bf00      	nop
 80024c4:	e00c      	b.n	80024e0 <ecdsaGenerateSignature+0x204>
   EC_CHECK(ecMult(params, &r1, &k, &params->g));
 80024c6:	bf00      	nop
 80024c8:	e00a      	b.n	80024e0 <ecdsaGenerateSignature+0x204>
   EC_CHECK(ecAffinify(params, &r1, &r1));
 80024ca:	bf00      	nop
 80024cc:	e008      	b.n	80024e0 <ecdsaGenerateSignature+0x204>
   MPI_CHECK(mpiMod(&signature->r, &r1.x, &params->q));
 80024ce:	bf00      	nop
 80024d0:	e006      	b.n	80024e0 <ecdsaGenerateSignature+0x204>
   MPI_CHECK(mpiInvMod(&k, &k, &params->q));
 80024d2:	bf00      	nop
 80024d4:	e004      	b.n	80024e0 <ecdsaGenerateSignature+0x204>
   MPI_CHECK(mpiMul(&signature->s, &privateKey->d, &signature->r));
 80024d6:	bf00      	nop
 80024d8:	e002      	b.n	80024e0 <ecdsaGenerateSignature+0x204>
   MPI_CHECK(mpiAdd(&signature->s, &signature->s, &z));
 80024da:	bf00      	nop
 80024dc:	e000      	b.n	80024e0 <ecdsaGenerateSignature+0x204>
   MPI_CHECK(mpiMod(&signature->s, &signature->s, &params->q));
 80024de:	bf00      	nop
   //Release multiple precision integers
   mpiFree(&k);
 80024e0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80024e4:	4618      	mov	r0, r3
 80024e6:	f000 f99f 	bl	8002828 <mpiFree>
   mpiFree(&z);
 80024ea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80024ee:	4618      	mov	r0, r3
 80024f0:	f000 f99a 	bl	8002828 <mpiFree>
   //Release EC point
   ecFree(&r1);
 80024f4:	f107 0314 	add.w	r3, r7, #20
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7fe f9c1 	bl	8000880 <ecFree>

   //Clean up side effects if necessary
   if(error)
 80024fe:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002502:	2b00      	cmp	r3, #0
 8002504:	d008      	beq.n	8002518 <ecdsaGenerateSignature+0x23c>
   {
      //Release (R, S) integer pair
      mpiFree(&signature->r);
 8002506:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002508:	4618      	mov	r0, r3
 800250a:	f000 f98d 	bl	8002828 <mpiFree>
      mpiFree(&signature->s);
 800250e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002510:	330c      	adds	r3, #12
 8002512:	4618      	mov	r0, r3
 8002514:	f000 f988 	bl	8002828 <mpiFree>
   }

   //Return status code
   return error;
 8002518:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
}
 800251c:	4618      	mov	r0, r3
 800251e:	3758      	adds	r7, #88	; 0x58
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <ecdsaVerifySignature>:
 **/

__weak_func error_t ecdsaVerifySignature(const EcDomainParameters *params,
   const EcPublicKey *publicKey, const uint8_t *digest, size_t digestLen,
   const EcdsaSignature *signature)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b0aa      	sub	sp, #168	; 0xa8
 8002528:	af02      	add	r7, sp, #8
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
 8002530:	603b      	str	r3, [r7, #0]
   Mpi v;
   EcPoint v0;
   EcPoint v1;

   //Check parameters
   if(params == NULL || publicKey == NULL || digest == NULL || signature == NULL)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d009      	beq.n	800254c <ecdsaVerifySignature+0x28>
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d006      	beq.n	800254c <ecdsaVerifySignature+0x28>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d003      	beq.n	800254c <ecdsaVerifySignature+0x28>
 8002544:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002548:	2b00      	cmp	r3, #0
 800254a:	d101      	bne.n	8002550 <ecdsaVerifySignature+0x2c>
      return ERROR_INVALID_PARAMETER;
 800254c:	2302      	movs	r3, #2
 800254e:	e154      	b.n	80027fa <ecdsaVerifySignature+0x2d6>
   TRACE_DEBUG_MPI("    ", &signature->r);
   TRACE_DEBUG("  s:\r\n");
   TRACE_DEBUG_MPI("    ", &signature->s);

   //The verifier shall check that 0 < r < q
   if(mpiCompInt(&signature->r, 0) <= 0 ||
 8002550:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002554:	2100      	movs	r1, #0
 8002556:	4618      	mov	r0, r3
 8002558:	f000 faf9 	bl	8002b4e <mpiCompInt>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	dd0a      	ble.n	8002578 <ecdsaVerifySignature+0x54>
      mpiComp(&signature->r, &params->q) >= 0)
 8002562:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	3350      	adds	r3, #80	; 0x50
 800256a:	4619      	mov	r1, r3
 800256c:	4610      	mov	r0, r2
 800256e:	f000 fa88 	bl	8002a82 <mpiComp>
 8002572:	4603      	mov	r3, r0
   if(mpiCompInt(&signature->r, 0) <= 0 ||
 8002574:	2b00      	cmp	r3, #0
 8002576:	db02      	blt.n	800257e <ecdsaVerifySignature+0x5a>
   {
      //If the condition is violated, the signature shall be rejected as invalid
      return ERROR_INVALID_SIGNATURE;
 8002578:	f240 230d 	movw	r3, #525	; 0x20d
 800257c:	e13d      	b.n	80027fa <ecdsaVerifySignature+0x2d6>
   }

   //The verifier shall check that 0 < s < q
   if(mpiCompInt(&signature->s, 0) <= 0 ||
 800257e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002582:	330c      	adds	r3, #12
 8002584:	2100      	movs	r1, #0
 8002586:	4618      	mov	r0, r3
 8002588:	f000 fae1 	bl	8002b4e <mpiCompInt>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	dd0c      	ble.n	80025ac <ecdsaVerifySignature+0x88>
      mpiComp(&signature->s, &params->q) >= 0)
 8002592:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002596:	f103 020c 	add.w	r2, r3, #12
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	3350      	adds	r3, #80	; 0x50
 800259e:	4619      	mov	r1, r3
 80025a0:	4610      	mov	r0, r2
 80025a2:	f000 fa6e 	bl	8002a82 <mpiComp>
 80025a6:	4603      	mov	r3, r0
   if(mpiCompInt(&signature->s, 0) <= 0 ||
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	db02      	blt.n	80025b2 <ecdsaVerifySignature+0x8e>
   {
      //If the condition is violated, the signature shall be rejected as invalid
      return ERROR_INVALID_SIGNATURE;
 80025ac:	f240 230d 	movw	r3, #525	; 0x20d
 80025b0:	e123      	b.n	80027fa <ecdsaVerifySignature+0x2d6>
   }

   //Initialize multiple precision integers
   mpiInit(&w);
 80025b2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80025b6:	4618      	mov	r0, r3
 80025b8:	f000 f923 	bl	8002802 <mpiInit>
   mpiInit(&z);
 80025bc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80025c0:	4618      	mov	r0, r3
 80025c2:	f000 f91e 	bl	8002802 <mpiInit>
   mpiInit(&u1);
 80025c6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80025ca:	4618      	mov	r0, r3
 80025cc:	f000 f919 	bl	8002802 <mpiInit>
   mpiInit(&u2);
 80025d0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80025d4:	4618      	mov	r0, r3
 80025d6:	f000 f914 	bl	8002802 <mpiInit>
   mpiInit(&v);
 80025da:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80025de:	4618      	mov	r0, r3
 80025e0:	f000 f90f 	bl	8002802 <mpiInit>
   //Initialize EC points
   ecInit(&v0);
 80025e4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7fe f933 	bl	8000854 <ecInit>
   ecInit(&v1);
 80025ee:	f107 0314 	add.w	r3, r7, #20
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7fe f92e 	bl	8000854 <ecInit>

   //Let N be the bit length of q
   n = mpiGetBitLength(&params->q);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	3350      	adds	r3, #80	; 0x50
 80025fc:	4618      	mov	r0, r3
 80025fe:	f000 f99a 	bl	8002936 <mpiGetBitLength>
 8002602:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
   //Compute N = MIN(N, outlen)
   n = MIN(n, digestLen * 8);
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	00db      	lsls	r3, r3, #3
 800260a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800260e:	4293      	cmp	r3, r2
 8002610:	bf28      	it	cs
 8002612:	4613      	movcs	r3, r2
 8002614:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

   //Convert the digest to a multiple precision integer
   MPI_CHECK(mpiReadRaw(&z, digest, (n + 7) / 8));
 8002618:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800261c:	3307      	adds	r3, #7
 800261e:	08da      	lsrs	r2, r3, #3
 8002620:	f107 0080 	add.w	r0, r7, #128	; 0x80
 8002624:	2301      	movs	r3, #1
 8002626:	6879      	ldr	r1, [r7, #4]
 8002628:	f000 fc14 	bl	8002e54 <mpiImport>
 800262c:	4603      	mov	r3, r0
 800262e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 8002632:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002636:	2b00      	cmp	r3, #0
 8002638:	f040 80a9 	bne.w	800278e <ecdsaVerifySignature+0x26a>

   //Keep the leftmost N bits of the hash value
   if((n % 8) != 0)
 800263c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002640:	f003 0307 	and.w	r3, r3, #7
 8002644:	2b00      	cmp	r3, #0
 8002646:	d013      	beq.n	8002670 <ecdsaVerifySignature+0x14c>
   {
      MPI_CHECK(mpiShiftRight(&z, 8 - (n % 8)));
 8002648:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800264c:	f003 0307 	and.w	r3, r3, #7
 8002650:	f1c3 0208 	rsb	r2, r3, #8
 8002654:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002658:	4611      	mov	r1, r2
 800265a:	4618      	mov	r0, r3
 800265c:	f000 ff60 	bl	8003520 <mpiShiftRight>
 8002660:	4603      	mov	r3, r0
 8002662:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 8002666:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800266a:	2b00      	cmp	r3, #0
 800266c:	f040 8091 	bne.w	8002792 <ecdsaVerifySignature+0x26e>
   }

   //Compute w = s ^ -1 mod q
   MPI_CHECK(mpiInvMod(&w, &signature->s, &params->q));
 8002670:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002674:	f103 010c 	add.w	r1, r3, #12
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800267e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002682:	4618      	mov	r0, r3
 8002684:	f001 fa1e 	bl	8003ac4 <mpiInvMod>
 8002688:	4603      	mov	r3, r0
 800268a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 800268e:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002692:	2b00      	cmp	r3, #0
 8002694:	d17f      	bne.n	8002796 <ecdsaVerifySignature+0x272>
   //Compute u1 = z * w mod q
   MPI_CHECK(mpiMulMod(&u1, &z, &w, &params->q));
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	3350      	adds	r3, #80	; 0x50
 800269a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800269e:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80026a2:	f107 0074 	add.w	r0, r7, #116	; 0x74
 80026a6:	f001 f9ec 	bl	8003a82 <mpiMulMod>
 80026aa:	4603      	mov	r3, r0
 80026ac:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 80026b0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d170      	bne.n	800279a <ecdsaVerifySignature+0x276>
   //Compute u2 = r * w mod q
   MPI_CHECK(mpiMulMod(&u2, &signature->r, &w, &params->q));
 80026b8:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	3350      	adds	r3, #80	; 0x50
 80026c0:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80026c4:	f107 0068 	add.w	r0, r7, #104	; 0x68
 80026c8:	f001 f9db 	bl	8003a82 <mpiMulMod>
 80026cc:	4603      	mov	r3, r0
 80026ce:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 80026d2:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d161      	bne.n	800279e <ecdsaVerifySignature+0x27a>

   //Compute V0 = (x0, y0) = u1.G + u2.Q
   EC_CHECK(ecProjectify(params, &v1, &publicKey->q));
 80026da:	68ba      	ldr	r2, [r7, #8]
 80026dc:	f107 0314 	add.w	r3, r7, #20
 80026e0:	4619      	mov	r1, r3
 80026e2:	68f8      	ldr	r0, [r7, #12]
 80026e4:	f7fe f91c 	bl	8000920 <ecProjectify>
 80026e8:	4603      	mov	r3, r0
 80026ea:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 80026ee:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d155      	bne.n	80027a2 <ecdsaVerifySignature+0x27e>
   EC_CHECK(ecTwinMult(params, &v0, &u1, &params->g, &u2, &v1));
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 80026fc:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8002700:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002704:	f107 0314 	add.w	r3, r7, #20
 8002708:	9301      	str	r3, [sp, #4]
 800270a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800270e:	9300      	str	r3, [sp, #0]
 8002710:	4603      	mov	r3, r0
 8002712:	68f8      	ldr	r0, [r7, #12]
 8002714:	f7ff fafd 	bl	8001d12 <ecTwinMult>
 8002718:	4603      	mov	r3, r0
 800271a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 800271e:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002722:	2b00      	cmp	r3, #0
 8002724:	d13f      	bne.n	80027a6 <ecdsaVerifySignature+0x282>
   EC_CHECK(ecAffinify(params, &v0, &v0));
 8002726:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800272a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800272e:	4619      	mov	r1, r3
 8002730:	68f8      	ldr	r0, [r7, #12]
 8002732:	f7fe f915 	bl	8000960 <ecAffinify>
 8002736:	4603      	mov	r3, r0
 8002738:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 800273c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002740:	2b00      	cmp	r3, #0
 8002742:	d132      	bne.n	80027aa <ecdsaVerifySignature+0x286>
   TRACE_DEBUG_MPI("    ", &v0.x);
   TRACE_DEBUG("  y0:\r\n");
   TRACE_DEBUG_MPI("    ", &v0.y);

   //Compute v = x0 mod q
   MPI_CHECK(mpiMod(&v, &v0.x, &params->q));
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800274a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800274e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002752:	4618      	mov	r0, r3
 8002754:	f001 f906 	bl	8003964 <mpiMod>
 8002758:	4603      	mov	r3, r0
 800275a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 800275e:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002762:	2b00      	cmp	r3, #0
 8002764:	d123      	bne.n	80027ae <ecdsaVerifySignature+0x28a>
   TRACE_DEBUG("  v:\r\n");
   TRACE_DEBUG_MPI("    ", &v);

   //If v = r, then the signature is verified. If v does not equal r,
   //then the message or the signature may have been modified
   if(!mpiComp(&v, &signature->r))
 8002766:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800276a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800276e:	4611      	mov	r1, r2
 8002770:	4618      	mov	r0, r3
 8002772:	f000 f986 	bl	8002a82 <mpiComp>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d103      	bne.n	8002784 <ecdsaVerifySignature+0x260>
   {
      error = NO_ERROR;
 800277c:	2300      	movs	r3, #0
 800277e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 8002782:	e015      	b.n	80027b0 <ecdsaVerifySignature+0x28c>
   }
   else
   {
      error = ERROR_INVALID_SIGNATURE;
 8002784:	f240 230d 	movw	r3, #525	; 0x20d
 8002788:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 800278c:	e010      	b.n	80027b0 <ecdsaVerifySignature+0x28c>
   MPI_CHECK(mpiReadRaw(&z, digest, (n + 7) / 8));
 800278e:	bf00      	nop
 8002790:	e00e      	b.n	80027b0 <ecdsaVerifySignature+0x28c>
      MPI_CHECK(mpiShiftRight(&z, 8 - (n % 8)));
 8002792:	bf00      	nop
 8002794:	e00c      	b.n	80027b0 <ecdsaVerifySignature+0x28c>
   MPI_CHECK(mpiInvMod(&w, &signature->s, &params->q));
 8002796:	bf00      	nop
 8002798:	e00a      	b.n	80027b0 <ecdsaVerifySignature+0x28c>
   MPI_CHECK(mpiMulMod(&u1, &z, &w, &params->q));
 800279a:	bf00      	nop
 800279c:	e008      	b.n	80027b0 <ecdsaVerifySignature+0x28c>
   MPI_CHECK(mpiMulMod(&u2, &signature->r, &w, &params->q));
 800279e:	bf00      	nop
 80027a0:	e006      	b.n	80027b0 <ecdsaVerifySignature+0x28c>
   EC_CHECK(ecProjectify(params, &v1, &publicKey->q));
 80027a2:	bf00      	nop
 80027a4:	e004      	b.n	80027b0 <ecdsaVerifySignature+0x28c>
   EC_CHECK(ecTwinMult(params, &v0, &u1, &params->g, &u2, &v1));
 80027a6:	bf00      	nop
 80027a8:	e002      	b.n	80027b0 <ecdsaVerifySignature+0x28c>
   EC_CHECK(ecAffinify(params, &v0, &v0));
 80027aa:	bf00      	nop
 80027ac:	e000      	b.n	80027b0 <ecdsaVerifySignature+0x28c>
   MPI_CHECK(mpiMod(&v, &v0.x, &params->q));
 80027ae:	bf00      	nop
   }

end:
   //Release multiple precision integers
   mpiFree(&w);
 80027b0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80027b4:	4618      	mov	r0, r3
 80027b6:	f000 f837 	bl	8002828 <mpiFree>
   mpiFree(&z);
 80027ba:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80027be:	4618      	mov	r0, r3
 80027c0:	f000 f832 	bl	8002828 <mpiFree>
   mpiFree(&u1);
 80027c4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80027c8:	4618      	mov	r0, r3
 80027ca:	f000 f82d 	bl	8002828 <mpiFree>
   mpiFree(&u2);
 80027ce:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80027d2:	4618      	mov	r0, r3
 80027d4:	f000 f828 	bl	8002828 <mpiFree>
   mpiFree(&v);
 80027d8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80027dc:	4618      	mov	r0, r3
 80027de:	f000 f823 	bl	8002828 <mpiFree>
   //Release EC points
   ecFree(&v0);
 80027e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7fe f84a 	bl	8000880 <ecFree>
   ecFree(&v1);
 80027ec:	f107 0314 	add.w	r3, r7, #20
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7fe f845 	bl	8000880 <ecFree>

   //Return status code
   return error;
 80027f6:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	37a0      	adds	r7, #160	; 0xa0
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}

08002802 <mpiInit>:
 * @brief Initialize a multiple precision integer
 * @param[in,out] r Pointer to the multiple precision integer to be initialized
 **/

void mpiInit(Mpi *r)
{
 8002802:	b480      	push	{r7}
 8002804:	b083      	sub	sp, #12
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
   //Initialize structure
   r->sign = 1;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2201      	movs	r2, #1
 800280e:	601a      	str	r2, [r3, #0]
   r->size = 0;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	605a      	str	r2, [r3, #4]
   r->data = NULL;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	609a      	str	r2, [r3, #8]
}
 800281c:	bf00      	nop
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <mpiFree>:
 * @brief Release a multiple precision integer
 * @param[in,out] r Pointer to the multiple precision integer to be freed
 **/

void mpiFree(Mpi *r)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
   //Any memory previously allocated?
   if(r->data != NULL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d00d      	beq.n	8002854 <mpiFree+0x2c>
   {
      //Erase contents before releasing memory
      osMemset(r->data, 0, r->size * MPI_INT_SIZE);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6898      	ldr	r0, [r3, #8]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	461a      	mov	r2, r3
 8002844:	2100      	movs	r1, #0
 8002846:	f004 fc39 	bl	80070bc <memset>
      cryptoFreeMem(r->data);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	4618      	mov	r0, r3
 8002850:	f002 fa9e 	bl	8004d90 <osFreeMem>
   }

   //Set size to zero
   r->size = 0;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	605a      	str	r2, [r3, #4]
   r->data = NULL;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	609a      	str	r2, [r3, #8]
}
 8002860:	bf00      	nop
 8002862:	3708      	adds	r7, #8
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <mpiGrow>:
 * @param[in] size Desired size in words
 * @return Error code
 **/

error_t mpiGrow(Mpi *r, uint_t size)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
   uint_t *data;

   //Ensure the parameter is valid
   size = MAX(size, 1);
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	2b01      	cmp	r3, #1
 8002876:	bf38      	it	cc
 8002878:	2301      	movcc	r3, #1
 800287a:	603b      	str	r3, [r7, #0]

   //Check the current size
   if(r->size >= size)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	683a      	ldr	r2, [r7, #0]
 8002882:	429a      	cmp	r2, r3
 8002884:	d801      	bhi.n	800288a <mpiGrow+0x22>
      return NO_ERROR;
 8002886:	2300      	movs	r3, #0
 8002888:	e02a      	b.n	80028e0 <mpiGrow+0x78>

   //Allocate a memory buffer
   data = cryptoAllocMem(size * MPI_INT_SIZE);
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	4618      	mov	r0, r3
 8002890:	f002 fa70 	bl	8004d74 <osAllocMem>
 8002894:	60f8      	str	r0, [r7, #12]
   //Failed to allocate memory?
   if(data == NULL)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d101      	bne.n	80028a0 <mpiGrow+0x38>
      return ERROR_OUT_OF_MEMORY;
 800289c:	2364      	movs	r3, #100	; 0x64
 800289e:	e01f      	b.n	80028e0 <mpiGrow+0x78>

   //Clear buffer contents
   osMemset(data, 0, size * MPI_INT_SIZE);
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	461a      	mov	r2, r3
 80028a6:	2100      	movs	r1, #0
 80028a8:	68f8      	ldr	r0, [r7, #12]
 80028aa:	f004 fc07 	bl	80070bc <memset>

   //Any data to copy?
   if(r->size > 0)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00d      	beq.n	80028d2 <mpiGrow+0x6a>
   {
      //Copy original data
      osMemcpy(data, r->data, r->size * MPI_INT_SIZE);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6899      	ldr	r1, [r3, #8]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	461a      	mov	r2, r3
 80028c2:	68f8      	ldr	r0, [r7, #12]
 80028c4:	f004 fbec 	bl	80070a0 <memcpy>
      //Free previously allocated memory
      cryptoFreeMem(r->data);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	4618      	mov	r0, r3
 80028ce:	f002 fa5f 	bl	8004d90 <osFreeMem>
   }

   //Update the size of the multiple precision integer
   r->size = size;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	683a      	ldr	r2, [r7, #0]
 80028d6:	605a      	str	r2, [r3, #4]
   r->data = data;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	609a      	str	r2, [r3, #8]

   //Successful operation
   return NO_ERROR;
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3710      	adds	r7, #16
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <mpiGetLength>:
 * @param[in] a Pointer to a multiple precision integer
 * @return The actual length in words
 **/

uint_t mpiGetLength(const Mpi *a)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b085      	sub	sp, #20
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
   int_t i;

   //Check whether the specified multiple precision integer is empty
   if(a->size == 0)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d101      	bne.n	80028fc <mpiGetLength+0x14>
      return 0;
 80028f8:	2300      	movs	r3, #0
 80028fa:	e016      	b.n	800292a <mpiGetLength+0x42>

   //Start from the most significant word
   for(i = a->size - 1; i >= 0; i--)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	3b01      	subs	r3, #1
 8002902:	60fb      	str	r3, [r7, #12]
 8002904:	e00a      	b.n	800291c <mpiGetLength+0x34>
   {
      //Loop as long as the current word is zero
      if(a->data[i] != 0)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	689a      	ldr	r2, [r3, #8]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	4413      	add	r3, r2
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d106      	bne.n	8002924 <mpiGetLength+0x3c>
   for(i = a->size - 1; i >= 0; i--)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	3b01      	subs	r3, #1
 800291a:	60fb      	str	r3, [r7, #12]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2b00      	cmp	r3, #0
 8002920:	daf1      	bge.n	8002906 <mpiGetLength+0x1e>
 8002922:	e000      	b.n	8002926 <mpiGetLength+0x3e>
         break;
 8002924:	bf00      	nop
   }

   //Return the actual length
   return i + 1;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	3301      	adds	r3, #1
}
 800292a:	4618      	mov	r0, r3
 800292c:	3714      	adds	r7, #20
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr

08002936 <mpiGetBitLength>:
 * @param[in] a Pointer to a multiple precision integer
 * @return The actual bit count
 **/

uint_t mpiGetBitLength(const Mpi *a)
{
 8002936:	b480      	push	{r7}
 8002938:	b085      	sub	sp, #20
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
   uint_t n;
   uint32_t m;

   //Check whether the specified multiple precision integer is empty
   if(a->size == 0)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <mpiGetBitLength+0x14>
      return 0;
 8002946:	2300      	movs	r3, #0
 8002948:	e029      	b.n	800299e <mpiGetBitLength+0x68>

   //Start from the most significant word
   for(n = a->size - 1; n > 0; n--)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	3b01      	subs	r3, #1
 8002950:	60fb      	str	r3, [r7, #12]
 8002952:	e00a      	b.n	800296a <mpiGetBitLength+0x34>
   {
      //Loop as long as the current word is zero
      if(a->data[n] != 0)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689a      	ldr	r2, [r3, #8]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	4413      	add	r3, r2
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d106      	bne.n	8002972 <mpiGetBitLength+0x3c>
   for(n = a->size - 1; n > 0; n--)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	3b01      	subs	r3, #1
 8002968:	60fb      	str	r3, [r7, #12]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d1f1      	bne.n	8002954 <mpiGetBitLength+0x1e>
 8002970:	e000      	b.n	8002974 <mpiGetBitLength+0x3e>
         break;
 8002972:	bf00      	nop
   }

   //Get the current word
   m = a->data[n];
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689a      	ldr	r2, [r3, #8]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	4413      	add	r3, r2
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	60bb      	str	r3, [r7, #8]
   //Convert the length to a bit count
   n *= MPI_INT_SIZE * 8;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	015b      	lsls	r3, r3, #5
 8002986:	60fb      	str	r3, [r7, #12]

   //Adjust the bit count
   for(; m != 0; m >>= 1)
 8002988:	e005      	b.n	8002996 <mpiGetBitLength+0x60>
   {
      n++;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	3301      	adds	r3, #1
 800298e:	60fb      	str	r3, [r7, #12]
   for(; m != 0; m >>= 1)
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	085b      	lsrs	r3, r3, #1
 8002994:	60bb      	str	r3, [r7, #8]
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d1f6      	bne.n	800298a <mpiGetBitLength+0x54>
   }

   //Return the actual length in bits
   return n;
 800299c:	68fb      	ldr	r3, [r7, #12]
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3714      	adds	r7, #20
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr

080029aa <mpiSetBitValue>:
 * @param[in] value Bit value
 * @return Error code
 **/

error_t mpiSetBitValue(Mpi *r, uint_t index, uint_t value)
{
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b088      	sub	sp, #32
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	60f8      	str	r0, [r7, #12]
 80029b2:	60b9      	str	r1, [r7, #8]
 80029b4:	607a      	str	r2, [r7, #4]
   error_t error;
   uint_t n1;
   uint_t n2;

   //Retrieve the position of the bit to be written
   n1 = index / (MPI_INT_SIZE * 8);
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	095b      	lsrs	r3, r3, #5
 80029ba:	61fb      	str	r3, [r7, #28]
   n2 = index % (MPI_INT_SIZE * 8);
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	f003 031f 	and.w	r3, r3, #31
 80029c2:	61bb      	str	r3, [r7, #24]

   //Ajust the size of the multiple precision integer if necessary
   error = mpiGrow(r, n1 + 1);
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	3301      	adds	r3, #1
 80029c8:	4619      	mov	r1, r3
 80029ca:	68f8      	ldr	r0, [r7, #12]
 80029cc:	f7ff ff4c 	bl	8002868 <mpiGrow>
 80029d0:	4603      	mov	r3, r0
 80029d2:	82fb      	strh	r3, [r7, #22]
   //Failed to adjust the size?
   if(error)
 80029d4:	8afb      	ldrh	r3, [r7, #22]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <mpiSetBitValue+0x34>
      return error;
 80029da:	8afb      	ldrh	r3, [r7, #22]
 80029dc:	e029      	b.n	8002a32 <mpiSetBitValue+0x88>

   //Set bit value
   if(value)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d012      	beq.n	8002a0a <mpiSetBitValue+0x60>
      r->data[n1] |= (1 << n2);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	689a      	ldr	r2, [r3, #8]
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	4413      	add	r3, r2
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	2101      	movs	r1, #1
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	fa01 f303 	lsl.w	r3, r1, r3
 80029f8:	4618      	mov	r0, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6899      	ldr	r1, [r3, #8]
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	440b      	add	r3, r1
 8002a04:	4302      	orrs	r2, r0
 8002a06:	601a      	str	r2, [r3, #0]
 8002a08:	e012      	b.n	8002a30 <mpiSetBitValue+0x86>
   else
      r->data[n1] &= ~(1 << n2);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	689a      	ldr	r2, [r3, #8]
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	4413      	add	r3, r2
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	2101      	movs	r1, #1
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a1e:	43db      	mvns	r3, r3
 8002a20:	4618      	mov	r0, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6899      	ldr	r1, [r3, #8]
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	440b      	add	r3, r1
 8002a2c:	4002      	ands	r2, r0
 8002a2e:	601a      	str	r2, [r3, #0]

   //No error to report
   return NO_ERROR;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3720      	adds	r7, #32
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <mpiGetBitValue>:
 * @param[in] index Position where to read the bit
 * @return The actual bit value
 **/

uint_t mpiGetBitValue(const Mpi *a, uint_t index)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	b085      	sub	sp, #20
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
 8002a42:	6039      	str	r1, [r7, #0]
   uint_t n1;
   uint_t n2;

   //Retrieve the position of the bit to be read
   n1 = index / (MPI_INT_SIZE * 8);
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	095b      	lsrs	r3, r3, #5
 8002a48:	60fb      	str	r3, [r7, #12]
   n2 = index % (MPI_INT_SIZE * 8);
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	f003 031f 	and.w	r3, r3, #31
 8002a50:	60bb      	str	r3, [r7, #8]

   //Index out of range?
   if(n1 >= a->size)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	68fa      	ldr	r2, [r7, #12]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d301      	bcc.n	8002a60 <mpiGetBitValue+0x26>
      return 0;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	e00a      	b.n	8002a76 <mpiGetBitValue+0x3c>

   //Return the actual bit value
   return (a->data[n1] >> n2) & 0x01;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	689a      	ldr	r2, [r3, #8]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	4413      	add	r3, r2
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a72:	f003 0301 	and.w	r3, r3, #1
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3714      	adds	r7, #20
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr

08002a82 <mpiComp>:
 * @param[in] b The second multiple precision integer to be compared
 * @return Comparison result
 **/

int_t mpiComp(const Mpi *a, const Mpi *b)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b084      	sub	sp, #16
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
 8002a8a:	6039      	str	r1, [r7, #0]
   uint_t m;
   uint_t n;

   //Determine the actual length of A and B
   m = mpiGetLength(a);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f7ff ff2b 	bl	80028e8 <mpiGetLength>
 8002a92:	60b8      	str	r0, [r7, #8]
   n = mpiGetLength(b);
 8002a94:	6838      	ldr	r0, [r7, #0]
 8002a96:	f7ff ff27 	bl	80028e8 <mpiGetLength>
 8002a9a:	60f8      	str	r0, [r7, #12]

   //Compare lengths
   if(!m && !n)
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d104      	bne.n	8002aac <mpiComp+0x2a>
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d101      	bne.n	8002aac <mpiComp+0x2a>
      return 0;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	e04c      	b.n	8002b46 <mpiComp+0xc4>
   else if(m > n)
 8002aac:	68ba      	ldr	r2, [r7, #8]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d902      	bls.n	8002aba <mpiComp+0x38>
      return a->sign;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	e045      	b.n	8002b46 <mpiComp+0xc4>
   else if(m < n)
 8002aba:	68ba      	ldr	r2, [r7, #8]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d203      	bcs.n	8002aca <mpiComp+0x48>
      return -b->sign;
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	425b      	negs	r3, r3
 8002ac8:	e03d      	b.n	8002b46 <mpiComp+0xc4>

   //Compare signs
   if(a->sign > 0 && b->sign < 0)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	dd05      	ble.n	8002ade <mpiComp+0x5c>
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	da01      	bge.n	8002ade <mpiComp+0x5c>
      return 1;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e033      	b.n	8002b46 <mpiComp+0xc4>
   else if(a->sign < 0 && b->sign > 0)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	da29      	bge.n	8002b3a <mpiComp+0xb8>
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	dd25      	ble.n	8002b3a <mpiComp+0xb8>
      return -1;
 8002aee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002af2:	e028      	b.n	8002b46 <mpiComp+0xc4>

   //Then compare values
   while(n--)
   {
      if(a->data[n] > b->data[n])
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	4413      	add	r3, r2
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	6899      	ldr	r1, [r3, #8]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	440b      	add	r3, r1
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d902      	bls.n	8002b16 <mpiComp+0x94>
         return a->sign;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	e017      	b.n	8002b46 <mpiComp+0xc4>
      else if(a->data[n] < b->data[n])
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	689a      	ldr	r2, [r3, #8]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	4413      	add	r3, r2
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	6899      	ldr	r1, [r3, #8]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	440b      	add	r3, r1
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d203      	bcs.n	8002b3a <mpiComp+0xb8>
         return -a->sign;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	425b      	negs	r3, r3
 8002b38:	e005      	b.n	8002b46 <mpiComp+0xc4>
   while(n--)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	1e5a      	subs	r2, r3, #1
 8002b3e:	60fa      	str	r2, [r7, #12]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d1d7      	bne.n	8002af4 <mpiComp+0x72>
   }

   //Multiple precision integers are equals
   return 0;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3710      	adds	r7, #16
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <mpiCompInt>:
 * @param[in] b Integer to be compared
 * @return Comparison result
 **/

int_t mpiCompInt(const Mpi *a, int_t b)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b086      	sub	sp, #24
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
 8002b56:	6039      	str	r1, [r7, #0]
   uint_t value;
   Mpi t;

   //Initialize a temporary multiple precision integer
   value = (b >= 0) ? b : -b;
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	bfb8      	it	lt
 8002b5e:	425b      	neglt	r3, r3
 8002b60:	617b      	str	r3, [r7, #20]
   t.sign = (b >= 0) ? 1 : -1;
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	db01      	blt.n	8002b6c <mpiCompInt+0x1e>
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e001      	b.n	8002b70 <mpiCompInt+0x22>
 8002b6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b70:	60bb      	str	r3, [r7, #8]
   t.size = 1;
 8002b72:	2301      	movs	r3, #1
 8002b74:	60fb      	str	r3, [r7, #12]
   t.data = &value;
 8002b76:	f107 0314 	add.w	r3, r7, #20
 8002b7a:	613b      	str	r3, [r7, #16]

   //Return comparison result
   return mpiComp(a, &t);
 8002b7c:	f107 0308 	add.w	r3, r7, #8
 8002b80:	4619      	mov	r1, r3
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f7ff ff7d 	bl	8002a82 <mpiComp>
 8002b88:	4603      	mov	r3, r0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3718      	adds	r7, #24
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <mpiCompAbs>:
 * @param[in] b The second multiple precision integer to be compared
 * @return Comparison result
 **/

int_t mpiCompAbs(const Mpi *a, const Mpi *b)
{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b084      	sub	sp, #16
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
 8002b9a:	6039      	str	r1, [r7, #0]
   uint_t m;
   uint_t n;

   //Determine the actual length of A and B
   m = mpiGetLength(a);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f7ff fea3 	bl	80028e8 <mpiGetLength>
 8002ba2:	60b8      	str	r0, [r7, #8]
   n = mpiGetLength(b);
 8002ba4:	6838      	ldr	r0, [r7, #0]
 8002ba6:	f7ff fe9f 	bl	80028e8 <mpiGetLength>
 8002baa:	60f8      	str	r0, [r7, #12]

   //Compare lengths
   if(!m && !n)
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d104      	bne.n	8002bbc <mpiCompAbs+0x2a>
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d101      	bne.n	8002bbc <mpiCompAbs+0x2a>
      return 0;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	e033      	b.n	8002c24 <mpiCompAbs+0x92>
   else if(m > n)
 8002bbc:	68ba      	ldr	r2, [r7, #8]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d901      	bls.n	8002bc8 <mpiCompAbs+0x36>
      return 1;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e02d      	b.n	8002c24 <mpiCompAbs+0x92>
   else if(m < n)
 8002bc8:	68ba      	ldr	r2, [r7, #8]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d223      	bcs.n	8002c18 <mpiCompAbs+0x86>
      return -1;
 8002bd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002bd4:	e026      	b.n	8002c24 <mpiCompAbs+0x92>

   //Then compare values
   while(n--)
   {
      if(a->data[n] > b->data[n])
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	689a      	ldr	r2, [r3, #8]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	4413      	add	r3, r2
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	6899      	ldr	r1, [r3, #8]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	440b      	add	r3, r1
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d901      	bls.n	8002bf6 <mpiCompAbs+0x64>
         return 1;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e016      	b.n	8002c24 <mpiCompAbs+0x92>
      else if(a->data[n] < b->data[n])
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	689a      	ldr	r2, [r3, #8]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	4413      	add	r3, r2
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	6899      	ldr	r1, [r3, #8]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	440b      	add	r3, r1
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d202      	bcs.n	8002c18 <mpiCompAbs+0x86>
         return -1;
 8002c12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c16:	e005      	b.n	8002c24 <mpiCompAbs+0x92>
   while(n--)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	1e5a      	subs	r2, r3, #1
 8002c1c:	60fa      	str	r2, [r7, #12]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d1d9      	bne.n	8002bd6 <mpiCompAbs+0x44>
   }

   //Operands are equals
   return 0;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3710      	adds	r7, #16
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <mpiCopy>:
 * @param[in] a Pointer to a multiple precision integer (source)
 * @return Error code
 **/

error_t mpiCopy(Mpi *r, const Mpi *a)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
   error_t error;
   uint_t n;

   //R and A are the same instance?
   if(r == a)
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d101      	bne.n	8002c42 <mpiCopy+0x16>
      return NO_ERROR;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	e025      	b.n	8002c8e <mpiCopy+0x62>

   //Determine the actual length of A
   n = mpiGetLength(a);
 8002c42:	6838      	ldr	r0, [r7, #0]
 8002c44:	f7ff fe50 	bl	80028e8 <mpiGetLength>
 8002c48:	60f8      	str	r0, [r7, #12]

   //Ajust the size of the destination operand
   error = mpiGrow(r, n);
 8002c4a:	68f9      	ldr	r1, [r7, #12]
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f7ff fe0b 	bl	8002868 <mpiGrow>
 8002c52:	4603      	mov	r3, r0
 8002c54:	817b      	strh	r3, [r7, #10]
   //Any error to report?
   if(error)
 8002c56:	897b      	ldrh	r3, [r7, #10]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d001      	beq.n	8002c60 <mpiCopy+0x34>
      return error;
 8002c5c:	897b      	ldrh	r3, [r7, #10]
 8002c5e:	e016      	b.n	8002c8e <mpiCopy+0x62>

   //Clear the contents of the multiple precision integer
   osMemset(r->data, 0, r->size * MPI_INT_SIZE);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6898      	ldr	r0, [r3, #8]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	f004 fa25 	bl	80070bc <memset>
   //Let R = A
   osMemcpy(r->data, a->data, n * MPI_INT_SIZE);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6898      	ldr	r0, [r3, #8]
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	6899      	ldr	r1, [r3, #8]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	461a      	mov	r2, r3
 8002c80:	f004 fa0e 	bl	80070a0 <memcpy>
   //Set the sign of R
   r->sign = a->sign;
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	601a      	str	r2, [r3, #0]

   //Successful operation
   return NO_ERROR;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <mpiSetValue>:
 * @param[in] a Value to be assigned to the multiple precision integer
 * @return Error code
 **/

error_t mpiSetValue(Mpi *r, int_t a)
{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b084      	sub	sp, #16
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
 8002c9e:	6039      	str	r1, [r7, #0]
   error_t error;

   //Ajust the size of the destination operand
   error = mpiGrow(r, 1);
 8002ca0:	2101      	movs	r1, #1
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f7ff fde0 	bl	8002868 <mpiGrow>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	81fb      	strh	r3, [r7, #14]
   //Failed to adjust the size?
   if(error)
 8002cac:	89fb      	ldrh	r3, [r7, #14]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <mpiSetValue+0x20>
      return error;
 8002cb2:	89fb      	ldrh	r3, [r7, #14]
 8002cb4:	e01a      	b.n	8002cec <mpiSetValue+0x56>

   //Clear the contents of the multiple precision integer
   osMemset(r->data, 0, r->size * MPI_INT_SIZE);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6898      	ldr	r0, [r3, #8]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	2100      	movs	r1, #0
 8002cc4:	f004 f9fa 	bl	80070bc <memset>
   //Set the value or R
   r->data[0] = (a >= 0) ? a : -a;
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002cce:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	601a      	str	r2, [r3, #0]
   //Set the sign of R
   r->sign = (a >= 0) ? 1 : -1;
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	db01      	blt.n	8002ce2 <mpiSetValue+0x4c>
 8002cde:	2201      	movs	r2, #1
 8002ce0:	e001      	b.n	8002ce6 <mpiSetValue+0x50>
 8002ce2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	601a      	str	r2, [r3, #0]

   //Successful operation
   return NO_ERROR;
 8002cea:	2300      	movs	r3, #0
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3710      	adds	r7, #16
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <mpiRand>:
 * @return Error code
 **/

error_t mpiRand(Mpi *r, uint_t length, const PrngAlgo *prngAlgo,
   void *prngContext)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b088      	sub	sp, #32
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
 8002d00:	603b      	str	r3, [r7, #0]
   error_t error;
   uint_t m;
   uint_t n;

   //Compute the required length, in words
   n = (length + (MPI_INT_SIZE * 8) - 1) / (MPI_INT_SIZE * 8);
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	331f      	adds	r3, #31
 8002d06:	095b      	lsrs	r3, r3, #5
 8002d08:	61fb      	str	r3, [r7, #28]
   //Number of bits in the most significant word
   m = length % (MPI_INT_SIZE * 8);
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	f003 031f 	and.w	r3, r3, #31
 8002d10:	61bb      	str	r3, [r7, #24]

   //Ajust the size of the multiple precision integer if necessary
   error = mpiGrow(r, n);
 8002d12:	69f9      	ldr	r1, [r7, #28]
 8002d14:	68f8      	ldr	r0, [r7, #12]
 8002d16:	f7ff fda7 	bl	8002868 <mpiGrow>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	82fb      	strh	r3, [r7, #22]
   //Failed to adjust the size?
   if(error)
 8002d1e:	8afb      	ldrh	r3, [r7, #22]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d001      	beq.n	8002d28 <mpiRand+0x34>
      return error;
 8002d24:	8afb      	ldrh	r3, [r7, #22]
 8002d26:	e03a      	b.n	8002d9e <mpiRand+0xaa>

   //Clear the contents of the multiple precision integer
   osMemset(r->data, 0, r->size * MPI_INT_SIZE);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6898      	ldr	r0, [r3, #8]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	461a      	mov	r2, r3
 8002d34:	2100      	movs	r1, #0
 8002d36:	f004 f9c1 	bl	80070bc <memset>
   //Set the sign of R
   r->sign = 1;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	601a      	str	r2, [r3, #0]

   //Generate a random pattern
   error = prngAlgo->read(prngContext, (uint8_t *) r->data, n * MPI_INT_SIZE);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	695b      	ldr	r3, [r3, #20]
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	6891      	ldr	r1, [r2, #8]
 8002d48:	69fa      	ldr	r2, [r7, #28]
 8002d4a:	0092      	lsls	r2, r2, #2
 8002d4c:	6838      	ldr	r0, [r7, #0]
 8002d4e:	4798      	blx	r3
 8002d50:	4603      	mov	r3, r0
 8002d52:	82fb      	strh	r3, [r7, #22]
   //Any error to report?
   if(error)
 8002d54:	8afb      	ldrh	r3, [r7, #22]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <mpiRand+0x6a>
      return error;
 8002d5a:	8afb      	ldrh	r3, [r7, #22]
 8002d5c:	e01f      	b.n	8002d9e <mpiRand+0xaa>

   //Remove the meaningless bits in the most significant word
   if(n > 0 && m > 0)
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d01b      	beq.n	8002d9c <mpiRand+0xa8>
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d018      	beq.n	8002d9c <mpiRand+0xa8>
   {
      r->data[n - 1] &= (1 << m) - 1;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	689a      	ldr	r2, [r3, #8]
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002d74:	3b01      	subs	r3, #1
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	4413      	add	r3, r2
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	2101      	movs	r1, #1
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	fa01 f303 	lsl.w	r3, r1, r3
 8002d84:	3b01      	subs	r3, #1
 8002d86:	4618      	mov	r0, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6899      	ldr	r1, [r3, #8]
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002d92:	3b01      	subs	r3, #1
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	440b      	add	r3, r1
 8002d98:	4002      	ands	r2, r0
 8002d9a:	601a      	str	r2, [r3, #0]
   }

   //Successful operation
   return NO_ERROR;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3720      	adds	r7, #32
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <mpiRandRange>:
 * @return Error code
 **/

error_t mpiRandRange(Mpi *r, const Mpi *p, const PrngAlgo *prngAlgo,
   void *prngContext)
{
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b08a      	sub	sp, #40	; 0x28
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	60f8      	str	r0, [r7, #12]
 8002dae:	60b9      	str	r1, [r7, #8]
 8002db0:	607a      	str	r2, [r7, #4]
 8002db2:	603b      	str	r3, [r7, #0]
   error_t error;
   uint_t n;
   Mpi a;

   //Make sure p is greater than 1
   if(mpiCompInt(p, 1) <= 0)
 8002db4:	2101      	movs	r1, #1
 8002db6:	68b8      	ldr	r0, [r7, #8]
 8002db8:	f7ff fec9 	bl	8002b4e <mpiCompInt>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	dc01      	bgt.n	8002dc6 <mpiRandRange+0x20>
      return ERROR_INVALID_PARAMETER;
 8002dc2:	2302      	movs	r3, #2
 8002dc4:	e042      	b.n	8002e4c <mpiRandRange+0xa6>

   //Initialize multiple precision integer
   mpiInit(&a);
 8002dc6:	f107 0314 	add.w	r3, r7, #20
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7ff fd19 	bl	8002802 <mpiInit>

   //Get the actual length of p
   n = mpiGetBitLength(p);
 8002dd0:	68b8      	ldr	r0, [r7, #8]
 8002dd2:	f7ff fdb0 	bl	8002936 <mpiGetBitLength>
 8002dd6:	6238      	str	r0, [r7, #32]

   //Generate extra random bits so that the bias produced by the modular
   //reduction is negligible
   MPI_CHECK(mpiRand(r, n + 64, prngAlgo, prngContext));
 8002dd8:	6a3b      	ldr	r3, [r7, #32]
 8002dda:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	68f8      	ldr	r0, [r7, #12]
 8002de4:	f7ff ff86 	bl	8002cf4 <mpiRand>
 8002de8:	4603      	mov	r3, r0
 8002dea:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002dec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d121      	bne.n	8002e36 <mpiRandRange+0x90>

   //Compute r = (r mod (p - 1)) + 1
   MPI_CHECK(mpiSubInt(&a, p, 1));
 8002df2:	f107 0314 	add.w	r3, r7, #20
 8002df6:	2201      	movs	r2, #1
 8002df8:	68b9      	ldr	r1, [r7, #8]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f000 f97a 	bl	80030f4 <mpiSubInt>
 8002e00:	4603      	mov	r3, r0
 8002e02:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002e04:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d117      	bne.n	8002e3a <mpiRandRange+0x94>
   MPI_CHECK(mpiMod(r, r, &a));
 8002e0a:	f107 0314 	add.w	r3, r7, #20
 8002e0e:	461a      	mov	r2, r3
 8002e10:	68f9      	ldr	r1, [r7, #12]
 8002e12:	68f8      	ldr	r0, [r7, #12]
 8002e14:	f000 fda6 	bl	8003964 <mpiMod>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002e1c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d10d      	bne.n	8002e3e <mpiRandRange+0x98>
   MPI_CHECK(mpiAddInt(r, r, 1));
 8002e22:	2201      	movs	r2, #1
 8002e24:	68f9      	ldr	r1, [r7, #12]
 8002e26:	68f8      	ldr	r0, [r7, #12]
 8002e28:	f000 f904 	bl	8003034 <mpiAddInt>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002e30:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002e32:	2b00      	cmp	r3, #0

end:
 8002e34:	e004      	b.n	8002e40 <mpiRandRange+0x9a>
   MPI_CHECK(mpiRand(r, n + 64, prngAlgo, prngContext));
 8002e36:	bf00      	nop
 8002e38:	e002      	b.n	8002e40 <mpiRandRange+0x9a>
   MPI_CHECK(mpiSubInt(&a, p, 1));
 8002e3a:	bf00      	nop
 8002e3c:	e000      	b.n	8002e40 <mpiRandRange+0x9a>
   MPI_CHECK(mpiMod(r, r, &a));
 8002e3e:	bf00      	nop
   //Release previously allocated memory
   mpiFree(&a);
 8002e40:	f107 0314 	add.w	r3, r7, #20
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7ff fcef 	bl	8002828 <mpiFree>

   //Return status code
   return error;
 8002e4a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3728      	adds	r7, #40	; 0x28
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <mpiImport>:
 * @param[in] format Input format
 * @return Error code
 **/

error_t mpiImport(Mpi *r, const uint8_t *data, uint_t length, MpiFormat format)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b086      	sub	sp, #24
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	607a      	str	r2, [r7, #4]
 8002e60:	70fb      	strb	r3, [r7, #3]
   error_t error;
   uint_t i;

   //Check input format
   if(format == MPI_FORMAT_LITTLE_ENDIAN)
 8002e62:	78fb      	ldrb	r3, [r7, #3]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d14d      	bne.n	8002f04 <mpiImport+0xb0>
   {
      //Skip trailing zeroes
      while(length > 0 && data[length - 1] == 0)
 8002e68:	e002      	b.n	8002e70 <mpiImport+0x1c>
      {
         length--;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	3b01      	subs	r3, #1
 8002e6e:	607b      	str	r3, [r7, #4]
      while(length > 0 && data[length - 1] == 0)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d006      	beq.n	8002e84 <mpiImport+0x30>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	3b01      	subs	r3, #1
 8002e7a:	68ba      	ldr	r2, [r7, #8]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d0f2      	beq.n	8002e6a <mpiImport+0x16>
      }

      //Ajust the size of the multiple precision integer
      error = mpiGrow(r, (length + MPI_INT_SIZE - 1) / MPI_INT_SIZE);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	3303      	adds	r3, #3
 8002e88:	089b      	lsrs	r3, r3, #2
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	68f8      	ldr	r0, [r7, #12]
 8002e8e:	f7ff fceb 	bl	8002868 <mpiGrow>
 8002e92:	4603      	mov	r3, r0
 8002e94:	82fb      	strh	r3, [r7, #22]

      //Check status code
      if(!error)
 8002e96:	8afb      	ldrh	r3, [r7, #22]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	f040 808a 	bne.w	8002fb2 <mpiImport+0x15e>
      {
         //Clear the contents of the multiple precision integer
         osMemset(r->data, 0, r->size * MPI_INT_SIZE);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6898      	ldr	r0, [r3, #8]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	2100      	movs	r1, #0
 8002eac:	f004 f906 	bl	80070bc <memset>
         //Set sign
         r->sign = 1;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	601a      	str	r2, [r3, #0]

         //Import data
         for(i = 0; i < length; i++, data++)
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	613b      	str	r3, [r7, #16]
 8002eba:	e01e      	b.n	8002efa <mpiImport+0xa6>
         {
            r->data[i / MPI_INT_SIZE] |= *data << ((i % MPI_INT_SIZE) * 8);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	689a      	ldr	r2, [r3, #8]
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	f023 0303 	bic.w	r3, r3, #3
 8002ec6:	4413      	add	r3, r2
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	4619      	mov	r1, r3
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	f003 0303 	and.w	r3, r3, #3
 8002ed6:	00db      	lsls	r3, r3, #3
 8002ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8002edc:	4618      	mov	r0, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6899      	ldr	r1, [r3, #8]
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	f023 0303 	bic.w	r3, r3, #3
 8002ee8:	440b      	add	r3, r1
 8002eea:	4302      	orrs	r2, r0
 8002eec:	601a      	str	r2, [r3, #0]
         for(i = 0; i < length; i++, data++)
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	613b      	str	r3, [r7, #16]
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	60bb      	str	r3, [r7, #8]
 8002efa:	693a      	ldr	r2, [r7, #16]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d3dc      	bcc.n	8002ebc <mpiImport+0x68>
 8002f02:	e056      	b.n	8002fb2 <mpiImport+0x15e>
         }
      }
   }
   else if(format == MPI_FORMAT_BIG_ENDIAN)
 8002f04:	78fb      	ldrb	r3, [r7, #3]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d151      	bne.n	8002fae <mpiImport+0x15a>
   {
      //Skip leading zeroes
      while(length > 1 && *data == 0)
 8002f0a:	e005      	b.n	8002f18 <mpiImport+0xc4>
      {
         data++;
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	3301      	adds	r3, #1
 8002f10:	60bb      	str	r3, [r7, #8]
         length--;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	3b01      	subs	r3, #1
 8002f16:	607b      	str	r3, [r7, #4]
      while(length > 1 && *data == 0)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d903      	bls.n	8002f26 <mpiImport+0xd2>
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d0f2      	beq.n	8002f0c <mpiImport+0xb8>
      }

      //Ajust the size of the multiple precision integer
      error = mpiGrow(r, (length + MPI_INT_SIZE - 1) / MPI_INT_SIZE);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	3303      	adds	r3, #3
 8002f2a:	089b      	lsrs	r3, r3, #2
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	68f8      	ldr	r0, [r7, #12]
 8002f30:	f7ff fc9a 	bl	8002868 <mpiGrow>
 8002f34:	4603      	mov	r3, r0
 8002f36:	82fb      	strh	r3, [r7, #22]

      //Check status code
      if(!error)
 8002f38:	8afb      	ldrh	r3, [r7, #22]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d139      	bne.n	8002fb2 <mpiImport+0x15e>
      {
         //Clear the contents of the multiple precision integer
         osMemset(r->data, 0, r->size * MPI_INT_SIZE);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6898      	ldr	r0, [r3, #8]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	461a      	mov	r2, r3
 8002f4a:	2100      	movs	r1, #0
 8002f4c:	f004 f8b6 	bl	80070bc <memset>
         //Set sign
         r->sign = 1;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2201      	movs	r2, #1
 8002f54:	601a      	str	r2, [r3, #0]

         //Start from the least significant byte
         data += length - 1;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	68ba      	ldr	r2, [r7, #8]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	60bb      	str	r3, [r7, #8]

         //Import data
         for(i = 0; i < length; i++, data--)
 8002f60:	2300      	movs	r3, #0
 8002f62:	613b      	str	r3, [r7, #16]
 8002f64:	e01e      	b.n	8002fa4 <mpiImport+0x150>
         {
            r->data[i / MPI_INT_SIZE] |= *data << ((i % MPI_INT_SIZE) * 8);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	689a      	ldr	r2, [r3, #8]
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	f023 0303 	bic.w	r3, r3, #3
 8002f70:	4413      	add	r3, r2
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	4619      	mov	r1, r3
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	f003 0303 	and.w	r3, r3, #3
 8002f80:	00db      	lsls	r3, r3, #3
 8002f82:	fa01 f303 	lsl.w	r3, r1, r3
 8002f86:	4618      	mov	r0, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6899      	ldr	r1, [r3, #8]
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	f023 0303 	bic.w	r3, r3, #3
 8002f92:	440b      	add	r3, r1
 8002f94:	4302      	orrs	r2, r0
 8002f96:	601a      	str	r2, [r3, #0]
         for(i = 0; i < length; i++, data--)
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	613b      	str	r3, [r7, #16]
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	60bb      	str	r3, [r7, #8]
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d3dc      	bcc.n	8002f66 <mpiImport+0x112>
 8002fac:	e001      	b.n	8002fb2 <mpiImport+0x15e>
      }
   }
   else
   {
      //Report an error
      error = ERROR_INVALID_PARAMETER;
 8002fae:	2302      	movs	r3, #2
 8002fb0:	82fb      	strh	r3, [r7, #22]
   }

   //Return status code
   return error;
 8002fb2:	8afb      	ldrh	r3, [r7, #22]
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3718      	adds	r7, #24
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <mpiAdd>:
 * @param[in] b Second operand B
 * @return Error code
 **/

error_t mpiAdd(Mpi *r, const Mpi *a, const Mpi *b)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b086      	sub	sp, #24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	607a      	str	r2, [r7, #4]
   error_t error;
   int_t sign;

   //Retrieve the sign of A
   sign = a->sign;
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	613b      	str	r3, [r7, #16]

   //Both operands have the same sign?
   if(a->sign == b->sign)
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d10a      	bne.n	8002ff0 <mpiAdd+0x34>
   {
      //Perform addition
      error = mpiAddAbs(r, a, b);
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	68b9      	ldr	r1, [r7, #8]
 8002fde:	68f8      	ldr	r0, [r7, #12]
 8002fe0:	f000 f8ac 	bl	800313c <mpiAddAbs>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	82fb      	strh	r3, [r7, #22]
      //Set the sign of the resulting number
      r->sign = sign;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	601a      	str	r2, [r3, #0]
 8002fee:	e01c      	b.n	800302a <mpiAdd+0x6e>
   }
   //Operands have different signs?
   else
   {
      //Compare the absolute value of A and B
      if(mpiCompAbs(a, b) >= 0)
 8002ff0:	6879      	ldr	r1, [r7, #4]
 8002ff2:	68b8      	ldr	r0, [r7, #8]
 8002ff4:	f7ff fdcd 	bl	8002b92 <mpiCompAbs>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	db0a      	blt.n	8003014 <mpiAdd+0x58>
      {
         //Perform subtraction
         error = mpiSubAbs(r, a, b);
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	68b9      	ldr	r1, [r7, #8]
 8003002:	68f8      	ldr	r0, [r7, #12]
 8003004:	f000 f94b 	bl	800329e <mpiSubAbs>
 8003008:	4603      	mov	r3, r0
 800300a:	82fb      	strh	r3, [r7, #22]
         //Set the sign of the resulting number
         r->sign = sign;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	601a      	str	r2, [r3, #0]
 8003012:	e00a      	b.n	800302a <mpiAdd+0x6e>
      }
      else
      {
         //Perform subtraction
         error = mpiSubAbs(r, b, a);
 8003014:	68ba      	ldr	r2, [r7, #8]
 8003016:	6879      	ldr	r1, [r7, #4]
 8003018:	68f8      	ldr	r0, [r7, #12]
 800301a:	f000 f940 	bl	800329e <mpiSubAbs>
 800301e:	4603      	mov	r3, r0
 8003020:	82fb      	strh	r3, [r7, #22]
         //Set the sign of the resulting number
         r->sign = -sign;
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	425a      	negs	r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	601a      	str	r2, [r3, #0]
      }
   }

   //Return status code
   return error;
 800302a:	8afb      	ldrh	r3, [r7, #22]
}
 800302c:	4618      	mov	r0, r3
 800302e:	3718      	adds	r7, #24
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <mpiAddInt>:
 * @param[in] b Second operand B
 * @return Error code
 **/

error_t mpiAddInt(Mpi *r, const Mpi *a, int_t b)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b088      	sub	sp, #32
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	607a      	str	r2, [r7, #4]
   uint_t value;
   Mpi t;

   //Convert the second operand to a multiple precision integer
   value = (b >= 0) ? b : -b;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2b00      	cmp	r3, #0
 8003044:	bfb8      	it	lt
 8003046:	425b      	neglt	r3, r3
 8003048:	61fb      	str	r3, [r7, #28]
   t.sign = (b >= 0) ? 1 : -1;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2b00      	cmp	r3, #0
 800304e:	db01      	blt.n	8003054 <mpiAddInt+0x20>
 8003050:	2301      	movs	r3, #1
 8003052:	e001      	b.n	8003058 <mpiAddInt+0x24>
 8003054:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003058:	613b      	str	r3, [r7, #16]
   t.size = 1;
 800305a:	2301      	movs	r3, #1
 800305c:	617b      	str	r3, [r7, #20]
   t.data = &value;
 800305e:	f107 031c 	add.w	r3, r7, #28
 8003062:	61bb      	str	r3, [r7, #24]

   //Perform addition
   return mpiAdd(r, a, &t);
 8003064:	f107 0310 	add.w	r3, r7, #16
 8003068:	461a      	mov	r2, r3
 800306a:	68b9      	ldr	r1, [r7, #8]
 800306c:	68f8      	ldr	r0, [r7, #12]
 800306e:	f7ff ffa5 	bl	8002fbc <mpiAdd>
 8003072:	4603      	mov	r3, r0
}
 8003074:	4618      	mov	r0, r3
 8003076:	3720      	adds	r7, #32
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <mpiSub>:
 * @param[in] b Second operand B
 * @return Error code
 **/

error_t mpiSub(Mpi *r, const Mpi *a, const Mpi *b)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b086      	sub	sp, #24
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	607a      	str	r2, [r7, #4]
   error_t error;
   int_t sign;

   //Retrieve the sign of A
   sign = a->sign;
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	613b      	str	r3, [r7, #16]

   //Both operands have the same sign?
   if(a->sign == b->sign)
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	429a      	cmp	r2, r3
 8003098:	d11d      	bne.n	80030d6 <mpiSub+0x5a>
   {
      //Compare the absolute value of A and B
      if(mpiCompAbs(a, b) >= 0)
 800309a:	6879      	ldr	r1, [r7, #4]
 800309c:	68b8      	ldr	r0, [r7, #8]
 800309e:	f7ff fd78 	bl	8002b92 <mpiCompAbs>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	db0a      	blt.n	80030be <mpiSub+0x42>
      {
         //Perform subtraction
         error = mpiSubAbs(r, a, b);
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	68b9      	ldr	r1, [r7, #8]
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	f000 f8f6 	bl	800329e <mpiSubAbs>
 80030b2:	4603      	mov	r3, r0
 80030b4:	82fb      	strh	r3, [r7, #22]
         //Set the sign of the resulting number
         r->sign = sign;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	601a      	str	r2, [r3, #0]
 80030bc:	e015      	b.n	80030ea <mpiSub+0x6e>
      }
      else
      {
         //Perform subtraction
         error = mpiSubAbs(r, b, a);
 80030be:	68ba      	ldr	r2, [r7, #8]
 80030c0:	6879      	ldr	r1, [r7, #4]
 80030c2:	68f8      	ldr	r0, [r7, #12]
 80030c4:	f000 f8eb 	bl	800329e <mpiSubAbs>
 80030c8:	4603      	mov	r3, r0
 80030ca:	82fb      	strh	r3, [r7, #22]
         //Set the sign of the resulting number
         r->sign = -sign;
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	425a      	negs	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	601a      	str	r2, [r3, #0]
 80030d4:	e009      	b.n	80030ea <mpiSub+0x6e>
   }
   //Operands have different signs?
   else
   {
      //Perform addition
      error = mpiAddAbs(r, a, b);
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	68b9      	ldr	r1, [r7, #8]
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f000 f82e 	bl	800313c <mpiAddAbs>
 80030e0:	4603      	mov	r3, r0
 80030e2:	82fb      	strh	r3, [r7, #22]
      //Set the sign of the resulting number
      r->sign = sign;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	693a      	ldr	r2, [r7, #16]
 80030e8:	601a      	str	r2, [r3, #0]
   }

   //Return status code
   return error;
 80030ea:	8afb      	ldrh	r3, [r7, #22]
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3718      	adds	r7, #24
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <mpiSubInt>:
 * @param[in] b Second operand B
 * @return Error code
 **/

error_t mpiSubInt(Mpi *r, const Mpi *a, int_t b)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b088      	sub	sp, #32
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
   uint_t value;
   Mpi t;

   //Convert the second operand to a multiple precision integer
   value = (b >= 0) ? b : -b;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2b00      	cmp	r3, #0
 8003104:	bfb8      	it	lt
 8003106:	425b      	neglt	r3, r3
 8003108:	61fb      	str	r3, [r7, #28]
   t.sign = (b >= 0) ? 1 : -1;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2b00      	cmp	r3, #0
 800310e:	db01      	blt.n	8003114 <mpiSubInt+0x20>
 8003110:	2301      	movs	r3, #1
 8003112:	e001      	b.n	8003118 <mpiSubInt+0x24>
 8003114:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003118:	613b      	str	r3, [r7, #16]
   t.size = 1;
 800311a:	2301      	movs	r3, #1
 800311c:	617b      	str	r3, [r7, #20]
   t.data = &value;
 800311e:	f107 031c 	add.w	r3, r7, #28
 8003122:	61bb      	str	r3, [r7, #24]

   //Perform subtraction
   return mpiSub(r, a, &t);
 8003124:	f107 0310 	add.w	r3, r7, #16
 8003128:	461a      	mov	r2, r3
 800312a:	68b9      	ldr	r1, [r7, #8]
 800312c:	68f8      	ldr	r0, [r7, #12]
 800312e:	f7ff ffa5 	bl	800307c <mpiSub>
 8003132:	4603      	mov	r3, r0
}
 8003134:	4618      	mov	r0, r3
 8003136:	3720      	adds	r7, #32
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <mpiAddAbs>:
 * @param[in] b Second operand B
 * @return Error code
 **/

error_t mpiAddAbs(Mpi *r, const Mpi *a, const Mpi *b)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b08a      	sub	sp, #40	; 0x28
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	607a      	str	r2, [r7, #4]
   uint_t n;
   uint_t c;
   uint_t d;

   //R and B are the same instance?
   if(r == b)
 8003148:	68fa      	ldr	r2, [r7, #12]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	429a      	cmp	r2, r3
 800314e:	d106      	bne.n	800315e <mpiAddAbs+0x22>
   {
      //Swap A and B
      const Mpi *t = a;
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	61bb      	str	r3, [r7, #24]
      a = b;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	60bb      	str	r3, [r7, #8]
      b = t;
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	607b      	str	r3, [r7, #4]
 800315c:	e00d      	b.n	800317a <mpiAddAbs+0x3e>
   }
   //R is neither A nor B?
   else if(r != a)
 800315e:	68fa      	ldr	r2, [r7, #12]
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	429a      	cmp	r2, r3
 8003164:	d009      	beq.n	800317a <mpiAddAbs+0x3e>
   {
      //Copy the first operand to R
      MPI_CHECK(mpiCopy(r, a));
 8003166:	68b9      	ldr	r1, [r7, #8]
 8003168:	68f8      	ldr	r0, [r7, #12]
 800316a:	f7ff fd5f 	bl	8002c2c <mpiCopy>
 800316e:	4603      	mov	r3, r0
 8003170:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003172:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003174:	2b00      	cmp	r3, #0
 8003176:	f040 8086 	bne.w	8003286 <mpiAddAbs+0x14a>
   }

   //Determine the actual length of B
   n = mpiGetLength(b);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f7ff fbb4 	bl	80028e8 <mpiGetLength>
 8003180:	6178      	str	r0, [r7, #20]
   //Extend the size of the destination register as needed
   MPI_CHECK(mpiGrow(r, n));
 8003182:	6979      	ldr	r1, [r7, #20]
 8003184:	68f8      	ldr	r0, [r7, #12]
 8003186:	f7ff fb6f 	bl	8002868 <mpiGrow>
 800318a:	4603      	mov	r3, r0
 800318c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800318e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003190:	2b00      	cmp	r3, #0
 8003192:	d17a      	bne.n	800328a <mpiAddAbs+0x14e>

   //The result is always positive
   r->sign = 1;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2201      	movs	r2, #1
 8003198:	601a      	str	r2, [r3, #0]
   //Clear carry bit
   c = 0;
 800319a:	2300      	movs	r3, #0
 800319c:	61fb      	str	r3, [r7, #28]

   //Add operands
   for(i = 0; i < n; i++)
 800319e:	2300      	movs	r3, #0
 80031a0:	623b      	str	r3, [r7, #32]
 80031a2:	e02b      	b.n	80031fc <mpiAddAbs+0xc0>
   {
      //Add carry bit
      d = r->data[i] + c;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	689a      	ldr	r2, [r3, #8]
 80031a8:	6a3b      	ldr	r3, [r7, #32]
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	4413      	add	r3, r2
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	69fa      	ldr	r2, [r7, #28]
 80031b2:	4413      	add	r3, r2
 80031b4:	613b      	str	r3, [r7, #16]
      //Update carry bit
      if(d != 0) c = 0;
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d001      	beq.n	80031c0 <mpiAddAbs+0x84>
 80031bc:	2300      	movs	r3, #0
 80031be:	61fb      	str	r3, [r7, #28]
      //Perform addition
      d += b->data[i];
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	6a3b      	ldr	r3, [r7, #32]
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	4413      	add	r3, r2
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	693a      	ldr	r2, [r7, #16]
 80031ce:	4413      	add	r3, r2
 80031d0:	613b      	str	r3, [r7, #16]
      //Update carry bit
      if(d < b->data[i]) c = 1;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	689a      	ldr	r2, [r3, #8]
 80031d6:	6a3b      	ldr	r3, [r7, #32]
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	4413      	add	r3, r2
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	693a      	ldr	r2, [r7, #16]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d201      	bcs.n	80031e8 <mpiAddAbs+0xac>
 80031e4:	2301      	movs	r3, #1
 80031e6:	61fb      	str	r3, [r7, #28]
      //Save result
      r->data[i] = d;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	689a      	ldr	r2, [r3, #8]
 80031ec:	6a3b      	ldr	r3, [r7, #32]
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	4413      	add	r3, r2
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	601a      	str	r2, [r3, #0]
   for(i = 0; i < n; i++)
 80031f6:	6a3b      	ldr	r3, [r7, #32]
 80031f8:	3301      	adds	r3, #1
 80031fa:	623b      	str	r3, [r7, #32]
 80031fc:	6a3a      	ldr	r2, [r7, #32]
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	429a      	cmp	r2, r3
 8003202:	d3cf      	bcc.n	80031a4 <mpiAddAbs+0x68>
   }

   //Loop as long as the carry bit is set
   for(i = n; c && i < r->size; i++)
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	623b      	str	r3, [r7, #32]
 8003208:	e01a      	b.n	8003240 <mpiAddAbs+0x104>
   {
      //Add carry bit
      r->data[i] += c;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	689a      	ldr	r2, [r3, #8]
 800320e:	6a3b      	ldr	r3, [r7, #32]
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	4413      	add	r3, r2
 8003214:	6819      	ldr	r1, [r3, #0]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	689a      	ldr	r2, [r3, #8]
 800321a:	6a3b      	ldr	r3, [r7, #32]
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	4413      	add	r3, r2
 8003220:	69fa      	ldr	r2, [r7, #28]
 8003222:	440a      	add	r2, r1
 8003224:	601a      	str	r2, [r3, #0]
      //Update carry bit
      if(r->data[i] != 0) c = 0;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	689a      	ldr	r2, [r3, #8]
 800322a:	6a3b      	ldr	r3, [r7, #32]
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	4413      	add	r3, r2
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d001      	beq.n	800323a <mpiAddAbs+0xfe>
 8003236:	2300      	movs	r3, #0
 8003238:	61fb      	str	r3, [r7, #28]
   for(i = n; c && i < r->size; i++)
 800323a:	6a3b      	ldr	r3, [r7, #32]
 800323c:	3301      	adds	r3, #1
 800323e:	623b      	str	r3, [r7, #32]
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d004      	beq.n	8003250 <mpiAddAbs+0x114>
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	6a3a      	ldr	r2, [r7, #32]
 800324c:	429a      	cmp	r2, r3
 800324e:	d3dc      	bcc.n	800320a <mpiAddAbs+0xce>
   }

   //Check the final carry bit
   if(c && n >= r->size)
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d01b      	beq.n	800328e <mpiAddAbs+0x152>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	697a      	ldr	r2, [r7, #20]
 800325c:	429a      	cmp	r2, r3
 800325e:	d316      	bcc.n	800328e <mpiAddAbs+0x152>
   {
      //Extend the size of the destination register
      MPI_CHECK(mpiGrow(r, n + 1));
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	3301      	adds	r3, #1
 8003264:	4619      	mov	r1, r3
 8003266:	68f8      	ldr	r0, [r7, #12]
 8003268:	f7ff fafe 	bl	8002868 <mpiGrow>
 800326c:	4603      	mov	r3, r0
 800326e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003270:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003272:	2b00      	cmp	r3, #0
 8003274:	d10d      	bne.n	8003292 <mpiAddAbs+0x156>
      //Add carry bit
      r->data[n] = 1;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	689a      	ldr	r2, [r3, #8]
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	4413      	add	r3, r2
 8003280:	2201      	movs	r2, #1
 8003282:	601a      	str	r2, [r3, #0]
 8003284:	e006      	b.n	8003294 <mpiAddAbs+0x158>
      MPI_CHECK(mpiCopy(r, a));
 8003286:	bf00      	nop
 8003288:	e004      	b.n	8003294 <mpiAddAbs+0x158>
   MPI_CHECK(mpiGrow(r, n));
 800328a:	bf00      	nop
 800328c:	e002      	b.n	8003294 <mpiAddAbs+0x158>
   }

end:
 800328e:	bf00      	nop
 8003290:	e000      	b.n	8003294 <mpiAddAbs+0x158>
      MPI_CHECK(mpiGrow(r, n + 1));
 8003292:	bf00      	nop
   //Return status code
   return error;
 8003294:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8003296:	4618      	mov	r0, r3
 8003298:	3728      	adds	r7, #40	; 0x28
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}

0800329e <mpiSubAbs>:
 * @param[in] b Second operand B
 * @return Error code
 **/

error_t mpiSubAbs(Mpi *r, const Mpi *a, const Mpi *b)
{
 800329e:	b580      	push	{r7, lr}
 80032a0:	b08c      	sub	sp, #48	; 0x30
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	60f8      	str	r0, [r7, #12]
 80032a6:	60b9      	str	r1, [r7, #8]
 80032a8:	607a      	str	r2, [r7, #4]
   uint_t i;
   uint_t m;
   uint_t n;

   //Check input parameters
   if(mpiCompAbs(a, b) < 0)
 80032aa:	6879      	ldr	r1, [r7, #4]
 80032ac:	68b8      	ldr	r0, [r7, #8]
 80032ae:	f7ff fc70 	bl	8002b92 <mpiCompAbs>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	da05      	bge.n	80032c4 <mpiSubAbs+0x26>
   {
      //Swap A and B if necessary
      const Mpi *t = b;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	623b      	str	r3, [r7, #32]
      a = b;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	60bb      	str	r3, [r7, #8]
      b = t;
 80032c0:	6a3b      	ldr	r3, [r7, #32]
 80032c2:	607b      	str	r3, [r7, #4]
   }

   //Determine the actual length of A
   m = mpiGetLength(a);
 80032c4:	68b8      	ldr	r0, [r7, #8]
 80032c6:	f7ff fb0f 	bl	80028e8 <mpiGetLength>
 80032ca:	61f8      	str	r0, [r7, #28]
   //Determine the actual length of B
   n = mpiGetLength(b);
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f7ff fb0b 	bl	80028e8 <mpiGetLength>
 80032d2:	61b8      	str	r0, [r7, #24]

   //Extend the size of the destination register as needed
   MPI_CHECK(mpiGrow(r, m));
 80032d4:	69f9      	ldr	r1, [r7, #28]
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	f7ff fac6 	bl	8002868 <mpiGrow>
 80032dc:	4603      	mov	r3, r0
 80032de:	82fb      	strh	r3, [r7, #22]
 80032e0:	8afb      	ldrh	r3, [r7, #22]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	f040 8087 	bne.w	80033f6 <mpiSubAbs+0x158>

   //The result is always positive
   r->sign = 1;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2201      	movs	r2, #1
 80032ec:	601a      	str	r2, [r3, #0]
   //Clear carry bit
   c = 0;
 80032ee:	2300      	movs	r3, #0
 80032f0:	62fb      	str	r3, [r7, #44]	; 0x2c

   //Subtract operands
   for(i = 0; i < n; i++)
 80032f2:	2300      	movs	r3, #0
 80032f4:	627b      	str	r3, [r7, #36]	; 0x24
 80032f6:	e02d      	b.n	8003354 <mpiSubAbs+0xb6>
   {
      //Read first operand
      d = a->data[i];
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	689a      	ldr	r2, [r3, #8]
 80032fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	4413      	add	r3, r2
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	62bb      	str	r3, [r7, #40]	; 0x28

      //Check the carry bit
      if(c)
 8003306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003308:	2b00      	cmp	r3, #0
 800330a:	d007      	beq.n	800331c <mpiSubAbs+0x7e>
      {
         //Update carry bit
         if(d != 0) c = 0;
 800330c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800330e:	2b00      	cmp	r3, #0
 8003310:	d001      	beq.n	8003316 <mpiSubAbs+0x78>
 8003312:	2300      	movs	r3, #0
 8003314:	62fb      	str	r3, [r7, #44]	; 0x2c
         //Propagate carry bit
         d -= 1;
 8003316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003318:	3b01      	subs	r3, #1
 800331a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      //Update carry bit
      if(d < b->data[i]) c = 1;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	689a      	ldr	r2, [r3, #8]
 8003320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	4413      	add	r3, r2
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800332a:	429a      	cmp	r2, r3
 800332c:	d201      	bcs.n	8003332 <mpiSubAbs+0x94>
 800332e:	2301      	movs	r3, #1
 8003330:	62fb      	str	r3, [r7, #44]	; 0x2c
      //Perform subtraction
      r->data[i] = d - b->data[i];
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	689a      	ldr	r2, [r3, #8]
 8003336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	4413      	add	r3, r2
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6899      	ldr	r1, [r3, #8]
 8003342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	440b      	add	r3, r1
 8003348:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800334a:	1a8a      	subs	r2, r1, r2
 800334c:	601a      	str	r2, [r3, #0]
   for(i = 0; i < n; i++)
 800334e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003350:	3301      	adds	r3, #1
 8003352:	627b      	str	r3, [r7, #36]	; 0x24
 8003354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	429a      	cmp	r2, r3
 800335a:	d3cd      	bcc.n	80032f8 <mpiSubAbs+0x5a>
   }

   //Loop as long as the carry bit is set
   for(i = n; c && i < m; i++)
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	627b      	str	r3, [r7, #36]	; 0x24
 8003360:	e019      	b.n	8003396 <mpiSubAbs+0xf8>
   {
      //Update carry bit
      if(a->data[i] != 0) c = 0;
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	689a      	ldr	r2, [r3, #8]
 8003366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	4413      	add	r3, r2
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <mpiSubAbs+0xd8>
 8003372:	2300      	movs	r3, #0
 8003374:	62fb      	str	r3, [r7, #44]	; 0x2c
      //Propagate carry bit
      r->data[i] = a->data[i] - 1;
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	689a      	ldr	r2, [r3, #8]
 800337a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	4413      	add	r3, r2
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6899      	ldr	r1, [r3, #8]
 8003386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	440b      	add	r3, r1
 800338c:	3a01      	subs	r2, #1
 800338e:	601a      	str	r2, [r3, #0]
   for(i = n; c && i < m; i++)
 8003390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003392:	3301      	adds	r3, #1
 8003394:	627b      	str	r3, [r7, #36]	; 0x24
 8003396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003398:	2b00      	cmp	r3, #0
 800339a:	d003      	beq.n	80033a4 <mpiSubAbs+0x106>
 800339c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d3de      	bcc.n	8003362 <mpiSubAbs+0xc4>
   }

   //R and A are not the same instance?
   if(r != a)
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d026      	beq.n	80033fa <mpiSubAbs+0x15c>
   {
      //Copy the remaining words
      for(; i < m; i++)
 80033ac:	e00e      	b.n	80033cc <mpiSubAbs+0x12e>
      {
         r->data[i] = a->data[i];
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	689a      	ldr	r2, [r3, #8]
 80033b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	441a      	add	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6899      	ldr	r1, [r3, #8]
 80033bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	440b      	add	r3, r1
 80033c2:	6812      	ldr	r2, [r2, #0]
 80033c4:	601a      	str	r2, [r3, #0]
      for(; i < m; i++)
 80033c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c8:	3301      	adds	r3, #1
 80033ca:	627b      	str	r3, [r7, #36]	; 0x24
 80033cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d3ec      	bcc.n	80033ae <mpiSubAbs+0x110>
      }

      //Zero the upper part of R
      for(; i < r->size; i++)
 80033d4:	e009      	b.n	80033ea <mpiSubAbs+0x14c>
      {
         r->data[i] = 0;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	689a      	ldr	r2, [r3, #8]
 80033da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	4413      	add	r3, r2
 80033e0:	2200      	movs	r2, #0
 80033e2:	601a      	str	r2, [r3, #0]
      for(; i < r->size; i++)
 80033e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e6:	3301      	adds	r3, #1
 80033e8:	627b      	str	r3, [r7, #36]	; 0x24
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d3f0      	bcc.n	80033d6 <mpiSubAbs+0x138>
      }
   }

end:
 80033f4:	e001      	b.n	80033fa <mpiSubAbs+0x15c>
   MPI_CHECK(mpiGrow(r, m));
 80033f6:	bf00      	nop
 80033f8:	e000      	b.n	80033fc <mpiSubAbs+0x15e>
end:
 80033fa:	bf00      	nop
   //Return status code
   return error;
 80033fc:	8afb      	ldrh	r3, [r7, #22]
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3730      	adds	r7, #48	; 0x30
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <mpiShiftLeft>:
 * @param[in] n The number of bits to shift
 * @return Error code
 **/

error_t mpiShiftLeft(Mpi *r, uint_t n)
{
 8003406:	b580      	push	{r7, lr}
 8003408:	b086      	sub	sp, #24
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
 800340e:	6039      	str	r1, [r7, #0]
   error_t error;
   uint_t i;

   //Number of 32-bit words to shift
   uint_t n1 = n / (MPI_INT_SIZE * 8);
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	095b      	lsrs	r3, r3, #5
 8003414:	613b      	str	r3, [r7, #16]
   //Number of bits to shift
   uint_t n2 = n % (MPI_INT_SIZE * 8);
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	f003 031f 	and.w	r3, r3, #31
 800341c:	60fb      	str	r3, [r7, #12]

   //Check parameters
   if(!r->size || !n)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d002      	beq.n	800342c <mpiShiftLeft+0x26>
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d101      	bne.n	8003430 <mpiShiftLeft+0x2a>
      return NO_ERROR;
 800342c:	2300      	movs	r3, #0
 800342e:	e073      	b.n	8003518 <mpiShiftLeft+0x112>

   //Increase the size of the multiple-precision number
   error = mpiGrow(r, r->size + (n + 31) / 32);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685a      	ldr	r2, [r3, #4]
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	331f      	adds	r3, #31
 8003438:	095b      	lsrs	r3, r3, #5
 800343a:	4413      	add	r3, r2
 800343c:	4619      	mov	r1, r3
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f7ff fa12 	bl	8002868 <mpiGrow>
 8003444:	4603      	mov	r3, r0
 8003446:	817b      	strh	r3, [r7, #10]
   //Check return code
   if(error)
 8003448:	897b      	ldrh	r3, [r7, #10]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d001      	beq.n	8003452 <mpiShiftLeft+0x4c>
      return error;
 800344e:	897b      	ldrh	r3, [r7, #10]
 8003450:	e062      	b.n	8003518 <mpiShiftLeft+0x112>

   //First, shift words
   if(n1 > 0)
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d02a      	beq.n	80034ae <mpiShiftLeft+0xa8>
   {
      //Process the most significant words
      for(i = r->size - 1; i >= n1; i--)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	3b01      	subs	r3, #1
 800345e:	617b      	str	r3, [r7, #20]
 8003460:	e010      	b.n	8003484 <mpiShiftLeft+0x7e>
      {
         r->data[i] = r->data[i - n1];
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	689a      	ldr	r2, [r3, #8]
 8003466:	6979      	ldr	r1, [r7, #20]
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	1acb      	subs	r3, r1, r3
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	441a      	add	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6899      	ldr	r1, [r3, #8]
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	440b      	add	r3, r1
 800347a:	6812      	ldr	r2, [r2, #0]
 800347c:	601a      	str	r2, [r3, #0]
      for(i = r->size - 1; i >= n1; i--)
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	3b01      	subs	r3, #1
 8003482:	617b      	str	r3, [r7, #20]
 8003484:	697a      	ldr	r2, [r7, #20]
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	429a      	cmp	r2, r3
 800348a:	d2ea      	bcs.n	8003462 <mpiShiftLeft+0x5c>
      }

      //Fill the rest with zeroes
      for(i = 0; i < n1; i++)
 800348c:	2300      	movs	r3, #0
 800348e:	617b      	str	r3, [r7, #20]
 8003490:	e009      	b.n	80034a6 <mpiShiftLeft+0xa0>
      {
         r->data[i] = 0;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	689a      	ldr	r2, [r3, #8]
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	4413      	add	r3, r2
 800349c:	2200      	movs	r2, #0
 800349e:	601a      	str	r2, [r3, #0]
      for(i = 0; i < n1; i++)
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	3301      	adds	r3, #1
 80034a4:	617b      	str	r3, [r7, #20]
 80034a6:	697a      	ldr	r2, [r7, #20]
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d3f1      	bcc.n	8003492 <mpiShiftLeft+0x8c>
      }
   }

   //Then shift bits
   if(n2 > 0)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d030      	beq.n	8003516 <mpiShiftLeft+0x110>
   {
      //Process the most significant words
      for(i = r->size - 1; i >= 1; i--)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	3b01      	subs	r3, #1
 80034ba:	617b      	str	r3, [r7, #20]
 80034bc:	e01f      	b.n	80034fe <mpiShiftLeft+0xf8>
      {
         r->data[i] = (r->data[i] << n2) | (r->data[i - 1] >> (32 - n2));
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	689a      	ldr	r2, [r3, #8]
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	4413      	add	r3, r2
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	fa02 f103 	lsl.w	r1, r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689a      	ldr	r2, [r3, #8]
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80034da:	3b01      	subs	r3, #1
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	4413      	add	r3, r2
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f1c3 0320 	rsb	r3, r3, #32
 80034e8:	40da      	lsrs	r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6898      	ldr	r0, [r3, #8]
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	4403      	add	r3, r0
 80034f4:	430a      	orrs	r2, r1
 80034f6:	601a      	str	r2, [r3, #0]
      for(i = r->size - 1; i >= 1; i--)
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	3b01      	subs	r3, #1
 80034fc:	617b      	str	r3, [r7, #20]
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d1dc      	bne.n	80034be <mpiShiftLeft+0xb8>
      }

      //The least significant word requires a special handling
      r->data[0] <<= n2;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	6819      	ldr	r1, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	68fa      	ldr	r2, [r7, #12]
 8003510:	fa01 f202 	lsl.w	r2, r1, r2
 8003514:	601a      	str	r2, [r3, #0]
   }

   //Shift operation is complete
   return NO_ERROR;
 8003516:	2300      	movs	r3, #0
}
 8003518:	4618      	mov	r0, r3
 800351a:	3718      	adds	r7, #24
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <mpiShiftRight>:
 * @param[in] n The number of bits to shift
 * @return Error code
 **/

error_t mpiShiftRight(Mpi *r, uint_t n)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b086      	sub	sp, #24
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
   uint_t i;
   uint_t m;

   //Number of 32-bit words to shift
   uint_t n1 = n / (MPI_INT_SIZE * 8);
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	095b      	lsrs	r3, r3, #5
 800352e:	613b      	str	r3, [r7, #16]
   //Number of bits to shift
   uint_t n2 = n % (MPI_INT_SIZE * 8);
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	f003 031f 	and.w	r3, r3, #31
 8003536:	60fb      	str	r3, [r7, #12]

   //Check parameters
   if(n1 >= r->size)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	693a      	ldr	r2, [r7, #16]
 800353e:	429a      	cmp	r2, r3
 8003540:	d30a      	bcc.n	8003558 <mpiShiftRight+0x38>
   {
      osMemset(r->data, 0, r->size * MPI_INT_SIZE);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6898      	ldr	r0, [r3, #8]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	461a      	mov	r2, r3
 800354e:	2100      	movs	r1, #0
 8003550:	f003 fdb4 	bl	80070bc <memset>
      return NO_ERROR;
 8003554:	2300      	movs	r3, #0
 8003556:	e06f      	b.n	8003638 <mpiShiftRight+0x118>
   }

   //First, shift words
   if(n1 > 0)
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d02e      	beq.n	80035bc <mpiShiftRight+0x9c>
   {
      //Process the least significant words
      for(m = r->size - n1, i = 0; i < m; i++)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685a      	ldr	r2, [r3, #4]
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	60bb      	str	r3, [r7, #8]
 8003568:	2300      	movs	r3, #0
 800356a:	617b      	str	r3, [r7, #20]
 800356c:	e010      	b.n	8003590 <mpiShiftRight+0x70>
      {
         r->data[i] = r->data[i + n1];
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	689a      	ldr	r2, [r3, #8]
 8003572:	6979      	ldr	r1, [r7, #20]
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	440b      	add	r3, r1
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	441a      	add	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6899      	ldr	r1, [r3, #8]
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	440b      	add	r3, r1
 8003586:	6812      	ldr	r2, [r2, #0]
 8003588:	601a      	str	r2, [r3, #0]
      for(m = r->size - n1, i = 0; i < m; i++)
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	3301      	adds	r3, #1
 800358e:	617b      	str	r3, [r7, #20]
 8003590:	697a      	ldr	r2, [r7, #20]
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	429a      	cmp	r2, r3
 8003596:	d3ea      	bcc.n	800356e <mpiShiftRight+0x4e>
      }

      //Fill the rest with zeroes
      for(i = m; i < r->size; i++)
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	617b      	str	r3, [r7, #20]
 800359c:	e009      	b.n	80035b2 <mpiShiftRight+0x92>
      {
         r->data[i] = 0;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	689a      	ldr	r2, [r3, #8]
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	4413      	add	r3, r2
 80035a8:	2200      	movs	r2, #0
 80035aa:	601a      	str	r2, [r3, #0]
      for(i = m; i < r->size; i++)
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	3301      	adds	r3, #1
 80035b0:	617b      	str	r3, [r7, #20]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d3f0      	bcc.n	800359e <mpiShiftRight+0x7e>
      }
   }

   //Then shift bits
   if(n2 > 0)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d039      	beq.n	8003636 <mpiShiftRight+0x116>
   {
      //Process the least significant words
      for(m = r->size - n1 - 1, i = 0; i < m; i++)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685a      	ldr	r2, [r3, #4]
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	3b01      	subs	r3, #1
 80035cc:	60bb      	str	r3, [r7, #8]
 80035ce:	2300      	movs	r3, #0
 80035d0:	617b      	str	r3, [r7, #20]
 80035d2:	e01d      	b.n	8003610 <mpiShiftRight+0xf0>
      {
         r->data[i] = (r->data[i] >> n2) | (r->data[i + 1] << (32 - n2));
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689a      	ldr	r2, [r3, #8]
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	4413      	add	r3, r2
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	fa22 f103 	lsr.w	r1, r2, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	689a      	ldr	r2, [r3, #8]
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	3301      	adds	r3, #1
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	4413      	add	r3, r2
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f1c3 0320 	rsb	r3, r3, #32
 80035fa:	409a      	lsls	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6898      	ldr	r0, [r3, #8]
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	4403      	add	r3, r0
 8003606:	430a      	orrs	r2, r1
 8003608:	601a      	str	r2, [r3, #0]
      for(m = r->size - n1 - 1, i = 0; i < m; i++)
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	3301      	adds	r3, #1
 800360e:	617b      	str	r3, [r7, #20]
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	429a      	cmp	r2, r3
 8003616:	d3dd      	bcc.n	80035d4 <mpiShiftRight+0xb4>
      }

      //The most significant word requires a special handling
      r->data[m] >>= n2;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689a      	ldr	r2, [r3, #8]
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	4413      	add	r3, r2
 8003622:	6819      	ldr	r1, [r3, #0]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	689a      	ldr	r2, [r3, #8]
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	4413      	add	r3, r2
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	fa21 f202 	lsr.w	r2, r1, r2
 8003634:	601a      	str	r2, [r3, #0]
   }

   //Shift operation is complete
   return NO_ERROR;
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	3718      	adds	r7, #24
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <mpiMul>:
 * @param[in] b Second operand B
 * @return Error code
 **/

__weak_func error_t mpiMul(Mpi *r, const Mpi *a, const Mpi *b)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b08e      	sub	sp, #56	; 0x38
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	607a      	str	r2, [r7, #4]
   int_t n;
   Mpi ta;
   Mpi tb;

   //Initialize multiple precision integers
   mpiInit(&ta);
 800364c:	f107 031c 	add.w	r3, r7, #28
 8003650:	4618      	mov	r0, r3
 8003652:	f7ff f8d6 	bl	8002802 <mpiInit>
   mpiInit(&tb);
 8003656:	f107 0310 	add.w	r3, r7, #16
 800365a:	4618      	mov	r0, r3
 800365c:	f7ff f8d1 	bl	8002802 <mpiInit>

   //R and A are the same instance?
   if(r == a)
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	429a      	cmp	r2, r3
 8003666:	d10d      	bne.n	8003684 <mpiMul+0x44>
   {
      //Copy A to TA
      MPI_CHECK(mpiCopy(&ta, a));
 8003668:	f107 031c 	add.w	r3, r7, #28
 800366c:	68b9      	ldr	r1, [r7, #8]
 800366e:	4618      	mov	r0, r3
 8003670:	f7ff fadc 	bl	8002c2c <mpiCopy>
 8003674:	4603      	mov	r3, r0
 8003676:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003678:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800367a:	2b00      	cmp	r3, #0
 800367c:	d179      	bne.n	8003772 <mpiMul+0x132>
      //Use TA instead of A
      a = &ta;
 800367e:	f107 031c 	add.w	r3, r7, #28
 8003682:	60bb      	str	r3, [r7, #8]
   }

   //R and B are the same instance?
   if(r == b)
 8003684:	68fa      	ldr	r2, [r7, #12]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	429a      	cmp	r2, r3
 800368a:	d10d      	bne.n	80036a8 <mpiMul+0x68>
   {
      //Copy B to TB
      MPI_CHECK(mpiCopy(&tb, b));
 800368c:	f107 0310 	add.w	r3, r7, #16
 8003690:	6879      	ldr	r1, [r7, #4]
 8003692:	4618      	mov	r0, r3
 8003694:	f7ff faca 	bl	8002c2c <mpiCopy>
 8003698:	4603      	mov	r3, r0
 800369a:	86fb      	strh	r3, [r7, #54]	; 0x36
 800369c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d169      	bne.n	8003776 <mpiMul+0x136>
      //Use TB instead of B
      b = &tb;
 80036a2:	f107 0310 	add.w	r3, r7, #16
 80036a6:	607b      	str	r3, [r7, #4]
   }

   //Determine the actual length of A and B
   m = mpiGetLength(a);
 80036a8:	68b8      	ldr	r0, [r7, #8]
 80036aa:	f7ff f91d 	bl	80028e8 <mpiGetLength>
 80036ae:	4603      	mov	r3, r0
 80036b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   n = mpiGetLength(b);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f7ff f918 	bl	80028e8 <mpiGetLength>
 80036b8:	4603      	mov	r3, r0
 80036ba:	62bb      	str	r3, [r7, #40]	; 0x28

   //Adjust the size of R
   MPI_CHECK(mpiGrow(r, m + n));
 80036bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c0:	4413      	add	r3, r2
 80036c2:	4619      	mov	r1, r3
 80036c4:	68f8      	ldr	r0, [r7, #12]
 80036c6:	f7ff f8cf 	bl	8002868 <mpiGrow>
 80036ca:	4603      	mov	r3, r0
 80036cc:	86fb      	strh	r3, [r7, #54]	; 0x36
 80036ce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d152      	bne.n	800377a <mpiMul+0x13a>
   //Set the sign of R
   r->sign = (a->sign == b->sign) ? 1 : -1;
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d101      	bne.n	80036e4 <mpiMul+0xa4>
 80036e0:	2201      	movs	r2, #1
 80036e2:	e001      	b.n	80036e8 <mpiMul+0xa8>
 80036e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	601a      	str	r2, [r3, #0]

   //Clear the contents of the destination integer
   osMemset(r->data, 0, r->size * MPI_INT_SIZE);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6898      	ldr	r0, [r3, #8]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	461a      	mov	r2, r3
 80036f8:	2100      	movs	r1, #0
 80036fa:	f003 fcdf 	bl	80070bc <memset>

   //Perform multiplication
   if(m < n)
 80036fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003702:	429a      	cmp	r2, r3
 8003704:	da1a      	bge.n	800373c <mpiMul+0xfc>
   {
      for(i = 0; i < m; i++)
 8003706:	2300      	movs	r3, #0
 8003708:	633b      	str	r3, [r7, #48]	; 0x30
 800370a:	e012      	b.n	8003732 <mpiMul+0xf2>
      {
         mpiMulAccCore(&r->data[i], b->data, n, a->data[i]);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	689a      	ldr	r2, [r3, #8]
 8003710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	18d0      	adds	r0, r2, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6899      	ldr	r1, [r3, #8]
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	689a      	ldr	r2, [r3, #8]
 800371e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	4413      	add	r3, r2
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003728:	f000 fb16 	bl	8003d58 <mpiMulAccCore>
      for(i = 0; i < m; i++)
 800372c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800372e:	3301      	adds	r3, #1
 8003730:	633b      	str	r3, [r7, #48]	; 0x30
 8003732:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003736:	429a      	cmp	r2, r3
 8003738:	dbe8      	blt.n	800370c <mpiMul+0xcc>
 800373a:	e01f      	b.n	800377c <mpiMul+0x13c>
      }
   }
   else
   {
      for(i = 0; i < n; i++)
 800373c:	2300      	movs	r3, #0
 800373e:	633b      	str	r3, [r7, #48]	; 0x30
 8003740:	e012      	b.n	8003768 <mpiMul+0x128>
      {
         mpiMulAccCore(&r->data[i], a->data, m, b->data[i]);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	689a      	ldr	r2, [r3, #8]
 8003746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	18d0      	adds	r0, r2, r3
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	6899      	ldr	r1, [r3, #8]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689a      	ldr	r2, [r3, #8]
 8003754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	4413      	add	r3, r2
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800375e:	f000 fafb 	bl	8003d58 <mpiMulAccCore>
      for(i = 0; i < n; i++)
 8003762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003764:	3301      	adds	r3, #1
 8003766:	633b      	str	r3, [r7, #48]	; 0x30
 8003768:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800376a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800376c:	429a      	cmp	r2, r3
 800376e:	dbe8      	blt.n	8003742 <mpiMul+0x102>
      }
   }

end:
 8003770:	e004      	b.n	800377c <mpiMul+0x13c>
      MPI_CHECK(mpiCopy(&ta, a));
 8003772:	bf00      	nop
 8003774:	e002      	b.n	800377c <mpiMul+0x13c>
      MPI_CHECK(mpiCopy(&tb, b));
 8003776:	bf00      	nop
 8003778:	e000      	b.n	800377c <mpiMul+0x13c>
   MPI_CHECK(mpiGrow(r, m + n));
 800377a:	bf00      	nop
   //Release multiple precision integers
   mpiFree(&ta);
 800377c:	f107 031c 	add.w	r3, r7, #28
 8003780:	4618      	mov	r0, r3
 8003782:	f7ff f851 	bl	8002828 <mpiFree>
   mpiFree(&tb);
 8003786:	f107 0310 	add.w	r3, r7, #16
 800378a:	4618      	mov	r0, r3
 800378c:	f7ff f84c 	bl	8002828 <mpiFree>

   //Return status code
   return error;
 8003790:	8efb      	ldrh	r3, [r7, #54]	; 0x36
}
 8003792:	4618      	mov	r0, r3
 8003794:	3738      	adds	r7, #56	; 0x38
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <mpiDiv>:
 * @param[in] b The divisor B
 * @return Error code
 **/

error_t mpiDiv(Mpi *q, Mpi *r, const Mpi *a, const Mpi *b)
{
 800379a:	b580      	push	{r7, lr}
 800379c:	b090      	sub	sp, #64	; 0x40
 800379e:	af00      	add	r7, sp, #0
 80037a0:	60f8      	str	r0, [r7, #12]
 80037a2:	60b9      	str	r1, [r7, #8]
 80037a4:	607a      	str	r2, [r7, #4]
 80037a6:	603b      	str	r3, [r7, #0]
   Mpi c;
   Mpi d;
   Mpi e;

   //Check whether the divisor is equal to zero
   if(!mpiCompInt(b, 0))
 80037a8:	2100      	movs	r1, #0
 80037aa:	6838      	ldr	r0, [r7, #0]
 80037ac:	f7ff f9cf 	bl	8002b4e <mpiCompInt>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <mpiDiv+0x20>
      return ERROR_INVALID_PARAMETER;
 80037b6:	2302      	movs	r3, #2
 80037b8:	e0d0      	b.n	800395c <mpiDiv+0x1c2>

   //Initialize multiple precision integers
   mpiInit(&c);
 80037ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80037be:	4618      	mov	r0, r3
 80037c0:	f7ff f81f 	bl	8002802 <mpiInit>
   mpiInit(&d);
 80037c4:	f107 031c 	add.w	r3, r7, #28
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7ff f81a 	bl	8002802 <mpiInit>
   mpiInit(&e);
 80037ce:	f107 0310 	add.w	r3, r7, #16
 80037d2:	4618      	mov	r0, r3
 80037d4:	f7ff f815 	bl	8002802 <mpiInit>

   MPI_CHECK(mpiCopy(&c, a));
 80037d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80037dc:	6879      	ldr	r1, [r7, #4]
 80037de:	4618      	mov	r0, r3
 80037e0:	f7ff fa24 	bl	8002c2c <mpiCopy>
 80037e4:	4603      	mov	r3, r0
 80037e6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80037e8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	f040 8093 	bne.w	8003916 <mpiDiv+0x17c>
   MPI_CHECK(mpiCopy(&d, b));
 80037f0:	f107 031c 	add.w	r3, r7, #28
 80037f4:	6839      	ldr	r1, [r7, #0]
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7ff fa18 	bl	8002c2c <mpiCopy>
 80037fc:	4603      	mov	r3, r0
 80037fe:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003800:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003802:	2b00      	cmp	r3, #0
 8003804:	f040 8089 	bne.w	800391a <mpiDiv+0x180>
   MPI_CHECK(mpiSetValue(&e, 0));
 8003808:	f107 0310 	add.w	r3, r7, #16
 800380c:	2100      	movs	r1, #0
 800380e:	4618      	mov	r0, r3
 8003810:	f7ff fa41 	bl	8002c96 <mpiSetValue>
 8003814:	4603      	mov	r3, r0
 8003816:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003818:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800381a:	2b00      	cmp	r3, #0
 800381c:	d17f      	bne.n	800391e <mpiDiv+0x184>

   m = mpiGetBitLength(&c);
 800381e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003822:	4618      	mov	r0, r3
 8003824:	f7ff f887 	bl	8002936 <mpiGetBitLength>
 8003828:	6378      	str	r0, [r7, #52]	; 0x34
   n = mpiGetBitLength(&d);
 800382a:	f107 031c 	add.w	r3, r7, #28
 800382e:	4618      	mov	r0, r3
 8003830:	f7ff f881 	bl	8002936 <mpiGetBitLength>
 8003834:	63b8      	str	r0, [r7, #56]	; 0x38

   if(m > n)
 8003836:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800383a:	429a      	cmp	r2, r3
 800383c:	d949      	bls.n	80038d2 <mpiDiv+0x138>
      MPI_CHECK(mpiShiftLeft(&d, m - n));
 800383e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003842:	1ad2      	subs	r2, r2, r3
 8003844:	f107 031c 	add.w	r3, r7, #28
 8003848:	4611      	mov	r1, r2
 800384a:	4618      	mov	r0, r3
 800384c:	f7ff fddb 	bl	8003406 <mpiShiftLeft>
 8003850:	4603      	mov	r3, r0
 8003852:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003854:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003856:	2b00      	cmp	r3, #0
 8003858:	d163      	bne.n	8003922 <mpiDiv+0x188>

   while(n++ <= m)
 800385a:	e03a      	b.n	80038d2 <mpiDiv+0x138>
   {
      MPI_CHECK(mpiShiftLeft(&e, 1));
 800385c:	f107 0310 	add.w	r3, r7, #16
 8003860:	2101      	movs	r1, #1
 8003862:	4618      	mov	r0, r3
 8003864:	f7ff fdcf 	bl	8003406 <mpiShiftLeft>
 8003868:	4603      	mov	r3, r0
 800386a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800386c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800386e:	2b00      	cmp	r3, #0
 8003870:	d159      	bne.n	8003926 <mpiDiv+0x18c>

      if(mpiComp(&c, &d) >= 0)
 8003872:	f107 021c 	add.w	r2, r7, #28
 8003876:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800387a:	4611      	mov	r1, r2
 800387c:	4618      	mov	r0, r3
 800387e:	f7ff f900 	bl	8002a82 <mpiComp>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	db19      	blt.n	80038bc <mpiDiv+0x122>
      {
         MPI_CHECK(mpiSetBitValue(&e, 0, 1));
 8003888:	f107 0310 	add.w	r3, r7, #16
 800388c:	2201      	movs	r2, #1
 800388e:	2100      	movs	r1, #0
 8003890:	4618      	mov	r0, r3
 8003892:	f7ff f88a 	bl	80029aa <mpiSetBitValue>
 8003896:	4603      	mov	r3, r0
 8003898:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800389a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800389c:	2b00      	cmp	r3, #0
 800389e:	d144      	bne.n	800392a <mpiDiv+0x190>
         MPI_CHECK(mpiSub(&c, &c, &d));
 80038a0:	f107 021c 	add.w	r2, r7, #28
 80038a4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80038a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80038ac:	4618      	mov	r0, r3
 80038ae:	f7ff fbe5 	bl	800307c <mpiSub>
 80038b2:	4603      	mov	r3, r0
 80038b4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80038b6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d138      	bne.n	800392e <mpiDiv+0x194>
      }

      MPI_CHECK(mpiShiftRight(&d, 1));
 80038bc:	f107 031c 	add.w	r3, r7, #28
 80038c0:	2101      	movs	r1, #1
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7ff fe2c 	bl	8003520 <mpiShiftRight>
 80038c8:	4603      	mov	r3, r0
 80038ca:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80038cc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d12f      	bne.n	8003932 <mpiDiv+0x198>
   while(n++ <= m)
 80038d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038d4:	1c5a      	adds	r2, r3, #1
 80038d6:	63ba      	str	r2, [r7, #56]	; 0x38
 80038d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038da:	429a      	cmp	r2, r3
 80038dc:	d2be      	bcs.n	800385c <mpiDiv+0xc2>
   }

   if(q != NULL)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d00a      	beq.n	80038fa <mpiDiv+0x160>
      MPI_CHECK(mpiCopy(q, &e));
 80038e4:	f107 0310 	add.w	r3, r7, #16
 80038e8:	4619      	mov	r1, r3
 80038ea:	68f8      	ldr	r0, [r7, #12]
 80038ec:	f7ff f99e 	bl	8002c2c <mpiCopy>
 80038f0:	4603      	mov	r3, r0
 80038f2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80038f4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d11d      	bne.n	8003936 <mpiDiv+0x19c>

   if(r != NULL)
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d01c      	beq.n	800393a <mpiDiv+0x1a0>
      MPI_CHECK(mpiCopy(r, &c));
 8003900:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003904:	4619      	mov	r1, r3
 8003906:	68b8      	ldr	r0, [r7, #8]
 8003908:	f7ff f990 	bl	8002c2c <mpiCopy>
 800390c:	4603      	mov	r3, r0
 800390e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003910:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003912:	2b00      	cmp	r3, #0

end:
 8003914:	e011      	b.n	800393a <mpiDiv+0x1a0>
   MPI_CHECK(mpiCopy(&c, a));
 8003916:	bf00      	nop
 8003918:	e010      	b.n	800393c <mpiDiv+0x1a2>
   MPI_CHECK(mpiCopy(&d, b));
 800391a:	bf00      	nop
 800391c:	e00e      	b.n	800393c <mpiDiv+0x1a2>
   MPI_CHECK(mpiSetValue(&e, 0));
 800391e:	bf00      	nop
 8003920:	e00c      	b.n	800393c <mpiDiv+0x1a2>
      MPI_CHECK(mpiShiftLeft(&d, m - n));
 8003922:	bf00      	nop
 8003924:	e00a      	b.n	800393c <mpiDiv+0x1a2>
      MPI_CHECK(mpiShiftLeft(&e, 1));
 8003926:	bf00      	nop
 8003928:	e008      	b.n	800393c <mpiDiv+0x1a2>
         MPI_CHECK(mpiSetBitValue(&e, 0, 1));
 800392a:	bf00      	nop
 800392c:	e006      	b.n	800393c <mpiDiv+0x1a2>
         MPI_CHECK(mpiSub(&c, &c, &d));
 800392e:	bf00      	nop
 8003930:	e004      	b.n	800393c <mpiDiv+0x1a2>
      MPI_CHECK(mpiShiftRight(&d, 1));
 8003932:	bf00      	nop
 8003934:	e002      	b.n	800393c <mpiDiv+0x1a2>
      MPI_CHECK(mpiCopy(q, &e));
 8003936:	bf00      	nop
 8003938:	e000      	b.n	800393c <mpiDiv+0x1a2>
end:
 800393a:	bf00      	nop
   //Release previously allocated memory
   mpiFree(&c);
 800393c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003940:	4618      	mov	r0, r3
 8003942:	f7fe ff71 	bl	8002828 <mpiFree>
   mpiFree(&d);
 8003946:	f107 031c 	add.w	r3, r7, #28
 800394a:	4618      	mov	r0, r3
 800394c:	f7fe ff6c 	bl	8002828 <mpiFree>
   mpiFree(&e);
 8003950:	f107 0310 	add.w	r3, r7, #16
 8003954:	4618      	mov	r0, r3
 8003956:	f7fe ff67 	bl	8002828 <mpiFree>

   //Return status code
   return error;
 800395a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
}
 800395c:	4618      	mov	r0, r3
 800395e:	3740      	adds	r7, #64	; 0x40
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <mpiMod>:
 * @param[in] p The modulus P
 * @return Error code
 **/

error_t mpiMod(Mpi *r, const Mpi *a, const Mpi *p)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b08c      	sub	sp, #48	; 0x30
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
   uint_t m;
   uint_t n;
   Mpi c;

   //Make sure the modulus is positive
   if(mpiCompInt(p, 0) <= 0)
 8003970:	2100      	movs	r1, #0
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f7ff f8eb 	bl	8002b4e <mpiCompInt>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	dc01      	bgt.n	8003982 <mpiMod+0x1e>
      return ERROR_INVALID_PARAMETER;
 800397e:	2302      	movs	r3, #2
 8003980:	e07b      	b.n	8003a7a <mpiMod+0x116>

   //Initialize multiple precision integer
   mpiInit(&c);
 8003982:	f107 0314 	add.w	r3, r7, #20
 8003986:	4618      	mov	r0, r3
 8003988:	f7fe ff3b 	bl	8002802 <mpiInit>

   //Save the sign of A
   sign = a->sign;
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	62bb      	str	r3, [r7, #40]	; 0x28
   //Determine the actual length of A
   m = mpiGetBitLength(a);
 8003992:	68b8      	ldr	r0, [r7, #8]
 8003994:	f7fe ffcf 	bl	8002936 <mpiGetBitLength>
 8003998:	6278      	str	r0, [r7, #36]	; 0x24
   //Determine the actual length of P
   n = mpiGetBitLength(p);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f7fe ffcb 	bl	8002936 <mpiGetBitLength>
 80039a0:	6238      	str	r0, [r7, #32]

   //Let R = A
   MPI_CHECK(mpiCopy(r, a));
 80039a2:	68b9      	ldr	r1, [r7, #8]
 80039a4:	68f8      	ldr	r0, [r7, #12]
 80039a6:	f7ff f941 	bl	8002c2c <mpiCopy>
 80039aa:	4603      	mov	r3, r0
 80039ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80039ae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d151      	bne.n	8003a58 <mpiMod+0xf4>

   if(m >= n)
 80039b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039b6:	6a3b      	ldr	r3, [r7, #32]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d340      	bcc.n	8003a3e <mpiMod+0xda>
   {
      MPI_CHECK(mpiCopy(&c, p));
 80039bc:	f107 0314 	add.w	r3, r7, #20
 80039c0:	6879      	ldr	r1, [r7, #4]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7ff f932 	bl	8002c2c <mpiCopy>
 80039c8:	4603      	mov	r3, r0
 80039ca:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80039cc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d144      	bne.n	8003a5c <mpiMod+0xf8>
      MPI_CHECK(mpiShiftLeft(&c, m - n));
 80039d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039d4:	6a3b      	ldr	r3, [r7, #32]
 80039d6:	1ad2      	subs	r2, r2, r3
 80039d8:	f107 0314 	add.w	r3, r7, #20
 80039dc:	4611      	mov	r1, r2
 80039de:	4618      	mov	r0, r3
 80039e0:	f7ff fd11 	bl	8003406 <mpiShiftLeft>
 80039e4:	4603      	mov	r3, r0
 80039e6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80039e8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d138      	bne.n	8003a60 <mpiMod+0xfc>

      while(mpiCompAbs(r, p) >= 0)
 80039ee:	e01f      	b.n	8003a30 <mpiMod+0xcc>
      {
         if(mpiCompAbs(r, &c) >= 0)
 80039f0:	f107 0314 	add.w	r3, r7, #20
 80039f4:	4619      	mov	r1, r3
 80039f6:	68f8      	ldr	r0, [r7, #12]
 80039f8:	f7ff f8cb 	bl	8002b92 <mpiCompAbs>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	db0b      	blt.n	8003a1a <mpiMod+0xb6>
         {
            MPI_CHECK(mpiSubAbs(r, r, &c));
 8003a02:	f107 0314 	add.w	r3, r7, #20
 8003a06:	461a      	mov	r2, r3
 8003a08:	68f9      	ldr	r1, [r7, #12]
 8003a0a:	68f8      	ldr	r0, [r7, #12]
 8003a0c:	f7ff fc47 	bl	800329e <mpiSubAbs>
 8003a10:	4603      	mov	r3, r0
 8003a12:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003a14:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d124      	bne.n	8003a64 <mpiMod+0x100>
         }

         MPI_CHECK(mpiShiftRight(&c, 1));
 8003a1a:	f107 0314 	add.w	r3, r7, #20
 8003a1e:	2101      	movs	r1, #1
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7ff fd7d 	bl	8003520 <mpiShiftRight>
 8003a26:	4603      	mov	r3, r0
 8003a28:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003a2a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d11b      	bne.n	8003a68 <mpiMod+0x104>
      while(mpiCompAbs(r, p) >= 0)
 8003a30:	6879      	ldr	r1, [r7, #4]
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	f7ff f8ad 	bl	8002b92 <mpiCompAbs>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	dad8      	bge.n	80039f0 <mpiMod+0x8c>
      }
   }

   if(sign < 0)
 8003a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	da13      	bge.n	8003a6c <mpiMod+0x108>
   {
      MPI_CHECK(mpiSubAbs(r, p, r));
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	6879      	ldr	r1, [r7, #4]
 8003a48:	68f8      	ldr	r0, [r7, #12]
 8003a4a:	f7ff fc28 	bl	800329e <mpiSubAbs>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003a52:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003a54:	2b00      	cmp	r3, #0
   }

end:
 8003a56:	e009      	b.n	8003a6c <mpiMod+0x108>
   MPI_CHECK(mpiCopy(r, a));
 8003a58:	bf00      	nop
 8003a5a:	e008      	b.n	8003a6e <mpiMod+0x10a>
      MPI_CHECK(mpiCopy(&c, p));
 8003a5c:	bf00      	nop
 8003a5e:	e006      	b.n	8003a6e <mpiMod+0x10a>
      MPI_CHECK(mpiShiftLeft(&c, m - n));
 8003a60:	bf00      	nop
 8003a62:	e004      	b.n	8003a6e <mpiMod+0x10a>
            MPI_CHECK(mpiSubAbs(r, r, &c));
 8003a64:	bf00      	nop
 8003a66:	e002      	b.n	8003a6e <mpiMod+0x10a>
         MPI_CHECK(mpiShiftRight(&c, 1));
 8003a68:	bf00      	nop
 8003a6a:	e000      	b.n	8003a6e <mpiMod+0x10a>
end:
 8003a6c:	bf00      	nop
   //Release previously allocated memory
   mpiFree(&c);
 8003a6e:	f107 0314 	add.w	r3, r7, #20
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7fe fed8 	bl	8002828 <mpiFree>

   //Return status code
   return error;
 8003a78:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3730      	adds	r7, #48	; 0x30
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <mpiMulMod>:
 * @param[in] p The modulus P
 * @return Error code
 **/

__weak_func error_t mpiMulMod(Mpi *r, const Mpi *a, const Mpi *b, const Mpi *p)
{
 8003a82:	b580      	push	{r7, lr}
 8003a84:	b086      	sub	sp, #24
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	60f8      	str	r0, [r7, #12]
 8003a8a:	60b9      	str	r1, [r7, #8]
 8003a8c:	607a      	str	r2, [r7, #4]
 8003a8e:	603b      	str	r3, [r7, #0]
   error_t error;

   //Perform modular multiplication
   MPI_CHECK(mpiMul(r, a, b));
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	68b9      	ldr	r1, [r7, #8]
 8003a94:	68f8      	ldr	r0, [r7, #12]
 8003a96:	f7ff fdd3 	bl	8003640 <mpiMul>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	82fb      	strh	r3, [r7, #22]
 8003a9e:	8afb      	ldrh	r3, [r7, #22]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d109      	bne.n	8003ab8 <mpiMulMod+0x36>
   MPI_CHECK(mpiMod(r, r, p));
 8003aa4:	683a      	ldr	r2, [r7, #0]
 8003aa6:	68f9      	ldr	r1, [r7, #12]
 8003aa8:	68f8      	ldr	r0, [r7, #12]
 8003aaa:	f7ff ff5b 	bl	8003964 <mpiMod>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	82fb      	strh	r3, [r7, #22]
 8003ab2:	8afb      	ldrh	r3, [r7, #22]
 8003ab4:	2b00      	cmp	r3, #0

end:
 8003ab6:	e000      	b.n	8003aba <mpiMulMod+0x38>
   MPI_CHECK(mpiMul(r, a, b));
 8003ab8:	bf00      	nop
   //Return status code
   return error;
 8003aba:	8afb      	ldrh	r3, [r7, #22]
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3718      	adds	r7, #24
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <mpiInvMod>:
 * @param[in] p The modulus P
 * @return Error code
 **/

__weak_func error_t mpiInvMod(Mpi *r, const Mpi *a, const Mpi *p)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b09a      	sub	sp, #104	; 0x68
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	607a      	str	r2, [r7, #4]
   Mpi t;
   Mpi u;
   Mpi v;

   //Initialize multiple precision integers
   mpiInit(&b);
 8003ad0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7fe fe94 	bl	8002802 <mpiInit>
   mpiInit(&c);
 8003ada:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f7fe fe8f 	bl	8002802 <mpiInit>
   mpiInit(&q0);
 8003ae4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7fe fe8a 	bl	8002802 <mpiInit>
   mpiInit(&r0);
 8003aee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7fe fe85 	bl	8002802 <mpiInit>
   mpiInit(&t);
 8003af8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003afc:	4618      	mov	r0, r3
 8003afe:	f7fe fe80 	bl	8002802 <mpiInit>
   mpiInit(&u);
 8003b02:	f107 031c 	add.w	r3, r7, #28
 8003b06:	4618      	mov	r0, r3
 8003b08:	f7fe fe7b 	bl	8002802 <mpiInit>
   mpiInit(&v);
 8003b0c:	f107 0310 	add.w	r3, r7, #16
 8003b10:	4618      	mov	r0, r3
 8003b12:	f7fe fe76 	bl	8002802 <mpiInit>

   MPI_CHECK(mpiCopy(&b, p));
 8003b16:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003b1a:	6879      	ldr	r1, [r7, #4]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7ff f885 	bl	8002c2c <mpiCopy>
 8003b22:	4603      	mov	r3, r0
 8003b24:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8003b28:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	f040 80d5 	bne.w	8003cdc <mpiInvMod+0x218>
   MPI_CHECK(mpiCopy(&c, a));
 8003b32:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003b36:	68b9      	ldr	r1, [r7, #8]
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f7ff f877 	bl	8002c2c <mpiCopy>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8003b44:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f040 80c9 	bne.w	8003ce0 <mpiInvMod+0x21c>
   MPI_CHECK(mpiSetValue(&u, 0));
 8003b4e:	f107 031c 	add.w	r3, r7, #28
 8003b52:	2100      	movs	r1, #0
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7ff f89e 	bl	8002c96 <mpiSetValue>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8003b60:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	f040 80bd 	bne.w	8003ce4 <mpiInvMod+0x220>
   MPI_CHECK(mpiSetValue(&v, 1));
 8003b6a:	f107 0310 	add.w	r3, r7, #16
 8003b6e:	2101      	movs	r1, #1
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7ff f890 	bl	8002c96 <mpiSetValue>
 8003b76:	4603      	mov	r3, r0
 8003b78:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8003b7c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	f040 80b1 	bne.w	8003ce8 <mpiInvMod+0x224>

   while(mpiCompInt(&c, 0) > 0)
 8003b86:	e06f      	b.n	8003c68 <mpiInvMod+0x1a4>
   {
      MPI_CHECK(mpiDiv(&q0, &r0, &b, &c));
 8003b88:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003b8c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003b90:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8003b94:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8003b98:	f7ff fdff 	bl	800379a <mpiDiv>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8003ba2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	f040 80a0 	bne.w	8003cec <mpiInvMod+0x228>

      MPI_CHECK(mpiCopy(&b, &c));
 8003bac:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8003bb0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003bb4:	4611      	mov	r1, r2
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7ff f838 	bl	8002c2c <mpiCopy>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8003bc2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	f040 8092 	bne.w	8003cf0 <mpiInvMod+0x22c>
      MPI_CHECK(mpiCopy(&c, &r0));
 8003bcc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003bd0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003bd4:	4611      	mov	r1, r2
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7ff f828 	bl	8002c2c <mpiCopy>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8003be2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	f040 8084 	bne.w	8003cf4 <mpiInvMod+0x230>

      MPI_CHECK(mpiCopy(&t, &v));
 8003bec:	f107 0210 	add.w	r2, r7, #16
 8003bf0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003bf4:	4611      	mov	r1, r2
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7ff f818 	bl	8002c2c <mpiCopy>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8003c02:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d176      	bne.n	8003cf8 <mpiInvMod+0x234>
      MPI_CHECK(mpiMul(&q0, &q0, &v));
 8003c0a:	f107 0210 	add.w	r2, r7, #16
 8003c0e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8003c12:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7ff fd12 	bl	8003640 <mpiMul>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8003c22:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d168      	bne.n	8003cfc <mpiInvMod+0x238>
      MPI_CHECK(mpiSub(&v, &u, &q0));
 8003c2a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8003c2e:	f107 011c 	add.w	r1, r7, #28
 8003c32:	f107 0310 	add.w	r3, r7, #16
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7ff fa20 	bl	800307c <mpiSub>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8003c42:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d15a      	bne.n	8003d00 <mpiInvMod+0x23c>
      MPI_CHECK(mpiCopy(&u, &t));
 8003c4a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003c4e:	f107 031c 	add.w	r3, r7, #28
 8003c52:	4611      	mov	r1, r2
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7fe ffe9 	bl	8002c2c <mpiCopy>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8003c60:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d14d      	bne.n	8003d04 <mpiInvMod+0x240>
   while(mpiCompInt(&c, 0) > 0)
 8003c68:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003c6c:	2100      	movs	r1, #0
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7fe ff6d 	bl	8002b4e <mpiCompInt>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	dc86      	bgt.n	8003b88 <mpiInvMod+0xc4>
   }

   if(mpiCompInt(&b, 1))
 8003c7a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003c7e:	2101      	movs	r1, #1
 8003c80:	4618      	mov	r0, r3
 8003c82:	f7fe ff64 	bl	8002b4e <mpiCompInt>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d003      	beq.n	8003c94 <mpiInvMod+0x1d0>
   {
      MPI_CHECK(ERROR_FAILURE);
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8003c92:	e038      	b.n	8003d06 <mpiInvMod+0x242>
   }

   if(mpiCompInt(&u, 0) > 0)
 8003c94:	f107 031c 	add.w	r3, r7, #28
 8003c98:	2100      	movs	r1, #0
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7fe ff57 	bl	8002b4e <mpiCompInt>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	dd0c      	ble.n	8003cc0 <mpiInvMod+0x1fc>
   {
      MPI_CHECK(mpiCopy(r, &u));
 8003ca6:	f107 031c 	add.w	r3, r7, #28
 8003caa:	4619      	mov	r1, r3
 8003cac:	68f8      	ldr	r0, [r7, #12]
 8003cae:	f7fe ffbd 	bl	8002c2c <mpiCopy>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8003cb8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	e022      	b.n	8003d06 <mpiInvMod+0x242>
   }
   else
   {
      MPI_CHECK(mpiAdd(r, &u, p));
 8003cc0:	f107 031c 	add.w	r3, r7, #28
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	68f8      	ldr	r0, [r7, #12]
 8003cca:	f7ff f977 	bl	8002fbc <mpiAdd>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8003cd4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003cd8:	2b00      	cmp	r3, #0
   }

end:
 8003cda:	e014      	b.n	8003d06 <mpiInvMod+0x242>
   MPI_CHECK(mpiCopy(&b, p));
 8003cdc:	bf00      	nop
 8003cde:	e012      	b.n	8003d06 <mpiInvMod+0x242>
   MPI_CHECK(mpiCopy(&c, a));
 8003ce0:	bf00      	nop
 8003ce2:	e010      	b.n	8003d06 <mpiInvMod+0x242>
   MPI_CHECK(mpiSetValue(&u, 0));
 8003ce4:	bf00      	nop
 8003ce6:	e00e      	b.n	8003d06 <mpiInvMod+0x242>
   MPI_CHECK(mpiSetValue(&v, 1));
 8003ce8:	bf00      	nop
 8003cea:	e00c      	b.n	8003d06 <mpiInvMod+0x242>
      MPI_CHECK(mpiDiv(&q0, &r0, &b, &c));
 8003cec:	bf00      	nop
 8003cee:	e00a      	b.n	8003d06 <mpiInvMod+0x242>
      MPI_CHECK(mpiCopy(&b, &c));
 8003cf0:	bf00      	nop
 8003cf2:	e008      	b.n	8003d06 <mpiInvMod+0x242>
      MPI_CHECK(mpiCopy(&c, &r0));
 8003cf4:	bf00      	nop
 8003cf6:	e006      	b.n	8003d06 <mpiInvMod+0x242>
      MPI_CHECK(mpiCopy(&t, &v));
 8003cf8:	bf00      	nop
 8003cfa:	e004      	b.n	8003d06 <mpiInvMod+0x242>
      MPI_CHECK(mpiMul(&q0, &q0, &v));
 8003cfc:	bf00      	nop
 8003cfe:	e002      	b.n	8003d06 <mpiInvMod+0x242>
      MPI_CHECK(mpiSub(&v, &u, &q0));
 8003d00:	bf00      	nop
 8003d02:	e000      	b.n	8003d06 <mpiInvMod+0x242>
      MPI_CHECK(mpiCopy(&u, &t));
 8003d04:	bf00      	nop
   //Release previously allocated memory
   mpiFree(&b);
 8003d06:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7fe fd8c 	bl	8002828 <mpiFree>
   mpiFree(&c);
 8003d10:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7fe fd87 	bl	8002828 <mpiFree>
   mpiFree(&q0);
 8003d1a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7fe fd82 	bl	8002828 <mpiFree>
   mpiFree(&r0);
 8003d24:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7fe fd7d 	bl	8002828 <mpiFree>
   mpiFree(&t);
 8003d2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d32:	4618      	mov	r0, r3
 8003d34:	f7fe fd78 	bl	8002828 <mpiFree>
   mpiFree(&u);
 8003d38:	f107 031c 	add.w	r3, r7, #28
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7fe fd73 	bl	8002828 <mpiFree>
   mpiFree(&v);
 8003d42:	f107 0310 	add.w	r3, r7, #16
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7fe fd6e 	bl	8002828 <mpiFree>

   //Return status code
   return error;
 8003d4c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3768      	adds	r7, #104	; 0x68
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <mpiMulAccCore>:
 * @param[in] m Size of A in words
 * @param[in] b Second operand B
 **/

void mpiMulAccCore(uint_t *r, const uint_t *a, int_t m, const uint_t b)
{
 8003d58:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003d5c:	b08b      	sub	sp, #44	; 0x2c
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	60f8      	str	r0, [r7, #12]
 8003d62:	60b9      	str	r1, [r7, #8]
 8003d64:	607a      	str	r2, [r7, #4]
 8003d66:	603b      	str	r3, [r7, #0]
   uint32_t u;
   uint32_t v;
   uint64_t p;

   //Clear variables
   c = 0;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	623b      	str	r3, [r7, #32]
   u = 0;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	61bb      	str	r3, [r7, #24]
   v = 0;
 8003d70:	2300      	movs	r3, #0
 8003d72:	61fb      	str	r3, [r7, #28]

   //Perform multiplication
   for(i = 0; i < m; i++)
 8003d74:	2300      	movs	r3, #0
 8003d76:	627b      	str	r3, [r7, #36]	; 0x24
 8003d78:	e04d      	b.n	8003e16 <mpiMulAccCore+0xbe>
   {
      p = (uint64_t) a[i] * b;
 8003d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	68ba      	ldr	r2, [r7, #8]
 8003d80:	4413      	add	r3, r2
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2200      	movs	r2, #0
 8003d86:	4698      	mov	r8, r3
 8003d88:	4691      	mov	r9, r2
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	469a      	mov	sl, r3
 8003d90:	4693      	mov	fp, r2
 8003d92:	fb0a f209 	mul.w	r2, sl, r9
 8003d96:	fb08 f30b 	mul.w	r3, r8, fp
 8003d9a:	4413      	add	r3, r2
 8003d9c:	fba8 450a 	umull	r4, r5, r8, sl
 8003da0:	442b      	add	r3, r5
 8003da2:	461d      	mov	r5, r3
 8003da4:	e9c7 4504 	strd	r4, r5, [r7, #16]
 8003da8:	e9c7 4504 	strd	r4, r5, [r7, #16]
      u = (uint32_t) p;
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	61bb      	str	r3, [r7, #24]
      v = (uint32_t) (p >> 32);
 8003db0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003db4:	f04f 0200 	mov.w	r2, #0
 8003db8:	f04f 0300 	mov.w	r3, #0
 8003dbc:	000a      	movs	r2, r1
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	61fb      	str	r3, [r7, #28]

      u += c;
 8003dc4:	69ba      	ldr	r2, [r7, #24]
 8003dc6:	6a3b      	ldr	r3, [r7, #32]
 8003dc8:	4413      	add	r3, r2
 8003dca:	61bb      	str	r3, [r7, #24]
      if(u < c) v++;
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	6a3b      	ldr	r3, [r7, #32]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d202      	bcs.n	8003dda <mpiMulAccCore+0x82>
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	61fb      	str	r3, [r7, #28]

      u += r[i];
 8003dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	68fa      	ldr	r2, [r7, #12]
 8003de0:	4413      	add	r3, r2
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	69ba      	ldr	r2, [r7, #24]
 8003de6:	4413      	add	r3, r2
 8003de8:	61bb      	str	r3, [r7, #24]
      if(u < r[i]) v++;
 8003dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	4413      	add	r3, r2
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	69ba      	ldr	r2, [r7, #24]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d202      	bcs.n	8003e00 <mpiMulAccCore+0xa8>
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	3301      	adds	r3, #1
 8003dfe:	61fb      	str	r3, [r7, #28]

      r[i] = u;
 8003e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	68fa      	ldr	r2, [r7, #12]
 8003e06:	4413      	add	r3, r2
 8003e08:	69ba      	ldr	r2, [r7, #24]
 8003e0a:	601a      	str	r2, [r3, #0]
      c = v;
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	623b      	str	r3, [r7, #32]
   for(i = 0; i < m; i++)
 8003e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e12:	3301      	adds	r3, #1
 8003e14:	627b      	str	r3, [r7, #36]	; 0x24
 8003e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	dbad      	blt.n	8003d7a <mpiMulAccCore+0x22>
   }

   //Propagate carry
   for(; c != 0; i++)
 8003e1e:	e01a      	b.n	8003e56 <mpiMulAccCore+0xfe>
   {
      r[i] += c;
 8003e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	4413      	add	r3, r2
 8003e28:	6819      	ldr	r1, [r3, #0]
 8003e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	68fa      	ldr	r2, [r7, #12]
 8003e30:	4413      	add	r3, r2
 8003e32:	6a3a      	ldr	r2, [r7, #32]
 8003e34:	440a      	add	r2, r1
 8003e36:	601a      	str	r2, [r3, #0]
      c = (r[i] < c);
 8003e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	4413      	add	r3, r2
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	6a3a      	ldr	r2, [r7, #32]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	bf8c      	ite	hi
 8003e48:	2301      	movhi	r3, #1
 8003e4a:	2300      	movls	r3, #0
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	623b      	str	r3, [r7, #32]
   for(; c != 0; i++)
 8003e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e52:	3301      	adds	r3, #1
 8003e54:	627b      	str	r3, [r7, #36]	; 0x24
 8003e56:	6a3b      	ldr	r3, [r7, #32]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d1e1      	bne.n	8003e20 <mpiMulAccCore+0xc8>
   }
}
 8003e5c:	bf00      	nop
 8003e5e:	bf00      	nop
 8003e60:	372c      	adds	r7, #44	; 0x2c
 8003e62:	46bd      	mov	sp, r7
 8003e64:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003e68:	4770      	bx	lr
	...

08003e6c <sha256Init>:
 * @brief Initialize SHA-256 message digest context
 * @param[in] context Pointer to the SHA-256 context to initialize
 **/

__weak_func void sha256Init(Sha256Context *context)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
   //Set initial hash value
   context->h[0] = 0x6A09E667;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a13      	ldr	r2, [pc, #76]	; (8003ec4 <sha256Init+0x58>)
 8003e78:	601a      	str	r2, [r3, #0]
   context->h[1] = 0xBB67AE85;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a12      	ldr	r2, [pc, #72]	; (8003ec8 <sha256Init+0x5c>)
 8003e7e:	605a      	str	r2, [r3, #4]
   context->h[2] = 0x3C6EF372;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a12      	ldr	r2, [pc, #72]	; (8003ecc <sha256Init+0x60>)
 8003e84:	609a      	str	r2, [r3, #8]
   context->h[3] = 0xA54FF53A;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a11      	ldr	r2, [pc, #68]	; (8003ed0 <sha256Init+0x64>)
 8003e8a:	60da      	str	r2, [r3, #12]
   context->h[4] = 0x510E527F;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a11      	ldr	r2, [pc, #68]	; (8003ed4 <sha256Init+0x68>)
 8003e90:	611a      	str	r2, [r3, #16]
   context->h[5] = 0x9B05688C;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a10      	ldr	r2, [pc, #64]	; (8003ed8 <sha256Init+0x6c>)
 8003e96:	615a      	str	r2, [r3, #20]
   context->h[6] = 0x1F83D9AB;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a10      	ldr	r2, [pc, #64]	; (8003edc <sha256Init+0x70>)
 8003e9c:	619a      	str	r2, [r3, #24]
   context->h[7] = 0x5BE0CD19;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a0f      	ldr	r2, [pc, #60]	; (8003ee0 <sha256Init+0x74>)
 8003ea2:	61da      	str	r2, [r3, #28]

   //Number of bytes in the buffer
   context->size = 0;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	661a      	str	r2, [r3, #96]	; 0x60
   //Total length of the message
   context->totalSize = 0;
 8003eaa:	6879      	ldr	r1, [r7, #4]
 8003eac:	f04f 0200 	mov.w	r2, #0
 8003eb0:	f04f 0300 	mov.w	r3, #0
 8003eb4:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
}
 8003eb8:	bf00      	nop
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr
 8003ec4:	6a09e667 	.word	0x6a09e667
 8003ec8:	bb67ae85 	.word	0xbb67ae85
 8003ecc:	3c6ef372 	.word	0x3c6ef372
 8003ed0:	a54ff53a 	.word	0xa54ff53a
 8003ed4:	510e527f 	.word	0x510e527f
 8003ed8:	9b05688c 	.word	0x9b05688c
 8003edc:	1f83d9ab 	.word	0x1f83d9ab
 8003ee0:	5be0cd19 	.word	0x5be0cd19

08003ee4 <sha256Update>:
 * @param[in] data Pointer to the buffer being hashed
 * @param[in] length Length of the buffer
 **/

__weak_func void sha256Update(Sha256Context *context, const void *data, size_t length)
{
 8003ee4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003ee8:	b086      	sub	sp, #24
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	60f8      	str	r0, [r7, #12]
 8003eee:	60b9      	str	r1, [r7, #8]
 8003ef0:	607a      	str	r2, [r7, #4]
   size_t n;

   //Process the incoming data
   while(length > 0)
 8003ef2:	e039      	b.n	8003f68 <sha256Update+0x84>
   {
      //The buffer can hold at most 64 bytes
      n = MIN(length, 64 - context->size);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ef8:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	4293      	cmp	r3, r2
 8003f00:	bf28      	it	cs
 8003f02:	4613      	movcs	r3, r2
 8003f04:	617b      	str	r3, [r7, #20]

      //Copy the data to the buffer
      osMemcpy(context->buffer + context->size, data, n);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f103 0220 	add.w	r2, r3, #32
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f10:	4413      	add	r3, r2
 8003f12:	697a      	ldr	r2, [r7, #20]
 8003f14:	68b9      	ldr	r1, [r7, #8]
 8003f16:	4618      	mov	r0, r3
 8003f18:	f003 f8c2 	bl	80070a0 <memcpy>

      //Update the SHA-256 context
      context->size += n;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	441a      	add	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	661a      	str	r2, [r3, #96]	; 0x60
      context->totalSize += n;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8003f2e:	6979      	ldr	r1, [r7, #20]
 8003f30:	2000      	movs	r0, #0
 8003f32:	460c      	mov	r4, r1
 8003f34:	4605      	mov	r5, r0
 8003f36:	eb12 0804 	adds.w	r8, r2, r4
 8003f3a:	eb43 0905 	adc.w	r9, r3, r5
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	e9c3 891a 	strd	r8, r9, [r3, #104]	; 0x68
      //Advance the data pointer
      data = (uint8_t *) data + n;
 8003f44:	68ba      	ldr	r2, [r7, #8]
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	4413      	add	r3, r2
 8003f4a:	60bb      	str	r3, [r7, #8]
      //Remaining bytes to process
      length -= n;
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	607b      	str	r3, [r7, #4]

      //Process message in 16-word blocks
      if(context->size == 64)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f58:	2b40      	cmp	r3, #64	; 0x40
 8003f5a:	d105      	bne.n	8003f68 <sha256Update+0x84>
      {
         //Transform the 16-word block
         sha256ProcessBlock(context);
 8003f5c:	68f8      	ldr	r0, [r7, #12]
 8003f5e:	f000 f871 	bl	8004044 <sha256ProcessBlock>
         //Empty the buffer
         context->size = 0;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2200      	movs	r2, #0
 8003f66:	661a      	str	r2, [r3, #96]	; 0x60
   while(length > 0)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1c2      	bne.n	8003ef4 <sha256Update+0x10>
      }
   }
}
 8003f6e:	bf00      	nop
 8003f70:	bf00      	nop
 8003f72:	3718      	adds	r7, #24
 8003f74:	46bd      	mov	sp, r7
 8003f76:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08003f7c <sha256Final>:
 * @param[in] context Pointer to the SHA-256 context
 * @param[out] digest Calculated digest (optional parameter)
 **/

__weak_func void sha256Final(Sha256Context *context, uint8_t *digest)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b086      	sub	sp, #24
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
   uint_t i;
   size_t paddingSize;
   uint64_t totalSize;

   //Length of the original message (before padding)
   totalSize = context->totalSize * 8;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8003f8c:	f04f 0200 	mov.w	r2, #0
 8003f90:	f04f 0300 	mov.w	r3, #0
 8003f94:	00cb      	lsls	r3, r1, #3
 8003f96:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003f9a:	00c2      	lsls	r2, r0, #3
 8003f9c:	e9c7 2302 	strd	r2, r3, [r7, #8]

   //Pad the message so that its length is congruent to 56 modulo 64
   if(context->size < 56)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fa4:	2b37      	cmp	r3, #55	; 0x37
 8003fa6:	d805      	bhi.n	8003fb4 <sha256Final+0x38>
   {
      paddingSize = 56 - context->size;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fac:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8003fb0:	613b      	str	r3, [r7, #16]
 8003fb2:	e004      	b.n	8003fbe <sha256Final+0x42>
   }
   else
   {
      paddingSize = 64 + 56 - context->size;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fb8:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 8003fbc:	613b      	str	r3, [r7, #16]
   }

   //Append padding
   sha256Update(context, padding, paddingSize);
 8003fbe:	693a      	ldr	r2, [r7, #16]
 8003fc0:	491f      	ldr	r1, [pc, #124]	; (8004040 <sha256Final+0xc4>)
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f7ff ff8e 	bl	8003ee4 <sha256Update>

   //Append the length of the original message
   context->w[14] = htobe32((uint32_t) (totalSize >> 32));
 8003fc8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003fcc:	f04f 0200 	mov.w	r2, #0
 8003fd0:	f04f 0300 	mov.w	r3, #0
 8003fd4:	000a      	movs	r2, r1
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	4613      	mov	r3, r2
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f000 fd92 	bl	8004b04 <swapInt32>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	659a      	str	r2, [r3, #88]	; 0x58
   context->w[15] = htobe32((uint32_t) totalSize);
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f000 fd8b 	bl	8004b04 <swapInt32>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	65da      	str	r2, [r3, #92]	; 0x5c

   //Calculate the message digest
   sha256ProcessBlock(context);
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f000 f825 	bl	8004044 <sha256ProcessBlock>

   //Convert from host byte order to big-endian byte order
   for(i = 0; i < 8; i++)
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	617b      	str	r3, [r7, #20]
 8003ffe:	e00e      	b.n	800401e <sha256Final+0xa2>
   {
      context->h[i] = htobe32(context->h[i]);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004008:	4618      	mov	r0, r3
 800400a:	f000 fd7b 	bl	8004b04 <swapInt32>
 800400e:	4601      	mov	r1, r0
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   for(i = 0; i < 8; i++)
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	3301      	adds	r3, #1
 800401c:	617b      	str	r3, [r7, #20]
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	2b07      	cmp	r3, #7
 8004022:	d9ed      	bls.n	8004000 <sha256Final+0x84>
   }

   //Copy the resulting digest
   if(digest != NULL)
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d005      	beq.n	8004036 <sha256Final+0xba>
   {
      osMemcpy(digest, context->digest, SHA256_DIGEST_SIZE);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2220      	movs	r2, #32
 800402e:	4619      	mov	r1, r3
 8004030:	6838      	ldr	r0, [r7, #0]
 8004032:	f003 f835 	bl	80070a0 <memcpy>
   }
}
 8004036:	bf00      	nop
 8004038:	3718      	adds	r7, #24
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	080074f4 	.word	0x080074f4

08004044 <sha256ProcessBlock>:
 * @brief Process message in 16-word blocks
 * @param[in] context Pointer to the SHA-256 context
 **/

__weak_func void sha256ProcessBlock(Sha256Context *context)
{
 8004044:	b590      	push	{r4, r7, lr}
 8004046:	b08f      	sub	sp, #60	; 0x3c
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
   uint_t t;
   uint32_t temp1;
   uint32_t temp2;

   //Initialize the 8 working registers
   uint32_t a = context->h[0];
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	633b      	str	r3, [r7, #48]	; 0x30
   uint32_t b = context->h[1];
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	62fb      	str	r3, [r7, #44]	; 0x2c
   uint32_t c = context->h[2];
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	62bb      	str	r3, [r7, #40]	; 0x28
   uint32_t d = context->h[3];
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	627b      	str	r3, [r7, #36]	; 0x24
   uint32_t e = context->h[4];
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	623b      	str	r3, [r7, #32]
   uint32_t f = context->h[5];
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	61fb      	str	r3, [r7, #28]
   uint32_t g = context->h[6];
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	699b      	ldr	r3, [r3, #24]
 8004074:	61bb      	str	r3, [r7, #24]
   uint32_t h = context->h[7];
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	69db      	ldr	r3, [r3, #28]
 800407a:	617b      	str	r3, [r7, #20]

   //Process message in 16-word blocks
   uint32_t *w = context->w;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	3320      	adds	r3, #32
 8004080:	613b      	str	r3, [r7, #16]

   //Convert from big-endian byte order to host byte order
   for(t = 0; t < 16; t++)
 8004082:	2300      	movs	r3, #0
 8004084:	637b      	str	r3, [r7, #52]	; 0x34
 8004086:	e010      	b.n	80040aa <sha256ProcessBlock+0x66>
   {
      w[t] = betoh32(w[t]);
 8004088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	693a      	ldr	r2, [r7, #16]
 800408e:	4413      	add	r3, r2
 8004090:	6819      	ldr	r1, [r3, #0]
 8004092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	693a      	ldr	r2, [r7, #16]
 8004098:	18d4      	adds	r4, r2, r3
 800409a:	4608      	mov	r0, r1
 800409c:	f000 fd32 	bl	8004b04 <swapInt32>
 80040a0:	4603      	mov	r3, r0
 80040a2:	6023      	str	r3, [r4, #0]
   for(t = 0; t < 16; t++)
 80040a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040a6:	3301      	adds	r3, #1
 80040a8:	637b      	str	r3, [r7, #52]	; 0x34
 80040aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040ac:	2b0f      	cmp	r3, #15
 80040ae:	d9eb      	bls.n	8004088 <sha256ProcessBlock+0x44>
   }

   //SHA-256 hash computation (alternate method)
   for(t = 0; t < 64; t++)
 80040b0:	2300      	movs	r3, #0
 80040b2:	637b      	str	r3, [r7, #52]	; 0x34
 80040b4:	e0aa      	b.n	800420c <sha256ProcessBlock+0x1c8>
   {
      //Prepare the message schedule
      if(t >= 16)
 80040b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040b8:	2b0f      	cmp	r3, #15
 80040ba:	d956      	bls.n	800416a <sha256ProcessBlock+0x126>
      {
         W(t) += SIGMA4(W(t + 14)) + W(t + 9) + SIGMA3(W(t + 1));
 80040bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040be:	f003 030f 	and.w	r3, r3, #15
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	693a      	ldr	r2, [r7, #16]
 80040c6:	4413      	add	r3, r2
 80040c8:	6819      	ldr	r1, [r3, #0]
 80040ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040cc:	330e      	adds	r3, #14
 80040ce:	f003 030f 	and.w	r3, r3, #15
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	4413      	add	r3, r2
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	ea4f 4273 	mov.w	r2, r3, ror #17
 80040de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040e0:	330e      	adds	r3, #14
 80040e2:	f003 030f 	and.w	r3, r3, #15
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	6938      	ldr	r0, [r7, #16]
 80040ea:	4403      	add	r3, r0
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80040f2:	405a      	eors	r2, r3
 80040f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040f6:	330e      	adds	r3, #14
 80040f8:	f003 030f 	and.w	r3, r3, #15
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	6938      	ldr	r0, [r7, #16]
 8004100:	4403      	add	r3, r0
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	0a9b      	lsrs	r3, r3, #10
 8004106:	405a      	eors	r2, r3
 8004108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800410a:	3309      	adds	r3, #9
 800410c:	f003 030f 	and.w	r3, r3, #15
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	6938      	ldr	r0, [r7, #16]
 8004114:	4403      	add	r3, r0
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	441a      	add	r2, r3
 800411a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800411c:	3301      	adds	r3, #1
 800411e:	f003 030f 	and.w	r3, r3, #15
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	6938      	ldr	r0, [r7, #16]
 8004126:	4403      	add	r3, r0
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	ea4f 10f3 	mov.w	r0, r3, ror #7
 800412e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004130:	3301      	adds	r3, #1
 8004132:	f003 030f 	and.w	r3, r3, #15
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	693c      	ldr	r4, [r7, #16]
 800413a:	4423      	add	r3, r4
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8004142:	4058      	eors	r0, r3
 8004144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004146:	3301      	adds	r3, #1
 8004148:	f003 030f 	and.w	r3, r3, #15
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	693c      	ldr	r4, [r7, #16]
 8004150:	4423      	add	r3, r4
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	08db      	lsrs	r3, r3, #3
 8004156:	4043      	eors	r3, r0
 8004158:	441a      	add	r2, r3
 800415a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800415c:	f003 030f 	and.w	r3, r3, #15
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	6938      	ldr	r0, [r7, #16]
 8004164:	4403      	add	r3, r0
 8004166:	440a      	add	r2, r1
 8004168:	601a      	str	r2, [r3, #0]
      }

      //Calculate T1 and T2
      temp1 = h + SIGMA2(e) + CH(e, f, g) + k[t] + W(t);
 800416a:	6a3b      	ldr	r3, [r7, #32]
 800416c:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8004170:	6a3b      	ldr	r3, [r7, #32]
 8004172:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8004176:	405a      	eors	r2, r3
 8004178:	6a3b      	ldr	r3, [r7, #32]
 800417a:	ea4f 6373 	mov.w	r3, r3, ror #25
 800417e:	405a      	eors	r2, r3
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	441a      	add	r2, r3
 8004184:	6a39      	ldr	r1, [r7, #32]
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	4019      	ands	r1, r3
 800418a:	6a3b      	ldr	r3, [r7, #32]
 800418c:	43d8      	mvns	r0, r3
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	4003      	ands	r3, r0
 8004192:	430b      	orrs	r3, r1
 8004194:	441a      	add	r2, r3
 8004196:	4939      	ldr	r1, [pc, #228]	; (800427c <sha256ProcessBlock+0x238>)
 8004198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800419a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800419e:	441a      	add	r2, r3
 80041a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041a2:	f003 030f 	and.w	r3, r3, #15
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	6939      	ldr	r1, [r7, #16]
 80041aa:	440b      	add	r3, r1
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4413      	add	r3, r2
 80041b0:	60fb      	str	r3, [r7, #12]
      temp2 = SIGMA1(a) + MAJ(a, b, c);
 80041b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b4:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80041b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ba:	ea4f 3373 	mov.w	r3, r3, ror #13
 80041be:	405a      	eors	r2, r3
 80041c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c2:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80041c6:	405a      	eors	r2, r3
 80041c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041cc:	4319      	orrs	r1, r3
 80041ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d0:	4019      	ands	r1, r3
 80041d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80041d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d6:	4003      	ands	r3, r0
 80041d8:	430b      	orrs	r3, r1
 80041da:	4413      	add	r3, r2
 80041dc:	60bb      	str	r3, [r7, #8]

      //Update the working registers
      h = g;
 80041de:	69bb      	ldr	r3, [r7, #24]
 80041e0:	617b      	str	r3, [r7, #20]
      g = f;
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	61bb      	str	r3, [r7, #24]
      f = e;
 80041e6:	6a3b      	ldr	r3, [r7, #32]
 80041e8:	61fb      	str	r3, [r7, #28]
      e = d + temp1;
 80041ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	4413      	add	r3, r2
 80041f0:	623b      	str	r3, [r7, #32]
      d = c;
 80041f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f4:	627b      	str	r3, [r7, #36]	; 0x24
      c = b;
 80041f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041f8:	62bb      	str	r3, [r7, #40]	; 0x28
      b = a;
 80041fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      a = temp1 + temp2;
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	4413      	add	r3, r2
 8004204:	633b      	str	r3, [r7, #48]	; 0x30
   for(t = 0; t < 64; t++)
 8004206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004208:	3301      	adds	r3, #1
 800420a:	637b      	str	r3, [r7, #52]	; 0x34
 800420c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800420e:	2b3f      	cmp	r3, #63	; 0x3f
 8004210:	f67f af51 	bls.w	80040b6 <sha256ProcessBlock+0x72>
   }

   //Update the hash value
   context->h[0] += a;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800421a:	441a      	add	r2, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	601a      	str	r2, [r3, #0]
   context->h[1] += b;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685a      	ldr	r2, [r3, #4]
 8004224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004226:	441a      	add	r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	605a      	str	r2, [r3, #4]
   context->h[2] += c;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689a      	ldr	r2, [r3, #8]
 8004230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004232:	441a      	add	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	609a      	str	r2, [r3, #8]
   context->h[3] += d;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	68da      	ldr	r2, [r3, #12]
 800423c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423e:	441a      	add	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	60da      	str	r2, [r3, #12]
   context->h[4] += e;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	691a      	ldr	r2, [r3, #16]
 8004248:	6a3b      	ldr	r3, [r7, #32]
 800424a:	441a      	add	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	611a      	str	r2, [r3, #16]
   context->h[5] += f;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	695a      	ldr	r2, [r3, #20]
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	441a      	add	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	615a      	str	r2, [r3, #20]
   context->h[6] += g;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	699a      	ldr	r2, [r3, #24]
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	441a      	add	r2, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	619a      	str	r2, [r3, #24]
   context->h[7] += h;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	69da      	ldr	r2, [r3, #28]
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	441a      	add	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	61da      	str	r2, [r3, #28]
}
 8004274:	bf00      	nop
 8004276:	373c      	adds	r7, #60	; 0x3c
 8004278:	46bd      	mov	sp, r7
 800427a:	bd90      	pop	{r4, r7, pc}
 800427c:	08007534 	.word	0x08007534

08004280 <aesInit>:
 * @return Error code
 **/

__weak_func error_t aesInit(AesContext *context, const uint8_t *key,
   size_t keyLen)
{
 8004280:	b480      	push	{r7}
 8004282:	b089      	sub	sp, #36	; 0x24
 8004284:	af00      	add	r7, sp, #0
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	607a      	str	r2, [r7, #4]
   uint_t i;
   uint32_t temp;
   size_t keyScheduleSize;

   //Check parameters
   if(context == NULL || key == NULL)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d002      	beq.n	8004298 <aesInit+0x18>
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d101      	bne.n	800429c <aesInit+0x1c>
      return ERROR_INVALID_PARAMETER;
 8004298:	2302      	movs	r3, #2
 800429a:	e1a9      	b.n	80045f0 <aesInit+0x370>

   //Check the length of the key
   if(keyLen == 16)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2b10      	cmp	r3, #16
 80042a0:	d103      	bne.n	80042aa <aesInit+0x2a>
   {
      //10 rounds are required for 128-bit key
      context->nr = 10;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	220a      	movs	r2, #10
 80042a6:	601a      	str	r2, [r3, #0]
 80042a8:	e00f      	b.n	80042ca <aesInit+0x4a>
   }
   else if(keyLen == 24)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2b18      	cmp	r3, #24
 80042ae:	d103      	bne.n	80042b8 <aesInit+0x38>
   {
      //12 rounds are required for 192-bit key
      context->nr = 12;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	220c      	movs	r2, #12
 80042b4:	601a      	str	r2, [r3, #0]
 80042b6:	e008      	b.n	80042ca <aesInit+0x4a>
   }
   else if(keyLen == 32)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2b20      	cmp	r3, #32
 80042bc:	d103      	bne.n	80042c6 <aesInit+0x46>
   {
      //14 rounds are required for 256-bit key
      context->nr = 14;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	220e      	movs	r2, #14
 80042c2:	601a      	str	r2, [r3, #0]
 80042c4:	e001      	b.n	80042ca <aesInit+0x4a>
   }
   else
   {
      //Report an error
      return ERROR_INVALID_KEY_LENGTH;
 80042c6:	23e8      	movs	r3, #232	; 0xe8
 80042c8:	e192      	b.n	80045f0 <aesInit+0x370>
   }

   //Determine the number of 32-bit words in the key
   keyLen /= 4;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	089b      	lsrs	r3, r3, #2
 80042ce:	607b      	str	r3, [r7, #4]

   //Copy the original key
   for(i = 0; i < keyLen; i++)
 80042d0:	2300      	movs	r3, #0
 80042d2:	61fb      	str	r3, [r7, #28]
 80042d4:	e026      	b.n	8004324 <aesInit+0xa4>
   {
      context->ek[i] = LOAD32LE(key + (i * 4));
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	68ba      	ldr	r2, [r7, #8]
 80042dc:	4413      	add	r3, r2
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	4619      	mov	r1, r3
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	68ba      	ldr	r2, [r7, #8]
 80042e8:	4413      	add	r3, r2
 80042ea:	3301      	adds	r3, #1
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	021b      	lsls	r3, r3, #8
 80042f0:	ea41 0203 	orr.w	r2, r1, r3
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	68b9      	ldr	r1, [r7, #8]
 80042fa:	440b      	add	r3, r1
 80042fc:	3302      	adds	r3, #2
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	041b      	lsls	r3, r3, #16
 8004302:	431a      	orrs	r2, r3
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	68b9      	ldr	r1, [r7, #8]
 800430a:	440b      	add	r3, r1
 800430c:	3303      	adds	r3, #3
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	061b      	lsls	r3, r3, #24
 8004312:	431a      	orrs	r2, r3
 8004314:	68f9      	ldr	r1, [r7, #12]
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	440b      	add	r3, r1
 800431c:	605a      	str	r2, [r3, #4]
   for(i = 0; i < keyLen; i++)
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	3301      	adds	r3, #1
 8004322:	61fb      	str	r3, [r7, #28]
 8004324:	69fa      	ldr	r2, [r7, #28]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	429a      	cmp	r2, r3
 800432a:	d3d4      	bcc.n	80042d6 <aesInit+0x56>
   }

   //The size of the key schedule depends on the number of rounds
   keyScheduleSize = 4 * (context->nr + 1);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	3301      	adds	r3, #1
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	61bb      	str	r3, [r7, #24]

   //Generate the key schedule (encryption)
   for(i = keyLen; i < keyScheduleSize; i++)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	61fb      	str	r3, [r7, #28]
 800433a:	e0c4      	b.n	80044c6 <aesInit+0x246>
   {
      //Save previous word
      temp = context->ek[i - 1];
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	3b01      	subs	r3, #1
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	4413      	add	r3, r2
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	617b      	str	r3, [r7, #20]

      //Apply transformation
      if((i % keyLen) == 0)
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004352:	6879      	ldr	r1, [r7, #4]
 8004354:	fb01 f202 	mul.w	r2, r1, r2
 8004358:	1a9b      	subs	r3, r3, r2
 800435a:	2b00      	cmp	r3, #0
 800435c:	d14e      	bne.n	80043fc <aesInit+0x17c>
      {
         context->ek[i] = sbox[(temp >> 8) & 0xFF];
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	0a1b      	lsrs	r3, r3, #8
 8004362:	b2db      	uxtb	r3, r3
 8004364:	4a66      	ldr	r2, [pc, #408]	; (8004500 <aesInit+0x280>)
 8004366:	5cd3      	ldrb	r3, [r2, r3]
 8004368:	4619      	mov	r1, r3
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	4413      	add	r3, r2
 8004372:	6059      	str	r1, [r3, #4]
         context->ek[i] |= (sbox[(temp >> 16) & 0xFF] << 8);
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	4413      	add	r3, r2
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	697a      	ldr	r2, [r7, #20]
 8004380:	0c12      	lsrs	r2, r2, #16
 8004382:	b2d2      	uxtb	r2, r2
 8004384:	495e      	ldr	r1, [pc, #376]	; (8004500 <aesInit+0x280>)
 8004386:	5c8a      	ldrb	r2, [r1, r2]
 8004388:	0212      	lsls	r2, r2, #8
 800438a:	431a      	orrs	r2, r3
 800438c:	68f9      	ldr	r1, [r7, #12]
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	440b      	add	r3, r1
 8004394:	605a      	str	r2, [r3, #4]
         context->ek[i] |= (sbox[(temp >> 24) & 0xFF] << 16);
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	4413      	add	r3, r2
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	697a      	ldr	r2, [r7, #20]
 80043a2:	0e12      	lsrs	r2, r2, #24
 80043a4:	4956      	ldr	r1, [pc, #344]	; (8004500 <aesInit+0x280>)
 80043a6:	5c8a      	ldrb	r2, [r1, r2]
 80043a8:	0412      	lsls	r2, r2, #16
 80043aa:	431a      	orrs	r2, r3
 80043ac:	68f9      	ldr	r1, [r7, #12]
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	440b      	add	r3, r1
 80043b4:	605a      	str	r2, [r3, #4]
         context->ek[i] |= (sbox[temp & 0xFF] << 24);
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	4413      	add	r3, r2
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	697a      	ldr	r2, [r7, #20]
 80043c2:	b2d2      	uxtb	r2, r2
 80043c4:	494e      	ldr	r1, [pc, #312]	; (8004500 <aesInit+0x280>)
 80043c6:	5c8a      	ldrb	r2, [r1, r2]
 80043c8:	0612      	lsls	r2, r2, #24
 80043ca:	431a      	orrs	r2, r3
 80043cc:	68f9      	ldr	r1, [r7, #12]
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	440b      	add	r3, r1
 80043d4:	605a      	str	r2, [r3, #4]
         context->ek[i] ^= rcon[i / keyLen];
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	4413      	add	r3, r2
 80043de:	685a      	ldr	r2, [r3, #4]
 80043e0:	69f9      	ldr	r1, [r7, #28]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80043e8:	4946      	ldr	r1, [pc, #280]	; (8004504 <aesInit+0x284>)
 80043ea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80043ee:	405a      	eors	r2, r3
 80043f0:	68f9      	ldr	r1, [r7, #12]
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	440b      	add	r3, r1
 80043f8:	605a      	str	r2, [r3, #4]
 80043fa:	e04f      	b.n	800449c <aesInit+0x21c>
      }
      else if(keyLen > 6 && (i % keyLen) == 4)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2b06      	cmp	r3, #6
 8004400:	d946      	bls.n	8004490 <aesInit+0x210>
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	fbb3 f2f2 	udiv	r2, r3, r2
 800440a:	6879      	ldr	r1, [r7, #4]
 800440c:	fb01 f202 	mul.w	r2, r1, r2
 8004410:	1a9b      	subs	r3, r3, r2
 8004412:	2b04      	cmp	r3, #4
 8004414:	d13c      	bne.n	8004490 <aesInit+0x210>
      {
         context->ek[i] = sbox[temp & 0xFF];
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	b2db      	uxtb	r3, r3
 800441a:	4a39      	ldr	r2, [pc, #228]	; (8004500 <aesInit+0x280>)
 800441c:	5cd3      	ldrb	r3, [r2, r3]
 800441e:	4619      	mov	r1, r3
 8004420:	68fa      	ldr	r2, [r7, #12]
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	4413      	add	r3, r2
 8004428:	6059      	str	r1, [r3, #4]
         context->ek[i] |= (sbox[(temp >> 8) & 0xFF] << 8);
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	4413      	add	r3, r2
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	697a      	ldr	r2, [r7, #20]
 8004436:	0a12      	lsrs	r2, r2, #8
 8004438:	b2d2      	uxtb	r2, r2
 800443a:	4931      	ldr	r1, [pc, #196]	; (8004500 <aesInit+0x280>)
 800443c:	5c8a      	ldrb	r2, [r1, r2]
 800443e:	0212      	lsls	r2, r2, #8
 8004440:	431a      	orrs	r2, r3
 8004442:	68f9      	ldr	r1, [r7, #12]
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	440b      	add	r3, r1
 800444a:	605a      	str	r2, [r3, #4]
         context->ek[i] |= (sbox[(temp >> 16) & 0xFF] << 16);
 800444c:	68fa      	ldr	r2, [r7, #12]
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	4413      	add	r3, r2
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	697a      	ldr	r2, [r7, #20]
 8004458:	0c12      	lsrs	r2, r2, #16
 800445a:	b2d2      	uxtb	r2, r2
 800445c:	4928      	ldr	r1, [pc, #160]	; (8004500 <aesInit+0x280>)
 800445e:	5c8a      	ldrb	r2, [r1, r2]
 8004460:	0412      	lsls	r2, r2, #16
 8004462:	431a      	orrs	r2, r3
 8004464:	68f9      	ldr	r1, [r7, #12]
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	440b      	add	r3, r1
 800446c:	605a      	str	r2, [r3, #4]
         context->ek[i] |= (sbox[(temp >> 24) & 0xFF] << 24);
 800446e:	68fa      	ldr	r2, [r7, #12]
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	4413      	add	r3, r2
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	697a      	ldr	r2, [r7, #20]
 800447a:	0e12      	lsrs	r2, r2, #24
 800447c:	4920      	ldr	r1, [pc, #128]	; (8004500 <aesInit+0x280>)
 800447e:	5c8a      	ldrb	r2, [r1, r2]
 8004480:	0612      	lsls	r2, r2, #24
 8004482:	431a      	orrs	r2, r3
 8004484:	68f9      	ldr	r1, [r7, #12]
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	440b      	add	r3, r1
 800448c:	605a      	str	r2, [r3, #4]
 800448e:	e005      	b.n	800449c <aesInit+0x21c>
      }
      else
      {
         context->ek[i] = temp;
 8004490:	68fa      	ldr	r2, [r7, #12]
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	4413      	add	r3, r2
 8004498:	697a      	ldr	r2, [r7, #20]
 800449a:	605a      	str	r2, [r3, #4]
      }

      //Update the key schedule
      context->ek[i] ^= context->ek[i - keyLen];
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	4413      	add	r3, r2
 80044a4:	685a      	ldr	r2, [r3, #4]
 80044a6:	69f9      	ldr	r1, [r7, #28]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	1acb      	subs	r3, r1, r3
 80044ac:	68f9      	ldr	r1, [r7, #12]
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	440b      	add	r3, r1
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	405a      	eors	r2, r3
 80044b6:	68f9      	ldr	r1, [r7, #12]
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	440b      	add	r3, r1
 80044be:	605a      	str	r2, [r3, #4]
   for(i = keyLen; i < keyScheduleSize; i++)
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	3301      	adds	r3, #1
 80044c4:	61fb      	str	r3, [r7, #28]
 80044c6:	69fa      	ldr	r2, [r7, #28]
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	f4ff af36 	bcc.w	800433c <aesInit+0xbc>
   }

   //Generate the key schedule (decryption)
   for(i = 0; i < keyScheduleSize; i++)
 80044d0:	2300      	movs	r3, #0
 80044d2:	61fb      	str	r3, [r7, #28]
 80044d4:	e086      	b.n	80045e4 <aesInit+0x364>
   {
      //Apply the InvMixColumns transformation to all round keys but the first
      //and the last
      if(i < 4 || i >= (keyScheduleSize - 4))
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	2b03      	cmp	r3, #3
 80044da:	d904      	bls.n	80044e6 <aesInit+0x266>
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	3b04      	subs	r3, #4
 80044e0:	69fa      	ldr	r2, [r7, #28]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d310      	bcc.n	8004508 <aesInit+0x288>
      {
         context->dk[i] = context->ek[i];
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	4413      	add	r3, r2
 80044ee:	685a      	ldr	r2, [r3, #4]
 80044f0:	68f9      	ldr	r1, [r7, #12]
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	333c      	adds	r3, #60	; 0x3c
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	440b      	add	r3, r1
 80044fa:	605a      	str	r2, [r3, #4]
 80044fc:	e06f      	b.n	80045de <aesInit+0x35e>
 80044fe:	bf00      	nop
 8004500:	08007634 	.word	0x08007634
 8004504:	08007f34 	.word	0x08007f34
      }
      else
      {
         context->dk[i] = td[sbox[context->ek[i] & 0xFF]];
 8004508:	68fa      	ldr	r2, [r7, #12]
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	4413      	add	r3, r2
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	b2db      	uxtb	r3, r3
 8004514:	4a39      	ldr	r2, [pc, #228]	; (80045fc <aesInit+0x37c>)
 8004516:	5cd3      	ldrb	r3, [r2, r3]
 8004518:	461a      	mov	r2, r3
 800451a:	4b39      	ldr	r3, [pc, #228]	; (8004600 <aesInit+0x380>)
 800451c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004520:	68f9      	ldr	r1, [r7, #12]
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	333c      	adds	r3, #60	; 0x3c
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	440b      	add	r3, r1
 800452a:	605a      	str	r2, [r3, #4]
         temp = td[sbox[(context->ek[i] >> 8) & 0xFF]];
 800452c:	68fa      	ldr	r2, [r7, #12]
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	4413      	add	r3, r2
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	0a1b      	lsrs	r3, r3, #8
 8004538:	b2db      	uxtb	r3, r3
 800453a:	4a30      	ldr	r2, [pc, #192]	; (80045fc <aesInit+0x37c>)
 800453c:	5cd3      	ldrb	r3, [r2, r3]
 800453e:	461a      	mov	r2, r3
 8004540:	4b2f      	ldr	r3, [pc, #188]	; (8004600 <aesInit+0x380>)
 8004542:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004546:	617b      	str	r3, [r7, #20]
         context->dk[i] ^= ROL32(temp, 8);
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	333c      	adds	r3, #60	; 0x3c
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	4413      	add	r3, r2
 8004552:	685a      	ldr	r2, [r3, #4]
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	ea4f 6333 	mov.w	r3, r3, ror #24
 800455a:	405a      	eors	r2, r3
 800455c:	68f9      	ldr	r1, [r7, #12]
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	333c      	adds	r3, #60	; 0x3c
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	440b      	add	r3, r1
 8004566:	605a      	str	r2, [r3, #4]
         temp = td[sbox[(context->ek[i] >> 16) & 0xFF]];
 8004568:	68fa      	ldr	r2, [r7, #12]
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	4413      	add	r3, r2
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	0c1b      	lsrs	r3, r3, #16
 8004574:	b2db      	uxtb	r3, r3
 8004576:	4a21      	ldr	r2, [pc, #132]	; (80045fc <aesInit+0x37c>)
 8004578:	5cd3      	ldrb	r3, [r2, r3]
 800457a:	461a      	mov	r2, r3
 800457c:	4b20      	ldr	r3, [pc, #128]	; (8004600 <aesInit+0x380>)
 800457e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004582:	617b      	str	r3, [r7, #20]
         context->dk[i] ^= ROL32(temp, 16);
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	333c      	adds	r3, #60	; 0x3c
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	4413      	add	r3, r2
 800458e:	685a      	ldr	r2, [r3, #4]
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	ea4f 4333 	mov.w	r3, r3, ror #16
 8004596:	405a      	eors	r2, r3
 8004598:	68f9      	ldr	r1, [r7, #12]
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	333c      	adds	r3, #60	; 0x3c
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	440b      	add	r3, r1
 80045a2:	605a      	str	r2, [r3, #4]
         temp = td[sbox[(context->ek[i] >> 24) & 0xFF]];
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	4413      	add	r3, r2
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	0e1b      	lsrs	r3, r3, #24
 80045b0:	4a12      	ldr	r2, [pc, #72]	; (80045fc <aesInit+0x37c>)
 80045b2:	5cd3      	ldrb	r3, [r2, r3]
 80045b4:	461a      	mov	r2, r3
 80045b6:	4b12      	ldr	r3, [pc, #72]	; (8004600 <aesInit+0x380>)
 80045b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045bc:	617b      	str	r3, [r7, #20]
         context->dk[i] ^= ROL32(temp, 24);
 80045be:	68fa      	ldr	r2, [r7, #12]
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	333c      	adds	r3, #60	; 0x3c
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	4413      	add	r3, r2
 80045c8:	685a      	ldr	r2, [r3, #4]
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	ea4f 2333 	mov.w	r3, r3, ror #8
 80045d0:	405a      	eors	r2, r3
 80045d2:	68f9      	ldr	r1, [r7, #12]
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	333c      	adds	r3, #60	; 0x3c
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	440b      	add	r3, r1
 80045dc:	605a      	str	r2, [r3, #4]
   for(i = 0; i < keyScheduleSize; i++)
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	3301      	adds	r3, #1
 80045e2:	61fb      	str	r3, [r7, #28]
 80045e4:	69fa      	ldr	r2, [r7, #28]
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	f4ff af74 	bcc.w	80044d6 <aesInit+0x256>
      }
   }

   //No error to report
   return NO_ERROR;
 80045ee:	2300      	movs	r3, #0
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3724      	adds	r7, #36	; 0x24
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr
 80045fc:	08007634 	.word	0x08007634
 8004600:	08007b34 	.word	0x08007b34

08004604 <aesEncryptBlock>:
 * @param[out] output Ciphertext block resulting from encryption
 **/

__weak_func void aesEncryptBlock(AesContext *context, const uint8_t *input,
   uint8_t *output)
{
 8004604:	b480      	push	{r7}
 8004606:	b08f      	sub	sp, #60	; 0x3c
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	607a      	str	r2, [r7, #4]
   uint32_t t2;
   uint32_t t3;
   uint32_t temp;

   //Copy the plaintext to the state array
   s0 = LOAD32LE(input + 0);
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	461a      	mov	r2, r3
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	3301      	adds	r3, #1
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	021b      	lsls	r3, r3, #8
 800461e:	431a      	orrs	r2, r3
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	3302      	adds	r3, #2
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	041b      	lsls	r3, r3, #16
 8004628:	431a      	orrs	r2, r3
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	3303      	adds	r3, #3
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	061b      	lsls	r3, r3, #24
 8004632:	4313      	orrs	r3, r2
 8004634:	633b      	str	r3, [r7, #48]	; 0x30
   s1 = LOAD32LE(input + 4);
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	3304      	adds	r3, #4
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	461a      	mov	r2, r3
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	3304      	adds	r3, #4
 8004642:	3301      	adds	r3, #1
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	021b      	lsls	r3, r3, #8
 8004648:	431a      	orrs	r2, r3
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	3304      	adds	r3, #4
 800464e:	3302      	adds	r3, #2
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	041b      	lsls	r3, r3, #16
 8004654:	431a      	orrs	r2, r3
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	3304      	adds	r3, #4
 800465a:	3303      	adds	r3, #3
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	061b      	lsls	r3, r3, #24
 8004660:	4313      	orrs	r3, r2
 8004662:	62fb      	str	r3, [r7, #44]	; 0x2c
   s2 = LOAD32LE(input + 8);
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	3308      	adds	r3, #8
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	461a      	mov	r2, r3
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	3308      	adds	r3, #8
 8004670:	3301      	adds	r3, #1
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	021b      	lsls	r3, r3, #8
 8004676:	431a      	orrs	r2, r3
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	3308      	adds	r3, #8
 800467c:	3302      	adds	r3, #2
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	041b      	lsls	r3, r3, #16
 8004682:	431a      	orrs	r2, r3
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	3308      	adds	r3, #8
 8004688:	3303      	adds	r3, #3
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	061b      	lsls	r3, r3, #24
 800468e:	4313      	orrs	r3, r2
 8004690:	62bb      	str	r3, [r7, #40]	; 0x28
   s3 = LOAD32LE(input + 12);
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	330c      	adds	r3, #12
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	461a      	mov	r2, r3
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	330c      	adds	r3, #12
 800469e:	3301      	adds	r3, #1
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	021b      	lsls	r3, r3, #8
 80046a4:	431a      	orrs	r2, r3
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	330c      	adds	r3, #12
 80046aa:	3302      	adds	r3, #2
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	041b      	lsls	r3, r3, #16
 80046b0:	431a      	orrs	r2, r3
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	330c      	adds	r3, #12
 80046b6:	3303      	adds	r3, #3
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	061b      	lsls	r3, r3, #24
 80046bc:	4313      	orrs	r3, r2
 80046be:	627b      	str	r3, [r7, #36]	; 0x24

   //Initial round key addition
   s0 ^= context->ek[0];
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046c6:	4053      	eors	r3, r2
 80046c8:	633b      	str	r3, [r7, #48]	; 0x30
   s1 ^= context->ek[1];
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046d0:	4053      	eors	r3, r2
 80046d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   s2 ^= context->ek[2];
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046da:	4053      	eors	r3, r2
 80046dc:	62bb      	str	r3, [r7, #40]	; 0x28
   s3 ^= context->ek[3];
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046e4:	4053      	eors	r3, r2
 80046e6:	627b      	str	r3, [r7, #36]	; 0x24

   //The number of rounds depends on the key length
   for(i = 1; i < context->nr; i++)
 80046e8:	2301      	movs	r3, #1
 80046ea:	637b      	str	r3, [r7, #52]	; 0x34
 80046ec:	e0d9      	b.n	80048a2 <aesEncryptBlock+0x29e>
   {
      //Apply round function
      t0 = te[s0 & 0xFF];
 80046ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	4aa2      	ldr	r2, [pc, #648]	; (800497c <aesEncryptBlock+0x378>)
 80046f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046f8:	623b      	str	r3, [r7, #32]
      temp = te[(s1 >> 8) & 0xFF];
 80046fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046fc:	0a1b      	lsrs	r3, r3, #8
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	4a9e      	ldr	r2, [pc, #632]	; (800497c <aesEncryptBlock+0x378>)
 8004702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004706:	613b      	str	r3, [r7, #16]
      t0 ^= ROL32(temp, 8);
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	ea4f 6333 	mov.w	r3, r3, ror #24
 800470e:	6a3a      	ldr	r2, [r7, #32]
 8004710:	4053      	eors	r3, r2
 8004712:	623b      	str	r3, [r7, #32]
      temp = te[(s2 >> 16) & 0xFF];
 8004714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004716:	0c1b      	lsrs	r3, r3, #16
 8004718:	b2db      	uxtb	r3, r3
 800471a:	4a98      	ldr	r2, [pc, #608]	; (800497c <aesEncryptBlock+0x378>)
 800471c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004720:	613b      	str	r3, [r7, #16]
      t0 ^= ROL32(temp, 16);
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	ea4f 4333 	mov.w	r3, r3, ror #16
 8004728:	6a3a      	ldr	r2, [r7, #32]
 800472a:	4053      	eors	r3, r2
 800472c:	623b      	str	r3, [r7, #32]
      temp = te[(s3 >> 24) & 0xFF];
 800472e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004730:	0e1b      	lsrs	r3, r3, #24
 8004732:	4a92      	ldr	r2, [pc, #584]	; (800497c <aesEncryptBlock+0x378>)
 8004734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004738:	613b      	str	r3, [r7, #16]
      t0 ^= ROL32(temp, 24);
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	ea4f 2333 	mov.w	r3, r3, ror #8
 8004740:	6a3a      	ldr	r2, [r7, #32]
 8004742:	4053      	eors	r3, r2
 8004744:	623b      	str	r3, [r7, #32]

      t1 = te[s1 & 0xFF];
 8004746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004748:	b2db      	uxtb	r3, r3
 800474a:	4a8c      	ldr	r2, [pc, #560]	; (800497c <aesEncryptBlock+0x378>)
 800474c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004750:	61fb      	str	r3, [r7, #28]
      temp = te[(s2 >> 8) & 0xFF];
 8004752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004754:	0a1b      	lsrs	r3, r3, #8
 8004756:	b2db      	uxtb	r3, r3
 8004758:	4a88      	ldr	r2, [pc, #544]	; (800497c <aesEncryptBlock+0x378>)
 800475a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800475e:	613b      	str	r3, [r7, #16]
      t1 ^= ROL32(temp, 8);
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	ea4f 6333 	mov.w	r3, r3, ror #24
 8004766:	69fa      	ldr	r2, [r7, #28]
 8004768:	4053      	eors	r3, r2
 800476a:	61fb      	str	r3, [r7, #28]
      temp = te[(s3 >> 16) & 0xFF];
 800476c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476e:	0c1b      	lsrs	r3, r3, #16
 8004770:	b2db      	uxtb	r3, r3
 8004772:	4a82      	ldr	r2, [pc, #520]	; (800497c <aesEncryptBlock+0x378>)
 8004774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004778:	613b      	str	r3, [r7, #16]
      t1 ^= ROL32(temp, 16);
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	ea4f 4333 	mov.w	r3, r3, ror #16
 8004780:	69fa      	ldr	r2, [r7, #28]
 8004782:	4053      	eors	r3, r2
 8004784:	61fb      	str	r3, [r7, #28]
      temp = te[(s0 >> 24) & 0xFF];
 8004786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004788:	0e1b      	lsrs	r3, r3, #24
 800478a:	4a7c      	ldr	r2, [pc, #496]	; (800497c <aesEncryptBlock+0x378>)
 800478c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004790:	613b      	str	r3, [r7, #16]
      t1 ^= ROL32(temp, 24);
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	ea4f 2333 	mov.w	r3, r3, ror #8
 8004798:	69fa      	ldr	r2, [r7, #28]
 800479a:	4053      	eors	r3, r2
 800479c:	61fb      	str	r3, [r7, #28]

      t2 = te[s2 & 0xFF];
 800479e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	4a76      	ldr	r2, [pc, #472]	; (800497c <aesEncryptBlock+0x378>)
 80047a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047a8:	61bb      	str	r3, [r7, #24]
      temp = te[(s3 >> 8) & 0xFF];
 80047aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ac:	0a1b      	lsrs	r3, r3, #8
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	4a72      	ldr	r2, [pc, #456]	; (800497c <aesEncryptBlock+0x378>)
 80047b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047b6:	613b      	str	r3, [r7, #16]
      t2 ^= ROL32(temp, 8);
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	ea4f 6333 	mov.w	r3, r3, ror #24
 80047be:	69ba      	ldr	r2, [r7, #24]
 80047c0:	4053      	eors	r3, r2
 80047c2:	61bb      	str	r3, [r7, #24]
      temp = te[(s0 >> 16) & 0xFF];
 80047c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c6:	0c1b      	lsrs	r3, r3, #16
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	4a6c      	ldr	r2, [pc, #432]	; (800497c <aesEncryptBlock+0x378>)
 80047cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047d0:	613b      	str	r3, [r7, #16]
      t2 ^= ROL32(temp, 16);
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	ea4f 4333 	mov.w	r3, r3, ror #16
 80047d8:	69ba      	ldr	r2, [r7, #24]
 80047da:	4053      	eors	r3, r2
 80047dc:	61bb      	str	r3, [r7, #24]
      temp = te[(s1 >> 24) & 0xFF];
 80047de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047e0:	0e1b      	lsrs	r3, r3, #24
 80047e2:	4a66      	ldr	r2, [pc, #408]	; (800497c <aesEncryptBlock+0x378>)
 80047e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047e8:	613b      	str	r3, [r7, #16]
      t2 ^= ROL32(temp, 24);
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	ea4f 2333 	mov.w	r3, r3, ror #8
 80047f0:	69ba      	ldr	r2, [r7, #24]
 80047f2:	4053      	eors	r3, r2
 80047f4:	61bb      	str	r3, [r7, #24]

      t3 = te[s3 & 0xFF];
 80047f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	4a60      	ldr	r2, [pc, #384]	; (800497c <aesEncryptBlock+0x378>)
 80047fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004800:	617b      	str	r3, [r7, #20]
      temp = te[(s0 >> 8) & 0xFF];
 8004802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004804:	0a1b      	lsrs	r3, r3, #8
 8004806:	b2db      	uxtb	r3, r3
 8004808:	4a5c      	ldr	r2, [pc, #368]	; (800497c <aesEncryptBlock+0x378>)
 800480a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800480e:	613b      	str	r3, [r7, #16]
      t3 ^= ROL32(temp, 8);
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	ea4f 6333 	mov.w	r3, r3, ror #24
 8004816:	697a      	ldr	r2, [r7, #20]
 8004818:	4053      	eors	r3, r2
 800481a:	617b      	str	r3, [r7, #20]
      temp = te[(s1 >> 16) & 0xFF];
 800481c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800481e:	0c1b      	lsrs	r3, r3, #16
 8004820:	b2db      	uxtb	r3, r3
 8004822:	4a56      	ldr	r2, [pc, #344]	; (800497c <aesEncryptBlock+0x378>)
 8004824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004828:	613b      	str	r3, [r7, #16]
      t3 ^= ROL32(temp, 16);
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	ea4f 4333 	mov.w	r3, r3, ror #16
 8004830:	697a      	ldr	r2, [r7, #20]
 8004832:	4053      	eors	r3, r2
 8004834:	617b      	str	r3, [r7, #20]
      temp = te[(s2 >> 24) & 0xFF];
 8004836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004838:	0e1b      	lsrs	r3, r3, #24
 800483a:	4a50      	ldr	r2, [pc, #320]	; (800497c <aesEncryptBlock+0x378>)
 800483c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004840:	613b      	str	r3, [r7, #16]
      t3 ^= ROL32(temp, 24);
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	ea4f 2333 	mov.w	r3, r3, ror #8
 8004848:	697a      	ldr	r2, [r7, #20]
 800484a:	4053      	eors	r3, r2
 800484c:	617b      	str	r3, [r7, #20]

      //Round key addition
      s0 = t0 ^ context->ek[i * 4];
 800484e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	68fa      	ldr	r2, [r7, #12]
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	4413      	add	r3, r2
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	6a3a      	ldr	r2, [r7, #32]
 800485c:	4053      	eors	r3, r2
 800485e:	633b      	str	r3, [r7, #48]	; 0x30
      s1 = t1 ^ context->ek[i * 4 + 1];
 8004860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	3301      	adds	r3, #1
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	4413      	add	r3, r2
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	69fa      	ldr	r2, [r7, #28]
 8004870:	4053      	eors	r3, r2
 8004872:	62fb      	str	r3, [r7, #44]	; 0x2c
      s2 = t2 ^ context->ek[i * 4 + 2];
 8004874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	3302      	adds	r3, #2
 800487a:	68fa      	ldr	r2, [r7, #12]
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	4413      	add	r3, r2
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	69ba      	ldr	r2, [r7, #24]
 8004884:	4053      	eors	r3, r2
 8004886:	62bb      	str	r3, [r7, #40]	; 0x28
      s3 = t3 ^ context->ek[i * 4 + 3];
 8004888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	3303      	adds	r3, #3
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	4413      	add	r3, r2
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	697a      	ldr	r2, [r7, #20]
 8004898:	4053      	eors	r3, r2
 800489a:	627b      	str	r3, [r7, #36]	; 0x24
   for(i = 1; i < context->nr; i++)
 800489c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800489e:	3301      	adds	r3, #1
 80048a0:	637b      	str	r3, [r7, #52]	; 0x34
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048a8:	429a      	cmp	r2, r3
 80048aa:	f4ff af20 	bcc.w	80046ee <aesEncryptBlock+0xea>
   }

   //The last round differs slightly from the first rounds
   t0 = sbox[s0 & 0xFF];
 80048ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	4a33      	ldr	r2, [pc, #204]	; (8004980 <aesEncryptBlock+0x37c>)
 80048b4:	5cd3      	ldrb	r3, [r2, r3]
 80048b6:	623b      	str	r3, [r7, #32]
   t0 |= sbox[(s1 >> 8) & 0xFF] << 8;
 80048b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ba:	0a1b      	lsrs	r3, r3, #8
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	4a30      	ldr	r2, [pc, #192]	; (8004980 <aesEncryptBlock+0x37c>)
 80048c0:	5cd3      	ldrb	r3, [r2, r3]
 80048c2:	021b      	lsls	r3, r3, #8
 80048c4:	461a      	mov	r2, r3
 80048c6:	6a3b      	ldr	r3, [r7, #32]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	623b      	str	r3, [r7, #32]
   t0 |= sbox[(s2 >> 16) & 0xFF] << 16;
 80048cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ce:	0c1b      	lsrs	r3, r3, #16
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	4a2b      	ldr	r2, [pc, #172]	; (8004980 <aesEncryptBlock+0x37c>)
 80048d4:	5cd3      	ldrb	r3, [r2, r3]
 80048d6:	041b      	lsls	r3, r3, #16
 80048d8:	461a      	mov	r2, r3
 80048da:	6a3b      	ldr	r3, [r7, #32]
 80048dc:	4313      	orrs	r3, r2
 80048de:	623b      	str	r3, [r7, #32]
   t0 |= sbox[(s3 >> 24) & 0xFF] << 24;
 80048e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e2:	0e1b      	lsrs	r3, r3, #24
 80048e4:	4a26      	ldr	r2, [pc, #152]	; (8004980 <aesEncryptBlock+0x37c>)
 80048e6:	5cd3      	ldrb	r3, [r2, r3]
 80048e8:	061b      	lsls	r3, r3, #24
 80048ea:	461a      	mov	r2, r3
 80048ec:	6a3b      	ldr	r3, [r7, #32]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	623b      	str	r3, [r7, #32]

   t1 = sbox[s1 & 0xFF];
 80048f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	4a22      	ldr	r2, [pc, #136]	; (8004980 <aesEncryptBlock+0x37c>)
 80048f8:	5cd3      	ldrb	r3, [r2, r3]
 80048fa:	61fb      	str	r3, [r7, #28]
   t1 |= sbox[(s2 >> 8) & 0xFF] << 8;
 80048fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048fe:	0a1b      	lsrs	r3, r3, #8
 8004900:	b2db      	uxtb	r3, r3
 8004902:	4a1f      	ldr	r2, [pc, #124]	; (8004980 <aesEncryptBlock+0x37c>)
 8004904:	5cd3      	ldrb	r3, [r2, r3]
 8004906:	021b      	lsls	r3, r3, #8
 8004908:	461a      	mov	r2, r3
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	4313      	orrs	r3, r2
 800490e:	61fb      	str	r3, [r7, #28]
   t1 |= sbox[(s3 >> 16) & 0xFF] << 16;
 8004910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004912:	0c1b      	lsrs	r3, r3, #16
 8004914:	b2db      	uxtb	r3, r3
 8004916:	4a1a      	ldr	r2, [pc, #104]	; (8004980 <aesEncryptBlock+0x37c>)
 8004918:	5cd3      	ldrb	r3, [r2, r3]
 800491a:	041b      	lsls	r3, r3, #16
 800491c:	461a      	mov	r2, r3
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	4313      	orrs	r3, r2
 8004922:	61fb      	str	r3, [r7, #28]
   t1 |= sbox[(s0 >> 24) & 0xFF] << 24;
 8004924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004926:	0e1b      	lsrs	r3, r3, #24
 8004928:	4a15      	ldr	r2, [pc, #84]	; (8004980 <aesEncryptBlock+0x37c>)
 800492a:	5cd3      	ldrb	r3, [r2, r3]
 800492c:	061b      	lsls	r3, r3, #24
 800492e:	461a      	mov	r2, r3
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	4313      	orrs	r3, r2
 8004934:	61fb      	str	r3, [r7, #28]

   t2 = sbox[s2 & 0xFF];
 8004936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004938:	b2db      	uxtb	r3, r3
 800493a:	4a11      	ldr	r2, [pc, #68]	; (8004980 <aesEncryptBlock+0x37c>)
 800493c:	5cd3      	ldrb	r3, [r2, r3]
 800493e:	61bb      	str	r3, [r7, #24]
   t2 |= sbox[(s3 >> 8) & 0xFF] << 8;
 8004940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004942:	0a1b      	lsrs	r3, r3, #8
 8004944:	b2db      	uxtb	r3, r3
 8004946:	4a0e      	ldr	r2, [pc, #56]	; (8004980 <aesEncryptBlock+0x37c>)
 8004948:	5cd3      	ldrb	r3, [r2, r3]
 800494a:	021b      	lsls	r3, r3, #8
 800494c:	461a      	mov	r2, r3
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	4313      	orrs	r3, r2
 8004952:	61bb      	str	r3, [r7, #24]
   t2 |= sbox[(s0 >> 16) & 0xFF] << 16;
 8004954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004956:	0c1b      	lsrs	r3, r3, #16
 8004958:	b2db      	uxtb	r3, r3
 800495a:	4a09      	ldr	r2, [pc, #36]	; (8004980 <aesEncryptBlock+0x37c>)
 800495c:	5cd3      	ldrb	r3, [r2, r3]
 800495e:	041b      	lsls	r3, r3, #16
 8004960:	461a      	mov	r2, r3
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	4313      	orrs	r3, r2
 8004966:	61bb      	str	r3, [r7, #24]
   t2 |= sbox[(s1 >> 24) & 0xFF] << 24;
 8004968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800496a:	0e1b      	lsrs	r3, r3, #24
 800496c:	4a04      	ldr	r2, [pc, #16]	; (8004980 <aesEncryptBlock+0x37c>)
 800496e:	5cd3      	ldrb	r3, [r2, r3]
 8004970:	061b      	lsls	r3, r3, #24
 8004972:	461a      	mov	r2, r3
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	4313      	orrs	r3, r2
 8004978:	e004      	b.n	8004984 <aesEncryptBlock+0x380>
 800497a:	bf00      	nop
 800497c:	08007734 	.word	0x08007734
 8004980:	08007634 	.word	0x08007634
 8004984:	61bb      	str	r3, [r7, #24]

   t3 = sbox[s3 & 0xFF];
 8004986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004988:	b2db      	uxtb	r3, r3
 800498a:	4a56      	ldr	r2, [pc, #344]	; (8004ae4 <aesEncryptBlock+0x4e0>)
 800498c:	5cd3      	ldrb	r3, [r2, r3]
 800498e:	617b      	str	r3, [r7, #20]
   t3 |= sbox[(s0 >> 8) & 0xFF] << 8;
 8004990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004992:	0a1b      	lsrs	r3, r3, #8
 8004994:	b2db      	uxtb	r3, r3
 8004996:	4a53      	ldr	r2, [pc, #332]	; (8004ae4 <aesEncryptBlock+0x4e0>)
 8004998:	5cd3      	ldrb	r3, [r2, r3]
 800499a:	021b      	lsls	r3, r3, #8
 800499c:	461a      	mov	r2, r3
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	617b      	str	r3, [r7, #20]
   t3 |= sbox[(s1 >> 16) & 0xFF] << 16;
 80049a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049a6:	0c1b      	lsrs	r3, r3, #16
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	4a4e      	ldr	r2, [pc, #312]	; (8004ae4 <aesEncryptBlock+0x4e0>)
 80049ac:	5cd3      	ldrb	r3, [r2, r3]
 80049ae:	041b      	lsls	r3, r3, #16
 80049b0:	461a      	mov	r2, r3
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	617b      	str	r3, [r7, #20]
   t3 |= sbox[(s2 >> 24) & 0xFF] << 24;
 80049b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ba:	0e1b      	lsrs	r3, r3, #24
 80049bc:	4a49      	ldr	r2, [pc, #292]	; (8004ae4 <aesEncryptBlock+0x4e0>)
 80049be:	5cd3      	ldrb	r3, [r2, r3]
 80049c0:	061b      	lsls	r3, r3, #24
 80049c2:	461a      	mov	r2, r3
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	617b      	str	r3, [r7, #20]

   //Last round key addition
   s0 = t0 ^ context->ek[context->nr * 4];
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	68fa      	ldr	r2, [r7, #12]
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	4413      	add	r3, r2
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	6a3a      	ldr	r2, [r7, #32]
 80049da:	4053      	eors	r3, r2
 80049dc:	633b      	str	r3, [r7, #48]	; 0x30
   s1 = t1 ^ context->ek[context->nr * 4 + 1];
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	3301      	adds	r3, #1
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	4413      	add	r3, r2
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	69fa      	ldr	r2, [r7, #28]
 80049f0:	4053      	eors	r3, r2
 80049f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   s2 = t2 ^ context->ek[context->nr * 4 + 2];
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	3302      	adds	r3, #2
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	4413      	add	r3, r2
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	69ba      	ldr	r2, [r7, #24]
 8004a06:	4053      	eors	r3, r2
 8004a08:	62bb      	str	r3, [r7, #40]	; 0x28
   s3 = t3 ^ context->ek[context->nr * 4 + 3];
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	3303      	adds	r3, #3
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	4413      	add	r3, r2
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	697a      	ldr	r2, [r7, #20]
 8004a1c:	4053      	eors	r3, r2
 8004a1e:	627b      	str	r3, [r7, #36]	; 0x24

   //The final state is then copied to the output
   STORE32LE(s0, output + 0);
 8004a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a22:	b2da      	uxtb	r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	701a      	strb	r2, [r3, #0]
 8004a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a2a:	0a1a      	lsrs	r2, r3, #8
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	3301      	adds	r3, #1
 8004a30:	b2d2      	uxtb	r2, r2
 8004a32:	701a      	strb	r2, [r3, #0]
 8004a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a36:	0c1a      	lsrs	r2, r3, #16
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	3302      	adds	r3, #2
 8004a3c:	b2d2      	uxtb	r2, r2
 8004a3e:	701a      	strb	r2, [r3, #0]
 8004a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a42:	0e1a      	lsrs	r2, r3, #24
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	3303      	adds	r3, #3
 8004a48:	b2d2      	uxtb	r2, r2
 8004a4a:	701a      	strb	r2, [r3, #0]
   STORE32LE(s1, output + 4);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	3304      	adds	r3, #4
 8004a50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a52:	b2d2      	uxtb	r2, r2
 8004a54:	701a      	strb	r2, [r3, #0]
 8004a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a58:	0a1a      	lsrs	r2, r3, #8
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	3305      	adds	r3, #5
 8004a5e:	b2d2      	uxtb	r2, r2
 8004a60:	701a      	strb	r2, [r3, #0]
 8004a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a64:	0c1a      	lsrs	r2, r3, #16
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	3306      	adds	r3, #6
 8004a6a:	b2d2      	uxtb	r2, r2
 8004a6c:	701a      	strb	r2, [r3, #0]
 8004a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a70:	0e1a      	lsrs	r2, r3, #24
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	3307      	adds	r3, #7
 8004a76:	b2d2      	uxtb	r2, r2
 8004a78:	701a      	strb	r2, [r3, #0]
   STORE32LE(s2, output + 8);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	3308      	adds	r3, #8
 8004a7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a80:	b2d2      	uxtb	r2, r2
 8004a82:	701a      	strb	r2, [r3, #0]
 8004a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a86:	0a1a      	lsrs	r2, r3, #8
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	3309      	adds	r3, #9
 8004a8c:	b2d2      	uxtb	r2, r2
 8004a8e:	701a      	strb	r2, [r3, #0]
 8004a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a92:	0c1a      	lsrs	r2, r3, #16
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	330a      	adds	r3, #10
 8004a98:	b2d2      	uxtb	r2, r2
 8004a9a:	701a      	strb	r2, [r3, #0]
 8004a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a9e:	0e1a      	lsrs	r2, r3, #24
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	330b      	adds	r3, #11
 8004aa4:	b2d2      	uxtb	r2, r2
 8004aa6:	701a      	strb	r2, [r3, #0]
   STORE32LE(s3, output + 12);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	330c      	adds	r3, #12
 8004aac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aae:	b2d2      	uxtb	r2, r2
 8004ab0:	701a      	strb	r2, [r3, #0]
 8004ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab4:	0a1a      	lsrs	r2, r3, #8
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	330d      	adds	r3, #13
 8004aba:	b2d2      	uxtb	r2, r2
 8004abc:	701a      	strb	r2, [r3, #0]
 8004abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac0:	0c1a      	lsrs	r2, r3, #16
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	330e      	adds	r3, #14
 8004ac6:	b2d2      	uxtb	r2, r2
 8004ac8:	701a      	strb	r2, [r3, #0]
 8004aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004acc:	0e1a      	lsrs	r2, r3, #24
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	330f      	adds	r3, #15
 8004ad2:	b2d2      	uxtb	r2, r2
 8004ad4:	701a      	strb	r2, [r3, #0]
}
 8004ad6:	bf00      	nop
 8004ad8:	373c      	adds	r7, #60	; 0x3c
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr
 8004ae2:	bf00      	nop
 8004ae4:	08007634 	.word	0x08007634

08004ae8 <aesDeinit>:
 * @brief Release AES context
 * @param[in] context Pointer to the AES context
 **/

__weak_func void aesDeinit(AesContext *context)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
   //Clear AES context
   osMemset(context, 0, sizeof(AesContext));
 8004af0:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8004af4:	2100      	movs	r1, #0
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f002 fae0 	bl	80070bc <memset>
}
 8004afc:	bf00      	nop
 8004afe:	3708      	adds	r7, #8
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <swapInt32>:
 * @param[in] value 32-bit value
 * @return 32-bit value with byte order swapped
 **/

uint32_t swapInt32(uint32_t value)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
   return SWAPINT32(value);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	061a      	lsls	r2, r3, #24
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	021b      	lsls	r3, r3, #8
 8004b14:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004b18:	431a      	orrs	r2, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	0a1b      	lsrs	r3, r3, #8
 8004b1e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004b22:	431a      	orrs	r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	0e1b      	lsrs	r3, r3, #24
 8004b28:	4313      	orrs	r3, r2
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	370c      	adds	r7, #12
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
	...

08004b38 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b08a      	sub	sp, #40	; 0x28
 8004b3c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b3e:	f107 0314 	add.w	r3, r7, #20
 8004b42:	2200      	movs	r2, #0
 8004b44:	601a      	str	r2, [r3, #0]
 8004b46:	605a      	str	r2, [r3, #4]
 8004b48:	609a      	str	r2, [r3, #8]
 8004b4a:	60da      	str	r2, [r3, #12]
 8004b4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b4e:	2300      	movs	r3, #0
 8004b50:	613b      	str	r3, [r7, #16]
 8004b52:	4b2d      	ldr	r3, [pc, #180]	; (8004c08 <MX_GPIO_Init+0xd0>)
 8004b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b56:	4a2c      	ldr	r2, [pc, #176]	; (8004c08 <MX_GPIO_Init+0xd0>)
 8004b58:	f043 0304 	orr.w	r3, r3, #4
 8004b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8004b5e:	4b2a      	ldr	r3, [pc, #168]	; (8004c08 <MX_GPIO_Init+0xd0>)
 8004b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b62:	f003 0304 	and.w	r3, r3, #4
 8004b66:	613b      	str	r3, [r7, #16]
 8004b68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	60fb      	str	r3, [r7, #12]
 8004b6e:	4b26      	ldr	r3, [pc, #152]	; (8004c08 <MX_GPIO_Init+0xd0>)
 8004b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b72:	4a25      	ldr	r2, [pc, #148]	; (8004c08 <MX_GPIO_Init+0xd0>)
 8004b74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b78:	6313      	str	r3, [r2, #48]	; 0x30
 8004b7a:	4b23      	ldr	r3, [pc, #140]	; (8004c08 <MX_GPIO_Init+0xd0>)
 8004b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b82:	60fb      	str	r3, [r7, #12]
 8004b84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b86:	2300      	movs	r3, #0
 8004b88:	60bb      	str	r3, [r7, #8]
 8004b8a:	4b1f      	ldr	r3, [pc, #124]	; (8004c08 <MX_GPIO_Init+0xd0>)
 8004b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8e:	4a1e      	ldr	r2, [pc, #120]	; (8004c08 <MX_GPIO_Init+0xd0>)
 8004b90:	f043 0301 	orr.w	r3, r3, #1
 8004b94:	6313      	str	r3, [r2, #48]	; 0x30
 8004b96:	4b1c      	ldr	r3, [pc, #112]	; (8004c08 <MX_GPIO_Init+0xd0>)
 8004b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b9a:	f003 0301 	and.w	r3, r3, #1
 8004b9e:	60bb      	str	r3, [r7, #8]
 8004ba0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	607b      	str	r3, [r7, #4]
 8004ba6:	4b18      	ldr	r3, [pc, #96]	; (8004c08 <MX_GPIO_Init+0xd0>)
 8004ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004baa:	4a17      	ldr	r2, [pc, #92]	; (8004c08 <MX_GPIO_Init+0xd0>)
 8004bac:	f043 0302 	orr.w	r3, r3, #2
 8004bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8004bb2:	4b15      	ldr	r3, [pc, #84]	; (8004c08 <MX_GPIO_Init+0xd0>)
 8004bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb6:	f003 0302 	and.w	r3, r3, #2
 8004bba:	607b      	str	r3, [r7, #4]
 8004bbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	2120      	movs	r1, #32
 8004bc2:	4812      	ldr	r0, [pc, #72]	; (8004c0c <MX_GPIO_Init+0xd4>)
 8004bc4:	f000 ffb0 	bl	8005b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004bc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004bcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004bce:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8004bd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004bd8:	f107 0314 	add.w	r3, r7, #20
 8004bdc:	4619      	mov	r1, r3
 8004bde:	480c      	ldr	r0, [pc, #48]	; (8004c10 <MX_GPIO_Init+0xd8>)
 8004be0:	f000 fe0e 	bl	8005800 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8004be4:	2320      	movs	r3, #32
 8004be6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004be8:	2301      	movs	r3, #1
 8004bea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bec:	2300      	movs	r3, #0
 8004bee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8004bf4:	f107 0314 	add.w	r3, r7, #20
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	4804      	ldr	r0, [pc, #16]	; (8004c0c <MX_GPIO_Init+0xd4>)
 8004bfc:	f000 fe00 	bl	8005800 <HAL_GPIO_Init>

}
 8004c00:	bf00      	nop
 8004c02:	3728      	adds	r7, #40	; 0x28
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	40023800 	.word	0x40023800
 8004c0c:	40020000 	.word	0x40020000
 8004c10:	40020800 	.word	0x40020800

08004c14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004c18:	f000 fc9a 	bl	8005550 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004c1c:	f000 f80a 	bl	8004c34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004c20:	f7ff ff8a 	bl	8004b38 <MX_GPIO_Init>
  MX_TIM6_Init();
 8004c24:	f000 f95c 	bl	8004ee0 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 8004c28:	f000 f9b2 	bl	8004f90 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

//  AesTest();
//  RsaTest();
  EcTest();
 8004c2c:	f7fb fc6c 	bl	8000508 <EcTest>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004c30:	e7fe      	b.n	8004c30 <main+0x1c>
	...

08004c34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b094      	sub	sp, #80	; 0x50
 8004c38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004c3a:	f107 031c 	add.w	r3, r7, #28
 8004c3e:	2234      	movs	r2, #52	; 0x34
 8004c40:	2100      	movs	r1, #0
 8004c42:	4618      	mov	r0, r3
 8004c44:	f002 fa3a 	bl	80070bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004c48:	f107 0308 	add.w	r3, r7, #8
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	601a      	str	r2, [r3, #0]
 8004c50:	605a      	str	r2, [r3, #4]
 8004c52:	609a      	str	r2, [r3, #8]
 8004c54:	60da      	str	r2, [r3, #12]
 8004c56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004c58:	2300      	movs	r3, #0
 8004c5a:	607b      	str	r3, [r7, #4]
 8004c5c:	4b2c      	ldr	r3, [pc, #176]	; (8004d10 <SystemClock_Config+0xdc>)
 8004c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c60:	4a2b      	ldr	r2, [pc, #172]	; (8004d10 <SystemClock_Config+0xdc>)
 8004c62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c66:	6413      	str	r3, [r2, #64]	; 0x40
 8004c68:	4b29      	ldr	r3, [pc, #164]	; (8004d10 <SystemClock_Config+0xdc>)
 8004c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c70:	607b      	str	r3, [r7, #4]
 8004c72:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c74:	2300      	movs	r3, #0
 8004c76:	603b      	str	r3, [r7, #0]
 8004c78:	4b26      	ldr	r3, [pc, #152]	; (8004d14 <SystemClock_Config+0xe0>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a25      	ldr	r2, [pc, #148]	; (8004d14 <SystemClock_Config+0xe0>)
 8004c7e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c82:	6013      	str	r3, [r2, #0]
 8004c84:	4b23      	ldr	r3, [pc, #140]	; (8004d14 <SystemClock_Config+0xe0>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004c8c:	603b      	str	r3, [r7, #0]
 8004c8e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004c90:	2302      	movs	r3, #2
 8004c92:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004c94:	2301      	movs	r3, #1
 8004c96:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004c98:	2310      	movs	r3, #16
 8004c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004c9c:	2302      	movs	r3, #2
 8004c9e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004ca4:	2308      	movs	r3, #8
 8004ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8004ca8:	23b4      	movs	r3, #180	; 0xb4
 8004caa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004cac:	2302      	movs	r3, #2
 8004cae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8004cb0:	2302      	movs	r3, #2
 8004cb2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004cb4:	2302      	movs	r3, #2
 8004cb6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004cb8:	f107 031c 	add.w	r3, r7, #28
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f001 fae7 	bl	8006290 <HAL_RCC_OscConfig>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d001      	beq.n	8004ccc <SystemClock_Config+0x98>
  {
    Error_Handler();
 8004cc8:	f000 f826 	bl	8004d18 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8004ccc:	f000 ff46 	bl	8005b5c <HAL_PWREx_EnableOverDrive>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d001      	beq.n	8004cda <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8004cd6:	f000 f81f 	bl	8004d18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004cda:	230f      	movs	r3, #15
 8004cdc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004cde:	2302      	movs	r3, #2
 8004ce0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004ce6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004cea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004cec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004cf0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004cf2:	f107 0308 	add.w	r3, r7, #8
 8004cf6:	2105      	movs	r1, #5
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f000 ff7f 	bl	8005bfc <HAL_RCC_ClockConfig>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d001      	beq.n	8004d08 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8004d04:	f000 f808 	bl	8004d18 <Error_Handler>
  }
}
 8004d08:	bf00      	nop
 8004d0a:	3750      	adds	r7, #80	; 0x50
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	40023800 	.word	0x40023800
 8004d14:	40007000 	.word	0x40007000

08004d18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004d1c:	b672      	cpsid	i
}
 8004d1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004d20:	e7fe      	b.n	8004d20 <Error_Handler+0x8>

08004d22 <osCreateMutex>:
 * @return The function returns TRUE if the mutex was successfully
 *   created. Otherwise, FALSE is returned
 **/

bool_t osCreateMutex(OsMutex *mutex)
{
 8004d22:	b480      	push	{r7}
 8004d24:	b083      	sub	sp, #12
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
   //The mutex was successfully created
   return TRUE;
 8004d2a:	2301      	movs	r3, #1
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	370c      	adds	r7, #12
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <osDeleteMutex>:
 * @brief Delete a mutex object
 * @param[in] mutex Pointer to the mutex object
 **/

void osDeleteMutex(OsMutex *mutex)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
   //Not implemented
}
 8004d40:	bf00      	nop
 8004d42:	370c      	adds	r7, #12
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr

08004d4c <osAcquireMutex>:
 * @brief Acquire ownership of the specified mutex object
 * @param[in] mutex Pointer to the mutex object
 **/

void osAcquireMutex(OsMutex *mutex)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
   //Not implemented
}
 8004d54:	bf00      	nop
 8004d56:	370c      	adds	r7, #12
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <osReleaseMutex>:
 * @brief Release ownership of the specified mutex object
 * @param[in] mutex Pointer to the mutex object
 **/

void osReleaseMutex(OsMutex *mutex)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b083      	sub	sp, #12
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
   //Not implemented
}
 8004d68:	bf00      	nop
 8004d6a:	370c      	adds	r7, #12
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <osAllocMem>:
 * @return A pointer to the allocated memory block or NULL if
 *   there is insufficient memory available
 **/

__weak_func void *osAllocMem(size_t size)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
   void *p;

   //Allocate a memory block
   p = malloc(size);
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f002 f97f 	bl	8007080 <malloc>
 8004d82:	4603      	mov	r3, r0
 8004d84:	60fb      	str	r3, [r7, #12]
   //Debug message
   TRACE_DEBUG("Allocating %" PRIuSIZE " bytes at 0x%08" PRIXPTR "\r\n",
      size, (uintptr_t) p);

   //Return a pointer to the newly allocated memory block
   return p;
 8004d86:	68fb      	ldr	r3, [r7, #12]
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3710      	adds	r7, #16
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <osFreeMem>:
 * @brief Release a previously allocated memory block
 * @param[in] p Previously allocated memory block to be freed
 **/

__weak_func void osFreeMem(void *p)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
   //Make sure the pointer is valid
   if(p != NULL)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d002      	beq.n	8004da4 <osFreeMem+0x14>
   {
      //Debug message
      TRACE_DEBUG("Freeing memory at 0x%08" PRIXPTR "\r\n", (uintptr_t) p);

      //Free memory block
      free(p);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f002 f976 	bl	8007090 <free>
   }
}
 8004da4:	bf00      	nop
 8004da6:	3708      	adds	r7, #8
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004db2:	2300      	movs	r3, #0
 8004db4:	607b      	str	r3, [r7, #4]
 8004db6:	4b10      	ldr	r3, [pc, #64]	; (8004df8 <HAL_MspInit+0x4c>)
 8004db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dba:	4a0f      	ldr	r2, [pc, #60]	; (8004df8 <HAL_MspInit+0x4c>)
 8004dbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004dc0:	6453      	str	r3, [r2, #68]	; 0x44
 8004dc2:	4b0d      	ldr	r3, [pc, #52]	; (8004df8 <HAL_MspInit+0x4c>)
 8004dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dca:	607b      	str	r3, [r7, #4]
 8004dcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004dce:	2300      	movs	r3, #0
 8004dd0:	603b      	str	r3, [r7, #0]
 8004dd2:	4b09      	ldr	r3, [pc, #36]	; (8004df8 <HAL_MspInit+0x4c>)
 8004dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd6:	4a08      	ldr	r2, [pc, #32]	; (8004df8 <HAL_MspInit+0x4c>)
 8004dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ddc:	6413      	str	r3, [r2, #64]	; 0x40
 8004dde:	4b06      	ldr	r3, [pc, #24]	; (8004df8 <HAL_MspInit+0x4c>)
 8004de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004de6:	603b      	str	r3, [r7, #0]
 8004de8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004dea:	2007      	movs	r0, #7
 8004dec:	f000 fcd4 	bl	8005798 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004df0:	bf00      	nop
 8004df2:	3708      	adds	r7, #8
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	40023800 	.word	0x40023800

08004dfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004e00:	e7fe      	b.n	8004e00 <NMI_Handler+0x4>

08004e02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004e02:	b480      	push	{r7}
 8004e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004e06:	e7fe      	b.n	8004e06 <HardFault_Handler+0x4>

08004e08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004e0c:	e7fe      	b.n	8004e0c <MemManage_Handler+0x4>

08004e0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004e0e:	b480      	push	{r7}
 8004e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004e12:	e7fe      	b.n	8004e12 <BusFault_Handler+0x4>

08004e14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004e14:	b480      	push	{r7}
 8004e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004e18:	e7fe      	b.n	8004e18 <UsageFault_Handler+0x4>

08004e1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004e1a:	b480      	push	{r7}
 8004e1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004e1e:	bf00      	nop
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004e2c:	bf00      	nop
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr

08004e36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004e36:	b480      	push	{r7}
 8004e38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004e3a:	bf00      	nop
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004e48:	f000 fbd4 	bl	80055f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004e4c:	bf00      	nop
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b086      	sub	sp, #24
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004e58:	4a14      	ldr	r2, [pc, #80]	; (8004eac <_sbrk+0x5c>)
 8004e5a:	4b15      	ldr	r3, [pc, #84]	; (8004eb0 <_sbrk+0x60>)
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004e64:	4b13      	ldr	r3, [pc, #76]	; (8004eb4 <_sbrk+0x64>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d102      	bne.n	8004e72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004e6c:	4b11      	ldr	r3, [pc, #68]	; (8004eb4 <_sbrk+0x64>)
 8004e6e:	4a12      	ldr	r2, [pc, #72]	; (8004eb8 <_sbrk+0x68>)
 8004e70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004e72:	4b10      	ldr	r3, [pc, #64]	; (8004eb4 <_sbrk+0x64>)
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4413      	add	r3, r2
 8004e7a:	693a      	ldr	r2, [r7, #16]
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d207      	bcs.n	8004e90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004e80:	f002 f8d2 	bl	8007028 <__errno>
 8004e84:	4603      	mov	r3, r0
 8004e86:	220c      	movs	r2, #12
 8004e88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004e8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e8e:	e009      	b.n	8004ea4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004e90:	4b08      	ldr	r3, [pc, #32]	; (8004eb4 <_sbrk+0x64>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004e96:	4b07      	ldr	r3, [pc, #28]	; (8004eb4 <_sbrk+0x64>)
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	4a05      	ldr	r2, [pc, #20]	; (8004eb4 <_sbrk+0x64>)
 8004ea0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3718      	adds	r7, #24
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	20020000 	.word	0x20020000
 8004eb0:	00000400 	.word	0x00000400
 8004eb4:	200004b0 	.word	0x200004b0
 8004eb8:	20000558 	.word	0x20000558

08004ebc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004ec0:	4b06      	ldr	r3, [pc, #24]	; (8004edc <SystemInit+0x20>)
 8004ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ec6:	4a05      	ldr	r2, [pc, #20]	; (8004edc <SystemInit+0x20>)
 8004ec8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ecc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004ed0:	bf00      	nop
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	e000ed00 	.word	0xe000ed00

08004ee0 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b082      	sub	sp, #8
 8004ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004ee6:	463b      	mov	r3, r7
 8004ee8:	2200      	movs	r2, #0
 8004eea:	601a      	str	r2, [r3, #0]
 8004eec:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004eee:	4b15      	ldr	r3, [pc, #84]	; (8004f44 <MX_TIM6_Init+0x64>)
 8004ef0:	4a15      	ldr	r2, [pc, #84]	; (8004f48 <MX_TIM6_Init+0x68>)
 8004ef2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10000;
 8004ef4:	4b13      	ldr	r3, [pc, #76]	; (8004f44 <MX_TIM6_Init+0x64>)
 8004ef6:	f242 7210 	movw	r2, #10000	; 0x2710
 8004efa:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004efc:	4b11      	ldr	r3, [pc, #68]	; (8004f44 <MX_TIM6_Init+0x64>)
 8004efe:	2200      	movs	r2, #0
 8004f00:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8004f02:	4b10      	ldr	r3, [pc, #64]	; (8004f44 <MX_TIM6_Init+0x64>)
 8004f04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f08:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f0a:	4b0e      	ldr	r3, [pc, #56]	; (8004f44 <MX_TIM6_Init+0x64>)
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004f10:	480c      	ldr	r0, [pc, #48]	; (8004f44 <MX_TIM6_Init+0x64>)
 8004f12:	f001 fc5b 	bl	80067cc <HAL_TIM_Base_Init>
 8004f16:	4603      	mov	r3, r0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d001      	beq.n	8004f20 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8004f1c:	f7ff fefc 	bl	8004d18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f20:	2300      	movs	r3, #0
 8004f22:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f24:	2300      	movs	r3, #0
 8004f26:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004f28:	463b      	mov	r3, r7
 8004f2a:	4619      	mov	r1, r3
 8004f2c:	4805      	ldr	r0, [pc, #20]	; (8004f44 <MX_TIM6_Init+0x64>)
 8004f2e:	f001 fd3d 	bl	80069ac <HAL_TIMEx_MasterConfigSynchronization>
 8004f32:	4603      	mov	r3, r0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d001      	beq.n	8004f3c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8004f38:	f7ff feee 	bl	8004d18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004f3c:	bf00      	nop
 8004f3e:	3708      	adds	r7, #8
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	200004b4 	.word	0x200004b4
 8004f48:	40001000 	.word	0x40001000

08004f4c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b085      	sub	sp, #20
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a0b      	ldr	r2, [pc, #44]	; (8004f88 <HAL_TIM_Base_MspInit+0x3c>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d10d      	bne.n	8004f7a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004f5e:	2300      	movs	r3, #0
 8004f60:	60fb      	str	r3, [r7, #12]
 8004f62:	4b0a      	ldr	r3, [pc, #40]	; (8004f8c <HAL_TIM_Base_MspInit+0x40>)
 8004f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f66:	4a09      	ldr	r2, [pc, #36]	; (8004f8c <HAL_TIM_Base_MspInit+0x40>)
 8004f68:	f043 0310 	orr.w	r3, r3, #16
 8004f6c:	6413      	str	r3, [r2, #64]	; 0x40
 8004f6e:	4b07      	ldr	r3, [pc, #28]	; (8004f8c <HAL_TIM_Base_MspInit+0x40>)
 8004f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f72:	f003 0310 	and.w	r3, r3, #16
 8004f76:	60fb      	str	r3, [r7, #12]
 8004f78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8004f7a:	bf00      	nop
 8004f7c:	3714      	adds	r7, #20
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	40001000 	.word	0x40001000
 8004f8c:	40023800 	.word	0x40023800

08004f90 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004f94:	4b11      	ldr	r3, [pc, #68]	; (8004fdc <MX_USART2_UART_Init+0x4c>)
 8004f96:	4a12      	ldr	r2, [pc, #72]	; (8004fe0 <MX_USART2_UART_Init+0x50>)
 8004f98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004f9a:	4b10      	ldr	r3, [pc, #64]	; (8004fdc <MX_USART2_UART_Init+0x4c>)
 8004f9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004fa0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004fa2:	4b0e      	ldr	r3, [pc, #56]	; (8004fdc <MX_USART2_UART_Init+0x4c>)
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004fa8:	4b0c      	ldr	r3, [pc, #48]	; (8004fdc <MX_USART2_UART_Init+0x4c>)
 8004faa:	2200      	movs	r2, #0
 8004fac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004fae:	4b0b      	ldr	r3, [pc, #44]	; (8004fdc <MX_USART2_UART_Init+0x4c>)
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004fb4:	4b09      	ldr	r3, [pc, #36]	; (8004fdc <MX_USART2_UART_Init+0x4c>)
 8004fb6:	220c      	movs	r2, #12
 8004fb8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004fba:	4b08      	ldr	r3, [pc, #32]	; (8004fdc <MX_USART2_UART_Init+0x4c>)
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004fc0:	4b06      	ldr	r3, [pc, #24]	; (8004fdc <MX_USART2_UART_Init+0x4c>)
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004fc6:	4805      	ldr	r0, [pc, #20]	; (8004fdc <MX_USART2_UART_Init+0x4c>)
 8004fc8:	f001 fd6c 	bl	8006aa4 <HAL_UART_Init>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d001      	beq.n	8004fd6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004fd2:	f7ff fea1 	bl	8004d18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004fd6:	bf00      	nop
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	200004fc 	.word	0x200004fc
 8004fe0:	40004400 	.word	0x40004400

08004fe4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b08a      	sub	sp, #40	; 0x28
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fec:	f107 0314 	add.w	r3, r7, #20
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	601a      	str	r2, [r3, #0]
 8004ff4:	605a      	str	r2, [r3, #4]
 8004ff6:	609a      	str	r2, [r3, #8]
 8004ff8:	60da      	str	r2, [r3, #12]
 8004ffa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a19      	ldr	r2, [pc, #100]	; (8005068 <HAL_UART_MspInit+0x84>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d12b      	bne.n	800505e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005006:	2300      	movs	r3, #0
 8005008:	613b      	str	r3, [r7, #16]
 800500a:	4b18      	ldr	r3, [pc, #96]	; (800506c <HAL_UART_MspInit+0x88>)
 800500c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500e:	4a17      	ldr	r2, [pc, #92]	; (800506c <HAL_UART_MspInit+0x88>)
 8005010:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005014:	6413      	str	r3, [r2, #64]	; 0x40
 8005016:	4b15      	ldr	r3, [pc, #84]	; (800506c <HAL_UART_MspInit+0x88>)
 8005018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800501e:	613b      	str	r3, [r7, #16]
 8005020:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005022:	2300      	movs	r3, #0
 8005024:	60fb      	str	r3, [r7, #12]
 8005026:	4b11      	ldr	r3, [pc, #68]	; (800506c <HAL_UART_MspInit+0x88>)
 8005028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800502a:	4a10      	ldr	r2, [pc, #64]	; (800506c <HAL_UART_MspInit+0x88>)
 800502c:	f043 0301 	orr.w	r3, r3, #1
 8005030:	6313      	str	r3, [r2, #48]	; 0x30
 8005032:	4b0e      	ldr	r3, [pc, #56]	; (800506c <HAL_UART_MspInit+0x88>)
 8005034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005036:	f003 0301 	and.w	r3, r3, #1
 800503a:	60fb      	str	r3, [r7, #12]
 800503c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800503e:	230c      	movs	r3, #12
 8005040:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005042:	2302      	movs	r3, #2
 8005044:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005046:	2300      	movs	r3, #0
 8005048:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800504a:	2303      	movs	r3, #3
 800504c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800504e:	2307      	movs	r3, #7
 8005050:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005052:	f107 0314 	add.w	r3, r7, #20
 8005056:	4619      	mov	r1, r3
 8005058:	4805      	ldr	r0, [pc, #20]	; (8005070 <HAL_UART_MspInit+0x8c>)
 800505a:	f000 fbd1 	bl	8005800 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800505e:	bf00      	nop
 8005060:	3728      	adds	r7, #40	; 0x28
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	40004400 	.word	0x40004400
 800506c:	40023800 	.word	0x40023800
 8005070:	40020000 	.word	0x40020000

08005074 <yarrowInit>:
 * @param[in] context Pointer to the PRNG context to initialize
 * @return Error code
 **/

error_t yarrowInit(YarrowContext *context)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
   //Clear PRNG state
   osMemset(context, 0, sizeof(YarrowContext));
 800507c:	f44f 724c 	mov.w	r2, #816	; 0x330
 8005080:	2100      	movs	r1, #0
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f002 f81a 	bl	80070bc <memset>

   //Create a mutex to prevent simultaneous access to the PRNG state
   if(!osCreateMutex(&context->mutex))
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4618      	mov	r0, r3
 800508c:	f7ff fe49 	bl	8004d22 <osCreateMutex>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d101      	bne.n	800509a <yarrowInit+0x26>
   {
      //Failed to create mutex
      return ERROR_OUT_OF_RESOURCES;
 8005096:	2365      	movs	r3, #101	; 0x65
 8005098:	e00d      	b.n	80050b6 <yarrowInit+0x42>
   }

   //Initialize hash contexts
   sha256Init(&context->fastPool);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	3318      	adds	r3, #24
 800509e:	4618      	mov	r0, r3
 80050a0:	f7fe fee4 	bl	8003e6c <sha256Init>
   sha256Init(&context->slowPool);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	3398      	adds	r3, #152	; 0x98
 80050a8:	4618      	mov	r0, r3
 80050aa:	f7fe fedf 	bl	8003e6c <sha256Init>

   //The PRNG is not ready to generate random data
   context->ready = FALSE;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	605a      	str	r2, [r3, #4]

   //Successful initialization
   return NO_ERROR;
 80050b4:	2300      	movs	r3, #0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3708      	adds	r7, #8
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}

080050be <yarrowSeed>:
 * @param[in] length Length of the input data
 * @return Error code
 **/

error_t yarrowSeed(YarrowContext *context, const uint8_t *input, size_t length)
{
 80050be:	b580      	push	{r7, lr}
 80050c0:	b084      	sub	sp, #16
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	60f8      	str	r0, [r7, #12]
 80050c6:	60b9      	str	r1, [r7, #8]
 80050c8:	607a      	str	r2, [r7, #4]
   //Check parameters
   if(length < sizeof(context->key))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2b1f      	cmp	r3, #31
 80050ce:	d801      	bhi.n	80050d4 <yarrowSeed+0x16>
      return ERROR_INVALID_PARAMETER;
 80050d0:	2302      	movs	r3, #2
 80050d2:	e00a      	b.n	80050ea <yarrowSeed+0x2c>

   //Add entropy to the fast pool
   sha256Update(&context->fastPool, input, length);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	3318      	adds	r3, #24
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	68b9      	ldr	r1, [r7, #8]
 80050dc:	4618      	mov	r0, r3
 80050de:	f7fe ff01 	bl	8003ee4 <sha256Update>
   //Reseed from the fast pool
   yarrowFastReseed(context);
 80050e2:	68f8      	ldr	r0, [r7, #12]
 80050e4:	f000 f91e 	bl	8005324 <yarrowFastReseed>

   //Successful processing
   return NO_ERROR;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3710      	adds	r7, #16
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}

080050f2 <yarrowAddEntropy>:
 * @return Error code
 **/

error_t yarrowAddEntropy(YarrowContext *context, uint_t source,
   const uint8_t *input, size_t length, size_t entropy)
{
 80050f2:	b580      	push	{r7, lr}
 80050f4:	b086      	sub	sp, #24
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	60f8      	str	r0, [r7, #12]
 80050fa:	60b9      	str	r1, [r7, #8]
 80050fc:	607a      	str	r2, [r7, #4]
 80050fe:	603b      	str	r3, [r7, #0]
   uint_t i;
   uint_t k;

   //Check parameters
   if(source >= YARROW_N)
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	2b02      	cmp	r3, #2
 8005104:	d901      	bls.n	800510a <yarrowAddEntropy+0x18>
      return ERROR_INVALID_PARAMETER;
 8005106:	2302      	movs	r3, #2
 8005108:	e074      	b.n	80051f4 <yarrowAddEntropy+0x102>

   //Acquire exclusive access to the PRNG state
   osAcquireMutex(&context->mutex);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	4618      	mov	r0, r3
 800510e:	f7ff fe1d 	bl	8004d4c <osAcquireMutex>

   //Entropy from samples are collected into two pools
   if(context->currentPool[source] == YARROW_FAST_POOL_ID)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	68ba      	ldr	r2, [r7, #8]
 8005116:	3202      	adds	r2, #2
 8005118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d123      	bne.n	8005168 <yarrowAddEntropy+0x76>
   {
      //Each pool contains running hash of all inputs since last reseed
      sha256Update(&context->fastPool, input, length);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	3318      	adds	r3, #24
 8005124:	683a      	ldr	r2, [r7, #0]
 8005126:	6879      	ldr	r1, [r7, #4]
 8005128:	4618      	mov	r0, r3
 800512a:	f7fe fedb 	bl	8003ee4 <sha256Update>
      //Estimate the amount of entropy we have collected thus far
      context->fastPoolEntropy[source] += entropy;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	68ba      	ldr	r2, [r7, #8]
 8005132:	3222      	adds	r2, #34	; 0x22
 8005134:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005138:	6a3b      	ldr	r3, [r7, #32]
 800513a:	18d1      	adds	r1, r2, r3
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	68ba      	ldr	r2, [r7, #8]
 8005140:	3222      	adds	r2, #34	; 0x22
 8005142:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      //Reseed when any source estimate reaches 100 bits
      if(context->fastPoolEntropy[source] >= YARROW_FAST_THRESHOLD)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	68ba      	ldr	r2, [r7, #8]
 800514a:	3222      	adds	r2, #34	; 0x22
 800514c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005150:	2b63      	cmp	r3, #99	; 0x63
 8005152:	d902      	bls.n	800515a <yarrowAddEntropy+0x68>
      {
         yarrowFastReseed(context);
 8005154:	68f8      	ldr	r0, [r7, #12]
 8005156:	f000 f8e5 	bl	8005324 <yarrowFastReseed>
      }

      //The samples from each source alternate between the two pools
      context->currentPool[source] = YARROW_SLOW_POOL_ID;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	68ba      	ldr	r2, [r7, #8]
 800515e:	3202      	adds	r2, #2
 8005160:	2101      	movs	r1, #1
 8005162:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005166:	e040      	b.n	80051ea <yarrowAddEntropy+0xf8>
   }
   else
   {
      //Each pool contains running hash of all inputs since last reseed
      sha256Update(&context->slowPool, input, length);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	3398      	adds	r3, #152	; 0x98
 800516c:	683a      	ldr	r2, [r7, #0]
 800516e:	6879      	ldr	r1, [r7, #4]
 8005170:	4618      	mov	r0, r3
 8005172:	f7fe feb7 	bl	8003ee4 <sha256Update>
      //Estimate the amount of entropy we have collected thus far
      context->slowPoolEntropy[source] += entropy;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	68ba      	ldr	r2, [r7, #8]
 800517a:	3242      	adds	r2, #66	; 0x42
 800517c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005180:	6a3b      	ldr	r3, [r7, #32]
 8005182:	18d1      	adds	r1, r2, r3
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	68ba      	ldr	r2, [r7, #8]
 8005188:	3242      	adds	r2, #66	; 0x42
 800518a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      //Prevent overflows while adding up the entropy estimate
      if(context->slowPoolEntropy[source] >= YARROW_SLOW_THRESHOLD)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	68ba      	ldr	r2, [r7, #8]
 8005192:	3242      	adds	r2, #66	; 0x42
 8005194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005198:	2b9f      	cmp	r3, #159	; 0x9f
 800519a:	d905      	bls.n	80051a8 <yarrowAddEntropy+0xb6>
      {
         context->slowPoolEntropy[source] = YARROW_SLOW_THRESHOLD;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	68ba      	ldr	r2, [r7, #8]
 80051a0:	3242      	adds	r2, #66	; 0x42
 80051a2:	21a0      	movs	r1, #160	; 0xa0
 80051a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      //At least two different sources must be over 160 bits in the slow
      //pool before the slow pool reseeds
      for(k = 0, i = 0; i < YARROW_N; i++)
 80051a8:	2300      	movs	r3, #0
 80051aa:	613b      	str	r3, [r7, #16]
 80051ac:	2300      	movs	r3, #0
 80051ae:	617b      	str	r3, [r7, #20]
 80051b0:	e00c      	b.n	80051cc <yarrowAddEntropy+0xda>
      {
         //Check whether the current source has hit the threshold
         if(context->slowPoolEntropy[i] >= YARROW_SLOW_THRESHOLD)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	697a      	ldr	r2, [r7, #20]
 80051b6:	3242      	adds	r2, #66	; 0x42
 80051b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051bc:	2b9f      	cmp	r3, #159	; 0x9f
 80051be:	d902      	bls.n	80051c6 <yarrowAddEntropy+0xd4>
         {
            k++;
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	3301      	adds	r3, #1
 80051c4:	613b      	str	r3, [r7, #16]
      for(k = 0, i = 0; i < YARROW_N; i++)
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	3301      	adds	r3, #1
 80051ca:	617b      	str	r3, [r7, #20]
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	2b02      	cmp	r3, #2
 80051d0:	d9ef      	bls.n	80051b2 <yarrowAddEntropy+0xc0>
         }
      }

      //Reseed from the slow pool?
      if(k >= YARROW_K)
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d902      	bls.n	80051de <yarrowAddEntropy+0xec>
      {
         yarrowSlowReseed(context);
 80051d8:	68f8      	ldr	r0, [r7, #12]
 80051da:	f000 f8fe 	bl	80053da <yarrowSlowReseed>
      }

      //The samples from each source alternate between the two pools
      context->currentPool[source] = YARROW_FAST_POOL_ID;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	68ba      	ldr	r2, [r7, #8]
 80051e2:	3202      	adds	r2, #2
 80051e4:	2100      	movs	r1, #0
 80051e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }

   //Release exclusive access to the PRNG state
   osReleaseMutex(&context->mutex);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	4618      	mov	r0, r3
 80051ee:	f7ff fdb7 	bl	8004d60 <osReleaseMutex>

   //Successful processing
   return NO_ERROR;
 80051f2:	2300      	movs	r3, #0
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3718      	adds	r7, #24
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}

080051fc <yarrowRead>:
 * @param[in] length Desired length in bytes
 * @return Error code
 **/

error_t yarrowRead(YarrowContext *context, uint8_t *output, size_t length)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b08a      	sub	sp, #40	; 0x28
 8005200:	af00      	add	r7, sp, #0
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	607a      	str	r2, [r7, #4]
   size_t n;
   uint8_t buffer[AES_BLOCK_SIZE];

   //Make sure that the PRNG has been properly seeded
   if(!context->ready)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d102      	bne.n	8005216 <yarrowRead+0x1a>
      return ERROR_PRNG_NOT_READY;
 8005210:	f240 2323 	movw	r3, #547	; 0x223
 8005214:	e04d      	b.n	80052b2 <yarrowRead+0xb6>

   //Acquire exclusive access to the PRNG state
   osAcquireMutex(&context->mutex);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	4618      	mov	r0, r3
 800521a:	f7ff fd97 	bl	8004d4c <osAcquireMutex>

   //Generate random data in a block-by-block fashion
   while(length > 0)
 800521e:	e020      	b.n	8005262 <yarrowRead+0x66>
   {
      //Number of bytes to process at a time
      n = MIN(length, AES_BLOCK_SIZE);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2b10      	cmp	r3, #16
 8005224:	bf28      	it	cs
 8005226:	2310      	movcs	r3, #16
 8005228:	627b      	str	r3, [r7, #36]	; 0x24

      //Generate a random block
      yarrowGenerateBlock(context, buffer);
 800522a:	f107 0314 	add.w	r3, r7, #20
 800522e:	4619      	mov	r1, r3
 8005230:	68f8      	ldr	r0, [r7, #12]
 8005232:	f000 f842 	bl	80052ba <yarrowGenerateBlock>
      //Copy data to the output buffer
      osMemcpy(output, buffer, n);
 8005236:	f107 0314 	add.w	r3, r7, #20
 800523a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800523c:	4619      	mov	r1, r3
 800523e:	68b8      	ldr	r0, [r7, #8]
 8005240:	f001 ff2e 	bl	80070a0 <memcpy>

      //We keep track of how many blocks we have output
      context->blockCount++;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 800524a:	1c5a      	adds	r2, r3, #1
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328

      //Next block
      output += n;
 8005252:	68ba      	ldr	r2, [r7, #8]
 8005254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005256:	4413      	add	r3, r2
 8005258:	60bb      	str	r3, [r7, #8]
      length -= n;
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525e:	1ad3      	subs	r3, r2, r3
 8005260:	607b      	str	r3, [r7, #4]
   while(length > 0)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d1db      	bne.n	8005220 <yarrowRead+0x24>
   }

   //Apply generator gate?
   if(context->blockCount >= YARROW_PG)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 800526e:	2b09      	cmp	r3, #9
 8005270:	d91a      	bls.n	80052a8 <yarrowRead+0xac>
   {
      //Generate some random bytes
      yarrowGenerateBlock(context, context->key);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 8005278:	4619      	mov	r1, r3
 800527a:	68f8      	ldr	r0, [r7, #12]
 800527c:	f000 f81d 	bl	80052ba <yarrowGenerateBlock>

      //Use them as the new key
      aesDeinit(&context->cipherContext);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8005286:	4618      	mov	r0, r3
 8005288:	f7ff fc2e 	bl	8004ae8 <aesDeinit>
      aesInit(&context->cipherContext, context->key, sizeof(context->key));
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f503 708a 	add.w	r0, r3, #276	; 0x114
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 8005298:	2220      	movs	r2, #32
 800529a:	4619      	mov	r1, r3
 800529c:	f7fe fff0 	bl	8004280 <aesInit>

      //Reset block counter
      context->blockCount = 0;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2200      	movs	r2, #0
 80052a4:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
   }

   //Release exclusive access to the PRNG state
   osReleaseMutex(&context->mutex);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	4618      	mov	r0, r3
 80052ac:	f7ff fd58 	bl	8004d60 <osReleaseMutex>

   //Successful processing
   return NO_ERROR;
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3728      	adds	r7, #40	; 0x28
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}

080052ba <yarrowGenerateBlock>:
 * @param[in] context Pointer to the PRNG context
 * @param[out] output Buffer where to store the output block
 **/

void yarrowGenerateBlock(YarrowContext *context, uint8_t *output)
{
 80052ba:	b580      	push	{r7, lr}
 80052bc:	b084      	sub	sp, #16
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
 80052c2:	6039      	str	r1, [r7, #0]
   int_t i;

   //Encrypt counter block
   aesEncryptBlock(&context->cipherContext, context->counter, output);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f503 708a 	add.w	r0, r3, #276	; 0x114
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f503 7346 	add.w	r3, r3, #792	; 0x318
 80052d0:	683a      	ldr	r2, [r7, #0]
 80052d2:	4619      	mov	r1, r3
 80052d4:	f7ff f996 	bl	8004604 <aesEncryptBlock>

   //Increment counter value
   for(i = AES_BLOCK_SIZE - 1; i >= 0; i--)
 80052d8:	230f      	movs	r3, #15
 80052da:	60fb      	str	r3, [r7, #12]
 80052dc:	e019      	b.n	8005312 <yarrowGenerateBlock+0x58>
   {
      //Increment the current byte and propagate the carry if necessary
      if(++(context->counter[i]) != 0)
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	4413      	add	r3, r2
 80052e4:	f503 7346 	add.w	r3, r3, #792	; 0x318
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	3301      	adds	r3, #1
 80052ec:	b2d9      	uxtb	r1, r3
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	4413      	add	r3, r2
 80052f4:	f503 7346 	add.w	r3, r3, #792	; 0x318
 80052f8:	460a      	mov	r2, r1
 80052fa:	701a      	strb	r2, [r3, #0]
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	4413      	add	r3, r2
 8005302:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d106      	bne.n	800531a <yarrowGenerateBlock+0x60>
   for(i = AES_BLOCK_SIZE - 1; i >= 0; i--)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	3b01      	subs	r3, #1
 8005310:	60fb      	str	r3, [r7, #12]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2b00      	cmp	r3, #0
 8005316:	dae2      	bge.n	80052de <yarrowGenerateBlock+0x24>
      {
         break;
      }
   }
}
 8005318:	e000      	b.n	800531c <yarrowGenerateBlock+0x62>
         break;
 800531a:	bf00      	nop
}
 800531c:	bf00      	nop
 800531e:	3710      	adds	r7, #16
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <yarrowFastReseed>:
 * @brief Reseed from the fast pool
 * @param[in] context Pointer to the PRNG context
 **/

void yarrowFastReseed(YarrowContext *context)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
   size_t i;

   //Erase AES context
   if(context->ready)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d005      	beq.n	8005340 <yarrowFastReseed+0x1c>
   {
      aesDeinit(&context->cipherContext);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800533a:	4618      	mov	r0, r3
 800533c:	f7ff fbd4 	bl	8004ae8 <aesDeinit>
   }

   //Reseeding from the fast pool use the current key and the hash of all
   //inputs to the fast pool since the last reseed, to generate a new key
   sha256Update(&context->fastPool, context->key, sizeof(context->key));
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f103 0018 	add.w	r0, r3, #24
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 800534c:	2220      	movs	r2, #32
 800534e:	4619      	mov	r1, r3
 8005350:	f7fe fdc8 	bl	8003ee4 <sha256Update>
   sha256Final(&context->fastPool, context->key);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f103 0218 	add.w	r2, r3, #24
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 8005360:	4619      	mov	r1, r3
 8005362:	4610      	mov	r0, r2
 8005364:	f7fe fe0a 	bl	8003f7c <sha256Final>

   //Set the new key
   aesInit(&context->cipherContext, context->key, sizeof(context->key));
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f503 708a 	add.w	r0, r3, #276	; 0x114
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 8005374:	2220      	movs	r2, #32
 8005376:	4619      	mov	r1, r3
 8005378:	f7fe ff82 	bl	8004280 <aesInit>

   //Define the new value of the counter
   osMemset(context->counter, 0, sizeof(context->counter));
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8005382:	2210      	movs	r2, #16
 8005384:	2100      	movs	r1, #0
 8005386:	4618      	mov	r0, r3
 8005388:	f001 fe98 	bl	80070bc <memset>
   aesEncryptBlock(&context->cipherContext, context->counter, context->counter);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f503 708a 	add.w	r0, r3, #276	; 0x114
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f503 7146 	add.w	r1, r3, #792	; 0x318
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f503 7346 	add.w	r3, r3, #792	; 0x318
 800539e:	461a      	mov	r2, r3
 80053a0:	f7ff f930 	bl	8004604 <aesEncryptBlock>

   //Reset the hash context
   sha256Init(&context->fastPool);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	3318      	adds	r3, #24
 80053a8:	4618      	mov	r0, r3
 80053aa:	f7fe fd5f 	bl	8003e6c <sha256Init>

   //The entropy estimates for the fast pool are all reset to zero
   for(i = 0; i < YARROW_N; i++)
 80053ae:	2300      	movs	r3, #0
 80053b0:	60fb      	str	r3, [r7, #12]
 80053b2:	e008      	b.n	80053c6 <yarrowFastReseed+0xa2>
   {
      context->fastPoolEntropy[i] = 0;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	3222      	adds	r2, #34	; 0x22
 80053ba:	2100      	movs	r1, #0
 80053bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   for(i = 0; i < YARROW_N; i++)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	3301      	adds	r3, #1
 80053c4:	60fb      	str	r3, [r7, #12]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2b02      	cmp	r3, #2
 80053ca:	d9f3      	bls.n	80053b4 <yarrowFastReseed+0x90>
   }

   //The PRNG is ready to generate random data
   context->ready = TRUE;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	605a      	str	r2, [r3, #4]
}
 80053d2:	bf00      	nop
 80053d4:	3710      	adds	r7, #16
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}

080053da <yarrowSlowReseed>:
 * @brief Reseed from the slow pool
 * @param[in] context Pointer to the PRNG context
 **/

void yarrowSlowReseed(YarrowContext *context)
{
 80053da:	b580      	push	{r7, lr}
 80053dc:	b084      	sub	sp, #16
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
   size_t i;

   //Erase AES context
   if(context->ready)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d005      	beq.n	80053f6 <yarrowSlowReseed+0x1c>
   {
      aesDeinit(&context->cipherContext);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f503 738a 	add.w	r3, r3, #276	; 0x114
 80053f0:	4618      	mov	r0, r3
 80053f2:	f7ff fb79 	bl	8004ae8 <aesDeinit>
   }

   //Compute the hash of all inputs to the fast pool
   sha256Final(&context->fastPool, NULL);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	3318      	adds	r3, #24
 80053fa:	2100      	movs	r1, #0
 80053fc:	4618      	mov	r0, r3
 80053fe:	f7fe fdbd 	bl	8003f7c <sha256Final>

   //Reseeding from the slow pool use the current key, the hash of all inputs to the
   //fast pool and the hash of all inputs to the slow pool, to generate a new key
   sha256Update(&context->slowPool, context->key, sizeof(context->key));
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f103 0098 	add.w	r0, r3, #152	; 0x98
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 800540e:	2220      	movs	r2, #32
 8005410:	4619      	mov	r1, r3
 8005412:	f7fe fd67 	bl	8003ee4 <sha256Update>
   sha256Update(&context->slowPool, context->fastPool.digest, SHA256_DIGEST_SIZE);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f103 0098 	add.w	r0, r3, #152	; 0x98
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	3318      	adds	r3, #24
 8005420:	2220      	movs	r2, #32
 8005422:	4619      	mov	r1, r3
 8005424:	f7fe fd5e 	bl	8003ee4 <sha256Update>
   sha256Final(&context->slowPool, context->key);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f103 0298 	add.w	r2, r3, #152	; 0x98
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 8005434:	4619      	mov	r1, r3
 8005436:	4610      	mov	r0, r2
 8005438:	f7fe fda0 	bl	8003f7c <sha256Final>

   //Set the new key
   aesInit(&context->cipherContext, context->key, sizeof(context->key));
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f503 708a 	add.w	r0, r3, #276	; 0x114
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 8005448:	2220      	movs	r2, #32
 800544a:	4619      	mov	r1, r3
 800544c:	f7fe ff18 	bl	8004280 <aesInit>

   //Define the new value of the counter
   osMemset(context->counter, 0, sizeof(context->counter));
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8005456:	2210      	movs	r2, #16
 8005458:	2100      	movs	r1, #0
 800545a:	4618      	mov	r0, r3
 800545c:	f001 fe2e 	bl	80070bc <memset>
   aesEncryptBlock(&context->cipherContext, context->counter, context->counter);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f503 708a 	add.w	r0, r3, #276	; 0x114
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f503 7146 	add.w	r1, r3, #792	; 0x318
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8005472:	461a      	mov	r2, r3
 8005474:	f7ff f8c6 	bl	8004604 <aesEncryptBlock>

   //Reset the hash contexts
   sha256Init(&context->fastPool);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	3318      	adds	r3, #24
 800547c:	4618      	mov	r0, r3
 800547e:	f7fe fcf5 	bl	8003e6c <sha256Init>
   sha256Init(&context->slowPool);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	3398      	adds	r3, #152	; 0x98
 8005486:	4618      	mov	r0, r3
 8005488:	f7fe fcf0 	bl	8003e6c <sha256Init>

   //The entropy estimates for both pools are reset to zero
   for(i = 0; i < YARROW_N; i++)
 800548c:	2300      	movs	r3, #0
 800548e:	60fb      	str	r3, [r7, #12]
 8005490:	e00e      	b.n	80054b0 <yarrowSlowReseed+0xd6>
   {
      context->fastPoolEntropy[i] = 0;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	3222      	adds	r2, #34	; 0x22
 8005498:	2100      	movs	r1, #0
 800549a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      context->slowPoolEntropy[i] = 0;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	68fa      	ldr	r2, [r7, #12]
 80054a2:	3242      	adds	r2, #66	; 0x42
 80054a4:	2100      	movs	r1, #0
 80054a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   for(i = 0; i < YARROW_N; i++)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	3301      	adds	r3, #1
 80054ae:	60fb      	str	r3, [r7, #12]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2b02      	cmp	r3, #2
 80054b4:	d9ed      	bls.n	8005492 <yarrowSlowReseed+0xb8>
   }

   //The PRNG is ready to generate random data
   context->ready = TRUE;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2201      	movs	r2, #1
 80054ba:	605a      	str	r2, [r3, #4]
}
 80054bc:	bf00      	nop
 80054be:	3710      	adds	r7, #16
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <yarrowDeinit>:
 * @brief Release PRNG context
 * @param[in] context Pointer to the PRNG context
 **/

void yarrowDeinit(YarrowContext *context)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b082      	sub	sp, #8
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
   //Erase AES context
   if(context->ready)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d005      	beq.n	80054e0 <yarrowDeinit+0x1c>
   {
      aesDeinit(&context->cipherContext);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f503 738a 	add.w	r3, r3, #276	; 0x114
 80054da:	4618      	mov	r0, r3
 80054dc:	f7ff fb04 	bl	8004ae8 <aesDeinit>
   }

   //Free previously allocated resources
   osDeleteMutex(&context->mutex);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4618      	mov	r0, r3
 80054e4:	f7ff fc28 	bl	8004d38 <osDeleteMutex>

   //Clear PRNG state
   osMemset(context, 0, sizeof(YarrowContext));
 80054e8:	f44f 724c 	mov.w	r2, #816	; 0x330
 80054ec:	2100      	movs	r1, #0
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f001 fde4 	bl	80070bc <memset>
}
 80054f4:	bf00      	nop
 80054f6:	3708      	adds	r7, #8
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
 ldr   sp, =_estack      /* set stack pointer */
 80054fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005534 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005500:	480d      	ldr	r0, [pc, #52]	; (8005538 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005502:	490e      	ldr	r1, [pc, #56]	; (800553c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005504:	4a0e      	ldr	r2, [pc, #56]	; (8005540 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005506:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005508:	e002      	b.n	8005510 <LoopCopyDataInit>

0800550a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800550a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800550c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800550e:	3304      	adds	r3, #4

08005510 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005510:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005512:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005514:	d3f9      	bcc.n	800550a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005516:	4a0b      	ldr	r2, [pc, #44]	; (8005544 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005518:	4c0b      	ldr	r4, [pc, #44]	; (8005548 <LoopFillZerobss+0x26>)
  movs r3, #0
 800551a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800551c:	e001      	b.n	8005522 <LoopFillZerobss>

0800551e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800551e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005520:	3204      	adds	r2, #4

08005522 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005522:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005524:	d3fb      	bcc.n	800551e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005526:	f7ff fcc9 	bl	8004ebc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800552a:	f001 fd83 	bl	8007034 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800552e:	f7ff fb71 	bl	8004c14 <main>
  bx  lr    
 8005532:	4770      	bx	lr
 ldr   sp, =_estack      /* set stack pointer */
 8005534:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005538:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800553c:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8005540:	08008804 	.word	0x08008804
  ldr r2, =_sbss
 8005544:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8005548:	20000554 	.word	0x20000554

0800554c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800554c:	e7fe      	b.n	800554c <ADC_IRQHandler>
	...

08005550 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005554:	4b0e      	ldr	r3, [pc, #56]	; (8005590 <HAL_Init+0x40>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a0d      	ldr	r2, [pc, #52]	; (8005590 <HAL_Init+0x40>)
 800555a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800555e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005560:	4b0b      	ldr	r3, [pc, #44]	; (8005590 <HAL_Init+0x40>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a0a      	ldr	r2, [pc, #40]	; (8005590 <HAL_Init+0x40>)
 8005566:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800556a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800556c:	4b08      	ldr	r3, [pc, #32]	; (8005590 <HAL_Init+0x40>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a07      	ldr	r2, [pc, #28]	; (8005590 <HAL_Init+0x40>)
 8005572:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005576:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005578:	2003      	movs	r0, #3
 800557a:	f000 f90d 	bl	8005798 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800557e:	2000      	movs	r0, #0
 8005580:	f000 f808 	bl	8005594 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005584:	f7ff fc12 	bl	8004dac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005588:	2300      	movs	r3, #0
}
 800558a:	4618      	mov	r0, r3
 800558c:	bd80      	pop	{r7, pc}
 800558e:	bf00      	nop
 8005590:	40023c00 	.word	0x40023c00

08005594 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b082      	sub	sp, #8
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800559c:	4b12      	ldr	r3, [pc, #72]	; (80055e8 <HAL_InitTick+0x54>)
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	4b12      	ldr	r3, [pc, #72]	; (80055ec <HAL_InitTick+0x58>)
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	4619      	mov	r1, r3
 80055a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80055aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80055ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80055b2:	4618      	mov	r0, r3
 80055b4:	f000 f917 	bl	80057e6 <HAL_SYSTICK_Config>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d001      	beq.n	80055c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e00e      	b.n	80055e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2b0f      	cmp	r3, #15
 80055c6:	d80a      	bhi.n	80055de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80055c8:	2200      	movs	r2, #0
 80055ca:	6879      	ldr	r1, [r7, #4]
 80055cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055d0:	f000 f8ed 	bl	80057ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80055d4:	4a06      	ldr	r2, [pc, #24]	; (80055f0 <HAL_InitTick+0x5c>)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80055da:	2300      	movs	r3, #0
 80055dc:	e000      	b.n	80055e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3708      	adds	r7, #8
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}
 80055e8:	20000040 	.word	0x20000040
 80055ec:	20000048 	.word	0x20000048
 80055f0:	20000044 	.word	0x20000044

080055f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80055f4:	b480      	push	{r7}
 80055f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80055f8:	4b06      	ldr	r3, [pc, #24]	; (8005614 <HAL_IncTick+0x20>)
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	461a      	mov	r2, r3
 80055fe:	4b06      	ldr	r3, [pc, #24]	; (8005618 <HAL_IncTick+0x24>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4413      	add	r3, r2
 8005604:	4a04      	ldr	r2, [pc, #16]	; (8005618 <HAL_IncTick+0x24>)
 8005606:	6013      	str	r3, [r2, #0]
}
 8005608:	bf00      	nop
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr
 8005612:	bf00      	nop
 8005614:	20000048 	.word	0x20000048
 8005618:	20000540 	.word	0x20000540

0800561c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800561c:	b480      	push	{r7}
 800561e:	af00      	add	r7, sp, #0
  return uwTick;
 8005620:	4b03      	ldr	r3, [pc, #12]	; (8005630 <HAL_GetTick+0x14>)
 8005622:	681b      	ldr	r3, [r3, #0]
}
 8005624:	4618      	mov	r0, r3
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr
 800562e:	bf00      	nop
 8005630:	20000540 	.word	0x20000540

08005634 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005634:	b480      	push	{r7}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f003 0307 	and.w	r3, r3, #7
 8005642:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005644:	4b0c      	ldr	r3, [pc, #48]	; (8005678 <__NVIC_SetPriorityGrouping+0x44>)
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800564a:	68ba      	ldr	r2, [r7, #8]
 800564c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005650:	4013      	ands	r3, r2
 8005652:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800565c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005660:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005664:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005666:	4a04      	ldr	r2, [pc, #16]	; (8005678 <__NVIC_SetPriorityGrouping+0x44>)
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	60d3      	str	r3, [r2, #12]
}
 800566c:	bf00      	nop
 800566e:	3714      	adds	r7, #20
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr
 8005678:	e000ed00 	.word	0xe000ed00

0800567c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800567c:	b480      	push	{r7}
 800567e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005680:	4b04      	ldr	r3, [pc, #16]	; (8005694 <__NVIC_GetPriorityGrouping+0x18>)
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	0a1b      	lsrs	r3, r3, #8
 8005686:	f003 0307 	and.w	r3, r3, #7
}
 800568a:	4618      	mov	r0, r3
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr
 8005694:	e000ed00 	.word	0xe000ed00

08005698 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	4603      	mov	r3, r0
 80056a0:	6039      	str	r1, [r7, #0]
 80056a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	db0a      	blt.n	80056c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	b2da      	uxtb	r2, r3
 80056b0:	490c      	ldr	r1, [pc, #48]	; (80056e4 <__NVIC_SetPriority+0x4c>)
 80056b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056b6:	0112      	lsls	r2, r2, #4
 80056b8:	b2d2      	uxtb	r2, r2
 80056ba:	440b      	add	r3, r1
 80056bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80056c0:	e00a      	b.n	80056d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	b2da      	uxtb	r2, r3
 80056c6:	4908      	ldr	r1, [pc, #32]	; (80056e8 <__NVIC_SetPriority+0x50>)
 80056c8:	79fb      	ldrb	r3, [r7, #7]
 80056ca:	f003 030f 	and.w	r3, r3, #15
 80056ce:	3b04      	subs	r3, #4
 80056d0:	0112      	lsls	r2, r2, #4
 80056d2:	b2d2      	uxtb	r2, r2
 80056d4:	440b      	add	r3, r1
 80056d6:	761a      	strb	r2, [r3, #24]
}
 80056d8:	bf00      	nop
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr
 80056e4:	e000e100 	.word	0xe000e100
 80056e8:	e000ed00 	.word	0xe000ed00

080056ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b089      	sub	sp, #36	; 0x24
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	60f8      	str	r0, [r7, #12]
 80056f4:	60b9      	str	r1, [r7, #8]
 80056f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f003 0307 	and.w	r3, r3, #7
 80056fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	f1c3 0307 	rsb	r3, r3, #7
 8005706:	2b04      	cmp	r3, #4
 8005708:	bf28      	it	cs
 800570a:	2304      	movcs	r3, #4
 800570c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	3304      	adds	r3, #4
 8005712:	2b06      	cmp	r3, #6
 8005714:	d902      	bls.n	800571c <NVIC_EncodePriority+0x30>
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	3b03      	subs	r3, #3
 800571a:	e000      	b.n	800571e <NVIC_EncodePriority+0x32>
 800571c:	2300      	movs	r3, #0
 800571e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005720:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	fa02 f303 	lsl.w	r3, r2, r3
 800572a:	43da      	mvns	r2, r3
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	401a      	ands	r2, r3
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005734:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	fa01 f303 	lsl.w	r3, r1, r3
 800573e:	43d9      	mvns	r1, r3
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005744:	4313      	orrs	r3, r2
         );
}
 8005746:	4618      	mov	r0, r3
 8005748:	3724      	adds	r7, #36	; 0x24
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr
	...

08005754 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b082      	sub	sp, #8
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	3b01      	subs	r3, #1
 8005760:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005764:	d301      	bcc.n	800576a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005766:	2301      	movs	r3, #1
 8005768:	e00f      	b.n	800578a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800576a:	4a0a      	ldr	r2, [pc, #40]	; (8005794 <SysTick_Config+0x40>)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	3b01      	subs	r3, #1
 8005770:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005772:	210f      	movs	r1, #15
 8005774:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005778:	f7ff ff8e 	bl	8005698 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800577c:	4b05      	ldr	r3, [pc, #20]	; (8005794 <SysTick_Config+0x40>)
 800577e:	2200      	movs	r2, #0
 8005780:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005782:	4b04      	ldr	r3, [pc, #16]	; (8005794 <SysTick_Config+0x40>)
 8005784:	2207      	movs	r2, #7
 8005786:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3708      	adds	r7, #8
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	e000e010 	.word	0xe000e010

08005798 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b082      	sub	sp, #8
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f7ff ff47 	bl	8005634 <__NVIC_SetPriorityGrouping>
}
 80057a6:	bf00      	nop
 80057a8:	3708      	adds	r7, #8
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}

080057ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80057ae:	b580      	push	{r7, lr}
 80057b0:	b086      	sub	sp, #24
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	4603      	mov	r3, r0
 80057b6:	60b9      	str	r1, [r7, #8]
 80057b8:	607a      	str	r2, [r7, #4]
 80057ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80057bc:	2300      	movs	r3, #0
 80057be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80057c0:	f7ff ff5c 	bl	800567c <__NVIC_GetPriorityGrouping>
 80057c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	68b9      	ldr	r1, [r7, #8]
 80057ca:	6978      	ldr	r0, [r7, #20]
 80057cc:	f7ff ff8e 	bl	80056ec <NVIC_EncodePriority>
 80057d0:	4602      	mov	r2, r0
 80057d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057d6:	4611      	mov	r1, r2
 80057d8:	4618      	mov	r0, r3
 80057da:	f7ff ff5d 	bl	8005698 <__NVIC_SetPriority>
}
 80057de:	bf00      	nop
 80057e0:	3718      	adds	r7, #24
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}

080057e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80057e6:	b580      	push	{r7, lr}
 80057e8:	b082      	sub	sp, #8
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f7ff ffb0 	bl	8005754 <SysTick_Config>
 80057f4:	4603      	mov	r3, r0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3708      	adds	r7, #8
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
	...

08005800 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005800:	b480      	push	{r7}
 8005802:	b089      	sub	sp, #36	; 0x24
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800580a:	2300      	movs	r3, #0
 800580c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800580e:	2300      	movs	r3, #0
 8005810:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005812:	2300      	movs	r3, #0
 8005814:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005816:	2300      	movs	r3, #0
 8005818:	61fb      	str	r3, [r7, #28]
 800581a:	e165      	b.n	8005ae8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800581c:	2201      	movs	r2, #1
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	fa02 f303 	lsl.w	r3, r2, r3
 8005824:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	697a      	ldr	r2, [r7, #20]
 800582c:	4013      	ands	r3, r2
 800582e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005830:	693a      	ldr	r2, [r7, #16]
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	429a      	cmp	r2, r3
 8005836:	f040 8154 	bne.w	8005ae2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	f003 0303 	and.w	r3, r3, #3
 8005842:	2b01      	cmp	r3, #1
 8005844:	d005      	beq.n	8005852 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800584e:	2b02      	cmp	r3, #2
 8005850:	d130      	bne.n	80058b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	005b      	lsls	r3, r3, #1
 800585c:	2203      	movs	r2, #3
 800585e:	fa02 f303 	lsl.w	r3, r2, r3
 8005862:	43db      	mvns	r3, r3
 8005864:	69ba      	ldr	r2, [r7, #24]
 8005866:	4013      	ands	r3, r2
 8005868:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	68da      	ldr	r2, [r3, #12]
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	005b      	lsls	r3, r3, #1
 8005872:	fa02 f303 	lsl.w	r3, r2, r3
 8005876:	69ba      	ldr	r2, [r7, #24]
 8005878:	4313      	orrs	r3, r2
 800587a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	69ba      	ldr	r2, [r7, #24]
 8005880:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005888:	2201      	movs	r2, #1
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	fa02 f303 	lsl.w	r3, r2, r3
 8005890:	43db      	mvns	r3, r3
 8005892:	69ba      	ldr	r2, [r7, #24]
 8005894:	4013      	ands	r3, r2
 8005896:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	091b      	lsrs	r3, r3, #4
 800589e:	f003 0201 	and.w	r2, r3, #1
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	fa02 f303 	lsl.w	r3, r2, r3
 80058a8:	69ba      	ldr	r2, [r7, #24]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	69ba      	ldr	r2, [r7, #24]
 80058b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	f003 0303 	and.w	r3, r3, #3
 80058bc:	2b03      	cmp	r3, #3
 80058be:	d017      	beq.n	80058f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	005b      	lsls	r3, r3, #1
 80058ca:	2203      	movs	r2, #3
 80058cc:	fa02 f303 	lsl.w	r3, r2, r3
 80058d0:	43db      	mvns	r3, r3
 80058d2:	69ba      	ldr	r2, [r7, #24]
 80058d4:	4013      	ands	r3, r2
 80058d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	689a      	ldr	r2, [r3, #8]
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	005b      	lsls	r3, r3, #1
 80058e0:	fa02 f303 	lsl.w	r3, r2, r3
 80058e4:	69ba      	ldr	r2, [r7, #24]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	69ba      	ldr	r2, [r7, #24]
 80058ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	f003 0303 	and.w	r3, r3, #3
 80058f8:	2b02      	cmp	r3, #2
 80058fa:	d123      	bne.n	8005944 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80058fc:	69fb      	ldr	r3, [r7, #28]
 80058fe:	08da      	lsrs	r2, r3, #3
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	3208      	adds	r2, #8
 8005904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005908:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	f003 0307 	and.w	r3, r3, #7
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	220f      	movs	r2, #15
 8005914:	fa02 f303 	lsl.w	r3, r2, r3
 8005918:	43db      	mvns	r3, r3
 800591a:	69ba      	ldr	r2, [r7, #24]
 800591c:	4013      	ands	r3, r2
 800591e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	691a      	ldr	r2, [r3, #16]
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	f003 0307 	and.w	r3, r3, #7
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	fa02 f303 	lsl.w	r3, r2, r3
 8005930:	69ba      	ldr	r2, [r7, #24]
 8005932:	4313      	orrs	r3, r2
 8005934:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	08da      	lsrs	r2, r3, #3
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	3208      	adds	r2, #8
 800593e:	69b9      	ldr	r1, [r7, #24]
 8005940:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	005b      	lsls	r3, r3, #1
 800594e:	2203      	movs	r2, #3
 8005950:	fa02 f303 	lsl.w	r3, r2, r3
 8005954:	43db      	mvns	r3, r3
 8005956:	69ba      	ldr	r2, [r7, #24]
 8005958:	4013      	ands	r3, r2
 800595a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	f003 0203 	and.w	r2, r3, #3
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	005b      	lsls	r3, r3, #1
 8005968:	fa02 f303 	lsl.w	r3, r2, r3
 800596c:	69ba      	ldr	r2, [r7, #24]
 800596e:	4313      	orrs	r3, r2
 8005970:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	69ba      	ldr	r2, [r7, #24]
 8005976:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005980:	2b00      	cmp	r3, #0
 8005982:	f000 80ae 	beq.w	8005ae2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005986:	2300      	movs	r3, #0
 8005988:	60fb      	str	r3, [r7, #12]
 800598a:	4b5d      	ldr	r3, [pc, #372]	; (8005b00 <HAL_GPIO_Init+0x300>)
 800598c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800598e:	4a5c      	ldr	r2, [pc, #368]	; (8005b00 <HAL_GPIO_Init+0x300>)
 8005990:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005994:	6453      	str	r3, [r2, #68]	; 0x44
 8005996:	4b5a      	ldr	r3, [pc, #360]	; (8005b00 <HAL_GPIO_Init+0x300>)
 8005998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800599a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800599e:	60fb      	str	r3, [r7, #12]
 80059a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80059a2:	4a58      	ldr	r2, [pc, #352]	; (8005b04 <HAL_GPIO_Init+0x304>)
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	089b      	lsrs	r3, r3, #2
 80059a8:	3302      	adds	r3, #2
 80059aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	f003 0303 	and.w	r3, r3, #3
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	220f      	movs	r2, #15
 80059ba:	fa02 f303 	lsl.w	r3, r2, r3
 80059be:	43db      	mvns	r3, r3
 80059c0:	69ba      	ldr	r2, [r7, #24]
 80059c2:	4013      	ands	r3, r2
 80059c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a4f      	ldr	r2, [pc, #316]	; (8005b08 <HAL_GPIO_Init+0x308>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d025      	beq.n	8005a1a <HAL_GPIO_Init+0x21a>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a4e      	ldr	r2, [pc, #312]	; (8005b0c <HAL_GPIO_Init+0x30c>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d01f      	beq.n	8005a16 <HAL_GPIO_Init+0x216>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a4d      	ldr	r2, [pc, #308]	; (8005b10 <HAL_GPIO_Init+0x310>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d019      	beq.n	8005a12 <HAL_GPIO_Init+0x212>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a4c      	ldr	r2, [pc, #304]	; (8005b14 <HAL_GPIO_Init+0x314>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d013      	beq.n	8005a0e <HAL_GPIO_Init+0x20e>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a4b      	ldr	r2, [pc, #300]	; (8005b18 <HAL_GPIO_Init+0x318>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d00d      	beq.n	8005a0a <HAL_GPIO_Init+0x20a>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a4a      	ldr	r2, [pc, #296]	; (8005b1c <HAL_GPIO_Init+0x31c>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d007      	beq.n	8005a06 <HAL_GPIO_Init+0x206>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a49      	ldr	r2, [pc, #292]	; (8005b20 <HAL_GPIO_Init+0x320>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d101      	bne.n	8005a02 <HAL_GPIO_Init+0x202>
 80059fe:	2306      	movs	r3, #6
 8005a00:	e00c      	b.n	8005a1c <HAL_GPIO_Init+0x21c>
 8005a02:	2307      	movs	r3, #7
 8005a04:	e00a      	b.n	8005a1c <HAL_GPIO_Init+0x21c>
 8005a06:	2305      	movs	r3, #5
 8005a08:	e008      	b.n	8005a1c <HAL_GPIO_Init+0x21c>
 8005a0a:	2304      	movs	r3, #4
 8005a0c:	e006      	b.n	8005a1c <HAL_GPIO_Init+0x21c>
 8005a0e:	2303      	movs	r3, #3
 8005a10:	e004      	b.n	8005a1c <HAL_GPIO_Init+0x21c>
 8005a12:	2302      	movs	r3, #2
 8005a14:	e002      	b.n	8005a1c <HAL_GPIO_Init+0x21c>
 8005a16:	2301      	movs	r3, #1
 8005a18:	e000      	b.n	8005a1c <HAL_GPIO_Init+0x21c>
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	69fa      	ldr	r2, [r7, #28]
 8005a1e:	f002 0203 	and.w	r2, r2, #3
 8005a22:	0092      	lsls	r2, r2, #2
 8005a24:	4093      	lsls	r3, r2
 8005a26:	69ba      	ldr	r2, [r7, #24]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005a2c:	4935      	ldr	r1, [pc, #212]	; (8005b04 <HAL_GPIO_Init+0x304>)
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	089b      	lsrs	r3, r3, #2
 8005a32:	3302      	adds	r3, #2
 8005a34:	69ba      	ldr	r2, [r7, #24]
 8005a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005a3a:	4b3a      	ldr	r3, [pc, #232]	; (8005b24 <HAL_GPIO_Init+0x324>)
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	43db      	mvns	r3, r3
 8005a44:	69ba      	ldr	r2, [r7, #24]
 8005a46:	4013      	ands	r3, r2
 8005a48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d003      	beq.n	8005a5e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005a56:	69ba      	ldr	r2, [r7, #24]
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005a5e:	4a31      	ldr	r2, [pc, #196]	; (8005b24 <HAL_GPIO_Init+0x324>)
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005a64:	4b2f      	ldr	r3, [pc, #188]	; (8005b24 <HAL_GPIO_Init+0x324>)
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	43db      	mvns	r3, r3
 8005a6e:	69ba      	ldr	r2, [r7, #24]
 8005a70:	4013      	ands	r3, r2
 8005a72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d003      	beq.n	8005a88 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005a80:	69ba      	ldr	r2, [r7, #24]
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005a88:	4a26      	ldr	r2, [pc, #152]	; (8005b24 <HAL_GPIO_Init+0x324>)
 8005a8a:	69bb      	ldr	r3, [r7, #24]
 8005a8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005a8e:	4b25      	ldr	r3, [pc, #148]	; (8005b24 <HAL_GPIO_Init+0x324>)
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	43db      	mvns	r3, r3
 8005a98:	69ba      	ldr	r2, [r7, #24]
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d003      	beq.n	8005ab2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005aaa:	69ba      	ldr	r2, [r7, #24]
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005ab2:	4a1c      	ldr	r2, [pc, #112]	; (8005b24 <HAL_GPIO_Init+0x324>)
 8005ab4:	69bb      	ldr	r3, [r7, #24]
 8005ab6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005ab8:	4b1a      	ldr	r3, [pc, #104]	; (8005b24 <HAL_GPIO_Init+0x324>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	43db      	mvns	r3, r3
 8005ac2:	69ba      	ldr	r2, [r7, #24]
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d003      	beq.n	8005adc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005ad4:	69ba      	ldr	r2, [r7, #24]
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005adc:	4a11      	ldr	r2, [pc, #68]	; (8005b24 <HAL_GPIO_Init+0x324>)
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	3301      	adds	r3, #1
 8005ae6:	61fb      	str	r3, [r7, #28]
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	2b0f      	cmp	r3, #15
 8005aec:	f67f ae96 	bls.w	800581c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005af0:	bf00      	nop
 8005af2:	bf00      	nop
 8005af4:	3724      	adds	r7, #36	; 0x24
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr
 8005afe:	bf00      	nop
 8005b00:	40023800 	.word	0x40023800
 8005b04:	40013800 	.word	0x40013800
 8005b08:	40020000 	.word	0x40020000
 8005b0c:	40020400 	.word	0x40020400
 8005b10:	40020800 	.word	0x40020800
 8005b14:	40020c00 	.word	0x40020c00
 8005b18:	40021000 	.word	0x40021000
 8005b1c:	40021400 	.word	0x40021400
 8005b20:	40021800 	.word	0x40021800
 8005b24:	40013c00 	.word	0x40013c00

08005b28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	460b      	mov	r3, r1
 8005b32:	807b      	strh	r3, [r7, #2]
 8005b34:	4613      	mov	r3, r2
 8005b36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005b38:	787b      	ldrb	r3, [r7, #1]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d003      	beq.n	8005b46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005b3e:	887a      	ldrh	r2, [r7, #2]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005b44:	e003      	b.n	8005b4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005b46:	887b      	ldrh	r3, [r7, #2]
 8005b48:	041a      	lsls	r2, r3, #16
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	619a      	str	r2, [r3, #24]
}
 8005b4e:	bf00      	nop
 8005b50:	370c      	adds	r7, #12
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr
	...

08005b5c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b082      	sub	sp, #8
 8005b60:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005b62:	2300      	movs	r3, #0
 8005b64:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005b66:	2300      	movs	r3, #0
 8005b68:	603b      	str	r3, [r7, #0]
 8005b6a:	4b20      	ldr	r3, [pc, #128]	; (8005bec <HAL_PWREx_EnableOverDrive+0x90>)
 8005b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b6e:	4a1f      	ldr	r2, [pc, #124]	; (8005bec <HAL_PWREx_EnableOverDrive+0x90>)
 8005b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b74:	6413      	str	r3, [r2, #64]	; 0x40
 8005b76:	4b1d      	ldr	r3, [pc, #116]	; (8005bec <HAL_PWREx_EnableOverDrive+0x90>)
 8005b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b7e:	603b      	str	r3, [r7, #0]
 8005b80:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005b82:	4b1b      	ldr	r3, [pc, #108]	; (8005bf0 <HAL_PWREx_EnableOverDrive+0x94>)
 8005b84:	2201      	movs	r2, #1
 8005b86:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005b88:	f7ff fd48 	bl	800561c <HAL_GetTick>
 8005b8c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005b8e:	e009      	b.n	8005ba4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005b90:	f7ff fd44 	bl	800561c <HAL_GetTick>
 8005b94:	4602      	mov	r2, r0
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b9e:	d901      	bls.n	8005ba4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005ba0:	2303      	movs	r3, #3
 8005ba2:	e01f      	b.n	8005be4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005ba4:	4b13      	ldr	r3, [pc, #76]	; (8005bf4 <HAL_PWREx_EnableOverDrive+0x98>)
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bb0:	d1ee      	bne.n	8005b90 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005bb2:	4b11      	ldr	r3, [pc, #68]	; (8005bf8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005bb8:	f7ff fd30 	bl	800561c <HAL_GetTick>
 8005bbc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005bbe:	e009      	b.n	8005bd4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005bc0:	f7ff fd2c 	bl	800561c <HAL_GetTick>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	1ad3      	subs	r3, r2, r3
 8005bca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005bce:	d901      	bls.n	8005bd4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005bd0:	2303      	movs	r3, #3
 8005bd2:	e007      	b.n	8005be4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005bd4:	4b07      	ldr	r3, [pc, #28]	; (8005bf4 <HAL_PWREx_EnableOverDrive+0x98>)
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bdc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005be0:	d1ee      	bne.n	8005bc0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005be2:	2300      	movs	r3, #0
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3708      	adds	r7, #8
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}
 8005bec:	40023800 	.word	0x40023800
 8005bf0:	420e0040 	.word	0x420e0040
 8005bf4:	40007000 	.word	0x40007000
 8005bf8:	420e0044 	.word	0x420e0044

08005bfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d101      	bne.n	8005c10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e0cc      	b.n	8005daa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c10:	4b68      	ldr	r3, [pc, #416]	; (8005db4 <HAL_RCC_ClockConfig+0x1b8>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 030f 	and.w	r3, r3, #15
 8005c18:	683a      	ldr	r2, [r7, #0]
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d90c      	bls.n	8005c38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c1e:	4b65      	ldr	r3, [pc, #404]	; (8005db4 <HAL_RCC_ClockConfig+0x1b8>)
 8005c20:	683a      	ldr	r2, [r7, #0]
 8005c22:	b2d2      	uxtb	r2, r2
 8005c24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c26:	4b63      	ldr	r3, [pc, #396]	; (8005db4 <HAL_RCC_ClockConfig+0x1b8>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f003 030f 	and.w	r3, r3, #15
 8005c2e:	683a      	ldr	r2, [r7, #0]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d001      	beq.n	8005c38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	e0b8      	b.n	8005daa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 0302 	and.w	r3, r3, #2
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d020      	beq.n	8005c86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 0304 	and.w	r3, r3, #4
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d005      	beq.n	8005c5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c50:	4b59      	ldr	r3, [pc, #356]	; (8005db8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	4a58      	ldr	r2, [pc, #352]	; (8005db8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005c5a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 0308 	and.w	r3, r3, #8
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d005      	beq.n	8005c74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c68:	4b53      	ldr	r3, [pc, #332]	; (8005db8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	4a52      	ldr	r2, [pc, #328]	; (8005db8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005c72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c74:	4b50      	ldr	r3, [pc, #320]	; (8005db8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	494d      	ldr	r1, [pc, #308]	; (8005db8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c82:	4313      	orrs	r3, r2
 8005c84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 0301 	and.w	r3, r3, #1
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d044      	beq.n	8005d1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d107      	bne.n	8005caa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c9a:	4b47      	ldr	r3, [pc, #284]	; (8005db8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d119      	bne.n	8005cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e07f      	b.n	8005daa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	2b02      	cmp	r3, #2
 8005cb0:	d003      	beq.n	8005cba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005cb6:	2b03      	cmp	r3, #3
 8005cb8:	d107      	bne.n	8005cca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cba:	4b3f      	ldr	r3, [pc, #252]	; (8005db8 <HAL_RCC_ClockConfig+0x1bc>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d109      	bne.n	8005cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e06f      	b.n	8005daa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cca:	4b3b      	ldr	r3, [pc, #236]	; (8005db8 <HAL_RCC_ClockConfig+0x1bc>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f003 0302 	and.w	r3, r3, #2
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d101      	bne.n	8005cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e067      	b.n	8005daa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005cda:	4b37      	ldr	r3, [pc, #220]	; (8005db8 <HAL_RCC_ClockConfig+0x1bc>)
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	f023 0203 	bic.w	r2, r3, #3
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	4934      	ldr	r1, [pc, #208]	; (8005db8 <HAL_RCC_ClockConfig+0x1bc>)
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005cec:	f7ff fc96 	bl	800561c <HAL_GetTick>
 8005cf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cf2:	e00a      	b.n	8005d0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cf4:	f7ff fc92 	bl	800561c <HAL_GetTick>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d901      	bls.n	8005d0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d06:	2303      	movs	r3, #3
 8005d08:	e04f      	b.n	8005daa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d0a:	4b2b      	ldr	r3, [pc, #172]	; (8005db8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	f003 020c 	and.w	r2, r3, #12
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d1eb      	bne.n	8005cf4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d1c:	4b25      	ldr	r3, [pc, #148]	; (8005db4 <HAL_RCC_ClockConfig+0x1b8>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f003 030f 	and.w	r3, r3, #15
 8005d24:	683a      	ldr	r2, [r7, #0]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d20c      	bcs.n	8005d44 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d2a:	4b22      	ldr	r3, [pc, #136]	; (8005db4 <HAL_RCC_ClockConfig+0x1b8>)
 8005d2c:	683a      	ldr	r2, [r7, #0]
 8005d2e:	b2d2      	uxtb	r2, r2
 8005d30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d32:	4b20      	ldr	r3, [pc, #128]	; (8005db4 <HAL_RCC_ClockConfig+0x1b8>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f003 030f 	and.w	r3, r3, #15
 8005d3a:	683a      	ldr	r2, [r7, #0]
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d001      	beq.n	8005d44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	e032      	b.n	8005daa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 0304 	and.w	r3, r3, #4
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d008      	beq.n	8005d62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d50:	4b19      	ldr	r3, [pc, #100]	; (8005db8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	4916      	ldr	r1, [pc, #88]	; (8005db8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f003 0308 	and.w	r3, r3, #8
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d009      	beq.n	8005d82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d6e:	4b12      	ldr	r3, [pc, #72]	; (8005db8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	691b      	ldr	r3, [r3, #16]
 8005d7a:	00db      	lsls	r3, r3, #3
 8005d7c:	490e      	ldr	r1, [pc, #56]	; (8005db8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005d82:	f000 f855 	bl	8005e30 <HAL_RCC_GetSysClockFreq>
 8005d86:	4602      	mov	r2, r0
 8005d88:	4b0b      	ldr	r3, [pc, #44]	; (8005db8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	091b      	lsrs	r3, r3, #4
 8005d8e:	f003 030f 	and.w	r3, r3, #15
 8005d92:	490a      	ldr	r1, [pc, #40]	; (8005dbc <HAL_RCC_ClockConfig+0x1c0>)
 8005d94:	5ccb      	ldrb	r3, [r1, r3]
 8005d96:	fa22 f303 	lsr.w	r3, r2, r3
 8005d9a:	4a09      	ldr	r2, [pc, #36]	; (8005dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005d9e:	4b09      	ldr	r3, [pc, #36]	; (8005dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4618      	mov	r0, r3
 8005da4:	f7ff fbf6 	bl	8005594 <HAL_InitTick>

  return HAL_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3710      	adds	r7, #16
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
 8005db2:	bf00      	nop
 8005db4:	40023c00 	.word	0x40023c00
 8005db8:	40023800 	.word	0x40023800
 8005dbc:	08008760 	.word	0x08008760
 8005dc0:	20000040 	.word	0x20000040
 8005dc4:	20000044 	.word	0x20000044

08005dc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005dcc:	4b03      	ldr	r3, [pc, #12]	; (8005ddc <HAL_RCC_GetHCLKFreq+0x14>)
 8005dce:	681b      	ldr	r3, [r3, #0]
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr
 8005dda:	bf00      	nop
 8005ddc:	20000040 	.word	0x20000040

08005de0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005de4:	f7ff fff0 	bl	8005dc8 <HAL_RCC_GetHCLKFreq>
 8005de8:	4602      	mov	r2, r0
 8005dea:	4b05      	ldr	r3, [pc, #20]	; (8005e00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	0a9b      	lsrs	r3, r3, #10
 8005df0:	f003 0307 	and.w	r3, r3, #7
 8005df4:	4903      	ldr	r1, [pc, #12]	; (8005e04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005df6:	5ccb      	ldrb	r3, [r1, r3]
 8005df8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	40023800 	.word	0x40023800
 8005e04:	08008770 	.word	0x08008770

08005e08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005e0c:	f7ff ffdc 	bl	8005dc8 <HAL_RCC_GetHCLKFreq>
 8005e10:	4602      	mov	r2, r0
 8005e12:	4b05      	ldr	r3, [pc, #20]	; (8005e28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	0b5b      	lsrs	r3, r3, #13
 8005e18:	f003 0307 	and.w	r3, r3, #7
 8005e1c:	4903      	ldr	r1, [pc, #12]	; (8005e2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e1e:	5ccb      	ldrb	r3, [r1, r3]
 8005e20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	bd80      	pop	{r7, pc}
 8005e28:	40023800 	.word	0x40023800
 8005e2c:	08008770 	.word	0x08008770

08005e30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e34:	b0ae      	sub	sp, #184	; 0xb8
 8005e36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8005e44:	2300      	movs	r3, #0
 8005e46:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8005e50:	2300      	movs	r3, #0
 8005e52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e56:	4bcb      	ldr	r3, [pc, #812]	; (8006184 <HAL_RCC_GetSysClockFreq+0x354>)
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	f003 030c 	and.w	r3, r3, #12
 8005e5e:	2b0c      	cmp	r3, #12
 8005e60:	f200 8206 	bhi.w	8006270 <HAL_RCC_GetSysClockFreq+0x440>
 8005e64:	a201      	add	r2, pc, #4	; (adr r2, 8005e6c <HAL_RCC_GetSysClockFreq+0x3c>)
 8005e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e6a:	bf00      	nop
 8005e6c:	08005ea1 	.word	0x08005ea1
 8005e70:	08006271 	.word	0x08006271
 8005e74:	08006271 	.word	0x08006271
 8005e78:	08006271 	.word	0x08006271
 8005e7c:	08005ea9 	.word	0x08005ea9
 8005e80:	08006271 	.word	0x08006271
 8005e84:	08006271 	.word	0x08006271
 8005e88:	08006271 	.word	0x08006271
 8005e8c:	08005eb1 	.word	0x08005eb1
 8005e90:	08006271 	.word	0x08006271
 8005e94:	08006271 	.word	0x08006271
 8005e98:	08006271 	.word	0x08006271
 8005e9c:	080060a1 	.word	0x080060a1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ea0:	4bb9      	ldr	r3, [pc, #740]	; (8006188 <HAL_RCC_GetSysClockFreq+0x358>)
 8005ea2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8005ea6:	e1e7      	b.n	8006278 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ea8:	4bb8      	ldr	r3, [pc, #736]	; (800618c <HAL_RCC_GetSysClockFreq+0x35c>)
 8005eaa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005eae:	e1e3      	b.n	8006278 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005eb0:	4bb4      	ldr	r3, [pc, #720]	; (8006184 <HAL_RCC_GetSysClockFreq+0x354>)
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005eb8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005ebc:	4bb1      	ldr	r3, [pc, #708]	; (8006184 <HAL_RCC_GetSysClockFreq+0x354>)
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d071      	beq.n	8005fac <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ec8:	4bae      	ldr	r3, [pc, #696]	; (8006184 <HAL_RCC_GetSysClockFreq+0x354>)
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	099b      	lsrs	r3, r3, #6
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005ed4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8005ed8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005edc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ee0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005eea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005eee:	4622      	mov	r2, r4
 8005ef0:	462b      	mov	r3, r5
 8005ef2:	f04f 0000 	mov.w	r0, #0
 8005ef6:	f04f 0100 	mov.w	r1, #0
 8005efa:	0159      	lsls	r1, r3, #5
 8005efc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f00:	0150      	lsls	r0, r2, #5
 8005f02:	4602      	mov	r2, r0
 8005f04:	460b      	mov	r3, r1
 8005f06:	4621      	mov	r1, r4
 8005f08:	1a51      	subs	r1, r2, r1
 8005f0a:	6439      	str	r1, [r7, #64]	; 0x40
 8005f0c:	4629      	mov	r1, r5
 8005f0e:	eb63 0301 	sbc.w	r3, r3, r1
 8005f12:	647b      	str	r3, [r7, #68]	; 0x44
 8005f14:	f04f 0200 	mov.w	r2, #0
 8005f18:	f04f 0300 	mov.w	r3, #0
 8005f1c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8005f20:	4649      	mov	r1, r9
 8005f22:	018b      	lsls	r3, r1, #6
 8005f24:	4641      	mov	r1, r8
 8005f26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005f2a:	4641      	mov	r1, r8
 8005f2c:	018a      	lsls	r2, r1, #6
 8005f2e:	4641      	mov	r1, r8
 8005f30:	1a51      	subs	r1, r2, r1
 8005f32:	63b9      	str	r1, [r7, #56]	; 0x38
 8005f34:	4649      	mov	r1, r9
 8005f36:	eb63 0301 	sbc.w	r3, r3, r1
 8005f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f3c:	f04f 0200 	mov.w	r2, #0
 8005f40:	f04f 0300 	mov.w	r3, #0
 8005f44:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8005f48:	4649      	mov	r1, r9
 8005f4a:	00cb      	lsls	r3, r1, #3
 8005f4c:	4641      	mov	r1, r8
 8005f4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f52:	4641      	mov	r1, r8
 8005f54:	00ca      	lsls	r2, r1, #3
 8005f56:	4610      	mov	r0, r2
 8005f58:	4619      	mov	r1, r3
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	4622      	mov	r2, r4
 8005f5e:	189b      	adds	r3, r3, r2
 8005f60:	633b      	str	r3, [r7, #48]	; 0x30
 8005f62:	462b      	mov	r3, r5
 8005f64:	460a      	mov	r2, r1
 8005f66:	eb42 0303 	adc.w	r3, r2, r3
 8005f6a:	637b      	str	r3, [r7, #52]	; 0x34
 8005f6c:	f04f 0200 	mov.w	r2, #0
 8005f70:	f04f 0300 	mov.w	r3, #0
 8005f74:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005f78:	4629      	mov	r1, r5
 8005f7a:	024b      	lsls	r3, r1, #9
 8005f7c:	4621      	mov	r1, r4
 8005f7e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005f82:	4621      	mov	r1, r4
 8005f84:	024a      	lsls	r2, r1, #9
 8005f86:	4610      	mov	r0, r2
 8005f88:	4619      	mov	r1, r3
 8005f8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005f94:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005f98:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8005f9c:	f7fa f932 	bl	8000204 <__aeabi_uldivmod>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	460b      	mov	r3, r1
 8005fa4:	4613      	mov	r3, r2
 8005fa6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005faa:	e067      	b.n	800607c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fac:	4b75      	ldr	r3, [pc, #468]	; (8006184 <HAL_RCC_GetSysClockFreq+0x354>)
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	099b      	lsrs	r3, r3, #6
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005fb8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8005fbc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005fc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fc4:	67bb      	str	r3, [r7, #120]	; 0x78
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005fca:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8005fce:	4622      	mov	r2, r4
 8005fd0:	462b      	mov	r3, r5
 8005fd2:	f04f 0000 	mov.w	r0, #0
 8005fd6:	f04f 0100 	mov.w	r1, #0
 8005fda:	0159      	lsls	r1, r3, #5
 8005fdc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005fe0:	0150      	lsls	r0, r2, #5
 8005fe2:	4602      	mov	r2, r0
 8005fe4:	460b      	mov	r3, r1
 8005fe6:	4621      	mov	r1, r4
 8005fe8:	1a51      	subs	r1, r2, r1
 8005fea:	62b9      	str	r1, [r7, #40]	; 0x28
 8005fec:	4629      	mov	r1, r5
 8005fee:	eb63 0301 	sbc.w	r3, r3, r1
 8005ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ff4:	f04f 0200 	mov.w	r2, #0
 8005ff8:	f04f 0300 	mov.w	r3, #0
 8005ffc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8006000:	4649      	mov	r1, r9
 8006002:	018b      	lsls	r3, r1, #6
 8006004:	4641      	mov	r1, r8
 8006006:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800600a:	4641      	mov	r1, r8
 800600c:	018a      	lsls	r2, r1, #6
 800600e:	4641      	mov	r1, r8
 8006010:	ebb2 0a01 	subs.w	sl, r2, r1
 8006014:	4649      	mov	r1, r9
 8006016:	eb63 0b01 	sbc.w	fp, r3, r1
 800601a:	f04f 0200 	mov.w	r2, #0
 800601e:	f04f 0300 	mov.w	r3, #0
 8006022:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006026:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800602a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800602e:	4692      	mov	sl, r2
 8006030:	469b      	mov	fp, r3
 8006032:	4623      	mov	r3, r4
 8006034:	eb1a 0303 	adds.w	r3, sl, r3
 8006038:	623b      	str	r3, [r7, #32]
 800603a:	462b      	mov	r3, r5
 800603c:	eb4b 0303 	adc.w	r3, fp, r3
 8006040:	627b      	str	r3, [r7, #36]	; 0x24
 8006042:	f04f 0200 	mov.w	r2, #0
 8006046:	f04f 0300 	mov.w	r3, #0
 800604a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800604e:	4629      	mov	r1, r5
 8006050:	028b      	lsls	r3, r1, #10
 8006052:	4621      	mov	r1, r4
 8006054:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006058:	4621      	mov	r1, r4
 800605a:	028a      	lsls	r2, r1, #10
 800605c:	4610      	mov	r0, r2
 800605e:	4619      	mov	r1, r3
 8006060:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006064:	2200      	movs	r2, #0
 8006066:	673b      	str	r3, [r7, #112]	; 0x70
 8006068:	677a      	str	r2, [r7, #116]	; 0x74
 800606a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800606e:	f7fa f8c9 	bl	8000204 <__aeabi_uldivmod>
 8006072:	4602      	mov	r2, r0
 8006074:	460b      	mov	r3, r1
 8006076:	4613      	mov	r3, r2
 8006078:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800607c:	4b41      	ldr	r3, [pc, #260]	; (8006184 <HAL_RCC_GetSysClockFreq+0x354>)
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	0c1b      	lsrs	r3, r3, #16
 8006082:	f003 0303 	and.w	r3, r3, #3
 8006086:	3301      	adds	r3, #1
 8006088:	005b      	lsls	r3, r3, #1
 800608a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800608e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006092:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006096:	fbb2 f3f3 	udiv	r3, r2, r3
 800609a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800609e:	e0eb      	b.n	8006278 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80060a0:	4b38      	ldr	r3, [pc, #224]	; (8006184 <HAL_RCC_GetSysClockFreq+0x354>)
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80060ac:	4b35      	ldr	r3, [pc, #212]	; (8006184 <HAL_RCC_GetSysClockFreq+0x354>)
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d06b      	beq.n	8006190 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060b8:	4b32      	ldr	r3, [pc, #200]	; (8006184 <HAL_RCC_GetSysClockFreq+0x354>)
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	099b      	lsrs	r3, r3, #6
 80060be:	2200      	movs	r2, #0
 80060c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80060c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80060c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80060c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060ca:	663b      	str	r3, [r7, #96]	; 0x60
 80060cc:	2300      	movs	r3, #0
 80060ce:	667b      	str	r3, [r7, #100]	; 0x64
 80060d0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80060d4:	4622      	mov	r2, r4
 80060d6:	462b      	mov	r3, r5
 80060d8:	f04f 0000 	mov.w	r0, #0
 80060dc:	f04f 0100 	mov.w	r1, #0
 80060e0:	0159      	lsls	r1, r3, #5
 80060e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80060e6:	0150      	lsls	r0, r2, #5
 80060e8:	4602      	mov	r2, r0
 80060ea:	460b      	mov	r3, r1
 80060ec:	4621      	mov	r1, r4
 80060ee:	1a51      	subs	r1, r2, r1
 80060f0:	61b9      	str	r1, [r7, #24]
 80060f2:	4629      	mov	r1, r5
 80060f4:	eb63 0301 	sbc.w	r3, r3, r1
 80060f8:	61fb      	str	r3, [r7, #28]
 80060fa:	f04f 0200 	mov.w	r2, #0
 80060fe:	f04f 0300 	mov.w	r3, #0
 8006102:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8006106:	4659      	mov	r1, fp
 8006108:	018b      	lsls	r3, r1, #6
 800610a:	4651      	mov	r1, sl
 800610c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006110:	4651      	mov	r1, sl
 8006112:	018a      	lsls	r2, r1, #6
 8006114:	4651      	mov	r1, sl
 8006116:	ebb2 0801 	subs.w	r8, r2, r1
 800611a:	4659      	mov	r1, fp
 800611c:	eb63 0901 	sbc.w	r9, r3, r1
 8006120:	f04f 0200 	mov.w	r2, #0
 8006124:	f04f 0300 	mov.w	r3, #0
 8006128:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800612c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006130:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006134:	4690      	mov	r8, r2
 8006136:	4699      	mov	r9, r3
 8006138:	4623      	mov	r3, r4
 800613a:	eb18 0303 	adds.w	r3, r8, r3
 800613e:	613b      	str	r3, [r7, #16]
 8006140:	462b      	mov	r3, r5
 8006142:	eb49 0303 	adc.w	r3, r9, r3
 8006146:	617b      	str	r3, [r7, #20]
 8006148:	f04f 0200 	mov.w	r2, #0
 800614c:	f04f 0300 	mov.w	r3, #0
 8006150:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8006154:	4629      	mov	r1, r5
 8006156:	024b      	lsls	r3, r1, #9
 8006158:	4621      	mov	r1, r4
 800615a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800615e:	4621      	mov	r1, r4
 8006160:	024a      	lsls	r2, r1, #9
 8006162:	4610      	mov	r0, r2
 8006164:	4619      	mov	r1, r3
 8006166:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800616a:	2200      	movs	r2, #0
 800616c:	65bb      	str	r3, [r7, #88]	; 0x58
 800616e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8006170:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006174:	f7fa f846 	bl	8000204 <__aeabi_uldivmod>
 8006178:	4602      	mov	r2, r0
 800617a:	460b      	mov	r3, r1
 800617c:	4613      	mov	r3, r2
 800617e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006182:	e065      	b.n	8006250 <HAL_RCC_GetSysClockFreq+0x420>
 8006184:	40023800 	.word	0x40023800
 8006188:	00f42400 	.word	0x00f42400
 800618c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006190:	4b3d      	ldr	r3, [pc, #244]	; (8006288 <HAL_RCC_GetSysClockFreq+0x458>)
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	099b      	lsrs	r3, r3, #6
 8006196:	2200      	movs	r2, #0
 8006198:	4618      	mov	r0, r3
 800619a:	4611      	mov	r1, r2
 800619c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80061a0:	653b      	str	r3, [r7, #80]	; 0x50
 80061a2:	2300      	movs	r3, #0
 80061a4:	657b      	str	r3, [r7, #84]	; 0x54
 80061a6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80061aa:	4642      	mov	r2, r8
 80061ac:	464b      	mov	r3, r9
 80061ae:	f04f 0000 	mov.w	r0, #0
 80061b2:	f04f 0100 	mov.w	r1, #0
 80061b6:	0159      	lsls	r1, r3, #5
 80061b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80061bc:	0150      	lsls	r0, r2, #5
 80061be:	4602      	mov	r2, r0
 80061c0:	460b      	mov	r3, r1
 80061c2:	4641      	mov	r1, r8
 80061c4:	1a51      	subs	r1, r2, r1
 80061c6:	60b9      	str	r1, [r7, #8]
 80061c8:	4649      	mov	r1, r9
 80061ca:	eb63 0301 	sbc.w	r3, r3, r1
 80061ce:	60fb      	str	r3, [r7, #12]
 80061d0:	f04f 0200 	mov.w	r2, #0
 80061d4:	f04f 0300 	mov.w	r3, #0
 80061d8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80061dc:	4659      	mov	r1, fp
 80061de:	018b      	lsls	r3, r1, #6
 80061e0:	4651      	mov	r1, sl
 80061e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80061e6:	4651      	mov	r1, sl
 80061e8:	018a      	lsls	r2, r1, #6
 80061ea:	4651      	mov	r1, sl
 80061ec:	1a54      	subs	r4, r2, r1
 80061ee:	4659      	mov	r1, fp
 80061f0:	eb63 0501 	sbc.w	r5, r3, r1
 80061f4:	f04f 0200 	mov.w	r2, #0
 80061f8:	f04f 0300 	mov.w	r3, #0
 80061fc:	00eb      	lsls	r3, r5, #3
 80061fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006202:	00e2      	lsls	r2, r4, #3
 8006204:	4614      	mov	r4, r2
 8006206:	461d      	mov	r5, r3
 8006208:	4643      	mov	r3, r8
 800620a:	18e3      	adds	r3, r4, r3
 800620c:	603b      	str	r3, [r7, #0]
 800620e:	464b      	mov	r3, r9
 8006210:	eb45 0303 	adc.w	r3, r5, r3
 8006214:	607b      	str	r3, [r7, #4]
 8006216:	f04f 0200 	mov.w	r2, #0
 800621a:	f04f 0300 	mov.w	r3, #0
 800621e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006222:	4629      	mov	r1, r5
 8006224:	028b      	lsls	r3, r1, #10
 8006226:	4621      	mov	r1, r4
 8006228:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800622c:	4621      	mov	r1, r4
 800622e:	028a      	lsls	r2, r1, #10
 8006230:	4610      	mov	r0, r2
 8006232:	4619      	mov	r1, r3
 8006234:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006238:	2200      	movs	r2, #0
 800623a:	64bb      	str	r3, [r7, #72]	; 0x48
 800623c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800623e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006242:	f7f9 ffdf 	bl	8000204 <__aeabi_uldivmod>
 8006246:	4602      	mov	r2, r0
 8006248:	460b      	mov	r3, r1
 800624a:	4613      	mov	r3, r2
 800624c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006250:	4b0d      	ldr	r3, [pc, #52]	; (8006288 <HAL_RCC_GetSysClockFreq+0x458>)
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	0f1b      	lsrs	r3, r3, #28
 8006256:	f003 0307 	and.w	r3, r3, #7
 800625a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800625e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006262:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006266:	fbb2 f3f3 	udiv	r3, r2, r3
 800626a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800626e:	e003      	b.n	8006278 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006270:	4b06      	ldr	r3, [pc, #24]	; (800628c <HAL_RCC_GetSysClockFreq+0x45c>)
 8006272:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006276:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006278:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800627c:	4618      	mov	r0, r3
 800627e:	37b8      	adds	r7, #184	; 0xb8
 8006280:	46bd      	mov	sp, r7
 8006282:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006286:	bf00      	nop
 8006288:	40023800 	.word	0x40023800
 800628c:	00f42400 	.word	0x00f42400

08006290 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b086      	sub	sp, #24
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d101      	bne.n	80062a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	e28d      	b.n	80067be <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f003 0301 	and.w	r3, r3, #1
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	f000 8083 	beq.w	80063b6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80062b0:	4b94      	ldr	r3, [pc, #592]	; (8006504 <HAL_RCC_OscConfig+0x274>)
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	f003 030c 	and.w	r3, r3, #12
 80062b8:	2b04      	cmp	r3, #4
 80062ba:	d019      	beq.n	80062f0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80062bc:	4b91      	ldr	r3, [pc, #580]	; (8006504 <HAL_RCC_OscConfig+0x274>)
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80062c4:	2b08      	cmp	r3, #8
 80062c6:	d106      	bne.n	80062d6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80062c8:	4b8e      	ldr	r3, [pc, #568]	; (8006504 <HAL_RCC_OscConfig+0x274>)
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062d4:	d00c      	beq.n	80062f0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80062d6:	4b8b      	ldr	r3, [pc, #556]	; (8006504 <HAL_RCC_OscConfig+0x274>)
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80062de:	2b0c      	cmp	r3, #12
 80062e0:	d112      	bne.n	8006308 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80062e2:	4b88      	ldr	r3, [pc, #544]	; (8006504 <HAL_RCC_OscConfig+0x274>)
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062ee:	d10b      	bne.n	8006308 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062f0:	4b84      	ldr	r3, [pc, #528]	; (8006504 <HAL_RCC_OscConfig+0x274>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d05b      	beq.n	80063b4 <HAL_RCC_OscConfig+0x124>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d157      	bne.n	80063b4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	e25a      	b.n	80067be <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006310:	d106      	bne.n	8006320 <HAL_RCC_OscConfig+0x90>
 8006312:	4b7c      	ldr	r3, [pc, #496]	; (8006504 <HAL_RCC_OscConfig+0x274>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a7b      	ldr	r2, [pc, #492]	; (8006504 <HAL_RCC_OscConfig+0x274>)
 8006318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800631c:	6013      	str	r3, [r2, #0]
 800631e:	e01d      	b.n	800635c <HAL_RCC_OscConfig+0xcc>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006328:	d10c      	bne.n	8006344 <HAL_RCC_OscConfig+0xb4>
 800632a:	4b76      	ldr	r3, [pc, #472]	; (8006504 <HAL_RCC_OscConfig+0x274>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a75      	ldr	r2, [pc, #468]	; (8006504 <HAL_RCC_OscConfig+0x274>)
 8006330:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006334:	6013      	str	r3, [r2, #0]
 8006336:	4b73      	ldr	r3, [pc, #460]	; (8006504 <HAL_RCC_OscConfig+0x274>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a72      	ldr	r2, [pc, #456]	; (8006504 <HAL_RCC_OscConfig+0x274>)
 800633c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006340:	6013      	str	r3, [r2, #0]
 8006342:	e00b      	b.n	800635c <HAL_RCC_OscConfig+0xcc>
 8006344:	4b6f      	ldr	r3, [pc, #444]	; (8006504 <HAL_RCC_OscConfig+0x274>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a6e      	ldr	r2, [pc, #440]	; (8006504 <HAL_RCC_OscConfig+0x274>)
 800634a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800634e:	6013      	str	r3, [r2, #0]
 8006350:	4b6c      	ldr	r3, [pc, #432]	; (8006504 <HAL_RCC_OscConfig+0x274>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a6b      	ldr	r2, [pc, #428]	; (8006504 <HAL_RCC_OscConfig+0x274>)
 8006356:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800635a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d013      	beq.n	800638c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006364:	f7ff f95a 	bl	800561c <HAL_GetTick>
 8006368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800636a:	e008      	b.n	800637e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800636c:	f7ff f956 	bl	800561c <HAL_GetTick>
 8006370:	4602      	mov	r2, r0
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	1ad3      	subs	r3, r2, r3
 8006376:	2b64      	cmp	r3, #100	; 0x64
 8006378:	d901      	bls.n	800637e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800637a:	2303      	movs	r3, #3
 800637c:	e21f      	b.n	80067be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800637e:	4b61      	ldr	r3, [pc, #388]	; (8006504 <HAL_RCC_OscConfig+0x274>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006386:	2b00      	cmp	r3, #0
 8006388:	d0f0      	beq.n	800636c <HAL_RCC_OscConfig+0xdc>
 800638a:	e014      	b.n	80063b6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800638c:	f7ff f946 	bl	800561c <HAL_GetTick>
 8006390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006392:	e008      	b.n	80063a6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006394:	f7ff f942 	bl	800561c <HAL_GetTick>
 8006398:	4602      	mov	r2, r0
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	1ad3      	subs	r3, r2, r3
 800639e:	2b64      	cmp	r3, #100	; 0x64
 80063a0:	d901      	bls.n	80063a6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80063a2:	2303      	movs	r3, #3
 80063a4:	e20b      	b.n	80067be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063a6:	4b57      	ldr	r3, [pc, #348]	; (8006504 <HAL_RCC_OscConfig+0x274>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d1f0      	bne.n	8006394 <HAL_RCC_OscConfig+0x104>
 80063b2:	e000      	b.n	80063b6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f003 0302 	and.w	r3, r3, #2
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d06f      	beq.n	80064a2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80063c2:	4b50      	ldr	r3, [pc, #320]	; (8006504 <HAL_RCC_OscConfig+0x274>)
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	f003 030c 	and.w	r3, r3, #12
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d017      	beq.n	80063fe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80063ce:	4b4d      	ldr	r3, [pc, #308]	; (8006504 <HAL_RCC_OscConfig+0x274>)
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80063d6:	2b08      	cmp	r3, #8
 80063d8:	d105      	bne.n	80063e6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80063da:	4b4a      	ldr	r3, [pc, #296]	; (8006504 <HAL_RCC_OscConfig+0x274>)
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d00b      	beq.n	80063fe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80063e6:	4b47      	ldr	r3, [pc, #284]	; (8006504 <HAL_RCC_OscConfig+0x274>)
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80063ee:	2b0c      	cmp	r3, #12
 80063f0:	d11c      	bne.n	800642c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80063f2:	4b44      	ldr	r3, [pc, #272]	; (8006504 <HAL_RCC_OscConfig+0x274>)
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d116      	bne.n	800642c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063fe:	4b41      	ldr	r3, [pc, #260]	; (8006504 <HAL_RCC_OscConfig+0x274>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f003 0302 	and.w	r3, r3, #2
 8006406:	2b00      	cmp	r3, #0
 8006408:	d005      	beq.n	8006416 <HAL_RCC_OscConfig+0x186>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	68db      	ldr	r3, [r3, #12]
 800640e:	2b01      	cmp	r3, #1
 8006410:	d001      	beq.n	8006416 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e1d3      	b.n	80067be <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006416:	4b3b      	ldr	r3, [pc, #236]	; (8006504 <HAL_RCC_OscConfig+0x274>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	691b      	ldr	r3, [r3, #16]
 8006422:	00db      	lsls	r3, r3, #3
 8006424:	4937      	ldr	r1, [pc, #220]	; (8006504 <HAL_RCC_OscConfig+0x274>)
 8006426:	4313      	orrs	r3, r2
 8006428:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800642a:	e03a      	b.n	80064a2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d020      	beq.n	8006476 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006434:	4b34      	ldr	r3, [pc, #208]	; (8006508 <HAL_RCC_OscConfig+0x278>)
 8006436:	2201      	movs	r2, #1
 8006438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800643a:	f7ff f8ef 	bl	800561c <HAL_GetTick>
 800643e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006440:	e008      	b.n	8006454 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006442:	f7ff f8eb 	bl	800561c <HAL_GetTick>
 8006446:	4602      	mov	r2, r0
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	1ad3      	subs	r3, r2, r3
 800644c:	2b02      	cmp	r3, #2
 800644e:	d901      	bls.n	8006454 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006450:	2303      	movs	r3, #3
 8006452:	e1b4      	b.n	80067be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006454:	4b2b      	ldr	r3, [pc, #172]	; (8006504 <HAL_RCC_OscConfig+0x274>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f003 0302 	and.w	r3, r3, #2
 800645c:	2b00      	cmp	r3, #0
 800645e:	d0f0      	beq.n	8006442 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006460:	4b28      	ldr	r3, [pc, #160]	; (8006504 <HAL_RCC_OscConfig+0x274>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	691b      	ldr	r3, [r3, #16]
 800646c:	00db      	lsls	r3, r3, #3
 800646e:	4925      	ldr	r1, [pc, #148]	; (8006504 <HAL_RCC_OscConfig+0x274>)
 8006470:	4313      	orrs	r3, r2
 8006472:	600b      	str	r3, [r1, #0]
 8006474:	e015      	b.n	80064a2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006476:	4b24      	ldr	r3, [pc, #144]	; (8006508 <HAL_RCC_OscConfig+0x278>)
 8006478:	2200      	movs	r2, #0
 800647a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800647c:	f7ff f8ce 	bl	800561c <HAL_GetTick>
 8006480:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006482:	e008      	b.n	8006496 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006484:	f7ff f8ca 	bl	800561c <HAL_GetTick>
 8006488:	4602      	mov	r2, r0
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	1ad3      	subs	r3, r2, r3
 800648e:	2b02      	cmp	r3, #2
 8006490:	d901      	bls.n	8006496 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006492:	2303      	movs	r3, #3
 8006494:	e193      	b.n	80067be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006496:	4b1b      	ldr	r3, [pc, #108]	; (8006504 <HAL_RCC_OscConfig+0x274>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 0302 	and.w	r3, r3, #2
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d1f0      	bne.n	8006484 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f003 0308 	and.w	r3, r3, #8
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d036      	beq.n	800651c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	695b      	ldr	r3, [r3, #20]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d016      	beq.n	80064e4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80064b6:	4b15      	ldr	r3, [pc, #84]	; (800650c <HAL_RCC_OscConfig+0x27c>)
 80064b8:	2201      	movs	r2, #1
 80064ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064bc:	f7ff f8ae 	bl	800561c <HAL_GetTick>
 80064c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064c2:	e008      	b.n	80064d6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064c4:	f7ff f8aa 	bl	800561c <HAL_GetTick>
 80064c8:	4602      	mov	r2, r0
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	1ad3      	subs	r3, r2, r3
 80064ce:	2b02      	cmp	r3, #2
 80064d0:	d901      	bls.n	80064d6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80064d2:	2303      	movs	r3, #3
 80064d4:	e173      	b.n	80067be <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064d6:	4b0b      	ldr	r3, [pc, #44]	; (8006504 <HAL_RCC_OscConfig+0x274>)
 80064d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064da:	f003 0302 	and.w	r3, r3, #2
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d0f0      	beq.n	80064c4 <HAL_RCC_OscConfig+0x234>
 80064e2:	e01b      	b.n	800651c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80064e4:	4b09      	ldr	r3, [pc, #36]	; (800650c <HAL_RCC_OscConfig+0x27c>)
 80064e6:	2200      	movs	r2, #0
 80064e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064ea:	f7ff f897 	bl	800561c <HAL_GetTick>
 80064ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064f0:	e00e      	b.n	8006510 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064f2:	f7ff f893 	bl	800561c <HAL_GetTick>
 80064f6:	4602      	mov	r2, r0
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	1ad3      	subs	r3, r2, r3
 80064fc:	2b02      	cmp	r3, #2
 80064fe:	d907      	bls.n	8006510 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006500:	2303      	movs	r3, #3
 8006502:	e15c      	b.n	80067be <HAL_RCC_OscConfig+0x52e>
 8006504:	40023800 	.word	0x40023800
 8006508:	42470000 	.word	0x42470000
 800650c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006510:	4b8a      	ldr	r3, [pc, #552]	; (800673c <HAL_RCC_OscConfig+0x4ac>)
 8006512:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006514:	f003 0302 	and.w	r3, r3, #2
 8006518:	2b00      	cmp	r3, #0
 800651a:	d1ea      	bne.n	80064f2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 0304 	and.w	r3, r3, #4
 8006524:	2b00      	cmp	r3, #0
 8006526:	f000 8097 	beq.w	8006658 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800652a:	2300      	movs	r3, #0
 800652c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800652e:	4b83      	ldr	r3, [pc, #524]	; (800673c <HAL_RCC_OscConfig+0x4ac>)
 8006530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006536:	2b00      	cmp	r3, #0
 8006538:	d10f      	bne.n	800655a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800653a:	2300      	movs	r3, #0
 800653c:	60bb      	str	r3, [r7, #8]
 800653e:	4b7f      	ldr	r3, [pc, #508]	; (800673c <HAL_RCC_OscConfig+0x4ac>)
 8006540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006542:	4a7e      	ldr	r2, [pc, #504]	; (800673c <HAL_RCC_OscConfig+0x4ac>)
 8006544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006548:	6413      	str	r3, [r2, #64]	; 0x40
 800654a:	4b7c      	ldr	r3, [pc, #496]	; (800673c <HAL_RCC_OscConfig+0x4ac>)
 800654c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800654e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006552:	60bb      	str	r3, [r7, #8]
 8006554:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006556:	2301      	movs	r3, #1
 8006558:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800655a:	4b79      	ldr	r3, [pc, #484]	; (8006740 <HAL_RCC_OscConfig+0x4b0>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006562:	2b00      	cmp	r3, #0
 8006564:	d118      	bne.n	8006598 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006566:	4b76      	ldr	r3, [pc, #472]	; (8006740 <HAL_RCC_OscConfig+0x4b0>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a75      	ldr	r2, [pc, #468]	; (8006740 <HAL_RCC_OscConfig+0x4b0>)
 800656c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006570:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006572:	f7ff f853 	bl	800561c <HAL_GetTick>
 8006576:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006578:	e008      	b.n	800658c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800657a:	f7ff f84f 	bl	800561c <HAL_GetTick>
 800657e:	4602      	mov	r2, r0
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	1ad3      	subs	r3, r2, r3
 8006584:	2b02      	cmp	r3, #2
 8006586:	d901      	bls.n	800658c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006588:	2303      	movs	r3, #3
 800658a:	e118      	b.n	80067be <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800658c:	4b6c      	ldr	r3, [pc, #432]	; (8006740 <HAL_RCC_OscConfig+0x4b0>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006594:	2b00      	cmp	r3, #0
 8006596:	d0f0      	beq.n	800657a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	2b01      	cmp	r3, #1
 800659e:	d106      	bne.n	80065ae <HAL_RCC_OscConfig+0x31e>
 80065a0:	4b66      	ldr	r3, [pc, #408]	; (800673c <HAL_RCC_OscConfig+0x4ac>)
 80065a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065a4:	4a65      	ldr	r2, [pc, #404]	; (800673c <HAL_RCC_OscConfig+0x4ac>)
 80065a6:	f043 0301 	orr.w	r3, r3, #1
 80065aa:	6713      	str	r3, [r2, #112]	; 0x70
 80065ac:	e01c      	b.n	80065e8 <HAL_RCC_OscConfig+0x358>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	2b05      	cmp	r3, #5
 80065b4:	d10c      	bne.n	80065d0 <HAL_RCC_OscConfig+0x340>
 80065b6:	4b61      	ldr	r3, [pc, #388]	; (800673c <HAL_RCC_OscConfig+0x4ac>)
 80065b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ba:	4a60      	ldr	r2, [pc, #384]	; (800673c <HAL_RCC_OscConfig+0x4ac>)
 80065bc:	f043 0304 	orr.w	r3, r3, #4
 80065c0:	6713      	str	r3, [r2, #112]	; 0x70
 80065c2:	4b5e      	ldr	r3, [pc, #376]	; (800673c <HAL_RCC_OscConfig+0x4ac>)
 80065c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065c6:	4a5d      	ldr	r2, [pc, #372]	; (800673c <HAL_RCC_OscConfig+0x4ac>)
 80065c8:	f043 0301 	orr.w	r3, r3, #1
 80065cc:	6713      	str	r3, [r2, #112]	; 0x70
 80065ce:	e00b      	b.n	80065e8 <HAL_RCC_OscConfig+0x358>
 80065d0:	4b5a      	ldr	r3, [pc, #360]	; (800673c <HAL_RCC_OscConfig+0x4ac>)
 80065d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065d4:	4a59      	ldr	r2, [pc, #356]	; (800673c <HAL_RCC_OscConfig+0x4ac>)
 80065d6:	f023 0301 	bic.w	r3, r3, #1
 80065da:	6713      	str	r3, [r2, #112]	; 0x70
 80065dc:	4b57      	ldr	r3, [pc, #348]	; (800673c <HAL_RCC_OscConfig+0x4ac>)
 80065de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065e0:	4a56      	ldr	r2, [pc, #344]	; (800673c <HAL_RCC_OscConfig+0x4ac>)
 80065e2:	f023 0304 	bic.w	r3, r3, #4
 80065e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d015      	beq.n	800661c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065f0:	f7ff f814 	bl	800561c <HAL_GetTick>
 80065f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065f6:	e00a      	b.n	800660e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065f8:	f7ff f810 	bl	800561c <HAL_GetTick>
 80065fc:	4602      	mov	r2, r0
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	1ad3      	subs	r3, r2, r3
 8006602:	f241 3288 	movw	r2, #5000	; 0x1388
 8006606:	4293      	cmp	r3, r2
 8006608:	d901      	bls.n	800660e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800660a:	2303      	movs	r3, #3
 800660c:	e0d7      	b.n	80067be <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800660e:	4b4b      	ldr	r3, [pc, #300]	; (800673c <HAL_RCC_OscConfig+0x4ac>)
 8006610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006612:	f003 0302 	and.w	r3, r3, #2
 8006616:	2b00      	cmp	r3, #0
 8006618:	d0ee      	beq.n	80065f8 <HAL_RCC_OscConfig+0x368>
 800661a:	e014      	b.n	8006646 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800661c:	f7fe fffe 	bl	800561c <HAL_GetTick>
 8006620:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006622:	e00a      	b.n	800663a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006624:	f7fe fffa 	bl	800561c <HAL_GetTick>
 8006628:	4602      	mov	r2, r0
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	1ad3      	subs	r3, r2, r3
 800662e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006632:	4293      	cmp	r3, r2
 8006634:	d901      	bls.n	800663a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006636:	2303      	movs	r3, #3
 8006638:	e0c1      	b.n	80067be <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800663a:	4b40      	ldr	r3, [pc, #256]	; (800673c <HAL_RCC_OscConfig+0x4ac>)
 800663c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800663e:	f003 0302 	and.w	r3, r3, #2
 8006642:	2b00      	cmp	r3, #0
 8006644:	d1ee      	bne.n	8006624 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006646:	7dfb      	ldrb	r3, [r7, #23]
 8006648:	2b01      	cmp	r3, #1
 800664a:	d105      	bne.n	8006658 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800664c:	4b3b      	ldr	r3, [pc, #236]	; (800673c <HAL_RCC_OscConfig+0x4ac>)
 800664e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006650:	4a3a      	ldr	r2, [pc, #232]	; (800673c <HAL_RCC_OscConfig+0x4ac>)
 8006652:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006656:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	699b      	ldr	r3, [r3, #24]
 800665c:	2b00      	cmp	r3, #0
 800665e:	f000 80ad 	beq.w	80067bc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006662:	4b36      	ldr	r3, [pc, #216]	; (800673c <HAL_RCC_OscConfig+0x4ac>)
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	f003 030c 	and.w	r3, r3, #12
 800666a:	2b08      	cmp	r3, #8
 800666c:	d060      	beq.n	8006730 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	699b      	ldr	r3, [r3, #24]
 8006672:	2b02      	cmp	r3, #2
 8006674:	d145      	bne.n	8006702 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006676:	4b33      	ldr	r3, [pc, #204]	; (8006744 <HAL_RCC_OscConfig+0x4b4>)
 8006678:	2200      	movs	r2, #0
 800667a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800667c:	f7fe ffce 	bl	800561c <HAL_GetTick>
 8006680:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006682:	e008      	b.n	8006696 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006684:	f7fe ffca 	bl	800561c <HAL_GetTick>
 8006688:	4602      	mov	r2, r0
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	1ad3      	subs	r3, r2, r3
 800668e:	2b02      	cmp	r3, #2
 8006690:	d901      	bls.n	8006696 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006692:	2303      	movs	r3, #3
 8006694:	e093      	b.n	80067be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006696:	4b29      	ldr	r3, [pc, #164]	; (800673c <HAL_RCC_OscConfig+0x4ac>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d1f0      	bne.n	8006684 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	69da      	ldr	r2, [r3, #28]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6a1b      	ldr	r3, [r3, #32]
 80066aa:	431a      	orrs	r2, r3
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b0:	019b      	lsls	r3, r3, #6
 80066b2:	431a      	orrs	r2, r3
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066b8:	085b      	lsrs	r3, r3, #1
 80066ba:	3b01      	subs	r3, #1
 80066bc:	041b      	lsls	r3, r3, #16
 80066be:	431a      	orrs	r2, r3
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c4:	061b      	lsls	r3, r3, #24
 80066c6:	431a      	orrs	r2, r3
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066cc:	071b      	lsls	r3, r3, #28
 80066ce:	491b      	ldr	r1, [pc, #108]	; (800673c <HAL_RCC_OscConfig+0x4ac>)
 80066d0:	4313      	orrs	r3, r2
 80066d2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80066d4:	4b1b      	ldr	r3, [pc, #108]	; (8006744 <HAL_RCC_OscConfig+0x4b4>)
 80066d6:	2201      	movs	r2, #1
 80066d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066da:	f7fe ff9f 	bl	800561c <HAL_GetTick>
 80066de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066e0:	e008      	b.n	80066f4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066e2:	f7fe ff9b 	bl	800561c <HAL_GetTick>
 80066e6:	4602      	mov	r2, r0
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	1ad3      	subs	r3, r2, r3
 80066ec:	2b02      	cmp	r3, #2
 80066ee:	d901      	bls.n	80066f4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80066f0:	2303      	movs	r3, #3
 80066f2:	e064      	b.n	80067be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066f4:	4b11      	ldr	r3, [pc, #68]	; (800673c <HAL_RCC_OscConfig+0x4ac>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d0f0      	beq.n	80066e2 <HAL_RCC_OscConfig+0x452>
 8006700:	e05c      	b.n	80067bc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006702:	4b10      	ldr	r3, [pc, #64]	; (8006744 <HAL_RCC_OscConfig+0x4b4>)
 8006704:	2200      	movs	r2, #0
 8006706:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006708:	f7fe ff88 	bl	800561c <HAL_GetTick>
 800670c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800670e:	e008      	b.n	8006722 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006710:	f7fe ff84 	bl	800561c <HAL_GetTick>
 8006714:	4602      	mov	r2, r0
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	1ad3      	subs	r3, r2, r3
 800671a:	2b02      	cmp	r3, #2
 800671c:	d901      	bls.n	8006722 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800671e:	2303      	movs	r3, #3
 8006720:	e04d      	b.n	80067be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006722:	4b06      	ldr	r3, [pc, #24]	; (800673c <HAL_RCC_OscConfig+0x4ac>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800672a:	2b00      	cmp	r3, #0
 800672c:	d1f0      	bne.n	8006710 <HAL_RCC_OscConfig+0x480>
 800672e:	e045      	b.n	80067bc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	699b      	ldr	r3, [r3, #24]
 8006734:	2b01      	cmp	r3, #1
 8006736:	d107      	bne.n	8006748 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	e040      	b.n	80067be <HAL_RCC_OscConfig+0x52e>
 800673c:	40023800 	.word	0x40023800
 8006740:	40007000 	.word	0x40007000
 8006744:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006748:	4b1f      	ldr	r3, [pc, #124]	; (80067c8 <HAL_RCC_OscConfig+0x538>)
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	699b      	ldr	r3, [r3, #24]
 8006752:	2b01      	cmp	r3, #1
 8006754:	d030      	beq.n	80067b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006760:	429a      	cmp	r2, r3
 8006762:	d129      	bne.n	80067b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800676e:	429a      	cmp	r2, r3
 8006770:	d122      	bne.n	80067b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006772:	68fa      	ldr	r2, [r7, #12]
 8006774:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006778:	4013      	ands	r3, r2
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800677e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006780:	4293      	cmp	r3, r2
 8006782:	d119      	bne.n	80067b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800678e:	085b      	lsrs	r3, r3, #1
 8006790:	3b01      	subs	r3, #1
 8006792:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006794:	429a      	cmp	r2, r3
 8006796:	d10f      	bne.n	80067b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d107      	bne.n	80067b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067b2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d001      	beq.n	80067bc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	e000      	b.n	80067be <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80067bc:	2300      	movs	r3, #0
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3718      	adds	r7, #24
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	bf00      	nop
 80067c8:	40023800 	.word	0x40023800

080067cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b082      	sub	sp, #8
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d101      	bne.n	80067de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80067da:	2301      	movs	r3, #1
 80067dc:	e041      	b.n	8006862 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d106      	bne.n	80067f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f7fe fbaa 	bl	8004f4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2202      	movs	r2, #2
 80067fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681a      	ldr	r2, [r3, #0]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	3304      	adds	r3, #4
 8006808:	4619      	mov	r1, r3
 800680a:	4610      	mov	r0, r2
 800680c:	f000 f82e 	bl	800686c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2201      	movs	r2, #1
 800681c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2201      	movs	r2, #1
 8006824:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2201      	movs	r2, #1
 800682c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2201      	movs	r2, #1
 8006834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2201      	movs	r2, #1
 800683c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2201      	movs	r2, #1
 8006844:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2201      	movs	r2, #1
 800684c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2201      	movs	r2, #1
 8006854:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2201      	movs	r2, #1
 800685c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	3708      	adds	r7, #8
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
	...

0800686c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800686c:	b480      	push	{r7}
 800686e:	b085      	sub	sp, #20
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	4a40      	ldr	r2, [pc, #256]	; (8006980 <TIM_Base_SetConfig+0x114>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d013      	beq.n	80068ac <TIM_Base_SetConfig+0x40>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800688a:	d00f      	beq.n	80068ac <TIM_Base_SetConfig+0x40>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	4a3d      	ldr	r2, [pc, #244]	; (8006984 <TIM_Base_SetConfig+0x118>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d00b      	beq.n	80068ac <TIM_Base_SetConfig+0x40>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	4a3c      	ldr	r2, [pc, #240]	; (8006988 <TIM_Base_SetConfig+0x11c>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d007      	beq.n	80068ac <TIM_Base_SetConfig+0x40>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	4a3b      	ldr	r2, [pc, #236]	; (800698c <TIM_Base_SetConfig+0x120>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d003      	beq.n	80068ac <TIM_Base_SetConfig+0x40>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	4a3a      	ldr	r2, [pc, #232]	; (8006990 <TIM_Base_SetConfig+0x124>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d108      	bne.n	80068be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	68fa      	ldr	r2, [r7, #12]
 80068ba:	4313      	orrs	r3, r2
 80068bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	4a2f      	ldr	r2, [pc, #188]	; (8006980 <TIM_Base_SetConfig+0x114>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d02b      	beq.n	800691e <TIM_Base_SetConfig+0xb2>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068cc:	d027      	beq.n	800691e <TIM_Base_SetConfig+0xb2>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	4a2c      	ldr	r2, [pc, #176]	; (8006984 <TIM_Base_SetConfig+0x118>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d023      	beq.n	800691e <TIM_Base_SetConfig+0xb2>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	4a2b      	ldr	r2, [pc, #172]	; (8006988 <TIM_Base_SetConfig+0x11c>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d01f      	beq.n	800691e <TIM_Base_SetConfig+0xb2>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	4a2a      	ldr	r2, [pc, #168]	; (800698c <TIM_Base_SetConfig+0x120>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d01b      	beq.n	800691e <TIM_Base_SetConfig+0xb2>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	4a29      	ldr	r2, [pc, #164]	; (8006990 <TIM_Base_SetConfig+0x124>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d017      	beq.n	800691e <TIM_Base_SetConfig+0xb2>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	4a28      	ldr	r2, [pc, #160]	; (8006994 <TIM_Base_SetConfig+0x128>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d013      	beq.n	800691e <TIM_Base_SetConfig+0xb2>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	4a27      	ldr	r2, [pc, #156]	; (8006998 <TIM_Base_SetConfig+0x12c>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d00f      	beq.n	800691e <TIM_Base_SetConfig+0xb2>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	4a26      	ldr	r2, [pc, #152]	; (800699c <TIM_Base_SetConfig+0x130>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d00b      	beq.n	800691e <TIM_Base_SetConfig+0xb2>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	4a25      	ldr	r2, [pc, #148]	; (80069a0 <TIM_Base_SetConfig+0x134>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d007      	beq.n	800691e <TIM_Base_SetConfig+0xb2>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	4a24      	ldr	r2, [pc, #144]	; (80069a4 <TIM_Base_SetConfig+0x138>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d003      	beq.n	800691e <TIM_Base_SetConfig+0xb2>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	4a23      	ldr	r2, [pc, #140]	; (80069a8 <TIM_Base_SetConfig+0x13c>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d108      	bne.n	8006930 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006924:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	68db      	ldr	r3, [r3, #12]
 800692a:	68fa      	ldr	r2, [r7, #12]
 800692c:	4313      	orrs	r3, r2
 800692e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	695b      	ldr	r3, [r3, #20]
 800693a:	4313      	orrs	r3, r2
 800693c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	68fa      	ldr	r2, [r7, #12]
 8006942:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	689a      	ldr	r2, [r3, #8]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	4a0a      	ldr	r2, [pc, #40]	; (8006980 <TIM_Base_SetConfig+0x114>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d003      	beq.n	8006964 <TIM_Base_SetConfig+0xf8>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	4a0c      	ldr	r2, [pc, #48]	; (8006990 <TIM_Base_SetConfig+0x124>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d103      	bne.n	800696c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	691a      	ldr	r2, [r3, #16]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2201      	movs	r2, #1
 8006970:	615a      	str	r2, [r3, #20]
}
 8006972:	bf00      	nop
 8006974:	3714      	adds	r7, #20
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr
 800697e:	bf00      	nop
 8006980:	40010000 	.word	0x40010000
 8006984:	40000400 	.word	0x40000400
 8006988:	40000800 	.word	0x40000800
 800698c:	40000c00 	.word	0x40000c00
 8006990:	40010400 	.word	0x40010400
 8006994:	40014000 	.word	0x40014000
 8006998:	40014400 	.word	0x40014400
 800699c:	40014800 	.word	0x40014800
 80069a0:	40001800 	.word	0x40001800
 80069a4:	40001c00 	.word	0x40001c00
 80069a8:	40002000 	.word	0x40002000

080069ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b085      	sub	sp, #20
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d101      	bne.n	80069c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80069c0:	2302      	movs	r3, #2
 80069c2:	e05a      	b.n	8006a7a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2201      	movs	r2, #1
 80069c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2202      	movs	r2, #2
 80069d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	68fa      	ldr	r2, [r7, #12]
 80069f2:	4313      	orrs	r3, r2
 80069f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	68fa      	ldr	r2, [r7, #12]
 80069fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a21      	ldr	r2, [pc, #132]	; (8006a88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d022      	beq.n	8006a4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a10:	d01d      	beq.n	8006a4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a1d      	ldr	r2, [pc, #116]	; (8006a8c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d018      	beq.n	8006a4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a1b      	ldr	r2, [pc, #108]	; (8006a90 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d013      	beq.n	8006a4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a1a      	ldr	r2, [pc, #104]	; (8006a94 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d00e      	beq.n	8006a4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a18      	ldr	r2, [pc, #96]	; (8006a98 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d009      	beq.n	8006a4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a17      	ldr	r2, [pc, #92]	; (8006a9c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d004      	beq.n	8006a4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a15      	ldr	r2, [pc, #84]	; (8006aa0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d10c      	bne.n	8006a68 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	68ba      	ldr	r2, [r7, #8]
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	68ba      	ldr	r2, [r7, #8]
 8006a66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a78:	2300      	movs	r3, #0
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3714      	adds	r7, #20
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr
 8006a86:	bf00      	nop
 8006a88:	40010000 	.word	0x40010000
 8006a8c:	40000400 	.word	0x40000400
 8006a90:	40000800 	.word	0x40000800
 8006a94:	40000c00 	.word	0x40000c00
 8006a98:	40010400 	.word	0x40010400
 8006a9c:	40014000 	.word	0x40014000
 8006aa0:	40001800 	.word	0x40001800

08006aa4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b082      	sub	sp, #8
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d101      	bne.n	8006ab6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e03f      	b.n	8006b36 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d106      	bne.n	8006ad0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f7fe fa8a 	bl	8004fe4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2224      	movs	r2, #36	; 0x24
 8006ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	68da      	ldr	r2, [r3, #12]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ae6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f000 f829 	bl	8006b40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	691a      	ldr	r2, [r3, #16]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006afc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	695a      	ldr	r2, [r3, #20]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	68da      	ldr	r2, [r3, #12]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2220      	movs	r2, #32
 8006b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2220      	movs	r2, #32
 8006b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006b34:	2300      	movs	r3, #0
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3708      	adds	r7, #8
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}
	...

08006b40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b44:	b0c0      	sub	sp, #256	; 0x100
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	691b      	ldr	r3, [r3, #16]
 8006b54:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b5c:	68d9      	ldr	r1, [r3, #12]
 8006b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	ea40 0301 	orr.w	r3, r0, r1
 8006b68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b6e:	689a      	ldr	r2, [r3, #8]
 8006b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b74:	691b      	ldr	r3, [r3, #16]
 8006b76:	431a      	orrs	r2, r3
 8006b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b7c:	695b      	ldr	r3, [r3, #20]
 8006b7e:	431a      	orrs	r2, r3
 8006b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b84:	69db      	ldr	r3, [r3, #28]
 8006b86:	4313      	orrs	r3, r2
 8006b88:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	68db      	ldr	r3, [r3, #12]
 8006b94:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006b98:	f021 010c 	bic.w	r1, r1, #12
 8006b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006ba6:	430b      	orrs	r3, r1
 8006ba8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	695b      	ldr	r3, [r3, #20]
 8006bb2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bba:	6999      	ldr	r1, [r3, #24]
 8006bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	ea40 0301 	orr.w	r3, r0, r1
 8006bc6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bcc:	681a      	ldr	r2, [r3, #0]
 8006bce:	4b8f      	ldr	r3, [pc, #572]	; (8006e0c <UART_SetConfig+0x2cc>)
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d005      	beq.n	8006be0 <UART_SetConfig+0xa0>
 8006bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	4b8d      	ldr	r3, [pc, #564]	; (8006e10 <UART_SetConfig+0x2d0>)
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d104      	bne.n	8006bea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006be0:	f7ff f912 	bl	8005e08 <HAL_RCC_GetPCLK2Freq>
 8006be4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006be8:	e003      	b.n	8006bf2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006bea:	f7ff f8f9 	bl	8005de0 <HAL_RCC_GetPCLK1Freq>
 8006bee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bf6:	69db      	ldr	r3, [r3, #28]
 8006bf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bfc:	f040 810c 	bne.w	8006e18 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006c00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c04:	2200      	movs	r2, #0
 8006c06:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006c0a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006c0e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006c12:	4622      	mov	r2, r4
 8006c14:	462b      	mov	r3, r5
 8006c16:	1891      	adds	r1, r2, r2
 8006c18:	65b9      	str	r1, [r7, #88]	; 0x58
 8006c1a:	415b      	adcs	r3, r3
 8006c1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006c22:	4621      	mov	r1, r4
 8006c24:	eb12 0801 	adds.w	r8, r2, r1
 8006c28:	4629      	mov	r1, r5
 8006c2a:	eb43 0901 	adc.w	r9, r3, r1
 8006c2e:	f04f 0200 	mov.w	r2, #0
 8006c32:	f04f 0300 	mov.w	r3, #0
 8006c36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006c3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006c3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006c42:	4690      	mov	r8, r2
 8006c44:	4699      	mov	r9, r3
 8006c46:	4623      	mov	r3, r4
 8006c48:	eb18 0303 	adds.w	r3, r8, r3
 8006c4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006c50:	462b      	mov	r3, r5
 8006c52:	eb49 0303 	adc.w	r3, r9, r3
 8006c56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	2200      	movs	r2, #0
 8006c62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006c66:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006c6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006c6e:	460b      	mov	r3, r1
 8006c70:	18db      	adds	r3, r3, r3
 8006c72:	653b      	str	r3, [r7, #80]	; 0x50
 8006c74:	4613      	mov	r3, r2
 8006c76:	eb42 0303 	adc.w	r3, r2, r3
 8006c7a:	657b      	str	r3, [r7, #84]	; 0x54
 8006c7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006c80:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006c84:	f7f9 fabe 	bl	8000204 <__aeabi_uldivmod>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	460b      	mov	r3, r1
 8006c8c:	4b61      	ldr	r3, [pc, #388]	; (8006e14 <UART_SetConfig+0x2d4>)
 8006c8e:	fba3 2302 	umull	r2, r3, r3, r2
 8006c92:	095b      	lsrs	r3, r3, #5
 8006c94:	011c      	lsls	r4, r3, #4
 8006c96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006ca0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006ca4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006ca8:	4642      	mov	r2, r8
 8006caa:	464b      	mov	r3, r9
 8006cac:	1891      	adds	r1, r2, r2
 8006cae:	64b9      	str	r1, [r7, #72]	; 0x48
 8006cb0:	415b      	adcs	r3, r3
 8006cb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006cb4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006cb8:	4641      	mov	r1, r8
 8006cba:	eb12 0a01 	adds.w	sl, r2, r1
 8006cbe:	4649      	mov	r1, r9
 8006cc0:	eb43 0b01 	adc.w	fp, r3, r1
 8006cc4:	f04f 0200 	mov.w	r2, #0
 8006cc8:	f04f 0300 	mov.w	r3, #0
 8006ccc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006cd0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006cd4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006cd8:	4692      	mov	sl, r2
 8006cda:	469b      	mov	fp, r3
 8006cdc:	4643      	mov	r3, r8
 8006cde:	eb1a 0303 	adds.w	r3, sl, r3
 8006ce2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006ce6:	464b      	mov	r3, r9
 8006ce8:	eb4b 0303 	adc.w	r3, fp, r3
 8006cec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006cfc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006d00:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006d04:	460b      	mov	r3, r1
 8006d06:	18db      	adds	r3, r3, r3
 8006d08:	643b      	str	r3, [r7, #64]	; 0x40
 8006d0a:	4613      	mov	r3, r2
 8006d0c:	eb42 0303 	adc.w	r3, r2, r3
 8006d10:	647b      	str	r3, [r7, #68]	; 0x44
 8006d12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006d16:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006d1a:	f7f9 fa73 	bl	8000204 <__aeabi_uldivmod>
 8006d1e:	4602      	mov	r2, r0
 8006d20:	460b      	mov	r3, r1
 8006d22:	4611      	mov	r1, r2
 8006d24:	4b3b      	ldr	r3, [pc, #236]	; (8006e14 <UART_SetConfig+0x2d4>)
 8006d26:	fba3 2301 	umull	r2, r3, r3, r1
 8006d2a:	095b      	lsrs	r3, r3, #5
 8006d2c:	2264      	movs	r2, #100	; 0x64
 8006d2e:	fb02 f303 	mul.w	r3, r2, r3
 8006d32:	1acb      	subs	r3, r1, r3
 8006d34:	00db      	lsls	r3, r3, #3
 8006d36:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006d3a:	4b36      	ldr	r3, [pc, #216]	; (8006e14 <UART_SetConfig+0x2d4>)
 8006d3c:	fba3 2302 	umull	r2, r3, r3, r2
 8006d40:	095b      	lsrs	r3, r3, #5
 8006d42:	005b      	lsls	r3, r3, #1
 8006d44:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006d48:	441c      	add	r4, r3
 8006d4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006d54:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006d58:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006d5c:	4642      	mov	r2, r8
 8006d5e:	464b      	mov	r3, r9
 8006d60:	1891      	adds	r1, r2, r2
 8006d62:	63b9      	str	r1, [r7, #56]	; 0x38
 8006d64:	415b      	adcs	r3, r3
 8006d66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006d6c:	4641      	mov	r1, r8
 8006d6e:	1851      	adds	r1, r2, r1
 8006d70:	6339      	str	r1, [r7, #48]	; 0x30
 8006d72:	4649      	mov	r1, r9
 8006d74:	414b      	adcs	r3, r1
 8006d76:	637b      	str	r3, [r7, #52]	; 0x34
 8006d78:	f04f 0200 	mov.w	r2, #0
 8006d7c:	f04f 0300 	mov.w	r3, #0
 8006d80:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006d84:	4659      	mov	r1, fp
 8006d86:	00cb      	lsls	r3, r1, #3
 8006d88:	4651      	mov	r1, sl
 8006d8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d8e:	4651      	mov	r1, sl
 8006d90:	00ca      	lsls	r2, r1, #3
 8006d92:	4610      	mov	r0, r2
 8006d94:	4619      	mov	r1, r3
 8006d96:	4603      	mov	r3, r0
 8006d98:	4642      	mov	r2, r8
 8006d9a:	189b      	adds	r3, r3, r2
 8006d9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006da0:	464b      	mov	r3, r9
 8006da2:	460a      	mov	r2, r1
 8006da4:	eb42 0303 	adc.w	r3, r2, r3
 8006da8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006db8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006dbc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006dc0:	460b      	mov	r3, r1
 8006dc2:	18db      	adds	r3, r3, r3
 8006dc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006dc6:	4613      	mov	r3, r2
 8006dc8:	eb42 0303 	adc.w	r3, r2, r3
 8006dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006dce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006dd2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006dd6:	f7f9 fa15 	bl	8000204 <__aeabi_uldivmod>
 8006dda:	4602      	mov	r2, r0
 8006ddc:	460b      	mov	r3, r1
 8006dde:	4b0d      	ldr	r3, [pc, #52]	; (8006e14 <UART_SetConfig+0x2d4>)
 8006de0:	fba3 1302 	umull	r1, r3, r3, r2
 8006de4:	095b      	lsrs	r3, r3, #5
 8006de6:	2164      	movs	r1, #100	; 0x64
 8006de8:	fb01 f303 	mul.w	r3, r1, r3
 8006dec:	1ad3      	subs	r3, r2, r3
 8006dee:	00db      	lsls	r3, r3, #3
 8006df0:	3332      	adds	r3, #50	; 0x32
 8006df2:	4a08      	ldr	r2, [pc, #32]	; (8006e14 <UART_SetConfig+0x2d4>)
 8006df4:	fba2 2303 	umull	r2, r3, r2, r3
 8006df8:	095b      	lsrs	r3, r3, #5
 8006dfa:	f003 0207 	and.w	r2, r3, #7
 8006dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4422      	add	r2, r4
 8006e06:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006e08:	e105      	b.n	8007016 <UART_SetConfig+0x4d6>
 8006e0a:	bf00      	nop
 8006e0c:	40011000 	.word	0x40011000
 8006e10:	40011400 	.word	0x40011400
 8006e14:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006e22:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006e26:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006e2a:	4642      	mov	r2, r8
 8006e2c:	464b      	mov	r3, r9
 8006e2e:	1891      	adds	r1, r2, r2
 8006e30:	6239      	str	r1, [r7, #32]
 8006e32:	415b      	adcs	r3, r3
 8006e34:	627b      	str	r3, [r7, #36]	; 0x24
 8006e36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006e3a:	4641      	mov	r1, r8
 8006e3c:	1854      	adds	r4, r2, r1
 8006e3e:	4649      	mov	r1, r9
 8006e40:	eb43 0501 	adc.w	r5, r3, r1
 8006e44:	f04f 0200 	mov.w	r2, #0
 8006e48:	f04f 0300 	mov.w	r3, #0
 8006e4c:	00eb      	lsls	r3, r5, #3
 8006e4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e52:	00e2      	lsls	r2, r4, #3
 8006e54:	4614      	mov	r4, r2
 8006e56:	461d      	mov	r5, r3
 8006e58:	4643      	mov	r3, r8
 8006e5a:	18e3      	adds	r3, r4, r3
 8006e5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006e60:	464b      	mov	r3, r9
 8006e62:	eb45 0303 	adc.w	r3, r5, r3
 8006e66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	2200      	movs	r2, #0
 8006e72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006e76:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006e7a:	f04f 0200 	mov.w	r2, #0
 8006e7e:	f04f 0300 	mov.w	r3, #0
 8006e82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006e86:	4629      	mov	r1, r5
 8006e88:	008b      	lsls	r3, r1, #2
 8006e8a:	4621      	mov	r1, r4
 8006e8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e90:	4621      	mov	r1, r4
 8006e92:	008a      	lsls	r2, r1, #2
 8006e94:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006e98:	f7f9 f9b4 	bl	8000204 <__aeabi_uldivmod>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	460b      	mov	r3, r1
 8006ea0:	4b60      	ldr	r3, [pc, #384]	; (8007024 <UART_SetConfig+0x4e4>)
 8006ea2:	fba3 2302 	umull	r2, r3, r3, r2
 8006ea6:	095b      	lsrs	r3, r3, #5
 8006ea8:	011c      	lsls	r4, r3, #4
 8006eaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006eae:	2200      	movs	r2, #0
 8006eb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006eb4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006eb8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006ebc:	4642      	mov	r2, r8
 8006ebe:	464b      	mov	r3, r9
 8006ec0:	1891      	adds	r1, r2, r2
 8006ec2:	61b9      	str	r1, [r7, #24]
 8006ec4:	415b      	adcs	r3, r3
 8006ec6:	61fb      	str	r3, [r7, #28]
 8006ec8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ecc:	4641      	mov	r1, r8
 8006ece:	1851      	adds	r1, r2, r1
 8006ed0:	6139      	str	r1, [r7, #16]
 8006ed2:	4649      	mov	r1, r9
 8006ed4:	414b      	adcs	r3, r1
 8006ed6:	617b      	str	r3, [r7, #20]
 8006ed8:	f04f 0200 	mov.w	r2, #0
 8006edc:	f04f 0300 	mov.w	r3, #0
 8006ee0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006ee4:	4659      	mov	r1, fp
 8006ee6:	00cb      	lsls	r3, r1, #3
 8006ee8:	4651      	mov	r1, sl
 8006eea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006eee:	4651      	mov	r1, sl
 8006ef0:	00ca      	lsls	r2, r1, #3
 8006ef2:	4610      	mov	r0, r2
 8006ef4:	4619      	mov	r1, r3
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	4642      	mov	r2, r8
 8006efa:	189b      	adds	r3, r3, r2
 8006efc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006f00:	464b      	mov	r3, r9
 8006f02:	460a      	mov	r2, r1
 8006f04:	eb42 0303 	adc.w	r3, r2, r3
 8006f08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	67bb      	str	r3, [r7, #120]	; 0x78
 8006f16:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006f18:	f04f 0200 	mov.w	r2, #0
 8006f1c:	f04f 0300 	mov.w	r3, #0
 8006f20:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006f24:	4649      	mov	r1, r9
 8006f26:	008b      	lsls	r3, r1, #2
 8006f28:	4641      	mov	r1, r8
 8006f2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f2e:	4641      	mov	r1, r8
 8006f30:	008a      	lsls	r2, r1, #2
 8006f32:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006f36:	f7f9 f965 	bl	8000204 <__aeabi_uldivmod>
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	460b      	mov	r3, r1
 8006f3e:	4b39      	ldr	r3, [pc, #228]	; (8007024 <UART_SetConfig+0x4e4>)
 8006f40:	fba3 1302 	umull	r1, r3, r3, r2
 8006f44:	095b      	lsrs	r3, r3, #5
 8006f46:	2164      	movs	r1, #100	; 0x64
 8006f48:	fb01 f303 	mul.w	r3, r1, r3
 8006f4c:	1ad3      	subs	r3, r2, r3
 8006f4e:	011b      	lsls	r3, r3, #4
 8006f50:	3332      	adds	r3, #50	; 0x32
 8006f52:	4a34      	ldr	r2, [pc, #208]	; (8007024 <UART_SetConfig+0x4e4>)
 8006f54:	fba2 2303 	umull	r2, r3, r2, r3
 8006f58:	095b      	lsrs	r3, r3, #5
 8006f5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f5e:	441c      	add	r4, r3
 8006f60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f64:	2200      	movs	r2, #0
 8006f66:	673b      	str	r3, [r7, #112]	; 0x70
 8006f68:	677a      	str	r2, [r7, #116]	; 0x74
 8006f6a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006f6e:	4642      	mov	r2, r8
 8006f70:	464b      	mov	r3, r9
 8006f72:	1891      	adds	r1, r2, r2
 8006f74:	60b9      	str	r1, [r7, #8]
 8006f76:	415b      	adcs	r3, r3
 8006f78:	60fb      	str	r3, [r7, #12]
 8006f7a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006f7e:	4641      	mov	r1, r8
 8006f80:	1851      	adds	r1, r2, r1
 8006f82:	6039      	str	r1, [r7, #0]
 8006f84:	4649      	mov	r1, r9
 8006f86:	414b      	adcs	r3, r1
 8006f88:	607b      	str	r3, [r7, #4]
 8006f8a:	f04f 0200 	mov.w	r2, #0
 8006f8e:	f04f 0300 	mov.w	r3, #0
 8006f92:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006f96:	4659      	mov	r1, fp
 8006f98:	00cb      	lsls	r3, r1, #3
 8006f9a:	4651      	mov	r1, sl
 8006f9c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006fa0:	4651      	mov	r1, sl
 8006fa2:	00ca      	lsls	r2, r1, #3
 8006fa4:	4610      	mov	r0, r2
 8006fa6:	4619      	mov	r1, r3
 8006fa8:	4603      	mov	r3, r0
 8006faa:	4642      	mov	r2, r8
 8006fac:	189b      	adds	r3, r3, r2
 8006fae:	66bb      	str	r3, [r7, #104]	; 0x68
 8006fb0:	464b      	mov	r3, r9
 8006fb2:	460a      	mov	r2, r1
 8006fb4:	eb42 0303 	adc.w	r3, r2, r3
 8006fb8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	663b      	str	r3, [r7, #96]	; 0x60
 8006fc4:	667a      	str	r2, [r7, #100]	; 0x64
 8006fc6:	f04f 0200 	mov.w	r2, #0
 8006fca:	f04f 0300 	mov.w	r3, #0
 8006fce:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006fd2:	4649      	mov	r1, r9
 8006fd4:	008b      	lsls	r3, r1, #2
 8006fd6:	4641      	mov	r1, r8
 8006fd8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006fdc:	4641      	mov	r1, r8
 8006fde:	008a      	lsls	r2, r1, #2
 8006fe0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006fe4:	f7f9 f90e 	bl	8000204 <__aeabi_uldivmod>
 8006fe8:	4602      	mov	r2, r0
 8006fea:	460b      	mov	r3, r1
 8006fec:	4b0d      	ldr	r3, [pc, #52]	; (8007024 <UART_SetConfig+0x4e4>)
 8006fee:	fba3 1302 	umull	r1, r3, r3, r2
 8006ff2:	095b      	lsrs	r3, r3, #5
 8006ff4:	2164      	movs	r1, #100	; 0x64
 8006ff6:	fb01 f303 	mul.w	r3, r1, r3
 8006ffa:	1ad3      	subs	r3, r2, r3
 8006ffc:	011b      	lsls	r3, r3, #4
 8006ffe:	3332      	adds	r3, #50	; 0x32
 8007000:	4a08      	ldr	r2, [pc, #32]	; (8007024 <UART_SetConfig+0x4e4>)
 8007002:	fba2 2303 	umull	r2, r3, r2, r3
 8007006:	095b      	lsrs	r3, r3, #5
 8007008:	f003 020f 	and.w	r2, r3, #15
 800700c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4422      	add	r2, r4
 8007014:	609a      	str	r2, [r3, #8]
}
 8007016:	bf00      	nop
 8007018:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800701c:	46bd      	mov	sp, r7
 800701e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007022:	bf00      	nop
 8007024:	51eb851f 	.word	0x51eb851f

08007028 <__errno>:
 8007028:	4b01      	ldr	r3, [pc, #4]	; (8007030 <__errno+0x8>)
 800702a:	6818      	ldr	r0, [r3, #0]
 800702c:	4770      	bx	lr
 800702e:	bf00      	nop
 8007030:	2000004c 	.word	0x2000004c

08007034 <__libc_init_array>:
 8007034:	b570      	push	{r4, r5, r6, lr}
 8007036:	4d0d      	ldr	r5, [pc, #52]	; (800706c <__libc_init_array+0x38>)
 8007038:	4c0d      	ldr	r4, [pc, #52]	; (8007070 <__libc_init_array+0x3c>)
 800703a:	1b64      	subs	r4, r4, r5
 800703c:	10a4      	asrs	r4, r4, #2
 800703e:	2600      	movs	r6, #0
 8007040:	42a6      	cmp	r6, r4
 8007042:	d109      	bne.n	8007058 <__libc_init_array+0x24>
 8007044:	4d0b      	ldr	r5, [pc, #44]	; (8007074 <__libc_init_array+0x40>)
 8007046:	4c0c      	ldr	r4, [pc, #48]	; (8007078 <__libc_init_array+0x44>)
 8007048:	f000 f93c 	bl	80072c4 <_init>
 800704c:	1b64      	subs	r4, r4, r5
 800704e:	10a4      	asrs	r4, r4, #2
 8007050:	2600      	movs	r6, #0
 8007052:	42a6      	cmp	r6, r4
 8007054:	d105      	bne.n	8007062 <__libc_init_array+0x2e>
 8007056:	bd70      	pop	{r4, r5, r6, pc}
 8007058:	f855 3b04 	ldr.w	r3, [r5], #4
 800705c:	4798      	blx	r3
 800705e:	3601      	adds	r6, #1
 8007060:	e7ee      	b.n	8007040 <__libc_init_array+0xc>
 8007062:	f855 3b04 	ldr.w	r3, [r5], #4
 8007066:	4798      	blx	r3
 8007068:	3601      	adds	r6, #1
 800706a:	e7f2      	b.n	8007052 <__libc_init_array+0x1e>
 800706c:	080087fc 	.word	0x080087fc
 8007070:	080087fc 	.word	0x080087fc
 8007074:	080087fc 	.word	0x080087fc
 8007078:	08008800 	.word	0x08008800

0800707c <__retarget_lock_acquire_recursive>:
 800707c:	4770      	bx	lr

0800707e <__retarget_lock_release_recursive>:
 800707e:	4770      	bx	lr

08007080 <malloc>:
 8007080:	4b02      	ldr	r3, [pc, #8]	; (800708c <malloc+0xc>)
 8007082:	4601      	mov	r1, r0
 8007084:	6818      	ldr	r0, [r3, #0]
 8007086:	f000 b88d 	b.w	80071a4 <_malloc_r>
 800708a:	bf00      	nop
 800708c:	2000004c 	.word	0x2000004c

08007090 <free>:
 8007090:	4b02      	ldr	r3, [pc, #8]	; (800709c <free+0xc>)
 8007092:	4601      	mov	r1, r0
 8007094:	6818      	ldr	r0, [r3, #0]
 8007096:	f000 b819 	b.w	80070cc <_free_r>
 800709a:	bf00      	nop
 800709c:	2000004c 	.word	0x2000004c

080070a0 <memcpy>:
 80070a0:	440a      	add	r2, r1
 80070a2:	4291      	cmp	r1, r2
 80070a4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80070a8:	d100      	bne.n	80070ac <memcpy+0xc>
 80070aa:	4770      	bx	lr
 80070ac:	b510      	push	{r4, lr}
 80070ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070b6:	4291      	cmp	r1, r2
 80070b8:	d1f9      	bne.n	80070ae <memcpy+0xe>
 80070ba:	bd10      	pop	{r4, pc}

080070bc <memset>:
 80070bc:	4402      	add	r2, r0
 80070be:	4603      	mov	r3, r0
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d100      	bne.n	80070c6 <memset+0xa>
 80070c4:	4770      	bx	lr
 80070c6:	f803 1b01 	strb.w	r1, [r3], #1
 80070ca:	e7f9      	b.n	80070c0 <memset+0x4>

080070cc <_free_r>:
 80070cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80070ce:	2900      	cmp	r1, #0
 80070d0:	d044      	beq.n	800715c <_free_r+0x90>
 80070d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070d6:	9001      	str	r0, [sp, #4]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	f1a1 0404 	sub.w	r4, r1, #4
 80070de:	bfb8      	it	lt
 80070e0:	18e4      	addlt	r4, r4, r3
 80070e2:	f000 f8e3 	bl	80072ac <__malloc_lock>
 80070e6:	4a1e      	ldr	r2, [pc, #120]	; (8007160 <_free_r+0x94>)
 80070e8:	9801      	ldr	r0, [sp, #4]
 80070ea:	6813      	ldr	r3, [r2, #0]
 80070ec:	b933      	cbnz	r3, 80070fc <_free_r+0x30>
 80070ee:	6063      	str	r3, [r4, #4]
 80070f0:	6014      	str	r4, [r2, #0]
 80070f2:	b003      	add	sp, #12
 80070f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80070f8:	f000 b8de 	b.w	80072b8 <__malloc_unlock>
 80070fc:	42a3      	cmp	r3, r4
 80070fe:	d908      	bls.n	8007112 <_free_r+0x46>
 8007100:	6825      	ldr	r5, [r4, #0]
 8007102:	1961      	adds	r1, r4, r5
 8007104:	428b      	cmp	r3, r1
 8007106:	bf01      	itttt	eq
 8007108:	6819      	ldreq	r1, [r3, #0]
 800710a:	685b      	ldreq	r3, [r3, #4]
 800710c:	1949      	addeq	r1, r1, r5
 800710e:	6021      	streq	r1, [r4, #0]
 8007110:	e7ed      	b.n	80070ee <_free_r+0x22>
 8007112:	461a      	mov	r2, r3
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	b10b      	cbz	r3, 800711c <_free_r+0x50>
 8007118:	42a3      	cmp	r3, r4
 800711a:	d9fa      	bls.n	8007112 <_free_r+0x46>
 800711c:	6811      	ldr	r1, [r2, #0]
 800711e:	1855      	adds	r5, r2, r1
 8007120:	42a5      	cmp	r5, r4
 8007122:	d10b      	bne.n	800713c <_free_r+0x70>
 8007124:	6824      	ldr	r4, [r4, #0]
 8007126:	4421      	add	r1, r4
 8007128:	1854      	adds	r4, r2, r1
 800712a:	42a3      	cmp	r3, r4
 800712c:	6011      	str	r1, [r2, #0]
 800712e:	d1e0      	bne.n	80070f2 <_free_r+0x26>
 8007130:	681c      	ldr	r4, [r3, #0]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	6053      	str	r3, [r2, #4]
 8007136:	4421      	add	r1, r4
 8007138:	6011      	str	r1, [r2, #0]
 800713a:	e7da      	b.n	80070f2 <_free_r+0x26>
 800713c:	d902      	bls.n	8007144 <_free_r+0x78>
 800713e:	230c      	movs	r3, #12
 8007140:	6003      	str	r3, [r0, #0]
 8007142:	e7d6      	b.n	80070f2 <_free_r+0x26>
 8007144:	6825      	ldr	r5, [r4, #0]
 8007146:	1961      	adds	r1, r4, r5
 8007148:	428b      	cmp	r3, r1
 800714a:	bf04      	itt	eq
 800714c:	6819      	ldreq	r1, [r3, #0]
 800714e:	685b      	ldreq	r3, [r3, #4]
 8007150:	6063      	str	r3, [r4, #4]
 8007152:	bf04      	itt	eq
 8007154:	1949      	addeq	r1, r1, r5
 8007156:	6021      	streq	r1, [r4, #0]
 8007158:	6054      	str	r4, [r2, #4]
 800715a:	e7ca      	b.n	80070f2 <_free_r+0x26>
 800715c:	b003      	add	sp, #12
 800715e:	bd30      	pop	{r4, r5, pc}
 8007160:	20000548 	.word	0x20000548

08007164 <sbrk_aligned>:
 8007164:	b570      	push	{r4, r5, r6, lr}
 8007166:	4e0e      	ldr	r6, [pc, #56]	; (80071a0 <sbrk_aligned+0x3c>)
 8007168:	460c      	mov	r4, r1
 800716a:	6831      	ldr	r1, [r6, #0]
 800716c:	4605      	mov	r5, r0
 800716e:	b911      	cbnz	r1, 8007176 <sbrk_aligned+0x12>
 8007170:	f000 f88c 	bl	800728c <_sbrk_r>
 8007174:	6030      	str	r0, [r6, #0]
 8007176:	4621      	mov	r1, r4
 8007178:	4628      	mov	r0, r5
 800717a:	f000 f887 	bl	800728c <_sbrk_r>
 800717e:	1c43      	adds	r3, r0, #1
 8007180:	d00a      	beq.n	8007198 <sbrk_aligned+0x34>
 8007182:	1cc4      	adds	r4, r0, #3
 8007184:	f024 0403 	bic.w	r4, r4, #3
 8007188:	42a0      	cmp	r0, r4
 800718a:	d007      	beq.n	800719c <sbrk_aligned+0x38>
 800718c:	1a21      	subs	r1, r4, r0
 800718e:	4628      	mov	r0, r5
 8007190:	f000 f87c 	bl	800728c <_sbrk_r>
 8007194:	3001      	adds	r0, #1
 8007196:	d101      	bne.n	800719c <sbrk_aligned+0x38>
 8007198:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800719c:	4620      	mov	r0, r4
 800719e:	bd70      	pop	{r4, r5, r6, pc}
 80071a0:	2000054c 	.word	0x2000054c

080071a4 <_malloc_r>:
 80071a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071a8:	1ccd      	adds	r5, r1, #3
 80071aa:	f025 0503 	bic.w	r5, r5, #3
 80071ae:	3508      	adds	r5, #8
 80071b0:	2d0c      	cmp	r5, #12
 80071b2:	bf38      	it	cc
 80071b4:	250c      	movcc	r5, #12
 80071b6:	2d00      	cmp	r5, #0
 80071b8:	4607      	mov	r7, r0
 80071ba:	db01      	blt.n	80071c0 <_malloc_r+0x1c>
 80071bc:	42a9      	cmp	r1, r5
 80071be:	d905      	bls.n	80071cc <_malloc_r+0x28>
 80071c0:	230c      	movs	r3, #12
 80071c2:	603b      	str	r3, [r7, #0]
 80071c4:	2600      	movs	r6, #0
 80071c6:	4630      	mov	r0, r6
 80071c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071cc:	4e2e      	ldr	r6, [pc, #184]	; (8007288 <_malloc_r+0xe4>)
 80071ce:	f000 f86d 	bl	80072ac <__malloc_lock>
 80071d2:	6833      	ldr	r3, [r6, #0]
 80071d4:	461c      	mov	r4, r3
 80071d6:	bb34      	cbnz	r4, 8007226 <_malloc_r+0x82>
 80071d8:	4629      	mov	r1, r5
 80071da:	4638      	mov	r0, r7
 80071dc:	f7ff ffc2 	bl	8007164 <sbrk_aligned>
 80071e0:	1c43      	adds	r3, r0, #1
 80071e2:	4604      	mov	r4, r0
 80071e4:	d14d      	bne.n	8007282 <_malloc_r+0xde>
 80071e6:	6834      	ldr	r4, [r6, #0]
 80071e8:	4626      	mov	r6, r4
 80071ea:	2e00      	cmp	r6, #0
 80071ec:	d140      	bne.n	8007270 <_malloc_r+0xcc>
 80071ee:	6823      	ldr	r3, [r4, #0]
 80071f0:	4631      	mov	r1, r6
 80071f2:	4638      	mov	r0, r7
 80071f4:	eb04 0803 	add.w	r8, r4, r3
 80071f8:	f000 f848 	bl	800728c <_sbrk_r>
 80071fc:	4580      	cmp	r8, r0
 80071fe:	d13a      	bne.n	8007276 <_malloc_r+0xd2>
 8007200:	6821      	ldr	r1, [r4, #0]
 8007202:	3503      	adds	r5, #3
 8007204:	1a6d      	subs	r5, r5, r1
 8007206:	f025 0503 	bic.w	r5, r5, #3
 800720a:	3508      	adds	r5, #8
 800720c:	2d0c      	cmp	r5, #12
 800720e:	bf38      	it	cc
 8007210:	250c      	movcc	r5, #12
 8007212:	4629      	mov	r1, r5
 8007214:	4638      	mov	r0, r7
 8007216:	f7ff ffa5 	bl	8007164 <sbrk_aligned>
 800721a:	3001      	adds	r0, #1
 800721c:	d02b      	beq.n	8007276 <_malloc_r+0xd2>
 800721e:	6823      	ldr	r3, [r4, #0]
 8007220:	442b      	add	r3, r5
 8007222:	6023      	str	r3, [r4, #0]
 8007224:	e00e      	b.n	8007244 <_malloc_r+0xa0>
 8007226:	6822      	ldr	r2, [r4, #0]
 8007228:	1b52      	subs	r2, r2, r5
 800722a:	d41e      	bmi.n	800726a <_malloc_r+0xc6>
 800722c:	2a0b      	cmp	r2, #11
 800722e:	d916      	bls.n	800725e <_malloc_r+0xba>
 8007230:	1961      	adds	r1, r4, r5
 8007232:	42a3      	cmp	r3, r4
 8007234:	6025      	str	r5, [r4, #0]
 8007236:	bf18      	it	ne
 8007238:	6059      	strne	r1, [r3, #4]
 800723a:	6863      	ldr	r3, [r4, #4]
 800723c:	bf08      	it	eq
 800723e:	6031      	streq	r1, [r6, #0]
 8007240:	5162      	str	r2, [r4, r5]
 8007242:	604b      	str	r3, [r1, #4]
 8007244:	4638      	mov	r0, r7
 8007246:	f104 060b 	add.w	r6, r4, #11
 800724a:	f000 f835 	bl	80072b8 <__malloc_unlock>
 800724e:	f026 0607 	bic.w	r6, r6, #7
 8007252:	1d23      	adds	r3, r4, #4
 8007254:	1af2      	subs	r2, r6, r3
 8007256:	d0b6      	beq.n	80071c6 <_malloc_r+0x22>
 8007258:	1b9b      	subs	r3, r3, r6
 800725a:	50a3      	str	r3, [r4, r2]
 800725c:	e7b3      	b.n	80071c6 <_malloc_r+0x22>
 800725e:	6862      	ldr	r2, [r4, #4]
 8007260:	42a3      	cmp	r3, r4
 8007262:	bf0c      	ite	eq
 8007264:	6032      	streq	r2, [r6, #0]
 8007266:	605a      	strne	r2, [r3, #4]
 8007268:	e7ec      	b.n	8007244 <_malloc_r+0xa0>
 800726a:	4623      	mov	r3, r4
 800726c:	6864      	ldr	r4, [r4, #4]
 800726e:	e7b2      	b.n	80071d6 <_malloc_r+0x32>
 8007270:	4634      	mov	r4, r6
 8007272:	6876      	ldr	r6, [r6, #4]
 8007274:	e7b9      	b.n	80071ea <_malloc_r+0x46>
 8007276:	230c      	movs	r3, #12
 8007278:	603b      	str	r3, [r7, #0]
 800727a:	4638      	mov	r0, r7
 800727c:	f000 f81c 	bl	80072b8 <__malloc_unlock>
 8007280:	e7a1      	b.n	80071c6 <_malloc_r+0x22>
 8007282:	6025      	str	r5, [r4, #0]
 8007284:	e7de      	b.n	8007244 <_malloc_r+0xa0>
 8007286:	bf00      	nop
 8007288:	20000548 	.word	0x20000548

0800728c <_sbrk_r>:
 800728c:	b538      	push	{r3, r4, r5, lr}
 800728e:	4d06      	ldr	r5, [pc, #24]	; (80072a8 <_sbrk_r+0x1c>)
 8007290:	2300      	movs	r3, #0
 8007292:	4604      	mov	r4, r0
 8007294:	4608      	mov	r0, r1
 8007296:	602b      	str	r3, [r5, #0]
 8007298:	f7fd fdda 	bl	8004e50 <_sbrk>
 800729c:	1c43      	adds	r3, r0, #1
 800729e:	d102      	bne.n	80072a6 <_sbrk_r+0x1a>
 80072a0:	682b      	ldr	r3, [r5, #0]
 80072a2:	b103      	cbz	r3, 80072a6 <_sbrk_r+0x1a>
 80072a4:	6023      	str	r3, [r4, #0]
 80072a6:	bd38      	pop	{r3, r4, r5, pc}
 80072a8:	20000550 	.word	0x20000550

080072ac <__malloc_lock>:
 80072ac:	4801      	ldr	r0, [pc, #4]	; (80072b4 <__malloc_lock+0x8>)
 80072ae:	f7ff bee5 	b.w	800707c <__retarget_lock_acquire_recursive>
 80072b2:	bf00      	nop
 80072b4:	20000544 	.word	0x20000544

080072b8 <__malloc_unlock>:
 80072b8:	4801      	ldr	r0, [pc, #4]	; (80072c0 <__malloc_unlock+0x8>)
 80072ba:	f7ff bee0 	b.w	800707e <__retarget_lock_release_recursive>
 80072be:	bf00      	nop
 80072c0:	20000544 	.word	0x20000544

080072c4 <_init>:
 80072c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072c6:	bf00      	nop
 80072c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072ca:	bc08      	pop	{r3}
 80072cc:	469e      	mov	lr, r3
 80072ce:	4770      	bx	lr

080072d0 <_fini>:
 80072d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072d2:	bf00      	nop
 80072d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072d6:	bc08      	pop	{r3}
 80072d8:	469e      	mov	lr, r3
 80072da:	4770      	bx	lr
