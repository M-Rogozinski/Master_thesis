
EncryptionAlgorithms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065b8  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000017e4  08006780  08006780  00016780  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f64  08007f64  000200b0  2**0
                  CONTENTS
  4 .ARM          00000008  08007f64  08007f64  00017f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f6c  08007f6c  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f6c  08007f6c  00017f6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f70  08007f70  00017f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  08007f74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c74  200000b0  08008024  000200b0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000d24  08008024  00020d24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018ae7  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037c0  00000000  00000000  00038bc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001230  00000000  00000000  0003c388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010b0  00000000  00000000  0003d5b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023060  00000000  00000000  0003e668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018923  00000000  00000000  000616c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000da309  00000000  00000000  00079feb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001542f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d84  00000000  00000000  00154344  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200000b0 	.word	0x200000b0
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08006768 	.word	0x08006768

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200000b4 	.word	0x200000b4
 8000204:	08006768 	.word	0x08006768

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000218:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800021c:	f000 b974 	b.w	8000508 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468e      	mov	lr, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14d      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000246:	428a      	cmp	r2, r1
 8000248:	4694      	mov	ip, r2
 800024a:	d969      	bls.n	8000320 <__udivmoddi4+0xe8>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b152      	cbz	r2, 8000268 <__udivmoddi4+0x30>
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	f1c2 0120 	rsb	r1, r2, #32
 800025a:	fa20 f101 	lsr.w	r1, r0, r1
 800025e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000262:	ea41 0e03 	orr.w	lr, r1, r3
 8000266:	4094      	lsls	r4, r2
 8000268:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800026c:	0c21      	lsrs	r1, r4, #16
 800026e:	fbbe f6f8 	udiv	r6, lr, r8
 8000272:	fa1f f78c 	uxth.w	r7, ip
 8000276:	fb08 e316 	mls	r3, r8, r6, lr
 800027a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027e:	fb06 f107 	mul.w	r1, r6, r7
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800028e:	f080 811f 	bcs.w	80004d0 <__udivmoddi4+0x298>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 811c 	bls.w	80004d0 <__udivmoddi4+0x298>
 8000298:	3e02      	subs	r6, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a5b      	subs	r3, r3, r1
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a4:	fb08 3310 	mls	r3, r8, r0, r3
 80002a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ac:	fb00 f707 	mul.w	r7, r0, r7
 80002b0:	42a7      	cmp	r7, r4
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x92>
 80002b4:	eb1c 0404 	adds.w	r4, ip, r4
 80002b8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002bc:	f080 810a 	bcs.w	80004d4 <__udivmoddi4+0x29c>
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	f240 8107 	bls.w	80004d4 <__udivmoddi4+0x29c>
 80002c6:	4464      	add	r4, ip
 80002c8:	3802      	subs	r0, #2
 80002ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ce:	1be4      	subs	r4, r4, r7
 80002d0:	2600      	movs	r6, #0
 80002d2:	b11d      	cbz	r5, 80002dc <__udivmoddi4+0xa4>
 80002d4:	40d4      	lsrs	r4, r2
 80002d6:	2300      	movs	r3, #0
 80002d8:	e9c5 4300 	strd	r4, r3, [r5]
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d909      	bls.n	80002fa <__udivmoddi4+0xc2>
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	f000 80ef 	beq.w	80004ca <__udivmoddi4+0x292>
 80002ec:	2600      	movs	r6, #0
 80002ee:	e9c5 0100 	strd	r0, r1, [r5]
 80002f2:	4630      	mov	r0, r6
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	fab3 f683 	clz	r6, r3
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d14a      	bne.n	8000398 <__udivmoddi4+0x160>
 8000302:	428b      	cmp	r3, r1
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xd4>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80f9 	bhi.w	80004fe <__udivmoddi4+0x2c6>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb61 0303 	sbc.w	r3, r1, r3
 8000312:	2001      	movs	r0, #1
 8000314:	469e      	mov	lr, r3
 8000316:	2d00      	cmp	r5, #0
 8000318:	d0e0      	beq.n	80002dc <__udivmoddi4+0xa4>
 800031a:	e9c5 4e00 	strd	r4, lr, [r5]
 800031e:	e7dd      	b.n	80002dc <__udivmoddi4+0xa4>
 8000320:	b902      	cbnz	r2, 8000324 <__udivmoddi4+0xec>
 8000322:	deff      	udf	#255	; 0xff
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	2a00      	cmp	r2, #0
 800032a:	f040 8092 	bne.w	8000452 <__udivmoddi4+0x21a>
 800032e:	eba1 010c 	sub.w	r1, r1, ip
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2601      	movs	r6, #1
 800033c:	0c20      	lsrs	r0, r4, #16
 800033e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000342:	fb07 1113 	mls	r1, r7, r3, r1
 8000346:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800034a:	fb0e f003 	mul.w	r0, lr, r3
 800034e:	4288      	cmp	r0, r1
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x12c>
 8000352:	eb1c 0101 	adds.w	r1, ip, r1
 8000356:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x12a>
 800035c:	4288      	cmp	r0, r1
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2c0>
 8000362:	4643      	mov	r3, r8
 8000364:	1a09      	subs	r1, r1, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb1 f0f7 	udiv	r0, r1, r7
 800036c:	fb07 1110 	mls	r1, r7, r0, r1
 8000370:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x156>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x154>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2ca>
 800038c:	4608      	mov	r0, r1
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000396:	e79c      	b.n	80002d2 <__udivmoddi4+0x9a>
 8000398:	f1c6 0720 	rsb	r7, r6, #32
 800039c:	40b3      	lsls	r3, r6
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa20 f407 	lsr.w	r4, r0, r7
 80003aa:	fa01 f306 	lsl.w	r3, r1, r6
 80003ae:	431c      	orrs	r4, r3
 80003b0:	40f9      	lsrs	r1, r7
 80003b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80003be:	0c20      	lsrs	r0, r4, #16
 80003c0:	fa1f fe8c 	uxth.w	lr, ip
 80003c4:	fb09 1118 	mls	r1, r9, r8, r1
 80003c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003cc:	fb08 f00e 	mul.w	r0, r8, lr
 80003d0:	4288      	cmp	r0, r1
 80003d2:	fa02 f206 	lsl.w	r2, r2, r6
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b8>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2bc>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2bc>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4461      	add	r1, ip
 80003f0:	1a09      	subs	r1, r1, r0
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f8:	fb09 1110 	mls	r1, r9, r0, r1
 80003fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000400:	fb00 fe0e 	mul.w	lr, r0, lr
 8000404:	458e      	cmp	lr, r1
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1e2>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2b4>
 8000412:	458e      	cmp	lr, r1
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2b4>
 8000416:	3802      	subs	r0, #2
 8000418:	4461      	add	r1, ip
 800041a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041e:	fba0 9402 	umull	r9, r4, r0, r2
 8000422:	eba1 010e 	sub.w	r1, r1, lr
 8000426:	42a1      	cmp	r1, r4
 8000428:	46c8      	mov	r8, r9
 800042a:	46a6      	mov	lr, r4
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x2a4>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x2a0>
 8000430:	b15d      	cbz	r5, 800044a <__udivmoddi4+0x212>
 8000432:	ebb3 0208 	subs.w	r2, r3, r8
 8000436:	eb61 010e 	sbc.w	r1, r1, lr
 800043a:	fa01 f707 	lsl.w	r7, r1, r7
 800043e:	fa22 f306 	lsr.w	r3, r2, r6
 8000442:	40f1      	lsrs	r1, r6
 8000444:	431f      	orrs	r7, r3
 8000446:	e9c5 7100 	strd	r7, r1, [r5]
 800044a:	2600      	movs	r6, #0
 800044c:	4631      	mov	r1, r6
 800044e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000452:	f1c2 0320 	rsb	r3, r2, #32
 8000456:	40d8      	lsrs	r0, r3
 8000458:	fa0c fc02 	lsl.w	ip, ip, r2
 800045c:	fa21 f303 	lsr.w	r3, r1, r3
 8000460:	4091      	lsls	r1, r2
 8000462:	4301      	orrs	r1, r0
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000470:	fb07 3610 	mls	r6, r7, r0, r3
 8000474:	0c0b      	lsrs	r3, r1, #16
 8000476:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800047a:	fb00 f60e 	mul.w	r6, r0, lr
 800047e:	429e      	cmp	r6, r3
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x260>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b8>
 8000490:	429e      	cmp	r6, r3
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b8>
 8000494:	3802      	subs	r0, #2
 8000496:	4463      	add	r3, ip
 8000498:	1b9b      	subs	r3, r3, r6
 800049a:	b289      	uxth	r1, r1
 800049c:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a0:	fb07 3316 	mls	r3, r7, r6, r3
 80004a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x28a>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 80004be:	3e02      	subs	r6, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0x104>
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e705      	b.n	80002dc <__udivmoddi4+0xa4>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e3      	b.n	800029c <__udivmoddi4+0x64>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6f8      	b.n	80002ca <__udivmoddi4+0x92>
 80004d8:	454b      	cmp	r3, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f8>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f8>
 80004e8:	4646      	mov	r6, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x28a>
 80004ec:	4620      	mov	r0, r4
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1e2>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x260>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b8>
 80004f8:	3b02      	subs	r3, #2
 80004fa:	4461      	add	r1, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x12c>
 80004fe:	4630      	mov	r0, r6
 8000500:	e709      	b.n	8000316 <__udivmoddi4+0xde>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x156>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <RsaTest>:
size_t sigLen;



void RsaTest(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
	RsaInit();
 8000510:	f000 f8ca 	bl	80006a8 <RsaInit>

	RsaPKCS1();
 8000514:	f000 f802 	bl	800051c <RsaPKCS1>

}
 8000518:	bf00      	nop
 800051a:	bd80      	pop	{r7, pc}

0800051c <RsaPKCS1>:

void RsaPKCS1(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af02      	add	r7, sp, #8


//	rsassaPkcs1v15Sign(&privateKey, &whirlpoolHashAlgo, input, sig, &sigLen);
//	rsassaPkcs1v15Verify(&publicKey, &whirlpoolHashAlgo, input, sig, sigLen);

	RsaCleanSig();
 8000522:	f000 f84b 	bl	80005bc <RsaCleanSig>

	rsassaPkcs1v15Sign(&privateKey, &sha256HashAlgo, input, sig, &sigLen);
 8000526:	4b1d      	ldr	r3, [pc, #116]	; (800059c <RsaPKCS1+0x80>)
 8000528:	9300      	str	r3, [sp, #0]
 800052a:	4b1d      	ldr	r3, [pc, #116]	; (80005a0 <RsaPKCS1+0x84>)
 800052c:	4a1d      	ldr	r2, [pc, #116]	; (80005a4 <RsaPKCS1+0x88>)
 800052e:	491e      	ldr	r1, [pc, #120]	; (80005a8 <RsaPKCS1+0x8c>)
 8000530:	481e      	ldr	r0, [pc, #120]	; (80005ac <RsaPKCS1+0x90>)
 8000532:	f001 fd79 	bl	8002028 <rsassaPkcs1v15Sign>
	rsassaPkcs1v15Verify(&publicKey, &sha256HashAlgo, input, sig, sigLen);
 8000536:	4b19      	ldr	r3, [pc, #100]	; (800059c <RsaPKCS1+0x80>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	9300      	str	r3, [sp, #0]
 800053c:	4b18      	ldr	r3, [pc, #96]	; (80005a0 <RsaPKCS1+0x84>)
 800053e:	4a19      	ldr	r2, [pc, #100]	; (80005a4 <RsaPKCS1+0x88>)
 8000540:	4919      	ldr	r1, [pc, #100]	; (80005a8 <RsaPKCS1+0x8c>)
 8000542:	481b      	ldr	r0, [pc, #108]	; (80005b0 <RsaPKCS1+0x94>)
 8000544:	f001 fe43 	bl	80021ce <rsassaPkcs1v15Verify>

	RsaCleanSig();
 8000548:	f000 f838 	bl	80005bc <RsaCleanSig>

	rsassaPkcs1v15Sign(&privateKey, &sha384HashAlgo, input, sig, &sigLen);
 800054c:	4b13      	ldr	r3, [pc, #76]	; (800059c <RsaPKCS1+0x80>)
 800054e:	9300      	str	r3, [sp, #0]
 8000550:	4b13      	ldr	r3, [pc, #76]	; (80005a0 <RsaPKCS1+0x84>)
 8000552:	4a14      	ldr	r2, [pc, #80]	; (80005a4 <RsaPKCS1+0x88>)
 8000554:	4917      	ldr	r1, [pc, #92]	; (80005b4 <RsaPKCS1+0x98>)
 8000556:	4815      	ldr	r0, [pc, #84]	; (80005ac <RsaPKCS1+0x90>)
 8000558:	f001 fd66 	bl	8002028 <rsassaPkcs1v15Sign>
	rsassaPkcs1v15Verify(&publicKey, &sha384HashAlgo, input, sig, sigLen);
 800055c:	4b0f      	ldr	r3, [pc, #60]	; (800059c <RsaPKCS1+0x80>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	9300      	str	r3, [sp, #0]
 8000562:	4b0f      	ldr	r3, [pc, #60]	; (80005a0 <RsaPKCS1+0x84>)
 8000564:	4a0f      	ldr	r2, [pc, #60]	; (80005a4 <RsaPKCS1+0x88>)
 8000566:	4913      	ldr	r1, [pc, #76]	; (80005b4 <RsaPKCS1+0x98>)
 8000568:	4811      	ldr	r0, [pc, #68]	; (80005b0 <RsaPKCS1+0x94>)
 800056a:	f001 fe30 	bl	80021ce <rsassaPkcs1v15Verify>

	RsaCleanSig();
 800056e:	f000 f825 	bl	80005bc <RsaCleanSig>


	rsassaPkcs1v15Sign(&privateKey, &sha512HashAlgo, input, sig, &sigLen);
 8000572:	4b0a      	ldr	r3, [pc, #40]	; (800059c <RsaPKCS1+0x80>)
 8000574:	9300      	str	r3, [sp, #0]
 8000576:	4b0a      	ldr	r3, [pc, #40]	; (80005a0 <RsaPKCS1+0x84>)
 8000578:	4a0a      	ldr	r2, [pc, #40]	; (80005a4 <RsaPKCS1+0x88>)
 800057a:	490f      	ldr	r1, [pc, #60]	; (80005b8 <RsaPKCS1+0x9c>)
 800057c:	480b      	ldr	r0, [pc, #44]	; (80005ac <RsaPKCS1+0x90>)
 800057e:	f001 fd53 	bl	8002028 <rsassaPkcs1v15Sign>
	rsassaPkcs1v15Verify(&publicKey, &sha512HashAlgo, input, sig, sigLen);
 8000582:	4b06      	ldr	r3, [pc, #24]	; (800059c <RsaPKCS1+0x80>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	9300      	str	r3, [sp, #0]
 8000588:	4b05      	ldr	r3, [pc, #20]	; (80005a0 <RsaPKCS1+0x84>)
 800058a:	4a06      	ldr	r2, [pc, #24]	; (80005a4 <RsaPKCS1+0x88>)
 800058c:	490a      	ldr	r1, [pc, #40]	; (80005b8 <RsaPKCS1+0x9c>)
 800058e:	4808      	ldr	r0, [pc, #32]	; (80005b0 <RsaPKCS1+0x94>)
 8000590:	f001 fe1d 	bl	80021ce <rsassaPkcs1v15Verify>

}
 8000594:	bf00      	nop
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	20000c7c 	.word	0x20000c7c
 80005a0:	2000047c 	.word	0x2000047c
 80005a4:	080076ec 	.word	0x080076ec
 80005a8:	08006a08 	.word	0x08006a08
 80005ac:	20000400 	.word	0x20000400
 80005b0:	20000464 	.word	0x20000464
 80005b4:	08006a48 	.word	0x08006a48
 80005b8:	08006d8c 	.word	0x08006d8c

080005bc <RsaCleanSig>:

void RsaCleanSig(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
	memset(sig, 0, sizeof(sig));
 80005c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80005c4:	2100      	movs	r1, #0
 80005c6:	4804      	ldr	r0, [pc, #16]	; (80005d8 <RsaCleanSig+0x1c>)
 80005c8:	f005 ffca 	bl	8006560 <memset>
	sigLen = 0;
 80005cc:	4b03      	ldr	r3, [pc, #12]	; (80005dc <RsaCleanSig+0x20>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
}
 80005d2:	bf00      	nop
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	2000047c 	.word	0x2000047c
 80005dc:	20000c7c 	.word	0x20000c7c

080005e0 <RsaKeysInit>:

void RsaKeysInit(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	mpiImport(&privateKey.n, n, sizeof(n), MPI_FORMAT_BIG_ENDIAN);
 80005e4:	2301      	movs	r3, #1
 80005e6:	2240      	movs	r2, #64	; 0x40
 80005e8:	491d      	ldr	r1, [pc, #116]	; (8000660 <RsaKeysInit+0x80>)
 80005ea:	481e      	ldr	r0, [pc, #120]	; (8000664 <RsaKeysInit+0x84>)
 80005ec:	f000 fad9 	bl	8000ba2 <mpiImport>
	mpiImport(&privateKey.e, e, sizeof(e), MPI_FORMAT_BIG_ENDIAN);
 80005f0:	2301      	movs	r3, #1
 80005f2:	2203      	movs	r2, #3
 80005f4:	491c      	ldr	r1, [pc, #112]	; (8000668 <RsaKeysInit+0x88>)
 80005f6:	481d      	ldr	r0, [pc, #116]	; (800066c <RsaKeysInit+0x8c>)
 80005f8:	f000 fad3 	bl	8000ba2 <mpiImport>
	mpiImport(&privateKey.d, d, sizeof(d), MPI_FORMAT_BIG_ENDIAN);
 80005fc:	2301      	movs	r3, #1
 80005fe:	2240      	movs	r2, #64	; 0x40
 8000600:	491b      	ldr	r1, [pc, #108]	; (8000670 <RsaKeysInit+0x90>)
 8000602:	481c      	ldr	r0, [pc, #112]	; (8000674 <RsaKeysInit+0x94>)
 8000604:	f000 facd 	bl	8000ba2 <mpiImport>
	mpiImport(&privateKey.p, p, sizeof(p), MPI_FORMAT_BIG_ENDIAN);
 8000608:	2301      	movs	r3, #1
 800060a:	2220      	movs	r2, #32
 800060c:	491a      	ldr	r1, [pc, #104]	; (8000678 <RsaKeysInit+0x98>)
 800060e:	481b      	ldr	r0, [pc, #108]	; (800067c <RsaKeysInit+0x9c>)
 8000610:	f000 fac7 	bl	8000ba2 <mpiImport>
	mpiImport(&privateKey.q, q, sizeof(q), MPI_FORMAT_BIG_ENDIAN);
 8000614:	2301      	movs	r3, #1
 8000616:	2220      	movs	r2, #32
 8000618:	4919      	ldr	r1, [pc, #100]	; (8000680 <RsaKeysInit+0xa0>)
 800061a:	481a      	ldr	r0, [pc, #104]	; (8000684 <RsaKeysInit+0xa4>)
 800061c:	f000 fac1 	bl	8000ba2 <mpiImport>
	mpiImport(&privateKey.dp, dp, sizeof(dp), MPI_FORMAT_BIG_ENDIAN);
 8000620:	2301      	movs	r3, #1
 8000622:	2220      	movs	r2, #32
 8000624:	4918      	ldr	r1, [pc, #96]	; (8000688 <RsaKeysInit+0xa8>)
 8000626:	4819      	ldr	r0, [pc, #100]	; (800068c <RsaKeysInit+0xac>)
 8000628:	f000 fabb 	bl	8000ba2 <mpiImport>
	mpiImport(&privateKey.dq, dq, sizeof(dq), MPI_FORMAT_BIG_ENDIAN);
 800062c:	2301      	movs	r3, #1
 800062e:	2220      	movs	r2, #32
 8000630:	4917      	ldr	r1, [pc, #92]	; (8000690 <RsaKeysInit+0xb0>)
 8000632:	4818      	ldr	r0, [pc, #96]	; (8000694 <RsaKeysInit+0xb4>)
 8000634:	f000 fab5 	bl	8000ba2 <mpiImport>
	mpiImport(&privateKey.qinv, qinv, sizeof(qinv), MPI_FORMAT_BIG_ENDIAN);
 8000638:	2301      	movs	r3, #1
 800063a:	2220      	movs	r2, #32
 800063c:	4916      	ldr	r1, [pc, #88]	; (8000698 <RsaKeysInit+0xb8>)
 800063e:	4817      	ldr	r0, [pc, #92]	; (800069c <RsaKeysInit+0xbc>)
 8000640:	f000 faaf 	bl	8000ba2 <mpiImport>

	mpiImport(&publicKey.n, n, sizeof(n), MPI_FORMAT_BIG_ENDIAN);
 8000644:	2301      	movs	r3, #1
 8000646:	2240      	movs	r2, #64	; 0x40
 8000648:	4905      	ldr	r1, [pc, #20]	; (8000660 <RsaKeysInit+0x80>)
 800064a:	4815      	ldr	r0, [pc, #84]	; (80006a0 <RsaKeysInit+0xc0>)
 800064c:	f000 faa9 	bl	8000ba2 <mpiImport>
	mpiImport(&publicKey.e, e, sizeof(e), MPI_FORMAT_BIG_ENDIAN);
 8000650:	2301      	movs	r3, #1
 8000652:	2203      	movs	r2, #3
 8000654:	4904      	ldr	r1, [pc, #16]	; (8000668 <RsaKeysInit+0x88>)
 8000656:	4813      	ldr	r0, [pc, #76]	; (80006a4 <RsaKeysInit+0xc4>)
 8000658:	f000 faa3 	bl	8000ba2 <mpiImport>
}
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}
 8000660:	08006798 	.word	0x08006798
 8000664:	20000400 	.word	0x20000400
 8000668:	080067d8 	.word	0x080067d8
 800066c:	2000040c 	.word	0x2000040c
 8000670:	080067dc 	.word	0x080067dc
 8000674:	20000418 	.word	0x20000418
 8000678:	0800681c 	.word	0x0800681c
 800067c:	20000424 	.word	0x20000424
 8000680:	0800683c 	.word	0x0800683c
 8000684:	20000430 	.word	0x20000430
 8000688:	0800685c 	.word	0x0800685c
 800068c:	2000043c 	.word	0x2000043c
 8000690:	0800687c 	.word	0x0800687c
 8000694:	20000448 	.word	0x20000448
 8000698:	0800689c 	.word	0x0800689c
 800069c:	20000454 	.word	0x20000454
 80006a0:	20000464 	.word	0x20000464
 80006a4:	20000470 	.word	0x20000470

080006a8 <RsaInit>:
void RsaInit(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
	RsaKeysInit();
 80006ac:	f7ff ff98 	bl	80005e0 <RsaKeysInit>

	yarrowInit(&contextYarrow);
 80006b0:	4804      	ldr	r0, [pc, #16]	; (80006c4 <RsaInit+0x1c>)
 80006b2:	f004 f8db 	bl	800486c <yarrowInit>
	yarrowSeed(&contextYarrow, seed, sizeof(seed));
 80006b6:	2240      	movs	r2, #64	; 0x40
 80006b8:	4903      	ldr	r1, [pc, #12]	; (80006c8 <RsaInit+0x20>)
 80006ba:	4802      	ldr	r0, [pc, #8]	; (80006c4 <RsaInit+0x1c>)
 80006bc:	f004 f8fb 	bl	80048b6 <yarrowSeed>
}
 80006c0:	bf00      	nop
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	200000d0 	.word	0x200000d0
 80006c8:	20000000 	.word	0x20000000

080006cc <mpiInit>:
 * @brief Initialize a multiple precision integer
 * @param[in,out] r Pointer to the multiple precision integer to be initialized
 **/

void mpiInit(Mpi *r)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
   //Initialize structure
   r->sign = 1;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	2201      	movs	r2, #1
 80006d8:	601a      	str	r2, [r3, #0]
   r->size = 0;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	2200      	movs	r2, #0
 80006de:	605a      	str	r2, [r3, #4]
   r->data = NULL;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	2200      	movs	r2, #0
 80006e4:	609a      	str	r2, [r3, #8]
}
 80006e6:	bf00      	nop
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr

080006f2 <mpiFree>:
 * @brief Release a multiple precision integer
 * @param[in,out] r Pointer to the multiple precision integer to be freed
 **/

void mpiFree(Mpi *r)
{
 80006f2:	b580      	push	{r7, lr}
 80006f4:	b082      	sub	sp, #8
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	6078      	str	r0, [r7, #4]
   //Any memory previously allocated?
   if(r->data != NULL)
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	689b      	ldr	r3, [r3, #8]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d00d      	beq.n	800071e <mpiFree+0x2c>
   {
      //Erase contents before releasing memory
      osMemset(r->data, 0, r->size * MPI_INT_SIZE);
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	6898      	ldr	r0, [r3, #8]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	685b      	ldr	r3, [r3, #4]
 800070a:	009b      	lsls	r3, r3, #2
 800070c:	461a      	mov	r2, r3
 800070e:	2100      	movs	r1, #0
 8000710:	f005 ff26 	bl	8006560 <memset>
      cryptoFreeMem(r->data);
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	689b      	ldr	r3, [r3, #8]
 8000718:	4618      	mov	r0, r3
 800071a:	f003 ff35 	bl	8004588 <osFreeMem>
   }

   //Set size to zero
   r->size = 0;
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	2200      	movs	r2, #0
 8000722:	605a      	str	r2, [r3, #4]
   r->data = NULL;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2200      	movs	r2, #0
 8000728:	609a      	str	r2, [r3, #8]
}
 800072a:	bf00      	nop
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}

08000732 <mpiGrow>:
 * @param[in] size Desired size in words
 * @return Error code
 **/

error_t mpiGrow(Mpi *r, uint_t size)
{
 8000732:	b580      	push	{r7, lr}
 8000734:	b084      	sub	sp, #16
 8000736:	af00      	add	r7, sp, #0
 8000738:	6078      	str	r0, [r7, #4]
 800073a:	6039      	str	r1, [r7, #0]
   uint_t *data;

   //Ensure the parameter is valid
   size = MAX(size, 1);
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	2b01      	cmp	r3, #1
 8000740:	bf38      	it	cc
 8000742:	2301      	movcc	r3, #1
 8000744:	603b      	str	r3, [r7, #0]

   //Check the current size
   if(r->size >= size)
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	685b      	ldr	r3, [r3, #4]
 800074a:	683a      	ldr	r2, [r7, #0]
 800074c:	429a      	cmp	r2, r3
 800074e:	d801      	bhi.n	8000754 <mpiGrow+0x22>
      return NO_ERROR;
 8000750:	2300      	movs	r3, #0
 8000752:	e02a      	b.n	80007aa <mpiGrow+0x78>

   //Allocate a memory buffer
   data = cryptoAllocMem(size * MPI_INT_SIZE);
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	009b      	lsls	r3, r3, #2
 8000758:	4618      	mov	r0, r3
 800075a:	f003 ff07 	bl	800456c <osAllocMem>
 800075e:	60f8      	str	r0, [r7, #12]
   //Failed to allocate memory?
   if(data == NULL)
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d101      	bne.n	800076a <mpiGrow+0x38>
      return ERROR_OUT_OF_MEMORY;
 8000766:	2364      	movs	r3, #100	; 0x64
 8000768:	e01f      	b.n	80007aa <mpiGrow+0x78>

   //Clear buffer contents
   osMemset(data, 0, size * MPI_INT_SIZE);
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	009b      	lsls	r3, r3, #2
 800076e:	461a      	mov	r2, r3
 8000770:	2100      	movs	r1, #0
 8000772:	68f8      	ldr	r0, [r7, #12]
 8000774:	f005 fef4 	bl	8006560 <memset>

   //Any data to copy?
   if(r->size > 0)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	685b      	ldr	r3, [r3, #4]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d00d      	beq.n	800079c <mpiGrow+0x6a>
   {
      //Copy original data
      osMemcpy(data, r->data, r->size * MPI_INT_SIZE);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	6899      	ldr	r1, [r3, #8]
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	685b      	ldr	r3, [r3, #4]
 8000788:	009b      	lsls	r3, r3, #2
 800078a:	461a      	mov	r2, r3
 800078c:	68f8      	ldr	r0, [r7, #12]
 800078e:	f005 fed9 	bl	8006544 <memcpy>
      //Free previously allocated memory
      cryptoFreeMem(r->data);
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	689b      	ldr	r3, [r3, #8]
 8000796:	4618      	mov	r0, r3
 8000798:	f003 fef6 	bl	8004588 <osFreeMem>
   }

   //Update the size of the multiple precision integer
   r->size = size;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	683a      	ldr	r2, [r7, #0]
 80007a0:	605a      	str	r2, [r3, #4]
   r->data = data;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	68fa      	ldr	r2, [r7, #12]
 80007a6:	609a      	str	r2, [r3, #8]

   //Successful operation
   return NO_ERROR;
 80007a8:	2300      	movs	r3, #0
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	3710      	adds	r7, #16
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <mpiGetLength>:
 * @param[in] a Pointer to a multiple precision integer
 * @return The actual length in words
 **/

uint_t mpiGetLength(const Mpi *a)
{
 80007b2:	b480      	push	{r7}
 80007b4:	b085      	sub	sp, #20
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	6078      	str	r0, [r7, #4]
   int_t i;

   //Check whether the specified multiple precision integer is empty
   if(a->size == 0)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	685b      	ldr	r3, [r3, #4]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d101      	bne.n	80007c6 <mpiGetLength+0x14>
      return 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	e016      	b.n	80007f4 <mpiGetLength+0x42>

   //Start from the most significant word
   for(i = a->size - 1; i >= 0; i--)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	685b      	ldr	r3, [r3, #4]
 80007ca:	3b01      	subs	r3, #1
 80007cc:	60fb      	str	r3, [r7, #12]
 80007ce:	e00a      	b.n	80007e6 <mpiGetLength+0x34>
   {
      //Loop as long as the current word is zero
      if(a->data[i] != 0)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	689a      	ldr	r2, [r3, #8]
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	009b      	lsls	r3, r3, #2
 80007d8:	4413      	add	r3, r2
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d106      	bne.n	80007ee <mpiGetLength+0x3c>
   for(i = a->size - 1; i >= 0; i--)
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	3b01      	subs	r3, #1
 80007e4:	60fb      	str	r3, [r7, #12]
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	daf1      	bge.n	80007d0 <mpiGetLength+0x1e>
 80007ec:	e000      	b.n	80007f0 <mpiGetLength+0x3e>
         break;
 80007ee:	bf00      	nop
   }

   //Return the actual length
   return i + 1;
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	3301      	adds	r3, #1
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3714      	adds	r7, #20
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr

08000800 <mpiGetByteLength>:
 * @param[in] a Pointer to a multiple precision integer
 * @return The actual byte count
 **/

uint_t mpiGetByteLength(const Mpi *a)
{
 8000800:	b480      	push	{r7}
 8000802:	b085      	sub	sp, #20
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
   uint_t n;
   uint32_t m;

   //Check whether the specified multiple precision integer is empty
   if(a->size == 0)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	685b      	ldr	r3, [r3, #4]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d101      	bne.n	8000814 <mpiGetByteLength+0x14>
      return 0;
 8000810:	2300      	movs	r3, #0
 8000812:	e029      	b.n	8000868 <mpiGetByteLength+0x68>

   //Start from the most significant word
   for(n = a->size - 1; n > 0; n--)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	685b      	ldr	r3, [r3, #4]
 8000818:	3b01      	subs	r3, #1
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	e00a      	b.n	8000834 <mpiGetByteLength+0x34>
   {
      //Loop as long as the current word is zero
      if(a->data[n] != 0)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	689a      	ldr	r2, [r3, #8]
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	009b      	lsls	r3, r3, #2
 8000826:	4413      	add	r3, r2
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d106      	bne.n	800083c <mpiGetByteLength+0x3c>
   for(n = a->size - 1; n > 0; n--)
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	3b01      	subs	r3, #1
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d1f1      	bne.n	800081e <mpiGetByteLength+0x1e>
 800083a:	e000      	b.n	800083e <mpiGetByteLength+0x3e>
         break;
 800083c:	bf00      	nop
   }

   //Get the current word
   m = a->data[n];
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	689a      	ldr	r2, [r3, #8]
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	009b      	lsls	r3, r3, #2
 8000846:	4413      	add	r3, r2
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	60bb      	str	r3, [r7, #8]
   //Convert the length to a byte count
   n *= MPI_INT_SIZE;
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	009b      	lsls	r3, r3, #2
 8000850:	60fb      	str	r3, [r7, #12]

   //Adjust the byte count
   for(; m != 0; m >>= 8)
 8000852:	e005      	b.n	8000860 <mpiGetByteLength+0x60>
   {
      n++;
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	3301      	adds	r3, #1
 8000858:	60fb      	str	r3, [r7, #12]
   for(; m != 0; m >>= 8)
 800085a:	68bb      	ldr	r3, [r7, #8]
 800085c:	0a1b      	lsrs	r3, r3, #8
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d1f6      	bne.n	8000854 <mpiGetByteLength+0x54>
   }

   //Return the actual length in bytes
   return n;
 8000866:	68fb      	ldr	r3, [r7, #12]
}
 8000868:	4618      	mov	r0, r3
 800086a:	3714      	adds	r7, #20
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr

08000874 <mpiGetBitLength>:
 * @param[in] a Pointer to a multiple precision integer
 * @return The actual bit count
 **/

uint_t mpiGetBitLength(const Mpi *a)
{
 8000874:	b480      	push	{r7}
 8000876:	b085      	sub	sp, #20
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
   uint_t n;
   uint32_t m;

   //Check whether the specified multiple precision integer is empty
   if(a->size == 0)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	685b      	ldr	r3, [r3, #4]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d101      	bne.n	8000888 <mpiGetBitLength+0x14>
      return 0;
 8000884:	2300      	movs	r3, #0
 8000886:	e029      	b.n	80008dc <mpiGetBitLength+0x68>

   //Start from the most significant word
   for(n = a->size - 1; n > 0; n--)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	685b      	ldr	r3, [r3, #4]
 800088c:	3b01      	subs	r3, #1
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	e00a      	b.n	80008a8 <mpiGetBitLength+0x34>
   {
      //Loop as long as the current word is zero
      if(a->data[n] != 0)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	689a      	ldr	r2, [r3, #8]
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	009b      	lsls	r3, r3, #2
 800089a:	4413      	add	r3, r2
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d106      	bne.n	80008b0 <mpiGetBitLength+0x3c>
   for(n = a->size - 1; n > 0; n--)
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	3b01      	subs	r3, #1
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d1f1      	bne.n	8000892 <mpiGetBitLength+0x1e>
 80008ae:	e000      	b.n	80008b2 <mpiGetBitLength+0x3e>
         break;
 80008b0:	bf00      	nop
   }

   //Get the current word
   m = a->data[n];
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	689a      	ldr	r2, [r3, #8]
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	009b      	lsls	r3, r3, #2
 80008ba:	4413      	add	r3, r2
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	60bb      	str	r3, [r7, #8]
   //Convert the length to a bit count
   n *= MPI_INT_SIZE * 8;
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	015b      	lsls	r3, r3, #5
 80008c4:	60fb      	str	r3, [r7, #12]

   //Adjust the bit count
   for(; m != 0; m >>= 1)
 80008c6:	e005      	b.n	80008d4 <mpiGetBitLength+0x60>
   {
      n++;
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	3301      	adds	r3, #1
 80008cc:	60fb      	str	r3, [r7, #12]
   for(; m != 0; m >>= 1)
 80008ce:	68bb      	ldr	r3, [r7, #8]
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	60bb      	str	r3, [r7, #8]
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d1f6      	bne.n	80008c8 <mpiGetBitLength+0x54>
   }

   //Return the actual length in bits
   return n;
 80008da:	68fb      	ldr	r3, [r7, #12]
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3714      	adds	r7, #20
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr

080008e8 <mpiGetBitValue>:
 * @param[in] index Position where to read the bit
 * @return The actual bit value
 **/

uint_t mpiGetBitValue(const Mpi *a, uint_t index)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b085      	sub	sp, #20
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	6039      	str	r1, [r7, #0]
   uint_t n1;
   uint_t n2;

   //Retrieve the position of the bit to be read
   n1 = index / (MPI_INT_SIZE * 8);
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	095b      	lsrs	r3, r3, #5
 80008f6:	60fb      	str	r3, [r7, #12]
   n2 = index % (MPI_INT_SIZE * 8);
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	f003 031f 	and.w	r3, r3, #31
 80008fe:	60bb      	str	r3, [r7, #8]

   //Index out of range?
   if(n1 >= a->size)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	68fa      	ldr	r2, [r7, #12]
 8000906:	429a      	cmp	r2, r3
 8000908:	d301      	bcc.n	800090e <mpiGetBitValue+0x26>
      return 0;
 800090a:	2300      	movs	r3, #0
 800090c:	e00a      	b.n	8000924 <mpiGetBitValue+0x3c>

   //Return the actual bit value
   return (a->data[n1] >> n2) & 0x01;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	689a      	ldr	r2, [r3, #8]
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	009b      	lsls	r3, r3, #2
 8000916:	4413      	add	r3, r2
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	68bb      	ldr	r3, [r7, #8]
 800091c:	fa22 f303 	lsr.w	r3, r2, r3
 8000920:	f003 0301 	and.w	r3, r3, #1
}
 8000924:	4618      	mov	r0, r3
 8000926:	3714      	adds	r7, #20
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr

08000930 <mpiComp>:
 * @param[in] b The second multiple precision integer to be compared
 * @return Comparison result
 **/

int_t mpiComp(const Mpi *a, const Mpi *b)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	6039      	str	r1, [r7, #0]
   uint_t m;
   uint_t n;

   //Determine the actual length of A and B
   m = mpiGetLength(a);
 800093a:	6878      	ldr	r0, [r7, #4]
 800093c:	f7ff ff39 	bl	80007b2 <mpiGetLength>
 8000940:	60b8      	str	r0, [r7, #8]
   n = mpiGetLength(b);
 8000942:	6838      	ldr	r0, [r7, #0]
 8000944:	f7ff ff35 	bl	80007b2 <mpiGetLength>
 8000948:	60f8      	str	r0, [r7, #12]

   //Compare lengths
   if(!m && !n)
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d104      	bne.n	800095a <mpiComp+0x2a>
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d101      	bne.n	800095a <mpiComp+0x2a>
      return 0;
 8000956:	2300      	movs	r3, #0
 8000958:	e04c      	b.n	80009f4 <mpiComp+0xc4>
   else if(m > n)
 800095a:	68ba      	ldr	r2, [r7, #8]
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	429a      	cmp	r2, r3
 8000960:	d902      	bls.n	8000968 <mpiComp+0x38>
      return a->sign;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	e045      	b.n	80009f4 <mpiComp+0xc4>
   else if(m < n)
 8000968:	68ba      	ldr	r2, [r7, #8]
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	429a      	cmp	r2, r3
 800096e:	d203      	bcs.n	8000978 <mpiComp+0x48>
      return -b->sign;
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	425b      	negs	r3, r3
 8000976:	e03d      	b.n	80009f4 <mpiComp+0xc4>

   //Compare signs
   if(a->sign > 0 && b->sign < 0)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	2b00      	cmp	r3, #0
 800097e:	dd05      	ble.n	800098c <mpiComp+0x5c>
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	2b00      	cmp	r3, #0
 8000986:	da01      	bge.n	800098c <mpiComp+0x5c>
      return 1;
 8000988:	2301      	movs	r3, #1
 800098a:	e033      	b.n	80009f4 <mpiComp+0xc4>
   else if(a->sign < 0 && b->sign > 0)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	2b00      	cmp	r3, #0
 8000992:	da29      	bge.n	80009e8 <mpiComp+0xb8>
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	2b00      	cmp	r3, #0
 800099a:	dd25      	ble.n	80009e8 <mpiComp+0xb8>
      return -1;
 800099c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009a0:	e028      	b.n	80009f4 <mpiComp+0xc4>

   //Then compare values
   while(n--)
   {
      if(a->data[n] > b->data[n])
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	689a      	ldr	r2, [r3, #8]
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	4413      	add	r3, r2
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	6899      	ldr	r1, [r3, #8]
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	009b      	lsls	r3, r3, #2
 80009b6:	440b      	add	r3, r1
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	429a      	cmp	r2, r3
 80009bc:	d902      	bls.n	80009c4 <mpiComp+0x94>
         return a->sign;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	e017      	b.n	80009f4 <mpiComp+0xc4>
      else if(a->data[n] < b->data[n])
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	689a      	ldr	r2, [r3, #8]
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	4413      	add	r3, r2
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	6899      	ldr	r1, [r3, #8]
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	009b      	lsls	r3, r3, #2
 80009d8:	440b      	add	r3, r1
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	429a      	cmp	r2, r3
 80009de:	d203      	bcs.n	80009e8 <mpiComp+0xb8>
         return -a->sign;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	425b      	negs	r3, r3
 80009e6:	e005      	b.n	80009f4 <mpiComp+0xc4>
   while(n--)
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	1e5a      	subs	r2, r3, #1
 80009ec:	60fa      	str	r2, [r7, #12]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d1d7      	bne.n	80009a2 <mpiComp+0x72>
   }

   //Multiple precision integers are equals
   return 0;
 80009f2:	2300      	movs	r3, #0
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3710      	adds	r7, #16
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}

080009fc <mpiCompInt>:
 * @param[in] b Integer to be compared
 * @return Comparison result
 **/

int_t mpiCompInt(const Mpi *a, int_t b)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b086      	sub	sp, #24
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
 8000a04:	6039      	str	r1, [r7, #0]
   uint_t value;
   Mpi t;

   //Initialize a temporary multiple precision integer
   value = (b >= 0) ? b : -b;
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	bfb8      	it	lt
 8000a0c:	425b      	neglt	r3, r3
 8000a0e:	617b      	str	r3, [r7, #20]
   t.sign = (b >= 0) ? 1 : -1;
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	db01      	blt.n	8000a1a <mpiCompInt+0x1e>
 8000a16:	2301      	movs	r3, #1
 8000a18:	e001      	b.n	8000a1e <mpiCompInt+0x22>
 8000a1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a1e:	60bb      	str	r3, [r7, #8]
   t.size = 1;
 8000a20:	2301      	movs	r3, #1
 8000a22:	60fb      	str	r3, [r7, #12]
   t.data = &value;
 8000a24:	f107 0314 	add.w	r3, r7, #20
 8000a28:	613b      	str	r3, [r7, #16]

   //Return comparison result
   return mpiComp(a, &t);
 8000a2a:	f107 0308 	add.w	r3, r7, #8
 8000a2e:	4619      	mov	r1, r3
 8000a30:	6878      	ldr	r0, [r7, #4]
 8000a32:	f7ff ff7d 	bl	8000930 <mpiComp>
 8000a36:	4603      	mov	r3, r0
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3718      	adds	r7, #24
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <mpiCompAbs>:
 * @param[in] b The second multiple precision integer to be compared
 * @return Comparison result
 **/

int_t mpiCompAbs(const Mpi *a, const Mpi *b)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	6039      	str	r1, [r7, #0]
   uint_t m;
   uint_t n;

   //Determine the actual length of A and B
   m = mpiGetLength(a);
 8000a4a:	6878      	ldr	r0, [r7, #4]
 8000a4c:	f7ff feb1 	bl	80007b2 <mpiGetLength>
 8000a50:	60b8      	str	r0, [r7, #8]
   n = mpiGetLength(b);
 8000a52:	6838      	ldr	r0, [r7, #0]
 8000a54:	f7ff fead 	bl	80007b2 <mpiGetLength>
 8000a58:	60f8      	str	r0, [r7, #12]

   //Compare lengths
   if(!m && !n)
 8000a5a:	68bb      	ldr	r3, [r7, #8]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d104      	bne.n	8000a6a <mpiCompAbs+0x2a>
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d101      	bne.n	8000a6a <mpiCompAbs+0x2a>
      return 0;
 8000a66:	2300      	movs	r3, #0
 8000a68:	e033      	b.n	8000ad2 <mpiCompAbs+0x92>
   else if(m > n)
 8000a6a:	68ba      	ldr	r2, [r7, #8]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	429a      	cmp	r2, r3
 8000a70:	d901      	bls.n	8000a76 <mpiCompAbs+0x36>
      return 1;
 8000a72:	2301      	movs	r3, #1
 8000a74:	e02d      	b.n	8000ad2 <mpiCompAbs+0x92>
   else if(m < n)
 8000a76:	68ba      	ldr	r2, [r7, #8]
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	429a      	cmp	r2, r3
 8000a7c:	d223      	bcs.n	8000ac6 <mpiCompAbs+0x86>
      return -1;
 8000a7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a82:	e026      	b.n	8000ad2 <mpiCompAbs+0x92>

   //Then compare values
   while(n--)
   {
      if(a->data[n] > b->data[n])
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	689a      	ldr	r2, [r3, #8]
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	009b      	lsls	r3, r3, #2
 8000a8c:	4413      	add	r3, r2
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	6899      	ldr	r1, [r3, #8]
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	009b      	lsls	r3, r3, #2
 8000a98:	440b      	add	r3, r1
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	d901      	bls.n	8000aa4 <mpiCompAbs+0x64>
         return 1;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	e016      	b.n	8000ad2 <mpiCompAbs+0x92>
      else if(a->data[n] < b->data[n])
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	689a      	ldr	r2, [r3, #8]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	009b      	lsls	r3, r3, #2
 8000aac:	4413      	add	r3, r2
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	6899      	ldr	r1, [r3, #8]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	009b      	lsls	r3, r3, #2
 8000ab8:	440b      	add	r3, r1
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	d202      	bcs.n	8000ac6 <mpiCompAbs+0x86>
         return -1;
 8000ac0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ac4:	e005      	b.n	8000ad2 <mpiCompAbs+0x92>
   while(n--)
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	1e5a      	subs	r2, r3, #1
 8000aca:	60fa      	str	r2, [r7, #12]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d1d9      	bne.n	8000a84 <mpiCompAbs+0x44>
   }

   //Operands are equals
   return 0;
 8000ad0:	2300      	movs	r3, #0
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3710      	adds	r7, #16
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <mpiCopy>:
 * @param[in] a Pointer to a multiple precision integer (source)
 * @return Error code
 **/

error_t mpiCopy(Mpi *r, const Mpi *a)
{
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b084      	sub	sp, #16
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	6078      	str	r0, [r7, #4]
 8000ae2:	6039      	str	r1, [r7, #0]
   error_t error;
   uint_t n;

   //R and A are the same instance?
   if(r == a)
 8000ae4:	687a      	ldr	r2, [r7, #4]
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	d101      	bne.n	8000af0 <mpiCopy+0x16>
      return NO_ERROR;
 8000aec:	2300      	movs	r3, #0
 8000aee:	e025      	b.n	8000b3c <mpiCopy+0x62>

   //Determine the actual length of A
   n = mpiGetLength(a);
 8000af0:	6838      	ldr	r0, [r7, #0]
 8000af2:	f7ff fe5e 	bl	80007b2 <mpiGetLength>
 8000af6:	60f8      	str	r0, [r7, #12]

   //Ajust the size of the destination operand
   error = mpiGrow(r, n);
 8000af8:	68f9      	ldr	r1, [r7, #12]
 8000afa:	6878      	ldr	r0, [r7, #4]
 8000afc:	f7ff fe19 	bl	8000732 <mpiGrow>
 8000b00:	4603      	mov	r3, r0
 8000b02:	817b      	strh	r3, [r7, #10]
   //Any error to report?
   if(error)
 8000b04:	897b      	ldrh	r3, [r7, #10]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <mpiCopy+0x34>
      return error;
 8000b0a:	897b      	ldrh	r3, [r7, #10]
 8000b0c:	e016      	b.n	8000b3c <mpiCopy+0x62>

   //Clear the contents of the multiple precision integer
   osMemset(r->data, 0, r->size * MPI_INT_SIZE);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	6898      	ldr	r0, [r3, #8]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	009b      	lsls	r3, r3, #2
 8000b18:	461a      	mov	r2, r3
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	f005 fd20 	bl	8006560 <memset>
   //Let R = A
   osMemcpy(r->data, a->data, n * MPI_INT_SIZE);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	6898      	ldr	r0, [r3, #8]
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	6899      	ldr	r1, [r3, #8]
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	f005 fd09 	bl	8006544 <memcpy>
   //Set the sign of R
   r->sign = a->sign;
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	601a      	str	r2, [r3, #0]

   //Successful operation
   return NO_ERROR;
 8000b3a:	2300      	movs	r3, #0
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3710      	adds	r7, #16
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <mpiSetValue>:
 * @param[in] a Value to be assigned to the multiple precision integer
 * @return Error code
 **/

error_t mpiSetValue(Mpi *r, int_t a)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	6039      	str	r1, [r7, #0]
   error_t error;

   //Ajust the size of the destination operand
   error = mpiGrow(r, 1);
 8000b4e:	2101      	movs	r1, #1
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f7ff fdee 	bl	8000732 <mpiGrow>
 8000b56:	4603      	mov	r3, r0
 8000b58:	81fb      	strh	r3, [r7, #14]
   //Failed to adjust the size?
   if(error)
 8000b5a:	89fb      	ldrh	r3, [r7, #14]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <mpiSetValue+0x20>
      return error;
 8000b60:	89fb      	ldrh	r3, [r7, #14]
 8000b62:	e01a      	b.n	8000b9a <mpiSetValue+0x56>

   //Clear the contents of the multiple precision integer
   osMemset(r->data, 0, r->size * MPI_INT_SIZE);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	6898      	ldr	r0, [r3, #8]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	009b      	lsls	r3, r3, #2
 8000b6e:	461a      	mov	r2, r3
 8000b70:	2100      	movs	r1, #0
 8000b72:	f005 fcf5 	bl	8006560 <memset>
   //Set the value or R
   r->data[0] = (a >= 0) ? a : -a;
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000b7c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	689b      	ldr	r3, [r3, #8]
 8000b84:	601a      	str	r2, [r3, #0]
   //Set the sign of R
   r->sign = (a >= 0) ? 1 : -1;
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	db01      	blt.n	8000b90 <mpiSetValue+0x4c>
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	e001      	b.n	8000b94 <mpiSetValue+0x50>
 8000b90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	601a      	str	r2, [r3, #0]

   //Successful operation
   return NO_ERROR;
 8000b98:	2300      	movs	r3, #0
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3710      	adds	r7, #16
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <mpiImport>:
 * @param[in] format Input format
 * @return Error code
 **/

error_t mpiImport(Mpi *r, const uint8_t *data, uint_t length, MpiFormat format)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b086      	sub	sp, #24
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	60f8      	str	r0, [r7, #12]
 8000baa:	60b9      	str	r1, [r7, #8]
 8000bac:	607a      	str	r2, [r7, #4]
 8000bae:	70fb      	strb	r3, [r7, #3]
   error_t error;
   uint_t i;

   //Check input format
   if(format == MPI_FORMAT_LITTLE_ENDIAN)
 8000bb0:	78fb      	ldrb	r3, [r7, #3]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d14d      	bne.n	8000c52 <mpiImport+0xb0>
   {
      //Skip trailing zeroes
      while(length > 0 && data[length - 1] == 0)
 8000bb6:	e002      	b.n	8000bbe <mpiImport+0x1c>
      {
         length--;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	3b01      	subs	r3, #1
 8000bbc:	607b      	str	r3, [r7, #4]
      while(length > 0 && data[length - 1] == 0)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d006      	beq.n	8000bd2 <mpiImport+0x30>
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	68ba      	ldr	r2, [r7, #8]
 8000bca:	4413      	add	r3, r2
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d0f2      	beq.n	8000bb8 <mpiImport+0x16>
      }

      //Ajust the size of the multiple precision integer
      error = mpiGrow(r, (length + MPI_INT_SIZE - 1) / MPI_INT_SIZE);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	3303      	adds	r3, #3
 8000bd6:	089b      	lsrs	r3, r3, #2
 8000bd8:	4619      	mov	r1, r3
 8000bda:	68f8      	ldr	r0, [r7, #12]
 8000bdc:	f7ff fda9 	bl	8000732 <mpiGrow>
 8000be0:	4603      	mov	r3, r0
 8000be2:	82fb      	strh	r3, [r7, #22]

      //Check status code
      if(!error)
 8000be4:	8afb      	ldrh	r3, [r7, #22]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	f040 808a 	bne.w	8000d00 <mpiImport+0x15e>
      {
         //Clear the contents of the multiple precision integer
         osMemset(r->data, 0, r->size * MPI_INT_SIZE);
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	6898      	ldr	r0, [r3, #8]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	009b      	lsls	r3, r3, #2
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	f005 fcb1 	bl	8006560 <memset>
         //Set sign
         r->sign = 1;
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	2201      	movs	r2, #1
 8000c02:	601a      	str	r2, [r3, #0]

         //Import data
         for(i = 0; i < length; i++, data++)
 8000c04:	2300      	movs	r3, #0
 8000c06:	613b      	str	r3, [r7, #16]
 8000c08:	e01e      	b.n	8000c48 <mpiImport+0xa6>
         {
            r->data[i / MPI_INT_SIZE] |= *data << ((i % MPI_INT_SIZE) * 8);
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	689a      	ldr	r2, [r3, #8]
 8000c0e:	693b      	ldr	r3, [r7, #16]
 8000c10:	f023 0303 	bic.w	r3, r3, #3
 8000c14:	4413      	add	r3, r2
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	693b      	ldr	r3, [r7, #16]
 8000c20:	f003 0303 	and.w	r3, r3, #3
 8000c24:	00db      	lsls	r3, r3, #3
 8000c26:	fa01 f303 	lsl.w	r3, r1, r3
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	6899      	ldr	r1, [r3, #8]
 8000c30:	693b      	ldr	r3, [r7, #16]
 8000c32:	f023 0303 	bic.w	r3, r3, #3
 8000c36:	440b      	add	r3, r1
 8000c38:	4302      	orrs	r2, r0
 8000c3a:	601a      	str	r2, [r3, #0]
         for(i = 0; i < length; i++, data++)
 8000c3c:	693b      	ldr	r3, [r7, #16]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	613b      	str	r3, [r7, #16]
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	3301      	adds	r3, #1
 8000c46:	60bb      	str	r3, [r7, #8]
 8000c48:	693a      	ldr	r2, [r7, #16]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d3dc      	bcc.n	8000c0a <mpiImport+0x68>
 8000c50:	e056      	b.n	8000d00 <mpiImport+0x15e>
         }
      }
   }
   else if(format == MPI_FORMAT_BIG_ENDIAN)
 8000c52:	78fb      	ldrb	r3, [r7, #3]
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d151      	bne.n	8000cfc <mpiImport+0x15a>
   {
      //Skip leading zeroes
      while(length > 1 && *data == 0)
 8000c58:	e005      	b.n	8000c66 <mpiImport+0xc4>
      {
         data++;
 8000c5a:	68bb      	ldr	r3, [r7, #8]
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	60bb      	str	r3, [r7, #8]
         length--;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	3b01      	subs	r3, #1
 8000c64:	607b      	str	r3, [r7, #4]
      while(length > 1 && *data == 0)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d903      	bls.n	8000c74 <mpiImport+0xd2>
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d0f2      	beq.n	8000c5a <mpiImport+0xb8>
      }

      //Ajust the size of the multiple precision integer
      error = mpiGrow(r, (length + MPI_INT_SIZE - 1) / MPI_INT_SIZE);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	3303      	adds	r3, #3
 8000c78:	089b      	lsrs	r3, r3, #2
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	68f8      	ldr	r0, [r7, #12]
 8000c7e:	f7ff fd58 	bl	8000732 <mpiGrow>
 8000c82:	4603      	mov	r3, r0
 8000c84:	82fb      	strh	r3, [r7, #22]

      //Check status code
      if(!error)
 8000c86:	8afb      	ldrh	r3, [r7, #22]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d139      	bne.n	8000d00 <mpiImport+0x15e>
      {
         //Clear the contents of the multiple precision integer
         osMemset(r->data, 0, r->size * MPI_INT_SIZE);
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	6898      	ldr	r0, [r3, #8]
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	461a      	mov	r2, r3
 8000c98:	2100      	movs	r1, #0
 8000c9a:	f005 fc61 	bl	8006560 <memset>
         //Set sign
         r->sign = 1;
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	601a      	str	r2, [r3, #0]

         //Start from the least significant byte
         data += length - 1;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3b01      	subs	r3, #1
 8000ca8:	68ba      	ldr	r2, [r7, #8]
 8000caa:	4413      	add	r3, r2
 8000cac:	60bb      	str	r3, [r7, #8]

         //Import data
         for(i = 0; i < length; i++, data--)
 8000cae:	2300      	movs	r3, #0
 8000cb0:	613b      	str	r3, [r7, #16]
 8000cb2:	e01e      	b.n	8000cf2 <mpiImport+0x150>
         {
            r->data[i / MPI_INT_SIZE] |= *data << ((i % MPI_INT_SIZE) * 8);
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	689a      	ldr	r2, [r3, #8]
 8000cb8:	693b      	ldr	r3, [r7, #16]
 8000cba:	f023 0303 	bic.w	r3, r3, #3
 8000cbe:	4413      	add	r3, r2
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	693b      	ldr	r3, [r7, #16]
 8000cca:	f003 0303 	and.w	r3, r3, #3
 8000cce:	00db      	lsls	r3, r3, #3
 8000cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	6899      	ldr	r1, [r3, #8]
 8000cda:	693b      	ldr	r3, [r7, #16]
 8000cdc:	f023 0303 	bic.w	r3, r3, #3
 8000ce0:	440b      	add	r3, r1
 8000ce2:	4302      	orrs	r2, r0
 8000ce4:	601a      	str	r2, [r3, #0]
         for(i = 0; i < length; i++, data--)
 8000ce6:	693b      	ldr	r3, [r7, #16]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	613b      	str	r3, [r7, #16]
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	3b01      	subs	r3, #1
 8000cf0:	60bb      	str	r3, [r7, #8]
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	429a      	cmp	r2, r3
 8000cf8:	d3dc      	bcc.n	8000cb4 <mpiImport+0x112>
 8000cfa:	e001      	b.n	8000d00 <mpiImport+0x15e>
      }
   }
   else
   {
      //Report an error
      error = ERROR_INVALID_PARAMETER;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	82fb      	strh	r3, [r7, #22]
   }

   //Return status code
   return error;
 8000d00:	8afb      	ldrh	r3, [r7, #22]
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3718      	adds	r7, #24
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <mpiExport>:
 * @param[in] format Output format
 * @return Error code
 **/

error_t mpiExport(const Mpi *a, uint8_t *data, uint_t length, MpiFormat format)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b088      	sub	sp, #32
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	60f8      	str	r0, [r7, #12]
 8000d12:	60b9      	str	r1, [r7, #8]
 8000d14:	607a      	str	r2, [r7, #4]
 8000d16:	70fb      	strb	r3, [r7, #3]
   uint_t i;
   uint_t n;
   error_t error;

   //Initialize status code
   error = NO_ERROR;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	837b      	strh	r3, [r7, #26]

   //Check input format
   if(format == MPI_FORMAT_LITTLE_ENDIAN)
 8000d1c:	78fb      	ldrb	r3, [r7, #3]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d12d      	bne.n	8000d7e <mpiExport+0x74>
   {
      //Get the actual length in bytes
      n = mpiGetByteLength(a);
 8000d22:	68f8      	ldr	r0, [r7, #12]
 8000d24:	f7ff fd6c 	bl	8000800 <mpiGetByteLength>
 8000d28:	6178      	str	r0, [r7, #20]

      //Make sure the output buffer is large enough
      if(n <= length)
 8000d2a:	697a      	ldr	r2, [r7, #20]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d822      	bhi.n	8000d78 <mpiExport+0x6e>
      {
         //Clear output buffer
         osMemset(data, 0, length);
 8000d32:	687a      	ldr	r2, [r7, #4]
 8000d34:	2100      	movs	r1, #0
 8000d36:	68b8      	ldr	r0, [r7, #8]
 8000d38:	f005 fc12 	bl	8006560 <memset>

         //Export data
         for(i = 0; i < n; i++, data++)
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	61fb      	str	r3, [r7, #28]
 8000d40:	e015      	b.n	8000d6e <mpiExport+0x64>
         {
            *data = a->data[i / MPI_INT_SIZE] >> ((i % MPI_INT_SIZE) * 8);
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	689a      	ldr	r2, [r3, #8]
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	f023 0303 	bic.w	r3, r3, #3
 8000d4c:	4413      	add	r3, r2
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	69fb      	ldr	r3, [r7, #28]
 8000d52:	f003 0303 	and.w	r3, r3, #3
 8000d56:	00db      	lsls	r3, r3, #3
 8000d58:	fa22 f303 	lsr.w	r3, r2, r3
 8000d5c:	b2da      	uxtb	r2, r3
 8000d5e:	68bb      	ldr	r3, [r7, #8]
 8000d60:	701a      	strb	r2, [r3, #0]
         for(i = 0; i < n; i++, data++)
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	3301      	adds	r3, #1
 8000d66:	61fb      	str	r3, [r7, #28]
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	60bb      	str	r3, [r7, #8]
 8000d6e:	69fa      	ldr	r2, [r7, #28]
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	429a      	cmp	r2, r3
 8000d74:	d3e5      	bcc.n	8000d42 <mpiExport+0x38>
 8000d76:	e03a      	b.n	8000dee <mpiExport+0xe4>
         }
      }
      else
      {
         //Report an error
         error = ERROR_INVALID_LENGTH;
 8000d78:	23ec      	movs	r3, #236	; 0xec
 8000d7a:	837b      	strh	r3, [r7, #26]
 8000d7c:	e037      	b.n	8000dee <mpiExport+0xe4>
      }
   }
   else if(format == MPI_FORMAT_BIG_ENDIAN)
 8000d7e:	78fb      	ldrb	r3, [r7, #3]
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d132      	bne.n	8000dea <mpiExport+0xe0>
   {
      //Get the actual length in bytes
      n = mpiGetByteLength(a);
 8000d84:	68f8      	ldr	r0, [r7, #12]
 8000d86:	f7ff fd3b 	bl	8000800 <mpiGetByteLength>
 8000d8a:	6178      	str	r0, [r7, #20]

      //Make sure the output buffer is large enough
      if(n <= length)
 8000d8c:	697a      	ldr	r2, [r7, #20]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d827      	bhi.n	8000de4 <mpiExport+0xda>
      {
         //Clear output buffer
         osMemset(data, 0, length);
 8000d94:	687a      	ldr	r2, [r7, #4]
 8000d96:	2100      	movs	r1, #0
 8000d98:	68b8      	ldr	r0, [r7, #8]
 8000d9a:	f005 fbe1 	bl	8006560 <memset>

         //Point to the least significant word
         data += length - 1;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	3b01      	subs	r3, #1
 8000da2:	68ba      	ldr	r2, [r7, #8]
 8000da4:	4413      	add	r3, r2
 8000da6:	60bb      	str	r3, [r7, #8]

         //Export data
         for(i = 0; i < n; i++, data--)
 8000da8:	2300      	movs	r3, #0
 8000daa:	61fb      	str	r3, [r7, #28]
 8000dac:	e015      	b.n	8000dda <mpiExport+0xd0>
         {
            *data = a->data[i / MPI_INT_SIZE] >> ((i % MPI_INT_SIZE) * 8);
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	689a      	ldr	r2, [r3, #8]
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	f023 0303 	bic.w	r3, r3, #3
 8000db8:	4413      	add	r3, r2
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	f003 0303 	and.w	r3, r3, #3
 8000dc2:	00db      	lsls	r3, r3, #3
 8000dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8000dc8:	b2da      	uxtb	r2, r3
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	701a      	strb	r2, [r3, #0]
         for(i = 0; i < n; i++, data--)
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	61fb      	str	r3, [r7, #28]
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	3b01      	subs	r3, #1
 8000dd8:	60bb      	str	r3, [r7, #8]
 8000dda:	69fa      	ldr	r2, [r7, #28]
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	429a      	cmp	r2, r3
 8000de0:	d3e5      	bcc.n	8000dae <mpiExport+0xa4>
 8000de2:	e004      	b.n	8000dee <mpiExport+0xe4>
         }
      }
      else
      {
         //Report an error
         error = ERROR_INVALID_LENGTH;
 8000de4:	23ec      	movs	r3, #236	; 0xec
 8000de6:	837b      	strh	r3, [r7, #26]
 8000de8:	e001      	b.n	8000dee <mpiExport+0xe4>
      }
   }
   else
   {
      //Report an error
      error = ERROR_INVALID_PARAMETER;
 8000dea:	2302      	movs	r3, #2
 8000dec:	837b      	strh	r3, [r7, #26]
   }

   //Return status code
   return error;
 8000dee:	8b7b      	ldrh	r3, [r7, #26]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3720      	adds	r7, #32
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <mpiAdd>:
 * @param[in] b Second operand B
 * @return Error code
 **/

error_t mpiAdd(Mpi *r, const Mpi *a, const Mpi *b)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b086      	sub	sp, #24
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	60f8      	str	r0, [r7, #12]
 8000e00:	60b9      	str	r1, [r7, #8]
 8000e02:	607a      	str	r2, [r7, #4]
   error_t error;
   int_t sign;

   //Retrieve the sign of A
   sign = a->sign;
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	613b      	str	r3, [r7, #16]

   //Both operands have the same sign?
   if(a->sign == b->sign)
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	429a      	cmp	r2, r3
 8000e14:	d10a      	bne.n	8000e2c <mpiAdd+0x34>
   {
      //Perform addition
      error = mpiAddAbs(r, a, b);
 8000e16:	687a      	ldr	r2, [r7, #4]
 8000e18:	68b9      	ldr	r1, [r7, #8]
 8000e1a:	68f8      	ldr	r0, [r7, #12]
 8000e1c:	f000 f864 	bl	8000ee8 <mpiAddAbs>
 8000e20:	4603      	mov	r3, r0
 8000e22:	82fb      	strh	r3, [r7, #22]
      //Set the sign of the resulting number
      r->sign = sign;
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	e01c      	b.n	8000e66 <mpiAdd+0x6e>
   }
   //Operands have different signs?
   else
   {
      //Compare the absolute value of A and B
      if(mpiCompAbs(a, b) >= 0)
 8000e2c:	6879      	ldr	r1, [r7, #4]
 8000e2e:	68b8      	ldr	r0, [r7, #8]
 8000e30:	f7ff fe06 	bl	8000a40 <mpiCompAbs>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	db0a      	blt.n	8000e50 <mpiAdd+0x58>
      {
         //Perform subtraction
         error = mpiSubAbs(r, a, b);
 8000e3a:	687a      	ldr	r2, [r7, #4]
 8000e3c:	68b9      	ldr	r1, [r7, #8]
 8000e3e:	68f8      	ldr	r0, [r7, #12]
 8000e40:	f000 f903 	bl	800104a <mpiSubAbs>
 8000e44:	4603      	mov	r3, r0
 8000e46:	82fb      	strh	r3, [r7, #22]
         //Set the sign of the resulting number
         r->sign = sign;
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	e00a      	b.n	8000e66 <mpiAdd+0x6e>
      }
      else
      {
         //Perform subtraction
         error = mpiSubAbs(r, b, a);
 8000e50:	68ba      	ldr	r2, [r7, #8]
 8000e52:	6879      	ldr	r1, [r7, #4]
 8000e54:	68f8      	ldr	r0, [r7, #12]
 8000e56:	f000 f8f8 	bl	800104a <mpiSubAbs>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	82fb      	strh	r3, [r7, #22]
         //Set the sign of the resulting number
         r->sign = -sign;
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	425a      	negs	r2, r3
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	601a      	str	r2, [r3, #0]
      }
   }

   //Return status code
   return error;
 8000e66:	8afb      	ldrh	r3, [r7, #22]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3718      	adds	r7, #24
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <mpiSub>:
 * @param[in] b Second operand B
 * @return Error code
 **/

error_t mpiSub(Mpi *r, const Mpi *a, const Mpi *b)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b086      	sub	sp, #24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	607a      	str	r2, [r7, #4]
   error_t error;
   int_t sign;

   //Retrieve the sign of A
   sign = a->sign;
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	613b      	str	r3, [r7, #16]

   //Both operands have the same sign?
   if(a->sign == b->sign)
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	d11d      	bne.n	8000eca <mpiSub+0x5a>
   {
      //Compare the absolute value of A and B
      if(mpiCompAbs(a, b) >= 0)
 8000e8e:	6879      	ldr	r1, [r7, #4]
 8000e90:	68b8      	ldr	r0, [r7, #8]
 8000e92:	f7ff fdd5 	bl	8000a40 <mpiCompAbs>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	db0a      	blt.n	8000eb2 <mpiSub+0x42>
      {
         //Perform subtraction
         error = mpiSubAbs(r, a, b);
 8000e9c:	687a      	ldr	r2, [r7, #4]
 8000e9e:	68b9      	ldr	r1, [r7, #8]
 8000ea0:	68f8      	ldr	r0, [r7, #12]
 8000ea2:	f000 f8d2 	bl	800104a <mpiSubAbs>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	82fb      	strh	r3, [r7, #22]
         //Set the sign of the resulting number
         r->sign = sign;
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	e015      	b.n	8000ede <mpiSub+0x6e>
      }
      else
      {
         //Perform subtraction
         error = mpiSubAbs(r, b, a);
 8000eb2:	68ba      	ldr	r2, [r7, #8]
 8000eb4:	6879      	ldr	r1, [r7, #4]
 8000eb6:	68f8      	ldr	r0, [r7, #12]
 8000eb8:	f000 f8c7 	bl	800104a <mpiSubAbs>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	82fb      	strh	r3, [r7, #22]
         //Set the sign of the resulting number
         r->sign = -sign;
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	425a      	negs	r2, r3
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	e009      	b.n	8000ede <mpiSub+0x6e>
   }
   //Operands have different signs?
   else
   {
      //Perform addition
      error = mpiAddAbs(r, a, b);
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	68b9      	ldr	r1, [r7, #8]
 8000ece:	68f8      	ldr	r0, [r7, #12]
 8000ed0:	f000 f80a 	bl	8000ee8 <mpiAddAbs>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	82fb      	strh	r3, [r7, #22]
      //Set the sign of the resulting number
      r->sign = sign;
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	601a      	str	r2, [r3, #0]
   }

   //Return status code
   return error;
 8000ede:	8afb      	ldrh	r3, [r7, #22]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <mpiAddAbs>:
 * @param[in] b Second operand B
 * @return Error code
 **/

error_t mpiAddAbs(Mpi *r, const Mpi *a, const Mpi *b)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b08a      	sub	sp, #40	; 0x28
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
   uint_t n;
   uint_t c;
   uint_t d;

   //R and B are the same instance?
   if(r == b)
 8000ef4:	68fa      	ldr	r2, [r7, #12]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d106      	bne.n	8000f0a <mpiAddAbs+0x22>
   {
      //Swap A and B
      const Mpi *t = a;
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	61bb      	str	r3, [r7, #24]
      a = b;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	60bb      	str	r3, [r7, #8]
      b = t;
 8000f04:	69bb      	ldr	r3, [r7, #24]
 8000f06:	607b      	str	r3, [r7, #4]
 8000f08:	e00d      	b.n	8000f26 <mpiAddAbs+0x3e>
   }
   //R is neither A nor B?
   else if(r != a)
 8000f0a:	68fa      	ldr	r2, [r7, #12]
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	d009      	beq.n	8000f26 <mpiAddAbs+0x3e>
   {
      //Copy the first operand to R
      MPI_CHECK(mpiCopy(r, a));
 8000f12:	68b9      	ldr	r1, [r7, #8]
 8000f14:	68f8      	ldr	r0, [r7, #12]
 8000f16:	f7ff fde0 	bl	8000ada <mpiCopy>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000f1e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	f040 8086 	bne.w	8001032 <mpiAddAbs+0x14a>
   }

   //Determine the actual length of B
   n = mpiGetLength(b);
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f7ff fc43 	bl	80007b2 <mpiGetLength>
 8000f2c:	6178      	str	r0, [r7, #20]
   //Extend the size of the destination register as needed
   MPI_CHECK(mpiGrow(r, n));
 8000f2e:	6979      	ldr	r1, [r7, #20]
 8000f30:	68f8      	ldr	r0, [r7, #12]
 8000f32:	f7ff fbfe 	bl	8000732 <mpiGrow>
 8000f36:	4603      	mov	r3, r0
 8000f38:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000f3a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d17a      	bne.n	8001036 <mpiAddAbs+0x14e>

   //The result is always positive
   r->sign = 1;
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	2201      	movs	r2, #1
 8000f44:	601a      	str	r2, [r3, #0]
   //Clear carry bit
   c = 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	61fb      	str	r3, [r7, #28]

   //Add operands
   for(i = 0; i < n; i++)
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	623b      	str	r3, [r7, #32]
 8000f4e:	e02b      	b.n	8000fa8 <mpiAddAbs+0xc0>
   {
      //Add carry bit
      d = r->data[i] + c;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	689a      	ldr	r2, [r3, #8]
 8000f54:	6a3b      	ldr	r3, [r7, #32]
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	4413      	add	r3, r2
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	69fa      	ldr	r2, [r7, #28]
 8000f5e:	4413      	add	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
      //Update carry bit
      if(d != 0) c = 0;
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <mpiAddAbs+0x84>
 8000f68:	2300      	movs	r3, #0
 8000f6a:	61fb      	str	r3, [r7, #28]
      //Perform addition
      d += b->data[i];
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	689a      	ldr	r2, [r3, #8]
 8000f70:	6a3b      	ldr	r3, [r7, #32]
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	4413      	add	r3, r2
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	613b      	str	r3, [r7, #16]
      //Update carry bit
      if(d < b->data[i]) c = 1;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	689a      	ldr	r2, [r3, #8]
 8000f82:	6a3b      	ldr	r3, [r7, #32]
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	4413      	add	r3, r2
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d201      	bcs.n	8000f94 <mpiAddAbs+0xac>
 8000f90:	2301      	movs	r3, #1
 8000f92:	61fb      	str	r3, [r7, #28]
      //Save result
      r->data[i] = d;
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	689a      	ldr	r2, [r3, #8]
 8000f98:	6a3b      	ldr	r3, [r7, #32]
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	4413      	add	r3, r2
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	601a      	str	r2, [r3, #0]
   for(i = 0; i < n; i++)
 8000fa2:	6a3b      	ldr	r3, [r7, #32]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	623b      	str	r3, [r7, #32]
 8000fa8:	6a3a      	ldr	r2, [r7, #32]
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d3cf      	bcc.n	8000f50 <mpiAddAbs+0x68>
   }

   //Loop as long as the carry bit is set
   for(i = n; c && i < r->size; i++)
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	623b      	str	r3, [r7, #32]
 8000fb4:	e01a      	b.n	8000fec <mpiAddAbs+0x104>
   {
      //Add carry bit
      r->data[i] += c;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	689a      	ldr	r2, [r3, #8]
 8000fba:	6a3b      	ldr	r3, [r7, #32]
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	4413      	add	r3, r2
 8000fc0:	6819      	ldr	r1, [r3, #0]
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	689a      	ldr	r2, [r3, #8]
 8000fc6:	6a3b      	ldr	r3, [r7, #32]
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	4413      	add	r3, r2
 8000fcc:	69fa      	ldr	r2, [r7, #28]
 8000fce:	440a      	add	r2, r1
 8000fd0:	601a      	str	r2, [r3, #0]
      //Update carry bit
      if(r->data[i] != 0) c = 0;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	689a      	ldr	r2, [r3, #8]
 8000fd6:	6a3b      	ldr	r3, [r7, #32]
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	4413      	add	r3, r2
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <mpiAddAbs+0xfe>
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61fb      	str	r3, [r7, #28]
   for(i = n; c && i < r->size; i++)
 8000fe6:	6a3b      	ldr	r3, [r7, #32]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	623b      	str	r3, [r7, #32]
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d004      	beq.n	8000ffc <mpiAddAbs+0x114>
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	6a3a      	ldr	r2, [r7, #32]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d3dc      	bcc.n	8000fb6 <mpiAddAbs+0xce>
   }

   //Check the final carry bit
   if(c && n >= r->size)
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d01b      	beq.n	800103a <mpiAddAbs+0x152>
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	697a      	ldr	r2, [r7, #20]
 8001008:	429a      	cmp	r2, r3
 800100a:	d316      	bcc.n	800103a <mpiAddAbs+0x152>
   {
      //Extend the size of the destination register
      MPI_CHECK(mpiGrow(r, n + 1));
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	3301      	adds	r3, #1
 8001010:	4619      	mov	r1, r3
 8001012:	68f8      	ldr	r0, [r7, #12]
 8001014:	f7ff fb8d 	bl	8000732 <mpiGrow>
 8001018:	4603      	mov	r3, r0
 800101a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800101c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800101e:	2b00      	cmp	r3, #0
 8001020:	d10d      	bne.n	800103e <mpiAddAbs+0x156>
      //Add carry bit
      r->data[n] = 1;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	689a      	ldr	r2, [r3, #8]
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	4413      	add	r3, r2
 800102c:	2201      	movs	r2, #1
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	e006      	b.n	8001040 <mpiAddAbs+0x158>
      MPI_CHECK(mpiCopy(r, a));
 8001032:	bf00      	nop
 8001034:	e004      	b.n	8001040 <mpiAddAbs+0x158>
   MPI_CHECK(mpiGrow(r, n));
 8001036:	bf00      	nop
 8001038:	e002      	b.n	8001040 <mpiAddAbs+0x158>
   }

end:
 800103a:	bf00      	nop
 800103c:	e000      	b.n	8001040 <mpiAddAbs+0x158>
      MPI_CHECK(mpiGrow(r, n + 1));
 800103e:	bf00      	nop
   //Return status code
   return error;
 8001040:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8001042:	4618      	mov	r0, r3
 8001044:	3728      	adds	r7, #40	; 0x28
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <mpiSubAbs>:
 * @param[in] b Second operand B
 * @return Error code
 **/

error_t mpiSubAbs(Mpi *r, const Mpi *a, const Mpi *b)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b08c      	sub	sp, #48	; 0x30
 800104e:	af00      	add	r7, sp, #0
 8001050:	60f8      	str	r0, [r7, #12]
 8001052:	60b9      	str	r1, [r7, #8]
 8001054:	607a      	str	r2, [r7, #4]
   uint_t i;
   uint_t m;
   uint_t n;

   //Check input parameters
   if(mpiCompAbs(a, b) < 0)
 8001056:	6879      	ldr	r1, [r7, #4]
 8001058:	68b8      	ldr	r0, [r7, #8]
 800105a:	f7ff fcf1 	bl	8000a40 <mpiCompAbs>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	da05      	bge.n	8001070 <mpiSubAbs+0x26>
   {
      //Swap A and B if necessary
      const Mpi *t = b;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	623b      	str	r3, [r7, #32]
      a = b;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	60bb      	str	r3, [r7, #8]
      b = t;
 800106c:	6a3b      	ldr	r3, [r7, #32]
 800106e:	607b      	str	r3, [r7, #4]
   }

   //Determine the actual length of A
   m = mpiGetLength(a);
 8001070:	68b8      	ldr	r0, [r7, #8]
 8001072:	f7ff fb9e 	bl	80007b2 <mpiGetLength>
 8001076:	61f8      	str	r0, [r7, #28]
   //Determine the actual length of B
   n = mpiGetLength(b);
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f7ff fb9a 	bl	80007b2 <mpiGetLength>
 800107e:	61b8      	str	r0, [r7, #24]

   //Extend the size of the destination register as needed
   MPI_CHECK(mpiGrow(r, m));
 8001080:	69f9      	ldr	r1, [r7, #28]
 8001082:	68f8      	ldr	r0, [r7, #12]
 8001084:	f7ff fb55 	bl	8000732 <mpiGrow>
 8001088:	4603      	mov	r3, r0
 800108a:	82fb      	strh	r3, [r7, #22]
 800108c:	8afb      	ldrh	r3, [r7, #22]
 800108e:	2b00      	cmp	r3, #0
 8001090:	f040 8087 	bne.w	80011a2 <mpiSubAbs+0x158>

   //The result is always positive
   r->sign = 1;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	2201      	movs	r2, #1
 8001098:	601a      	str	r2, [r3, #0]
   //Clear carry bit
   c = 0;
 800109a:	2300      	movs	r3, #0
 800109c:	62fb      	str	r3, [r7, #44]	; 0x2c

   //Subtract operands
   for(i = 0; i < n; i++)
 800109e:	2300      	movs	r3, #0
 80010a0:	627b      	str	r3, [r7, #36]	; 0x24
 80010a2:	e02d      	b.n	8001100 <mpiSubAbs+0xb6>
   {
      //Read first operand
      d = a->data[i];
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	689a      	ldr	r2, [r3, #8]
 80010a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	4413      	add	r3, r2
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	62bb      	str	r3, [r7, #40]	; 0x28

      //Check the carry bit
      if(c)
 80010b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d007      	beq.n	80010c8 <mpiSubAbs+0x7e>
      {
         //Update carry bit
         if(d != 0) c = 0;
 80010b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <mpiSubAbs+0x78>
 80010be:	2300      	movs	r3, #0
 80010c0:	62fb      	str	r3, [r7, #44]	; 0x2c
         //Propagate carry bit
         d -= 1;
 80010c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010c4:	3b01      	subs	r3, #1
 80010c6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      //Update carry bit
      if(d < b->data[i]) c = 1;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	689a      	ldr	r2, [r3, #8]
 80010cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	4413      	add	r3, r2
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010d6:	429a      	cmp	r2, r3
 80010d8:	d201      	bcs.n	80010de <mpiSubAbs+0x94>
 80010da:	2301      	movs	r3, #1
 80010dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      //Perform subtraction
      r->data[i] = d - b->data[i];
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	689a      	ldr	r2, [r3, #8]
 80010e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	4413      	add	r3, r2
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	6899      	ldr	r1, [r3, #8]
 80010ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	440b      	add	r3, r1
 80010f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80010f6:	1a8a      	subs	r2, r1, r2
 80010f8:	601a      	str	r2, [r3, #0]
   for(i = 0; i < n; i++)
 80010fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fc:	3301      	adds	r3, #1
 80010fe:	627b      	str	r3, [r7, #36]	; 0x24
 8001100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	429a      	cmp	r2, r3
 8001106:	d3cd      	bcc.n	80010a4 <mpiSubAbs+0x5a>
   }

   //Loop as long as the carry bit is set
   for(i = n; c && i < m; i++)
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	627b      	str	r3, [r7, #36]	; 0x24
 800110c:	e019      	b.n	8001142 <mpiSubAbs+0xf8>
   {
      //Update carry bit
      if(a->data[i] != 0) c = 0;
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	689a      	ldr	r2, [r3, #8]
 8001112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	4413      	add	r3, r2
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <mpiSubAbs+0xd8>
 800111e:	2300      	movs	r3, #0
 8001120:	62fb      	str	r3, [r7, #44]	; 0x2c
      //Propagate carry bit
      r->data[i] = a->data[i] - 1;
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	689a      	ldr	r2, [r3, #8]
 8001126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	4413      	add	r3, r2
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	6899      	ldr	r1, [r3, #8]
 8001132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	440b      	add	r3, r1
 8001138:	3a01      	subs	r2, #1
 800113a:	601a      	str	r2, [r3, #0]
   for(i = n; c && i < m; i++)
 800113c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113e:	3301      	adds	r3, #1
 8001140:	627b      	str	r3, [r7, #36]	; 0x24
 8001142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001144:	2b00      	cmp	r3, #0
 8001146:	d003      	beq.n	8001150 <mpiSubAbs+0x106>
 8001148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	429a      	cmp	r2, r3
 800114e:	d3de      	bcc.n	800110e <mpiSubAbs+0xc4>
   }

   //R and A are not the same instance?
   if(r != a)
 8001150:	68fa      	ldr	r2, [r7, #12]
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	429a      	cmp	r2, r3
 8001156:	d026      	beq.n	80011a6 <mpiSubAbs+0x15c>
   {
      //Copy the remaining words
      for(; i < m; i++)
 8001158:	e00e      	b.n	8001178 <mpiSubAbs+0x12e>
      {
         r->data[i] = a->data[i];
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	689a      	ldr	r2, [r3, #8]
 800115e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	441a      	add	r2, r3
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	6899      	ldr	r1, [r3, #8]
 8001168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	440b      	add	r3, r1
 800116e:	6812      	ldr	r2, [r2, #0]
 8001170:	601a      	str	r2, [r3, #0]
      for(; i < m; i++)
 8001172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001174:	3301      	adds	r3, #1
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
 8001178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	429a      	cmp	r2, r3
 800117e:	d3ec      	bcc.n	800115a <mpiSubAbs+0x110>
      }

      //Zero the upper part of R
      for(; i < r->size; i++)
 8001180:	e009      	b.n	8001196 <mpiSubAbs+0x14c>
      {
         r->data[i] = 0;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	689a      	ldr	r2, [r3, #8]
 8001186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	4413      	add	r3, r2
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
      for(; i < r->size; i++)
 8001190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001192:	3301      	adds	r3, #1
 8001194:	627b      	str	r3, [r7, #36]	; 0x24
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800119c:	429a      	cmp	r2, r3
 800119e:	d3f0      	bcc.n	8001182 <mpiSubAbs+0x138>
      }
   }

end:
 80011a0:	e001      	b.n	80011a6 <mpiSubAbs+0x15c>
   MPI_CHECK(mpiGrow(r, m));
 80011a2:	bf00      	nop
 80011a4:	e000      	b.n	80011a8 <mpiSubAbs+0x15e>
end:
 80011a6:	bf00      	nop
   //Return status code
   return error;
 80011a8:	8afb      	ldrh	r3, [r7, #22]
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3730      	adds	r7, #48	; 0x30
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <mpiShiftLeft>:
 * @param[in] n The number of bits to shift
 * @return Error code
 **/

error_t mpiShiftLeft(Mpi *r, uint_t n)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b086      	sub	sp, #24
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
 80011ba:	6039      	str	r1, [r7, #0]
   error_t error;
   uint_t i;

   //Number of 32-bit words to shift
   uint_t n1 = n / (MPI_INT_SIZE * 8);
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	095b      	lsrs	r3, r3, #5
 80011c0:	613b      	str	r3, [r7, #16]
   //Number of bits to shift
   uint_t n2 = n % (MPI_INT_SIZE * 8);
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	f003 031f 	and.w	r3, r3, #31
 80011c8:	60fb      	str	r3, [r7, #12]

   //Check parameters
   if(!r->size || !n)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d002      	beq.n	80011d8 <mpiShiftLeft+0x26>
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d101      	bne.n	80011dc <mpiShiftLeft+0x2a>
      return NO_ERROR;
 80011d8:	2300      	movs	r3, #0
 80011da:	e073      	b.n	80012c4 <mpiShiftLeft+0x112>

   //Increase the size of the multiple-precision number
   error = mpiGrow(r, r->size + (n + 31) / 32);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	685a      	ldr	r2, [r3, #4]
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	331f      	adds	r3, #31
 80011e4:	095b      	lsrs	r3, r3, #5
 80011e6:	4413      	add	r3, r2
 80011e8:	4619      	mov	r1, r3
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f7ff faa1 	bl	8000732 <mpiGrow>
 80011f0:	4603      	mov	r3, r0
 80011f2:	817b      	strh	r3, [r7, #10]
   //Check return code
   if(error)
 80011f4:	897b      	ldrh	r3, [r7, #10]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <mpiShiftLeft+0x4c>
      return error;
 80011fa:	897b      	ldrh	r3, [r7, #10]
 80011fc:	e062      	b.n	80012c4 <mpiShiftLeft+0x112>

   //First, shift words
   if(n1 > 0)
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d02a      	beq.n	800125a <mpiShiftLeft+0xa8>
   {
      //Process the most significant words
      for(i = r->size - 1; i >= n1; i--)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	3b01      	subs	r3, #1
 800120a:	617b      	str	r3, [r7, #20]
 800120c:	e010      	b.n	8001230 <mpiShiftLeft+0x7e>
      {
         r->data[i] = r->data[i - n1];
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	689a      	ldr	r2, [r3, #8]
 8001212:	6979      	ldr	r1, [r7, #20]
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	1acb      	subs	r3, r1, r3
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	441a      	add	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6899      	ldr	r1, [r3, #8]
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	440b      	add	r3, r1
 8001226:	6812      	ldr	r2, [r2, #0]
 8001228:	601a      	str	r2, [r3, #0]
      for(i = r->size - 1; i >= n1; i--)
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	3b01      	subs	r3, #1
 800122e:	617b      	str	r3, [r7, #20]
 8001230:	697a      	ldr	r2, [r7, #20]
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	429a      	cmp	r2, r3
 8001236:	d2ea      	bcs.n	800120e <mpiShiftLeft+0x5c>
      }

      //Fill the rest with zeroes
      for(i = 0; i < n1; i++)
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]
 800123c:	e009      	b.n	8001252 <mpiShiftLeft+0xa0>
      {
         r->data[i] = 0;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	689a      	ldr	r2, [r3, #8]
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	4413      	add	r3, r2
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
      for(i = 0; i < n1; i++)
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	3301      	adds	r3, #1
 8001250:	617b      	str	r3, [r7, #20]
 8001252:	697a      	ldr	r2, [r7, #20]
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	429a      	cmp	r2, r3
 8001258:	d3f1      	bcc.n	800123e <mpiShiftLeft+0x8c>
      }
   }

   //Then shift bits
   if(n2 > 0)
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d030      	beq.n	80012c2 <mpiShiftLeft+0x110>
   {
      //Process the most significant words
      for(i = r->size - 1; i >= 1; i--)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	3b01      	subs	r3, #1
 8001266:	617b      	str	r3, [r7, #20]
 8001268:	e01f      	b.n	80012aa <mpiShiftLeft+0xf8>
      {
         r->data[i] = (r->data[i] << n2) | (r->data[i - 1] >> (32 - n2));
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	689a      	ldr	r2, [r3, #8]
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	4413      	add	r3, r2
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	fa02 f103 	lsl.w	r1, r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	689a      	ldr	r2, [r3, #8]
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001286:	3b01      	subs	r3, #1
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	4413      	add	r3, r2
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	f1c3 0320 	rsb	r3, r3, #32
 8001294:	40da      	lsrs	r2, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6898      	ldr	r0, [r3, #8]
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	4403      	add	r3, r0
 80012a0:	430a      	orrs	r2, r1
 80012a2:	601a      	str	r2, [r3, #0]
      for(i = r->size - 1; i >= 1; i--)
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	3b01      	subs	r3, #1
 80012a8:	617b      	str	r3, [r7, #20]
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d1dc      	bne.n	800126a <mpiShiftLeft+0xb8>
      }

      //The least significant word requires a special handling
      r->data[0] <<= n2;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	6819      	ldr	r1, [r3, #0]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	68fa      	ldr	r2, [r7, #12]
 80012bc:	fa01 f202 	lsl.w	r2, r1, r2
 80012c0:	601a      	str	r2, [r3, #0]
   }

   //Shift operation is complete
   return NO_ERROR;
 80012c2:	2300      	movs	r3, #0
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3718      	adds	r7, #24
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <mpiShiftRight>:
 * @param[in] n The number of bits to shift
 * @return Error code
 **/

error_t mpiShiftRight(Mpi *r, uint_t n)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
   uint_t i;
   uint_t m;

   //Number of 32-bit words to shift
   uint_t n1 = n / (MPI_INT_SIZE * 8);
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	095b      	lsrs	r3, r3, #5
 80012da:	613b      	str	r3, [r7, #16]
   //Number of bits to shift
   uint_t n2 = n % (MPI_INT_SIZE * 8);
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	f003 031f 	and.w	r3, r3, #31
 80012e2:	60fb      	str	r3, [r7, #12]

   //Check parameters
   if(n1 >= r->size)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d30a      	bcc.n	8001304 <mpiShiftRight+0x38>
   {
      osMemset(r->data, 0, r->size * MPI_INT_SIZE);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6898      	ldr	r0, [r3, #8]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	461a      	mov	r2, r3
 80012fa:	2100      	movs	r1, #0
 80012fc:	f005 f930 	bl	8006560 <memset>
      return NO_ERROR;
 8001300:	2300      	movs	r3, #0
 8001302:	e06f      	b.n	80013e4 <mpiShiftRight+0x118>
   }

   //First, shift words
   if(n1 > 0)
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d02e      	beq.n	8001368 <mpiShiftRight+0x9c>
   {
      //Process the least significant words
      for(m = r->size - n1, i = 0; i < m; i++)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	685a      	ldr	r2, [r3, #4]
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	60bb      	str	r3, [r7, #8]
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]
 8001318:	e010      	b.n	800133c <mpiShiftRight+0x70>
      {
         r->data[i] = r->data[i + n1];
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	689a      	ldr	r2, [r3, #8]
 800131e:	6979      	ldr	r1, [r7, #20]
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	440b      	add	r3, r1
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	441a      	add	r2, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6899      	ldr	r1, [r3, #8]
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	440b      	add	r3, r1
 8001332:	6812      	ldr	r2, [r2, #0]
 8001334:	601a      	str	r2, [r3, #0]
      for(m = r->size - n1, i = 0; i < m; i++)
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	3301      	adds	r3, #1
 800133a:	617b      	str	r3, [r7, #20]
 800133c:	697a      	ldr	r2, [r7, #20]
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	429a      	cmp	r2, r3
 8001342:	d3ea      	bcc.n	800131a <mpiShiftRight+0x4e>
      }

      //Fill the rest with zeroes
      for(i = m; i < r->size; i++)
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	617b      	str	r3, [r7, #20]
 8001348:	e009      	b.n	800135e <mpiShiftRight+0x92>
      {
         r->data[i] = 0;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	689a      	ldr	r2, [r3, #8]
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	4413      	add	r3, r2
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
      for(i = m; i < r->size; i++)
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	3301      	adds	r3, #1
 800135c:	617b      	str	r3, [r7, #20]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	697a      	ldr	r2, [r7, #20]
 8001364:	429a      	cmp	r2, r3
 8001366:	d3f0      	bcc.n	800134a <mpiShiftRight+0x7e>
      }
   }

   //Then shift bits
   if(n2 > 0)
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d039      	beq.n	80013e2 <mpiShiftRight+0x116>
   {
      //Process the least significant words
      for(m = r->size - n1 - 1, i = 0; i < m; i++)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	685a      	ldr	r2, [r3, #4]
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	3b01      	subs	r3, #1
 8001378:	60bb      	str	r3, [r7, #8]
 800137a:	2300      	movs	r3, #0
 800137c:	617b      	str	r3, [r7, #20]
 800137e:	e01d      	b.n	80013bc <mpiShiftRight+0xf0>
      {
         r->data[i] = (r->data[i] >> n2) | (r->data[i + 1] << (32 - n2));
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	689a      	ldr	r2, [r3, #8]
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	4413      	add	r3, r2
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	fa22 f103 	lsr.w	r1, r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	689a      	ldr	r2, [r3, #8]
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	3301      	adds	r3, #1
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	4413      	add	r3, r2
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	f1c3 0320 	rsb	r3, r3, #32
 80013a6:	409a      	lsls	r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6898      	ldr	r0, [r3, #8]
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	4403      	add	r3, r0
 80013b2:	430a      	orrs	r2, r1
 80013b4:	601a      	str	r2, [r3, #0]
      for(m = r->size - n1 - 1, i = 0; i < m; i++)
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	3301      	adds	r3, #1
 80013ba:	617b      	str	r3, [r7, #20]
 80013bc:	697a      	ldr	r2, [r7, #20]
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d3dd      	bcc.n	8001380 <mpiShiftRight+0xb4>
      }

      //The most significant word requires a special handling
      r->data[m] >>= n2;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	689a      	ldr	r2, [r3, #8]
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	4413      	add	r3, r2
 80013ce:	6819      	ldr	r1, [r3, #0]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	689a      	ldr	r2, [r3, #8]
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	4413      	add	r3, r2
 80013da:	68fa      	ldr	r2, [r7, #12]
 80013dc:	fa21 f202 	lsr.w	r2, r1, r2
 80013e0:	601a      	str	r2, [r3, #0]
   }

   //Shift operation is complete
   return NO_ERROR;
 80013e2:	2300      	movs	r3, #0
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3718      	adds	r7, #24
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <mpiMul>:
 * @param[in] b Second operand B
 * @return Error code
 **/

__weak_func error_t mpiMul(Mpi *r, const Mpi *a, const Mpi *b)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08e      	sub	sp, #56	; 0x38
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	60b9      	str	r1, [r7, #8]
 80013f6:	607a      	str	r2, [r7, #4]
   int_t n;
   Mpi ta;
   Mpi tb;

   //Initialize multiple precision integers
   mpiInit(&ta);
 80013f8:	f107 031c 	add.w	r3, r7, #28
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff f965 	bl	80006cc <mpiInit>
   mpiInit(&tb);
 8001402:	f107 0310 	add.w	r3, r7, #16
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff f960 	bl	80006cc <mpiInit>

   //R and A are the same instance?
   if(r == a)
 800140c:	68fa      	ldr	r2, [r7, #12]
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	429a      	cmp	r2, r3
 8001412:	d10d      	bne.n	8001430 <mpiMul+0x44>
   {
      //Copy A to TA
      MPI_CHECK(mpiCopy(&ta, a));
 8001414:	f107 031c 	add.w	r3, r7, #28
 8001418:	68b9      	ldr	r1, [r7, #8]
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff fb5d 	bl	8000ada <mpiCopy>
 8001420:	4603      	mov	r3, r0
 8001422:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001424:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001426:	2b00      	cmp	r3, #0
 8001428:	d179      	bne.n	800151e <mpiMul+0x132>
      //Use TA instead of A
      a = &ta;
 800142a:	f107 031c 	add.w	r3, r7, #28
 800142e:	60bb      	str	r3, [r7, #8]
   }

   //R and B are the same instance?
   if(r == b)
 8001430:	68fa      	ldr	r2, [r7, #12]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	429a      	cmp	r2, r3
 8001436:	d10d      	bne.n	8001454 <mpiMul+0x68>
   {
      //Copy B to TB
      MPI_CHECK(mpiCopy(&tb, b));
 8001438:	f107 0310 	add.w	r3, r7, #16
 800143c:	6879      	ldr	r1, [r7, #4]
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff fb4b 	bl	8000ada <mpiCopy>
 8001444:	4603      	mov	r3, r0
 8001446:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001448:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800144a:	2b00      	cmp	r3, #0
 800144c:	d169      	bne.n	8001522 <mpiMul+0x136>
      //Use TB instead of B
      b = &tb;
 800144e:	f107 0310 	add.w	r3, r7, #16
 8001452:	607b      	str	r3, [r7, #4]
   }

   //Determine the actual length of A and B
   m = mpiGetLength(a);
 8001454:	68b8      	ldr	r0, [r7, #8]
 8001456:	f7ff f9ac 	bl	80007b2 <mpiGetLength>
 800145a:	4603      	mov	r3, r0
 800145c:	62fb      	str	r3, [r7, #44]	; 0x2c
   n = mpiGetLength(b);
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f7ff f9a7 	bl	80007b2 <mpiGetLength>
 8001464:	4603      	mov	r3, r0
 8001466:	62bb      	str	r3, [r7, #40]	; 0x28

   //Adjust the size of R
   MPI_CHECK(mpiGrow(r, m + n));
 8001468:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800146a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800146c:	4413      	add	r3, r2
 800146e:	4619      	mov	r1, r3
 8001470:	68f8      	ldr	r0, [r7, #12]
 8001472:	f7ff f95e 	bl	8000732 <mpiGrow>
 8001476:	4603      	mov	r3, r0
 8001478:	86fb      	strh	r3, [r7, #54]	; 0x36
 800147a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800147c:	2b00      	cmp	r3, #0
 800147e:	d152      	bne.n	8001526 <mpiMul+0x13a>
   //Set the sign of R
   r->sign = (a->sign == b->sign) ? 1 : -1;
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	429a      	cmp	r2, r3
 800148a:	d101      	bne.n	8001490 <mpiMul+0xa4>
 800148c:	2201      	movs	r2, #1
 800148e:	e001      	b.n	8001494 <mpiMul+0xa8>
 8001490:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	601a      	str	r2, [r3, #0]

   //Clear the contents of the destination integer
   osMemset(r->data, 0, r->size * MPI_INT_SIZE);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	6898      	ldr	r0, [r3, #8]
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	461a      	mov	r2, r3
 80014a4:	2100      	movs	r1, #0
 80014a6:	f005 f85b 	bl	8006560 <memset>

   //Perform multiplication
   if(m < n)
 80014aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ae:	429a      	cmp	r2, r3
 80014b0:	da1a      	bge.n	80014e8 <mpiMul+0xfc>
   {
      for(i = 0; i < m; i++)
 80014b2:	2300      	movs	r3, #0
 80014b4:	633b      	str	r3, [r7, #48]	; 0x30
 80014b6:	e012      	b.n	80014de <mpiMul+0xf2>
      {
         mpiMulAccCore(&r->data[i], b->data, n, a->data[i]);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	689a      	ldr	r2, [r3, #8]
 80014bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	18d0      	adds	r0, r2, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6899      	ldr	r1, [r3, #8]
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	689a      	ldr	r2, [r3, #8]
 80014ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	4413      	add	r3, r2
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80014d4:	f000 fd1f 	bl	8001f16 <mpiMulAccCore>
      for(i = 0; i < m; i++)
 80014d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014da:	3301      	adds	r3, #1
 80014dc:	633b      	str	r3, [r7, #48]	; 0x30
 80014de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014e2:	429a      	cmp	r2, r3
 80014e4:	dbe8      	blt.n	80014b8 <mpiMul+0xcc>
 80014e6:	e01f      	b.n	8001528 <mpiMul+0x13c>
      }
   }
   else
   {
      for(i = 0; i < n; i++)
 80014e8:	2300      	movs	r3, #0
 80014ea:	633b      	str	r3, [r7, #48]	; 0x30
 80014ec:	e012      	b.n	8001514 <mpiMul+0x128>
      {
         mpiMulAccCore(&r->data[i], a->data, m, b->data[i]);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	689a      	ldr	r2, [r3, #8]
 80014f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	18d0      	adds	r0, r2, r3
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	6899      	ldr	r1, [r3, #8]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689a      	ldr	r2, [r3, #8]
 8001500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	4413      	add	r3, r2
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800150a:	f000 fd04 	bl	8001f16 <mpiMulAccCore>
      for(i = 0; i < n; i++)
 800150e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001510:	3301      	adds	r3, #1
 8001512:	633b      	str	r3, [r7, #48]	; 0x30
 8001514:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001518:	429a      	cmp	r2, r3
 800151a:	dbe8      	blt.n	80014ee <mpiMul+0x102>
      }
   }

end:
 800151c:	e004      	b.n	8001528 <mpiMul+0x13c>
      MPI_CHECK(mpiCopy(&ta, a));
 800151e:	bf00      	nop
 8001520:	e002      	b.n	8001528 <mpiMul+0x13c>
      MPI_CHECK(mpiCopy(&tb, b));
 8001522:	bf00      	nop
 8001524:	e000      	b.n	8001528 <mpiMul+0x13c>
   MPI_CHECK(mpiGrow(r, m + n));
 8001526:	bf00      	nop
   //Release multiple precision integers
   mpiFree(&ta);
 8001528:	f107 031c 	add.w	r3, r7, #28
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff f8e0 	bl	80006f2 <mpiFree>
   mpiFree(&tb);
 8001532:	f107 0310 	add.w	r3, r7, #16
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff f8db 	bl	80006f2 <mpiFree>

   //Return status code
   return error;
 800153c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
}
 800153e:	4618      	mov	r0, r3
 8001540:	3738      	adds	r7, #56	; 0x38
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <mpiMod>:
 * @param[in] p The modulus P
 * @return Error code
 **/

error_t mpiMod(Mpi *r, const Mpi *a, const Mpi *p)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b08c      	sub	sp, #48	; 0x30
 800154a:	af00      	add	r7, sp, #0
 800154c:	60f8      	str	r0, [r7, #12]
 800154e:	60b9      	str	r1, [r7, #8]
 8001550:	607a      	str	r2, [r7, #4]
   uint_t m;
   uint_t n;
   Mpi c;

   //Make sure the modulus is positive
   if(mpiCompInt(p, 0) <= 0)
 8001552:	2100      	movs	r1, #0
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f7ff fa51 	bl	80009fc <mpiCompInt>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	dc01      	bgt.n	8001564 <mpiMod+0x1e>
      return ERROR_INVALID_PARAMETER;
 8001560:	2302      	movs	r3, #2
 8001562:	e07b      	b.n	800165c <mpiMod+0x116>

   //Initialize multiple precision integer
   mpiInit(&c);
 8001564:	f107 0314 	add.w	r3, r7, #20
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff f8af 	bl	80006cc <mpiInit>

   //Save the sign of A
   sign = a->sign;
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	62bb      	str	r3, [r7, #40]	; 0x28
   //Determine the actual length of A
   m = mpiGetBitLength(a);
 8001574:	68b8      	ldr	r0, [r7, #8]
 8001576:	f7ff f97d 	bl	8000874 <mpiGetBitLength>
 800157a:	6278      	str	r0, [r7, #36]	; 0x24
   //Determine the actual length of P
   n = mpiGetBitLength(p);
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f7ff f979 	bl	8000874 <mpiGetBitLength>
 8001582:	6238      	str	r0, [r7, #32]

   //Let R = A
   MPI_CHECK(mpiCopy(r, a));
 8001584:	68b9      	ldr	r1, [r7, #8]
 8001586:	68f8      	ldr	r0, [r7, #12]
 8001588:	f7ff faa7 	bl	8000ada <mpiCopy>
 800158c:	4603      	mov	r3, r0
 800158e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001590:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001592:	2b00      	cmp	r3, #0
 8001594:	d151      	bne.n	800163a <mpiMod+0xf4>

   if(m >= n)
 8001596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001598:	6a3b      	ldr	r3, [r7, #32]
 800159a:	429a      	cmp	r2, r3
 800159c:	d340      	bcc.n	8001620 <mpiMod+0xda>
   {
      MPI_CHECK(mpiCopy(&c, p));
 800159e:	f107 0314 	add.w	r3, r7, #20
 80015a2:	6879      	ldr	r1, [r7, #4]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff fa98 	bl	8000ada <mpiCopy>
 80015aa:	4603      	mov	r3, r0
 80015ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80015ae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d144      	bne.n	800163e <mpiMod+0xf8>
      MPI_CHECK(mpiShiftLeft(&c, m - n));
 80015b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015b6:	6a3b      	ldr	r3, [r7, #32]
 80015b8:	1ad2      	subs	r2, r2, r3
 80015ba:	f107 0314 	add.w	r3, r7, #20
 80015be:	4611      	mov	r1, r2
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff fdf6 	bl	80011b2 <mpiShiftLeft>
 80015c6:	4603      	mov	r3, r0
 80015c8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80015ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d138      	bne.n	8001642 <mpiMod+0xfc>

      while(mpiCompAbs(r, p) >= 0)
 80015d0:	e01f      	b.n	8001612 <mpiMod+0xcc>
      {
         if(mpiCompAbs(r, &c) >= 0)
 80015d2:	f107 0314 	add.w	r3, r7, #20
 80015d6:	4619      	mov	r1, r3
 80015d8:	68f8      	ldr	r0, [r7, #12]
 80015da:	f7ff fa31 	bl	8000a40 <mpiCompAbs>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	db0b      	blt.n	80015fc <mpiMod+0xb6>
         {
            MPI_CHECK(mpiSubAbs(r, r, &c));
 80015e4:	f107 0314 	add.w	r3, r7, #20
 80015e8:	461a      	mov	r2, r3
 80015ea:	68f9      	ldr	r1, [r7, #12]
 80015ec:	68f8      	ldr	r0, [r7, #12]
 80015ee:	f7ff fd2c 	bl	800104a <mpiSubAbs>
 80015f2:	4603      	mov	r3, r0
 80015f4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80015f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d124      	bne.n	8001646 <mpiMod+0x100>
         }

         MPI_CHECK(mpiShiftRight(&c, 1));
 80015fc:	f107 0314 	add.w	r3, r7, #20
 8001600:	2101      	movs	r1, #1
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff fe62 	bl	80012cc <mpiShiftRight>
 8001608:	4603      	mov	r3, r0
 800160a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800160c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800160e:	2b00      	cmp	r3, #0
 8001610:	d11b      	bne.n	800164a <mpiMod+0x104>
      while(mpiCompAbs(r, p) >= 0)
 8001612:	6879      	ldr	r1, [r7, #4]
 8001614:	68f8      	ldr	r0, [r7, #12]
 8001616:	f7ff fa13 	bl	8000a40 <mpiCompAbs>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	dad8      	bge.n	80015d2 <mpiMod+0x8c>
      }
   }

   if(sign < 0)
 8001620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001622:	2b00      	cmp	r3, #0
 8001624:	da13      	bge.n	800164e <mpiMod+0x108>
   {
      MPI_CHECK(mpiSubAbs(r, p, r));
 8001626:	68fa      	ldr	r2, [r7, #12]
 8001628:	6879      	ldr	r1, [r7, #4]
 800162a:	68f8      	ldr	r0, [r7, #12]
 800162c:	f7ff fd0d 	bl	800104a <mpiSubAbs>
 8001630:	4603      	mov	r3, r0
 8001632:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001634:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001636:	2b00      	cmp	r3, #0
   }

end:
 8001638:	e009      	b.n	800164e <mpiMod+0x108>
   MPI_CHECK(mpiCopy(r, a));
 800163a:	bf00      	nop
 800163c:	e008      	b.n	8001650 <mpiMod+0x10a>
      MPI_CHECK(mpiCopy(&c, p));
 800163e:	bf00      	nop
 8001640:	e006      	b.n	8001650 <mpiMod+0x10a>
      MPI_CHECK(mpiShiftLeft(&c, m - n));
 8001642:	bf00      	nop
 8001644:	e004      	b.n	8001650 <mpiMod+0x10a>
            MPI_CHECK(mpiSubAbs(r, r, &c));
 8001646:	bf00      	nop
 8001648:	e002      	b.n	8001650 <mpiMod+0x10a>
         MPI_CHECK(mpiShiftRight(&c, 1));
 800164a:	bf00      	nop
 800164c:	e000      	b.n	8001650 <mpiMod+0x10a>
end:
 800164e:	bf00      	nop
   //Release previously allocated memory
   mpiFree(&c);
 8001650:	f107 0314 	add.w	r3, r7, #20
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff f84c 	bl	80006f2 <mpiFree>

   //Return status code
   return error;
 800165a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 800165c:	4618      	mov	r0, r3
 800165e:	3730      	adds	r7, #48	; 0x30
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <mpiMulMod>:
 * @param[in] p The modulus P
 * @return Error code
 **/

__weak_func error_t mpiMulMod(Mpi *r, const Mpi *a, const Mpi *b, const Mpi *p)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
 8001670:	603b      	str	r3, [r7, #0]
   error_t error;

   //Perform modular multiplication
   MPI_CHECK(mpiMul(r, a, b));
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	68b9      	ldr	r1, [r7, #8]
 8001676:	68f8      	ldr	r0, [r7, #12]
 8001678:	f7ff feb8 	bl	80013ec <mpiMul>
 800167c:	4603      	mov	r3, r0
 800167e:	82fb      	strh	r3, [r7, #22]
 8001680:	8afb      	ldrh	r3, [r7, #22]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d109      	bne.n	800169a <mpiMulMod+0x36>
   MPI_CHECK(mpiMod(r, r, p));
 8001686:	683a      	ldr	r2, [r7, #0]
 8001688:	68f9      	ldr	r1, [r7, #12]
 800168a:	68f8      	ldr	r0, [r7, #12]
 800168c:	f7ff ff5b 	bl	8001546 <mpiMod>
 8001690:	4603      	mov	r3, r0
 8001692:	82fb      	strh	r3, [r7, #22]
 8001694:	8afb      	ldrh	r3, [r7, #22]
 8001696:	2b00      	cmp	r3, #0

end:
 8001698:	e000      	b.n	800169c <mpiMulMod+0x38>
   MPI_CHECK(mpiMul(r, a, b));
 800169a:	bf00      	nop
   //Return status code
   return error;
 800169c:	8afb      	ldrh	r3, [r7, #22]
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3718      	adds	r7, #24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <mpiExpMod>:
 * @param[in] p Modulus
 * @return Error code
 **/

__weak_func error_t mpiExpMod(Mpi *r, const Mpi *a, const Mpi *e, const Mpi *p)
{
 80016a6:	b590      	push	{r4, r7, lr}
 80016a8:	b0af      	sub	sp, #188	; 0xbc
 80016aa:	af02      	add	r7, sp, #8
 80016ac:	60f8      	str	r0, [r7, #12]
 80016ae:	60b9      	str	r1, [r7, #8]
 80016b0:	607a      	str	r2, [r7, #4]
 80016b2:	603b      	str	r3, [r7, #0]
   Mpi c2;
   Mpi t;
   Mpi s[8];

   //Initialize multiple precision integers
   mpiInit(&b);
 80016b4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff f807 	bl	80006cc <mpiInit>
   mpiInit(&c2);
 80016be:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff f802 	bl	80006cc <mpiInit>
   mpiInit(&t);
 80016c8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7fe fffd 	bl	80006cc <mpiInit>

   //Initialize precomputed values
   for(i = 0; (uint_t) i < arraysize(s); i++)
 80016d2:	2300      	movs	r3, #0
 80016d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80016d8:	e010      	b.n	80016fc <mpiExpMod+0x56>
   {
      mpiInit(&s[i]);
 80016da:	f107 0110 	add.w	r1, r7, #16
 80016de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80016e2:	4613      	mov	r3, r2
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	4413      	add	r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	440b      	add	r3, r1
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7fe ffed 	bl	80006cc <mpiInit>
   for(i = 0; (uint_t) i < arraysize(s); i++)
 80016f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80016f6:	3301      	adds	r3, #1
 80016f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80016fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001700:	2b07      	cmp	r3, #7
 8001702:	d9ea      	bls.n	80016da <mpiExpMod+0x34>
   }

   //Very small exponents are often selected with low Hamming weight.
   //The sliding window mechanism should be disabled in that case
   d = (mpiGetBitLength(e) <= 32) ? 1 : 4;
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f7ff f8b5 	bl	8000874 <mpiGetBitLength>
 800170a:	4603      	mov	r3, r0
 800170c:	2b20      	cmp	r3, #32
 800170e:	d801      	bhi.n	8001714 <mpiExpMod+0x6e>
 8001710:	2301      	movs	r3, #1
 8001712:	e000      	b.n	8001716 <mpiExpMod+0x70>
 8001714:	2304      	movs	r3, #4
 8001716:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

   //Even modulus?
   if(mpiIsEven(p))
 800171a:	2100      	movs	r1, #0
 800171c:	6838      	ldr	r0, [r7, #0]
 800171e:	f7ff f8e3 	bl	80008e8 <mpiGetBitValue>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	f040 80f2 	bne.w	800190e <mpiExpMod+0x268>
   {
      //Let B = A^2
      MPI_CHECK(mpiMulMod(&b, a, a, p));
 800172a:	f107 0088 	add.w	r0, r7, #136	; 0x88
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	68ba      	ldr	r2, [r7, #8]
 8001732:	68b9      	ldr	r1, [r7, #8]
 8001734:	f7ff ff96 	bl	8001664 <mpiMulMod>
 8001738:	4603      	mov	r3, r0
 800173a:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 800173e:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8001742:	2b00      	cmp	r3, #0
 8001744:	f040 828e 	bne.w	8001c64 <mpiExpMod+0x5be>
      //Let S[0] = A
      MPI_CHECK(mpiCopy(&s[0], a));
 8001748:	f107 0310 	add.w	r3, r7, #16
 800174c:	68b9      	ldr	r1, [r7, #8]
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff f9c3 	bl	8000ada <mpiCopy>
 8001754:	4603      	mov	r3, r0
 8001756:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 800175a:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 800175e:	2b00      	cmp	r3, #0
 8001760:	f040 8282 	bne.w	8001c68 <mpiExpMod+0x5c2>

      //Precompute S[i] = A^(2 * i + 1)
      for(i = 1; i < (1 << (d - 1)); i++)
 8001764:	2301      	movs	r3, #1
 8001766:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800176a:	e024      	b.n	80017b6 <mpiExpMod+0x110>
      {
         MPI_CHECK(mpiMulMod(&s[i], &s[i - 1], &b, p));
 800176c:	f107 0110 	add.w	r1, r7, #16
 8001770:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001774:	4613      	mov	r3, r2
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	4413      	add	r3, r2
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	18c8      	adds	r0, r1, r3
 800177e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001782:	1e5a      	subs	r2, r3, #1
 8001784:	f107 0110 	add.w	r1, r7, #16
 8001788:	4613      	mov	r3, r2
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	4413      	add	r3, r2
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	4419      	add	r1, r3
 8001792:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	f7ff ff64 	bl	8001664 <mpiMulMod>
 800179c:	4603      	mov	r3, r0
 800179e:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 80017a2:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	f040 8260 	bne.w	8001c6c <mpiExpMod+0x5c6>
      for(i = 1; i < (1 << (d - 1)); i++)
 80017ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80017b0:	3301      	adds	r3, #1
 80017b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80017b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80017ba:	3b01      	subs	r3, #1
 80017bc:	2201      	movs	r2, #1
 80017be:	fa02 f303 	lsl.w	r3, r2, r3
 80017c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80017c6:	429a      	cmp	r2, r3
 80017c8:	dbd0      	blt.n	800176c <mpiExpMod+0xc6>
      }

      //Let R = 1
      MPI_CHECK(mpiSetValue(r, 1));
 80017ca:	2101      	movs	r1, #1
 80017cc:	68f8      	ldr	r0, [r7, #12]
 80017ce:	f7ff f9b9 	bl	8000b44 <mpiSetValue>
 80017d2:	4603      	mov	r3, r0
 80017d4:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 80017d8:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80017dc:	2b00      	cmp	r3, #0
 80017de:	f040 8247 	bne.w	8001c70 <mpiExpMod+0x5ca>

      //The exponent is processed in a left-to-right fashion
      i = mpiGetBitLength(e) - 1;
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f7ff f846 	bl	8000874 <mpiGetBitLength>
 80017e8:	4603      	mov	r3, r0
 80017ea:	3b01      	subs	r3, #1
 80017ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      //Perform sliding window exponentiation
      while(i >= 0)
 80017f0:	e087      	b.n	8001902 <mpiExpMod+0x25c>
      {
         //The sliding window exponentiation algorithm decomposes E
         //into zero and nonzero windows
         if(!mpiGetBitValue(e, i))
 80017f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80017f6:	4619      	mov	r1, r3
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f7ff f875 	bl	80008e8 <mpiGetBitValue>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d113      	bne.n	800182c <mpiExpMod+0x186>
         {
            //Compute R = R^2
            MPI_CHECK(mpiMulMod(r, r, r, p));
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	68fa      	ldr	r2, [r7, #12]
 8001808:	68f9      	ldr	r1, [r7, #12]
 800180a:	68f8      	ldr	r0, [r7, #12]
 800180c:	f7ff ff2a 	bl	8001664 <mpiMulMod>
 8001810:	4603      	mov	r3, r0
 8001812:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8001816:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 800181a:	2b00      	cmp	r3, #0
 800181c:	f040 822a 	bne.w	8001c74 <mpiExpMod+0x5ce>
            //Next bit to be processed
            i--;
 8001820:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001824:	3b01      	subs	r3, #1
 8001826:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800182a:	e06a      	b.n	8001902 <mpiExpMod+0x25c>
         }
         else
         {
            //Find the longest window
            n = MAX(i - d + 1, 0);
 800182c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001830:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800183a:	d006      	beq.n	800184a <mpiExpMod+0x1a4>
 800183c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001840:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	3301      	adds	r3, #1
 8001848:	e000      	b.n	800184c <mpiExpMod+0x1a6>
 800184a:	2300      	movs	r3, #0
 800184c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

            //The least significant bit of the window must be equal to 1
            while(!mpiGetBitValue(e, n)) n++;
 8001850:	e004      	b.n	800185c <mpiExpMod+0x1b6>
 8001852:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001856:	3301      	adds	r3, #1
 8001858:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800185c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001860:	4619      	mov	r1, r3
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f7ff f840 	bl	80008e8 <mpiGetBitValue>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d0f1      	beq.n	8001852 <mpiExpMod+0x1ac>

            //The algorithm processes more than one bit per iteration
            for(u = 0, j = i; j >= n; j--)
 800186e:	2300      	movs	r3, #0
 8001870:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001874:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001878:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800187c:	e01f      	b.n	80018be <mpiExpMod+0x218>
            {
               //Compute R = R^2
               MPI_CHECK(mpiMulMod(r, r, r, p));
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	68fa      	ldr	r2, [r7, #12]
 8001882:	68f9      	ldr	r1, [r7, #12]
 8001884:	68f8      	ldr	r0, [r7, #12]
 8001886:	f7ff feed 	bl	8001664 <mpiMulMod>
 800188a:	4603      	mov	r3, r0
 800188c:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8001890:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8001894:	2b00      	cmp	r3, #0
 8001896:	f040 81ef 	bne.w	8001c78 <mpiExpMod+0x5d2>
               //Compute the relevant index to be used in the precomputed table
               u = (u << 1) | mpiGetBitValue(e, j);
 800189a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800189e:	005c      	lsls	r4, r3, #1
 80018a0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80018a4:	4619      	mov	r1, r3
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f7ff f81e 	bl	80008e8 <mpiGetBitValue>
 80018ac:	4603      	mov	r3, r0
 80018ae:	4323      	orrs	r3, r4
 80018b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
            for(u = 0, j = i; j >= n; j--)
 80018b4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80018b8:	3b01      	subs	r3, #1
 80018ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80018be:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80018c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80018c6:	429a      	cmp	r2, r3
 80018c8:	dad9      	bge.n	800187e <mpiExpMod+0x1d8>
            }

            //Perform a single multiplication per iteration
            MPI_CHECK(mpiMulMod(r, r, &s[u >> 1], p));
 80018ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80018ce:	085a      	lsrs	r2, r3, #1
 80018d0:	f107 0110 	add.w	r1, r7, #16
 80018d4:	4613      	mov	r3, r2
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	4413      	add	r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	18ca      	adds	r2, r1, r3
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	68f9      	ldr	r1, [r7, #12]
 80018e2:	68f8      	ldr	r0, [r7, #12]
 80018e4:	f7ff febe 	bl	8001664 <mpiMulMod>
 80018e8:	4603      	mov	r3, r0
 80018ea:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 80018ee:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	f040 81c2 	bne.w	8001c7c <mpiExpMod+0x5d6>
            //Next bit to be processed
            i = n - 1;
 80018f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80018fc:	3b01      	subs	r3, #1
 80018fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
      while(i >= 0)
 8001902:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001906:	2b00      	cmp	r3, #0
 8001908:	f6bf af73 	bge.w	80017f2 <mpiExpMod+0x14c>
 800190c:	e1d1      	b.n	8001cb2 <mpiExpMod+0x60c>
      }
   }
   else
   {
      //Compute the smaller C = (2^32)^k such as C > P
      k = mpiGetLength(p);
 800190e:	6838      	ldr	r0, [r7, #0]
 8001910:	f7fe ff4f 	bl	80007b2 <mpiGetLength>
 8001914:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

      //Compute C^2 mod P
      MPI_CHECK(mpiSetValue(&c2, 1));
 8001918:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800191c:	2101      	movs	r1, #1
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff f910 	bl	8000b44 <mpiSetValue>
 8001924:	4603      	mov	r3, r0
 8001926:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 800192a:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 800192e:	2b00      	cmp	r3, #0
 8001930:	f040 81a6 	bne.w	8001c80 <mpiExpMod+0x5da>
      MPI_CHECK(mpiShiftLeft(&c2, 2 * k * (MPI_INT_SIZE * 8)));
 8001934:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001938:	019a      	lsls	r2, r3, #6
 800193a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800193e:	4611      	mov	r1, r2
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff fc36 	bl	80011b2 <mpiShiftLeft>
 8001946:	4603      	mov	r3, r0
 8001948:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 800194c:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8001950:	2b00      	cmp	r3, #0
 8001952:	f040 8197 	bne.w	8001c84 <mpiExpMod+0x5de>
      MPI_CHECK(mpiMod(&c2, &c2, p));
 8001956:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 800195a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800195e:	683a      	ldr	r2, [r7, #0]
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff fdf0 	bl	8001546 <mpiMod>
 8001966:	4603      	mov	r3, r0
 8001968:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 800196c:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8001970:	2b00      	cmp	r3, #0
 8001972:	f040 8189 	bne.w	8001c88 <mpiExpMod+0x5e2>

      //Let B = A * C mod P
      if(mpiComp(a, p) >= 0)
 8001976:	6839      	ldr	r1, [r7, #0]
 8001978:	68b8      	ldr	r0, [r7, #8]
 800197a:	f7fe ffd9 	bl	8000930 <mpiComp>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	db25      	blt.n	80019d0 <mpiExpMod+0x32a>
      {
         MPI_CHECK(mpiMod(&b, a, p));
 8001984:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001988:	683a      	ldr	r2, [r7, #0]
 800198a:	68b9      	ldr	r1, [r7, #8]
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff fdda 	bl	8001546 <mpiMod>
 8001992:	4603      	mov	r3, r0
 8001994:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8001998:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 800199c:	2b00      	cmp	r3, #0
 800199e:	f040 8175 	bne.w	8001c8c <mpiExpMod+0x5e6>
         MPI_CHECK(mpiMontgomeryMul(&b, &b, &c2, k, p, &t));
 80019a2:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80019a6:	f107 0188 	add.w	r1, r7, #136	; 0x88
 80019aa:	f107 0088 	add.w	r0, r7, #136	; 0x88
 80019ae:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80019b2:	9301      	str	r3, [sp, #4]
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	9300      	str	r3, [sp, #0]
 80019b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80019bc:	f000 f9cb 	bl	8001d56 <mpiMontgomeryMul>
 80019c0:	4603      	mov	r3, r0
 80019c2:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 80019c6:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d016      	beq.n	80019fc <mpiExpMod+0x356>
 80019ce:	e170      	b.n	8001cb2 <mpiExpMod+0x60c>
      }
      else
      {
         MPI_CHECK(mpiMontgomeryMul(&b, a, &c2, k, p, &t));
 80019d0:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80019d4:	f107 0088 	add.w	r0, r7, #136	; 0x88
 80019d8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80019dc:	9301      	str	r3, [sp, #4]
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	9300      	str	r3, [sp, #0]
 80019e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80019e6:	68b9      	ldr	r1, [r7, #8]
 80019e8:	f000 f9b5 	bl	8001d56 <mpiMontgomeryMul>
 80019ec:	4603      	mov	r3, r0
 80019ee:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 80019f2:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	f040 814a 	bne.w	8001c90 <mpiExpMod+0x5ea>
      }

      //Let R = B^2 * C^-1 mod P
      MPI_CHECK(mpiMontgomeryMul(r, &b, &b, k, p, &t));
 80019fc:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001a00:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001a04:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001a08:	9301      	str	r3, [sp, #4]
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	9300      	str	r3, [sp, #0]
 8001a0e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001a12:	68f8      	ldr	r0, [r7, #12]
 8001a14:	f000 f99f 	bl	8001d56 <mpiMontgomeryMul>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8001a1e:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f040 8136 	bne.w	8001c94 <mpiExpMod+0x5ee>
      //Let S[0] = B
      MPI_CHECK(mpiCopy(&s[0], &b));
 8001a28:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001a2c:	f107 0310 	add.w	r3, r7, #16
 8001a30:	4611      	mov	r1, r2
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff f851 	bl	8000ada <mpiCopy>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8001a3e:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	f040 8128 	bne.w	8001c98 <mpiExpMod+0x5f2>

      //Precompute S[i] = B^(2 * i + 1) * C^-1 mod P
      for(i = 1; i < (1 << (d - 1)); i++)
 8001a48:	2301      	movs	r3, #1
 8001a4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001a4e:	e029      	b.n	8001aa4 <mpiExpMod+0x3fe>
      {
         MPI_CHECK(mpiMontgomeryMul(&s[i], &s[i - 1], r, k, p, &t));
 8001a50:	f107 0110 	add.w	r1, r7, #16
 8001a54:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001a58:	4613      	mov	r3, r2
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	4413      	add	r3, r2
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	18c8      	adds	r0, r1, r3
 8001a62:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a66:	1e5a      	subs	r2, r3, #1
 8001a68:	f107 0110 	add.w	r1, r7, #16
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	4413      	add	r3, r2
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	4419      	add	r1, r3
 8001a76:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001a7a:	9301      	str	r3, [sp, #4]
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001a84:	68fa      	ldr	r2, [r7, #12]
 8001a86:	f000 f966 	bl	8001d56 <mpiMontgomeryMul>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8001a90:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	f040 8101 	bne.w	8001c9c <mpiExpMod+0x5f6>
      for(i = 1; i < (1 << (d - 1)); i++)
 8001a9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001aa4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	2201      	movs	r2, #1
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	dbcb      	blt.n	8001a50 <mpiExpMod+0x3aa>
      }

      //Let R = C mod P
      MPI_CHECK(mpiCopy(r, &c2));
 8001ab8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001abc:	4619      	mov	r1, r3
 8001abe:	68f8      	ldr	r0, [r7, #12]
 8001ac0:	f7ff f80b 	bl	8000ada <mpiCopy>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8001aca:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f040 80e6 	bne.w	8001ca0 <mpiExpMod+0x5fa>
      MPI_CHECK(mpiMontgomeryRed(r, r, k, p, &t));
 8001ad4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001ad8:	9300      	str	r3, [sp, #0]
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001ae0:	68f9      	ldr	r1, [r7, #12]
 8001ae2:	68f8      	ldr	r0, [r7, #12]
 8001ae4:	f000 f9f7 	bl	8001ed6 <mpiMontgomeryRed>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8001aee:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	f040 80d6 	bne.w	8001ca4 <mpiExpMod+0x5fe>

      //The exponent is processed in a left-to-right fashion
      i = mpiGetBitLength(e) - 1;
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f7fe febb 	bl	8000874 <mpiGetBitLength>
 8001afe:	4603      	mov	r3, r0
 8001b00:	3b01      	subs	r3, #1
 8001b02:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      //Perform sliding window exponentiation
      while(i >= 0)
 8001b06:	e097      	b.n	8001c38 <mpiExpMod+0x592>
      {
         //The sliding window exponentiation algorithm decomposes E
         //into zero and nonzero windows
         if(!mpiGetBitValue(e, i))
 8001b08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f7fe feea 	bl	80008e8 <mpiGetBitValue>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d119      	bne.n	8001b4e <mpiExpMod+0x4a8>
         {
            //Compute R = R^2 * C^-1 mod P
            MPI_CHECK(mpiMontgomeryMul(r, r, r, k, p, &t));
 8001b1a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001b1e:	9301      	str	r3, [sp, #4]
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	9300      	str	r3, [sp, #0]
 8001b24:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001b28:	68fa      	ldr	r2, [r7, #12]
 8001b2a:	68f9      	ldr	r1, [r7, #12]
 8001b2c:	68f8      	ldr	r0, [r7, #12]
 8001b2e:	f000 f912 	bl	8001d56 <mpiMontgomeryMul>
 8001b32:	4603      	mov	r3, r0
 8001b34:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8001b38:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	f040 80b3 	bne.w	8001ca8 <mpiExpMod+0x602>
            //Next bit to be processed
            i--;
 8001b42:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b46:	3b01      	subs	r3, #1
 8001b48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001b4c:	e074      	b.n	8001c38 <mpiExpMod+0x592>
         }
         else
         {
            //Find the longest window
            n = MAX(i - d + 1, 0);
 8001b4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001b52:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b5c:	d006      	beq.n	8001b6c <mpiExpMod+0x4c6>
 8001b5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001b62:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	3301      	adds	r3, #1
 8001b6a:	e000      	b.n	8001b6e <mpiExpMod+0x4c8>
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

            //The least significant bit of the window must be equal to 1
            while(!mpiGetBitValue(e, n)) n++;
 8001b72:	e004      	b.n	8001b7e <mpiExpMod+0x4d8>
 8001b74:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001b78:	3301      	adds	r3, #1
 8001b7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001b7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001b82:	4619      	mov	r1, r3
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f7fe feaf 	bl	80008e8 <mpiGetBitValue>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d0f1      	beq.n	8001b74 <mpiExpMod+0x4ce>

            //The algorithm processes more than one bit per iteration
            for(u = 0, j = i; j >= n; j--)
 8001b90:	2300      	movs	r3, #0
 8001b92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001b96:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001b9e:	e024      	b.n	8001bea <mpiExpMod+0x544>
            {
               //Compute R = R^2 * C^-1 mod P
               MPI_CHECK(mpiMontgomeryMul(r, r, r, k, p, &t));
 8001ba0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001ba4:	9301      	str	r3, [sp, #4]
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	9300      	str	r3, [sp, #0]
 8001baa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	68f9      	ldr	r1, [r7, #12]
 8001bb2:	68f8      	ldr	r0, [r7, #12]
 8001bb4:	f000 f8cf 	bl	8001d56 <mpiMontgomeryMul>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8001bbe:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d172      	bne.n	8001cac <mpiExpMod+0x606>
               //Compute the relevant index to be used in the precomputed table
               u = (u << 1) | mpiGetBitValue(e, j);
 8001bc6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001bca:	005c      	lsls	r4, r3, #1
 8001bcc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f7fe fe88 	bl	80008e8 <mpiGetBitValue>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	4323      	orrs	r3, r4
 8001bdc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
            for(u = 0, j = i; j >= n; j--)
 8001be0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001be4:	3b01      	subs	r3, #1
 8001be6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001bea:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8001bee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	dad4      	bge.n	8001ba0 <mpiExpMod+0x4fa>
            }

            //Compute R = R * T[u/2] * C^-1 mod P
            MPI_CHECK(mpiMontgomeryMul(r, r, &s[u >> 1], k, p, &t));
 8001bf6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001bfa:	085a      	lsrs	r2, r3, #1
 8001bfc:	f107 0110 	add.w	r1, r7, #16
 8001c00:	4613      	mov	r3, r2
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	4413      	add	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	18ca      	adds	r2, r1, r3
 8001c0a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001c0e:	9301      	str	r3, [sp, #4]
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	9300      	str	r3, [sp, #0]
 8001c14:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001c18:	68f9      	ldr	r1, [r7, #12]
 8001c1a:	68f8      	ldr	r0, [r7, #12]
 8001c1c:	f000 f89b 	bl	8001d56 <mpiMontgomeryMul>
 8001c20:	4603      	mov	r3, r0
 8001c22:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8001c26:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d140      	bne.n	8001cb0 <mpiExpMod+0x60a>
            //Next bit to be processed
            i = n - 1;
 8001c2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001c32:	3b01      	subs	r3, #1
 8001c34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
      while(i >= 0)
 8001c38:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	f6bf af63 	bge.w	8001b08 <mpiExpMod+0x462>
         }
      }

      //Compute R = R * C^-1 mod P
      MPI_CHECK(mpiMontgomeryRed(r, r, k, p, &t));
 8001c42:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001c46:	9300      	str	r3, [sp, #0]
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001c4e:	68f9      	ldr	r1, [r7, #12]
 8001c50:	68f8      	ldr	r0, [r7, #12]
 8001c52:	f000 f940 	bl	8001ed6 <mpiMontgomeryRed>
 8001c56:	4603      	mov	r3, r0
 8001c58:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8001c5c:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8001c60:	2b00      	cmp	r3, #0
   }

end:
 8001c62:	e026      	b.n	8001cb2 <mpiExpMod+0x60c>
      MPI_CHECK(mpiMulMod(&b, a, a, p));
 8001c64:	bf00      	nop
 8001c66:	e024      	b.n	8001cb2 <mpiExpMod+0x60c>
      MPI_CHECK(mpiCopy(&s[0], a));
 8001c68:	bf00      	nop
 8001c6a:	e022      	b.n	8001cb2 <mpiExpMod+0x60c>
         MPI_CHECK(mpiMulMod(&s[i], &s[i - 1], &b, p));
 8001c6c:	bf00      	nop
 8001c6e:	e020      	b.n	8001cb2 <mpiExpMod+0x60c>
      MPI_CHECK(mpiSetValue(r, 1));
 8001c70:	bf00      	nop
 8001c72:	e01e      	b.n	8001cb2 <mpiExpMod+0x60c>
            MPI_CHECK(mpiMulMod(r, r, r, p));
 8001c74:	bf00      	nop
 8001c76:	e01c      	b.n	8001cb2 <mpiExpMod+0x60c>
               MPI_CHECK(mpiMulMod(r, r, r, p));
 8001c78:	bf00      	nop
 8001c7a:	e01a      	b.n	8001cb2 <mpiExpMod+0x60c>
            MPI_CHECK(mpiMulMod(r, r, &s[u >> 1], p));
 8001c7c:	bf00      	nop
 8001c7e:	e018      	b.n	8001cb2 <mpiExpMod+0x60c>
      MPI_CHECK(mpiSetValue(&c2, 1));
 8001c80:	bf00      	nop
 8001c82:	e016      	b.n	8001cb2 <mpiExpMod+0x60c>
      MPI_CHECK(mpiShiftLeft(&c2, 2 * k * (MPI_INT_SIZE * 8)));
 8001c84:	bf00      	nop
 8001c86:	e014      	b.n	8001cb2 <mpiExpMod+0x60c>
      MPI_CHECK(mpiMod(&c2, &c2, p));
 8001c88:	bf00      	nop
 8001c8a:	e012      	b.n	8001cb2 <mpiExpMod+0x60c>
         MPI_CHECK(mpiMod(&b, a, p));
 8001c8c:	bf00      	nop
 8001c8e:	e010      	b.n	8001cb2 <mpiExpMod+0x60c>
         MPI_CHECK(mpiMontgomeryMul(&b, a, &c2, k, p, &t));
 8001c90:	bf00      	nop
 8001c92:	e00e      	b.n	8001cb2 <mpiExpMod+0x60c>
      MPI_CHECK(mpiMontgomeryMul(r, &b, &b, k, p, &t));
 8001c94:	bf00      	nop
 8001c96:	e00c      	b.n	8001cb2 <mpiExpMod+0x60c>
      MPI_CHECK(mpiCopy(&s[0], &b));
 8001c98:	bf00      	nop
 8001c9a:	e00a      	b.n	8001cb2 <mpiExpMod+0x60c>
         MPI_CHECK(mpiMontgomeryMul(&s[i], &s[i - 1], r, k, p, &t));
 8001c9c:	bf00      	nop
 8001c9e:	e008      	b.n	8001cb2 <mpiExpMod+0x60c>
      MPI_CHECK(mpiCopy(r, &c2));
 8001ca0:	bf00      	nop
 8001ca2:	e006      	b.n	8001cb2 <mpiExpMod+0x60c>
      MPI_CHECK(mpiMontgomeryRed(r, r, k, p, &t));
 8001ca4:	bf00      	nop
 8001ca6:	e004      	b.n	8001cb2 <mpiExpMod+0x60c>
            MPI_CHECK(mpiMontgomeryMul(r, r, r, k, p, &t));
 8001ca8:	bf00      	nop
 8001caa:	e002      	b.n	8001cb2 <mpiExpMod+0x60c>
               MPI_CHECK(mpiMontgomeryMul(r, r, r, k, p, &t));
 8001cac:	bf00      	nop
 8001cae:	e000      	b.n	8001cb2 <mpiExpMod+0x60c>
            MPI_CHECK(mpiMontgomeryMul(r, r, &s[u >> 1], k, p, &t));
 8001cb0:	bf00      	nop
   //Release multiple precision integers
   mpiFree(&b);
 8001cb2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7fe fd1b 	bl	80006f2 <mpiFree>
   mpiFree(&c2);
 8001cbc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7fe fd16 	bl	80006f2 <mpiFree>
   mpiFree(&t);
 8001cc6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7fe fd11 	bl	80006f2 <mpiFree>

   //Release precomputed values
   for(i = 0; (uint_t) i < arraysize(s); i++)
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001cd6:	e010      	b.n	8001cfa <mpiExpMod+0x654>
   {
      mpiFree(&s[i]);
 8001cd8:	f107 0110 	add.w	r1, r7, #16
 8001cdc:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	4413      	add	r3, r2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	440b      	add	r3, r1
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7fe fd01 	bl	80006f2 <mpiFree>
   for(i = 0; (uint_t) i < arraysize(s); i++)
 8001cf0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001cfa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001cfe:	2b07      	cmp	r3, #7
 8001d00:	d9ea      	bls.n	8001cd8 <mpiExpMod+0x632>
   }

   //Return status code
   return error;
 8001d02:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	37b4      	adds	r7, #180	; 0xb4
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd90      	pop	{r4, r7, pc}

08001d0e <mpiExpModFast>:
 * @param[in] p Modulus
 * @return Error code
 **/

__weak_func error_t mpiExpModFast(Mpi *r, const Mpi *a, const Mpi *e, const Mpi *p)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b084      	sub	sp, #16
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	60f8      	str	r0, [r7, #12]
 8001d16:	60b9      	str	r1, [r7, #8]
 8001d18:	607a      	str	r2, [r7, #4]
 8001d1a:	603b      	str	r3, [r7, #0]
   //Perform modular exponentiation
   return mpiExpMod(r, a, e, p);
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	68b9      	ldr	r1, [r7, #8]
 8001d22:	68f8      	ldr	r0, [r7, #12]
 8001d24:	f7ff fcbf 	bl	80016a6 <mpiExpMod>
 8001d28:	4603      	mov	r3, r0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3710      	adds	r7, #16
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <mpiExpModRegular>:
 * @param[in] p Modulus
 * @return Error code
 **/

__weak_func error_t mpiExpModRegular(Mpi *r, const Mpi *a, const Mpi *e, const Mpi *p)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b084      	sub	sp, #16
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	60f8      	str	r0, [r7, #12]
 8001d3a:	60b9      	str	r1, [r7, #8]
 8001d3c:	607a      	str	r2, [r7, #4]
 8001d3e:	603b      	str	r3, [r7, #0]
   //Perform modular exponentiation
   return mpiExpMod(r, a, e, p);
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	68b9      	ldr	r1, [r7, #8]
 8001d46:	68f8      	ldr	r0, [r7, #12]
 8001d48:	f7ff fcad 	bl	80016a6 <mpiExpMod>
 8001d4c:	4603      	mov	r3, r0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3710      	adds	r7, #16
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <mpiMontgomeryMul>:
 * @return Error code
 **/

error_t mpiMontgomeryMul(Mpi *r, const Mpi *a, const Mpi *b, uint_t k,
   const Mpi *p, Mpi *t)
{
 8001d56:	b590      	push	{r4, r7, lr}
 8001d58:	b08b      	sub	sp, #44	; 0x2c
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	60f8      	str	r0, [r7, #12]
 8001d5e:	60b9      	str	r1, [r7, #8]
 8001d60:	607a      	str	r2, [r7, #4]
 8001d62:	603b      	str	r3, [r7, #0]
   uint_t m;
   uint_t n;
   uint_t q;

   //Use Newton's method to compute the inverse of P[0] mod 2^32
   for(m = 2 - p->data[0], i = 0; i < 4; i++)
 8001d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f1c3 0302 	rsb	r3, r3, #2
 8001d6e:	61fb      	str	r3, [r7, #28]
 8001d70:	2300      	movs	r3, #0
 8001d72:	623b      	str	r3, [r7, #32]
 8001d74:	e00e      	b.n	8001d94 <mpiMontgomeryMul+0x3e>
   {
      m = m * (2 - m * p->data[0]);
 8001d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	69fa      	ldr	r2, [r7, #28]
 8001d7e:	fb02 f303 	mul.w	r3, r2, r3
 8001d82:	f1c3 0202 	rsb	r2, r3, #2
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	fb02 f303 	mul.w	r3, r2, r3
 8001d8c:	61fb      	str	r3, [r7, #28]
   for(m = 2 - p->data[0], i = 0; i < 4; i++)
 8001d8e:	6a3b      	ldr	r3, [r7, #32]
 8001d90:	3301      	adds	r3, #1
 8001d92:	623b      	str	r3, [r7, #32]
 8001d94:	6a3b      	ldr	r3, [r7, #32]
 8001d96:	2b03      	cmp	r3, #3
 8001d98:	d9ed      	bls.n	8001d76 <mpiMontgomeryMul+0x20>
   }

   //Precompute -1/P[0] mod 2^32;
   m = ~m + 1;
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	425b      	negs	r3, r3
 8001d9e:	61fb      	str	r3, [r7, #28]

   //We assume that B is always less than 2^k
   n = MIN(b->size, k);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	4293      	cmp	r3, r2
 8001da8:	bf28      	it	cs
 8001daa:	4613      	movcs	r3, r2
 8001dac:	617b      	str	r3, [r7, #20]

   //Make sure T is large enough
   MPI_CHECK(mpiGrow(t, 2 * k + 1));
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	3301      	adds	r3, #1
 8001db4:	4619      	mov	r1, r3
 8001db6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001db8:	f7fe fcbb 	bl	8000732 <mpiGrow>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001dc0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d179      	bne.n	8001eba <mpiMontgomeryMul+0x164>
   //Let T = 0
   MPI_CHECK(mpiSetValue(t, 0));
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001dca:	f7fe febb 	bl	8000b44 <mpiSetValue>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001dd2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d172      	bne.n	8001ebe <mpiMontgomeryMul+0x168>

   //Perform Montgomery multiplication
   for(i = 0; i < k; i++)
 8001dd8:	2300      	movs	r3, #0
 8001dda:	623b      	str	r3, [r7, #32]
 8001ddc:	e044      	b.n	8001e68 <mpiMontgomeryMul+0x112>
   {
      //Check current index
      if(i < a->size)
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	6a3a      	ldr	r2, [r7, #32]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d227      	bcs.n	8001e38 <mpiMontgomeryMul+0xe2>
      {
         //Compute q = ((T[i] + A[i] * B[0]) * m) mod 2^32
         q = (t->data[i] + a->data[i] * b->data[0]) * m;
 8001de8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dea:	689a      	ldr	r2, [r3, #8]
 8001dec:	6a3b      	ldr	r3, [r7, #32]
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	4413      	add	r3, r2
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	6899      	ldr	r1, [r3, #8]
 8001df8:	6a3b      	ldr	r3, [r7, #32]
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	440b      	add	r3, r1
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	6879      	ldr	r1, [r7, #4]
 8001e02:	6889      	ldr	r1, [r1, #8]
 8001e04:	6809      	ldr	r1, [r1, #0]
 8001e06:	fb01 f303 	mul.w	r3, r1, r3
 8001e0a:	441a      	add	r2, r3
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	fb02 f303 	mul.w	r3, r2, r3
 8001e12:	61bb      	str	r3, [r7, #24]
         //Compute T = T + A[i] * B
         mpiMulAccCore(t->data + i, b->data, n, a->data[i]);
 8001e14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	6a3b      	ldr	r3, [r7, #32]
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	18d0      	adds	r0, r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6899      	ldr	r1, [r3, #8]
 8001e22:	697c      	ldr	r4, [r7, #20]
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	689a      	ldr	r2, [r3, #8]
 8001e28:	6a3b      	ldr	r3, [r7, #32]
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	4413      	add	r3, r2
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4622      	mov	r2, r4
 8001e32:	f000 f870 	bl	8001f16 <mpiMulAccCore>
 8001e36:	e009      	b.n	8001e4c <mpiMontgomeryMul+0xf6>
      }
      else
      {
         //Compute q = (T[i] * m) mod 2^32
         q = t->data[i] * m;
 8001e38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e3a:	689a      	ldr	r2, [r3, #8]
 8001e3c:	6a3b      	ldr	r3, [r7, #32]
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	4413      	add	r3, r2
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	fb02 f303 	mul.w	r3, r2, r3
 8001e4a:	61bb      	str	r3, [r7, #24]
      }

      //Compute T = T + q * P
      mpiMulAccCore(t->data + i, p->data, k, q);
 8001e4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e4e:	689a      	ldr	r2, [r3, #8]
 8001e50:	6a3b      	ldr	r3, [r7, #32]
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	18d0      	adds	r0, r2, r3
 8001e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e58:	6899      	ldr	r1, [r3, #8]
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	f000 f85a 	bl	8001f16 <mpiMulAccCore>
   for(i = 0; i < k; i++)
 8001e62:	6a3b      	ldr	r3, [r7, #32]
 8001e64:	3301      	adds	r3, #1
 8001e66:	623b      	str	r3, [r7, #32]
 8001e68:	6a3a      	ldr	r2, [r7, #32]
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d3b6      	bcc.n	8001dde <mpiMontgomeryMul+0x88>
   }

   //Compute R = T / 2^(32 * k)
   MPI_CHECK(mpiShiftRight(t, k * (MPI_INT_SIZE * 8)));
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	015b      	lsls	r3, r3, #5
 8001e74:	4619      	mov	r1, r3
 8001e76:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001e78:	f7ff fa28 	bl	80012cc <mpiShiftRight>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001e80:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d11d      	bne.n	8001ec2 <mpiMontgomeryMul+0x16c>
   MPI_CHECK(mpiCopy(r, t));
 8001e86:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001e88:	68f8      	ldr	r0, [r7, #12]
 8001e8a:	f7fe fe26 	bl	8000ada <mpiCopy>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001e92:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d116      	bne.n	8001ec6 <mpiMontgomeryMul+0x170>

   //A final subtraction is required
   if(mpiComp(r, p) >= 0)
 8001e98:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001e9a:	68f8      	ldr	r0, [r7, #12]
 8001e9c:	f7fe fd48 	bl	8000930 <mpiComp>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	db11      	blt.n	8001eca <mpiMontgomeryMul+0x174>
   {
      MPI_CHECK(mpiSub(r, r, p));
 8001ea6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ea8:	68f9      	ldr	r1, [r7, #12]
 8001eaa:	68f8      	ldr	r0, [r7, #12]
 8001eac:	f7fe ffe0 	bl	8000e70 <mpiSub>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001eb4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001eb6:	2b00      	cmp	r3, #0
   }

end:
 8001eb8:	e007      	b.n	8001eca <mpiMontgomeryMul+0x174>
   MPI_CHECK(mpiGrow(t, 2 * k + 1));
 8001eba:	bf00      	nop
 8001ebc:	e006      	b.n	8001ecc <mpiMontgomeryMul+0x176>
   MPI_CHECK(mpiSetValue(t, 0));
 8001ebe:	bf00      	nop
 8001ec0:	e004      	b.n	8001ecc <mpiMontgomeryMul+0x176>
   MPI_CHECK(mpiShiftRight(t, k * (MPI_INT_SIZE * 8)));
 8001ec2:	bf00      	nop
 8001ec4:	e002      	b.n	8001ecc <mpiMontgomeryMul+0x176>
   MPI_CHECK(mpiCopy(r, t));
 8001ec6:	bf00      	nop
 8001ec8:	e000      	b.n	8001ecc <mpiMontgomeryMul+0x176>
end:
 8001eca:	bf00      	nop
   //Return status code
   return error;
 8001ecc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	372c      	adds	r7, #44	; 0x2c
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd90      	pop	{r4, r7, pc}

08001ed6 <mpiMontgomeryRed>:
 * @param[in] t An preallocated integer T (for internal operation)
 * @return Error code
 **/

error_t mpiMontgomeryRed(Mpi *r, const Mpi *a, uint_t k, const Mpi *p, Mpi *t)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b08a      	sub	sp, #40	; 0x28
 8001eda:	af02      	add	r7, sp, #8
 8001edc:	60f8      	str	r0, [r7, #12]
 8001ede:	60b9      	str	r1, [r7, #8]
 8001ee0:	607a      	str	r2, [r7, #4]
 8001ee2:	603b      	str	r3, [r7, #0]
   uint_t value;
   Mpi b;

   //Let B = 1
   value = 1;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	61fb      	str	r3, [r7, #28]
   b.sign = 1;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	613b      	str	r3, [r7, #16]
   b.size = 1;
 8001eec:	2301      	movs	r3, #1
 8001eee:	617b      	str	r3, [r7, #20]
   b.data = &value;
 8001ef0:	f107 031c 	add.w	r3, r7, #28
 8001ef4:	61bb      	str	r3, [r7, #24]

   //Compute R = A / 2^k mod P
   return mpiMontgomeryMul(r, a, &b, k, p, t);
 8001ef6:	f107 0210 	add.w	r2, r7, #16
 8001efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001efc:	9301      	str	r3, [sp, #4]
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	9300      	str	r3, [sp, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	68b9      	ldr	r1, [r7, #8]
 8001f06:	68f8      	ldr	r0, [r7, #12]
 8001f08:	f7ff ff25 	bl	8001d56 <mpiMontgomeryMul>
 8001f0c:	4603      	mov	r3, r0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3720      	adds	r7, #32
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <mpiMulAccCore>:
 * @param[in] m Size of A in words
 * @param[in] b Second operand B
 **/

void mpiMulAccCore(uint_t *r, const uint_t *a, int_t m, const uint_t b)
{
 8001f16:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001f1a:	b08b      	sub	sp, #44	; 0x2c
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	607a      	str	r2, [r7, #4]
 8001f24:	603b      	str	r3, [r7, #0]
   uint32_t u;
   uint32_t v;
   uint64_t p;

   //Clear variables
   c = 0;
 8001f26:	2300      	movs	r3, #0
 8001f28:	623b      	str	r3, [r7, #32]
   u = 0;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61bb      	str	r3, [r7, #24]
   v = 0;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	61fb      	str	r3, [r7, #28]

   //Perform multiplication
   for(i = 0; i < m; i++)
 8001f32:	2300      	movs	r3, #0
 8001f34:	627b      	str	r3, [r7, #36]	; 0x24
 8001f36:	e04d      	b.n	8001fd4 <mpiMulAccCore+0xbe>
   {
      p = (uint64_t) a[i] * b;
 8001f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	68ba      	ldr	r2, [r7, #8]
 8001f3e:	4413      	add	r3, r2
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2200      	movs	r2, #0
 8001f44:	4698      	mov	r8, r3
 8001f46:	4691      	mov	r9, r2
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	469a      	mov	sl, r3
 8001f4e:	4693      	mov	fp, r2
 8001f50:	fb0a f209 	mul.w	r2, sl, r9
 8001f54:	fb08 f30b 	mul.w	r3, r8, fp
 8001f58:	4413      	add	r3, r2
 8001f5a:	fba8 450a 	umull	r4, r5, r8, sl
 8001f5e:	442b      	add	r3, r5
 8001f60:	461d      	mov	r5, r3
 8001f62:	e9c7 4504 	strd	r4, r5, [r7, #16]
 8001f66:	e9c7 4504 	strd	r4, r5, [r7, #16]
      u = (uint32_t) p;
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	61bb      	str	r3, [r7, #24]
      v = (uint32_t) (p >> 32);
 8001f6e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f72:	f04f 0200 	mov.w	r2, #0
 8001f76:	f04f 0300 	mov.w	r3, #0
 8001f7a:	000a      	movs	r2, r1
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	4613      	mov	r3, r2
 8001f80:	61fb      	str	r3, [r7, #28]

      u += c;
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	6a3b      	ldr	r3, [r7, #32]
 8001f86:	4413      	add	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
      if(u < c) v++;
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	6a3b      	ldr	r3, [r7, #32]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d202      	bcs.n	8001f98 <mpiMulAccCore+0x82>
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	3301      	adds	r3, #1
 8001f96:	61fb      	str	r3, [r7, #28]

      u += r[i];
 8001f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	68fa      	ldr	r2, [r7, #12]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]
      if(u < r[i]) v++;
 8001fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	68fa      	ldr	r2, [r7, #12]
 8001fae:	4413      	add	r3, r2
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d202      	bcs.n	8001fbe <mpiMulAccCore+0xa8>
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	3301      	adds	r3, #1
 8001fbc:	61fb      	str	r3, [r7, #28]

      r[i] = u;
 8001fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	601a      	str	r2, [r3, #0]
      c = v;
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	623b      	str	r3, [r7, #32]
   for(i = 0; i < m; i++)
 8001fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	627b      	str	r3, [r7, #36]	; 0x24
 8001fd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	dbad      	blt.n	8001f38 <mpiMulAccCore+0x22>
   }

   //Propagate carry
   for(; c != 0; i++)
 8001fdc:	e01a      	b.n	8002014 <mpiMulAccCore+0xfe>
   {
      r[i] += c;
 8001fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	6819      	ldr	r1, [r3, #0]
 8001fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	68fa      	ldr	r2, [r7, #12]
 8001fee:	4413      	add	r3, r2
 8001ff0:	6a3a      	ldr	r2, [r7, #32]
 8001ff2:	440a      	add	r2, r1
 8001ff4:	601a      	str	r2, [r3, #0]
      c = (r[i] < c);
 8001ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	6a3a      	ldr	r2, [r7, #32]
 8002002:	429a      	cmp	r2, r3
 8002004:	bf8c      	ite	hi
 8002006:	2301      	movhi	r3, #1
 8002008:	2300      	movls	r3, #0
 800200a:	b2db      	uxtb	r3, r3
 800200c:	623b      	str	r3, [r7, #32]
   for(; c != 0; i++)
 800200e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002010:	3301      	adds	r3, #1
 8002012:	627b      	str	r3, [r7, #36]	; 0x24
 8002014:	6a3b      	ldr	r3, [r7, #32]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1e1      	bne.n	8001fde <mpiMulAccCore+0xc8>
   }
}
 800201a:	bf00      	nop
 800201c:	bf00      	nop
 800201e:	372c      	adds	r7, #44	; 0x2c
 8002020:	46bd      	mov	sp, r7
 8002022:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002026:	4770      	bx	lr

08002028 <rsassaPkcs1v15Sign>:
 * @return Error code
 **/

error_t rsassaPkcs1v15Sign(const RsaPrivateKey *key, const HashAlgo *hash,
   const uint8_t *digest, uint8_t *signature, size_t *signatureLen)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b096      	sub	sp, #88	; 0x58
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	60b9      	str	r1, [r7, #8]
 8002032:	607a      	str	r2, [r7, #4]
 8002034:	603b      	str	r3, [r7, #0]
   Mpi m;
   Mpi s;
   Mpi t;

   //Check parameters
   if(key == NULL || hash == NULL || digest == NULL)
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d005      	beq.n	8002048 <rsassaPkcs1v15Sign+0x20>
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d002      	beq.n	8002048 <rsassaPkcs1v15Sign+0x20>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d101      	bne.n	800204c <rsassaPkcs1v15Sign+0x24>
      return ERROR_INVALID_PARAMETER;
 8002048:	2302      	movs	r3, #2
 800204a:	e0bc      	b.n	80021c6 <rsassaPkcs1v15Sign+0x19e>
   if(signature == NULL || signatureLen == NULL)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d002      	beq.n	8002058 <rsassaPkcs1v15Sign+0x30>
 8002052:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002054:	2b00      	cmp	r3, #0
 8002056:	d101      	bne.n	800205c <rsassaPkcs1v15Sign+0x34>
      return ERROR_INVALID_PARAMETER;
 8002058:	2302      	movs	r3, #2
 800205a:	e0b4      	b.n	80021c6 <rsassaPkcs1v15Sign+0x19e>
   TRACE_DEBUG_MPI("    ", &key->qinv);
   TRACE_DEBUG("  Message digest:\r\n");
   TRACE_DEBUG_ARRAY("    ", digest, hash->digestSize);

   //Initialize multiple-precision integers
   mpiInit(&m);
 800205c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002060:	4618      	mov	r0, r3
 8002062:	f7fe fb33 	bl	80006cc <mpiInit>
   mpiInit(&s);
 8002066:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800206a:	4618      	mov	r0, r3
 800206c:	f7fe fb2e 	bl	80006cc <mpiInit>
   mpiInit(&t);
 8002070:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002074:	4618      	mov	r0, r3
 8002076:	f7fe fb29 	bl	80006cc <mpiInit>

   //Get the length in octets of the modulus n
   k = mpiGetByteLength(&key->n);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	4618      	mov	r0, r3
 800207e:	f7fe fbbf 	bl	8000800 <mpiGetByteLength>
 8002082:	6538      	str	r0, [r7, #80]	; 0x50
   //Point to the buffer where the encoded message EM will be formatted
   em = signature;
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	64fb      	str	r3, [r7, #76]	; 0x4c

   //Apply the EMSA-PKCS1-v1.5 encoding operation
   error = emsaPkcs1v15Encode(hash, digest, em, k);
 8002088:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800208a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800208c:	6879      	ldr	r1, [r7, #4]
 800208e:	68b8      	ldr	r0, [r7, #8]
 8002090:	f000 fa55 	bl	800253e <emsaPkcs1v15Encode>
 8002094:	4603      	mov	r3, r0
 8002096:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
   //Any error to report?
   if(error)
 800209a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d002      	beq.n	80020a8 <rsassaPkcs1v15Sign+0x80>
      return error;
 80020a2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80020a6:	e08e      	b.n	80021c6 <rsassaPkcs1v15Sign+0x19e>

   //Start of exception handling block
   do
   {
      //Convert the encoded message EM to an integer message representative m
      error = mpiReadRaw(&m, em, k);
 80020a8:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80020ac:	2301      	movs	r3, #1
 80020ae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80020b0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80020b2:	f7fe fd76 	bl	8000ba2 <mpiImport>
 80020b6:	4603      	mov	r3, r0
 80020b8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
      //Conversion failed?
      if(error)
 80020bc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d168      	bne.n	8002196 <rsassaPkcs1v15Sign+0x16e>
         break;

      //Apply the RSASP1 signature primitive
      error = rsasp1(key, &m, &s);
 80020c4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80020c8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80020cc:	4619      	mov	r1, r3
 80020ce:	68f8      	ldr	r0, [r7, #12]
 80020d0:	f000 fa15 	bl	80024fe <rsasp1>
 80020d4:	4603      	mov	r3, r0
 80020d6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
      //Any error to report?
      if(error)
 80020da:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d15b      	bne.n	800219a <rsassaPkcs1v15Sign+0x172>
         break;

      //When unprotected, RSA-CRT is vulnerable to the Bellcore attack
      if(key->n.size && key->e.size && key->p.size && key->q.size &&
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d043      	beq.n	8002172 <rsassaPkcs1v15Sign+0x14a>
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d03f      	beq.n	8002172 <rsassaPkcs1v15Sign+0x14a>
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d03b      	beq.n	8002172 <rsassaPkcs1v15Sign+0x14a>
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d037      	beq.n	8002172 <rsassaPkcs1v15Sign+0x14a>
         key->dp.size && key->dq.size && key->qinv.size)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
      if(key->n.size && key->e.size && key->p.size && key->q.size &&
 8002106:	2b00      	cmp	r3, #0
 8002108:	d033      	beq.n	8002172 <rsassaPkcs1v15Sign+0x14a>
         key->dp.size && key->dq.size && key->qinv.size)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800210e:	2b00      	cmp	r3, #0
 8002110:	d02f      	beq.n	8002172 <rsassaPkcs1v15Sign+0x14a>
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002116:	2b00      	cmp	r3, #0
 8002118:	d02b      	beq.n	8002172 <rsassaPkcs1v15Sign+0x14a>
      {
         RsaPublicKey publicKey;

         //Retrieve modulus and public exponent
         publicKey.n = key->n;
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	f107 0310 	add.w	r3, r7, #16
 8002120:	ca07      	ldmia	r2, {r0, r1, r2}
 8002122:	e883 0007 	stmia.w	r3, {r0, r1, r2}
         publicKey.e = key->e;
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	f107 031c 	add.w	r3, r7, #28
 800212c:	320c      	adds	r2, #12
 800212e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002130:	e883 0007 	stmia.w	r3, {r0, r1, r2}

         //Apply the RSAVP1 verification primitive
         error = rsavp1(&publicKey, &s, &t);
 8002134:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002138:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800213c:	f107 0310 	add.w	r3, r7, #16
 8002140:	4618      	mov	r0, r3
 8002142:	f000 f9ec 	bl	800251e <rsavp1>
 8002146:	4603      	mov	r3, r0
 8002148:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
         //Any error to report?
         if(error)
 800214c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002150:	2b00      	cmp	r3, #0
 8002152:	d124      	bne.n	800219e <rsassaPkcs1v15Sign+0x176>
            break;

         //Verify the RSA signature in order to protect against RSA-CRT key leak
         if(mpiComp(&t, &m) != 0)
 8002154:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002158:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800215c:	4611      	mov	r1, r2
 800215e:	4618      	mov	r0, r3
 8002160:	f7fe fbe6 	bl	8000930 <mpiComp>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d003      	beq.n	8002172 <rsassaPkcs1v15Sign+0x14a>
         {
            //A signature fault has been detected
            error = ERROR_FAILURE;
 800216a:	2301      	movs	r3, #1
 800216c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
            break;
 8002170:	e018      	b.n	80021a4 <rsassaPkcs1v15Sign+0x17c>
         }
      }

      //Convert the signature representative s to a signature of length k octets
      error = mpiWriteRaw(&s, signature, k);
 8002172:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8002176:	2301      	movs	r3, #1
 8002178:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800217a:	6839      	ldr	r1, [r7, #0]
 800217c:	f7fe fdc5 	bl	8000d0a <mpiExport>
 8002180:	4603      	mov	r3, r0
 8002182:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
      //Conversion failed?
      if(error)
 8002186:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800218a:	2b00      	cmp	r3, #0
 800218c:	d109      	bne.n	80021a2 <rsassaPkcs1v15Sign+0x17a>
         break;

      //Length of the resulting signature
      *signatureLen = k;
 800218e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002190:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	e006      	b.n	80021a4 <rsassaPkcs1v15Sign+0x17c>
         break;
 8002196:	bf00      	nop
 8002198:	e004      	b.n	80021a4 <rsassaPkcs1v15Sign+0x17c>
         break;
 800219a:	bf00      	nop
 800219c:	e002      	b.n	80021a4 <rsassaPkcs1v15Sign+0x17c>
            break;
 800219e:	bf00      	nop
 80021a0:	e000      	b.n	80021a4 <rsassaPkcs1v15Sign+0x17c>
         break;
 80021a2:	bf00      	nop

      //End of exception handling block
   } while(0);

   //Free previously allocated memory
   mpiFree(&m);
 80021a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7fe faa2 	bl	80006f2 <mpiFree>
   mpiFree(&s);
 80021ae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7fe fa9d 	bl	80006f2 <mpiFree>
   mpiFree(&t);
 80021b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021bc:	4618      	mov	r0, r3
 80021be:	f7fe fa98 	bl	80006f2 <mpiFree>

   //Return status code
   return error;
 80021c2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3758      	adds	r7, #88	; 0x58
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <rsassaPkcs1v15Verify>:
 * @return Error code
 **/

error_t rsassaPkcs1v15Verify(const RsaPublicKey *key, const HashAlgo *hash,
   const uint8_t *digest, const uint8_t *signature, size_t signatureLen)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b08e      	sub	sp, #56	; 0x38
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	60f8      	str	r0, [r7, #12]
 80021d6:	60b9      	str	r1, [r7, #8]
 80021d8:	607a      	str	r2, [r7, #4]
 80021da:	603b      	str	r3, [r7, #0]
   uint8_t *em;
   Mpi s;
   Mpi m;

   //Check parameters
   if(key == NULL || hash == NULL || digest == NULL || signature == NULL)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d008      	beq.n	80021f4 <rsassaPkcs1v15Verify+0x26>
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d005      	beq.n	80021f4 <rsassaPkcs1v15Verify+0x26>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d002      	beq.n	80021f4 <rsassaPkcs1v15Verify+0x26>
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d101      	bne.n	80021f8 <rsassaPkcs1v15Verify+0x2a>
      return ERROR_INVALID_PARAMETER;
 80021f4:	2302      	movs	r3, #2
 80021f6:	e06a      	b.n	80022ce <rsassaPkcs1v15Verify+0x100>
   TRACE_DEBUG_ARRAY("    ", digest, hash->digestSize);
   TRACE_DEBUG("  Signature:\r\n");
   TRACE_DEBUG_ARRAY("    ", signature, signatureLen);

   //Initialize multiple-precision integers
   mpiInit(&s);
 80021f8:	f107 0320 	add.w	r3, r7, #32
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7fe fa65 	bl	80006cc <mpiInit>
   mpiInit(&m);
 8002202:	f107 0314 	add.w	r3, r7, #20
 8002206:	4618      	mov	r0, r3
 8002208:	f7fe fa60 	bl	80006cc <mpiInit>

   //Get the length in octets of the modulus n
   k = mpiGetByteLength(&key->n);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	4618      	mov	r0, r3
 8002210:	f7fe faf6 	bl	8000800 <mpiGetByteLength>
 8002214:	6338      	str	r0, [r7, #48]	; 0x30

   //Make sure the modulus is valid
   if(k == 0)
 8002216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002218:	2b00      	cmp	r3, #0
 800221a:	d101      	bne.n	8002220 <rsassaPkcs1v15Verify+0x52>
      return ERROR_INVALID_PARAMETER;
 800221c:	2302      	movs	r3, #2
 800221e:	e056      	b.n	80022ce <rsassaPkcs1v15Verify+0x100>

   //Check the length of the signature
   if(signatureLen != k)
 8002220:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002224:	429a      	cmp	r2, r3
 8002226:	d002      	beq.n	800222e <rsassaPkcs1v15Verify+0x60>
      return ERROR_INVALID_SIGNATURE;
 8002228:	f240 230d 	movw	r3, #525	; 0x20d
 800222c:	e04f      	b.n	80022ce <rsassaPkcs1v15Verify+0x100>

   //Allocate a memory buffer to hold the encoded message
   em = cryptoAllocMem(k);
 800222e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002230:	f002 f99c 	bl	800456c <osAllocMem>
 8002234:	62f8      	str	r0, [r7, #44]	; 0x2c
   //Failed to allocate memory?
   if(em == NULL)
 8002236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002238:	2b00      	cmp	r3, #0
 800223a:	d101      	bne.n	8002240 <rsassaPkcs1v15Verify+0x72>
      return ERROR_OUT_OF_MEMORY;
 800223c:	2364      	movs	r3, #100	; 0x64
 800223e:	e046      	b.n	80022ce <rsassaPkcs1v15Verify+0x100>

   //Start of exception handling block
   do
   {
      //Convert the signature to an integer signature representative s
      error = mpiReadRaw(&s, signature, signatureLen);
 8002240:	f107 0020 	add.w	r0, r7, #32
 8002244:	2301      	movs	r3, #1
 8002246:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002248:	6839      	ldr	r1, [r7, #0]
 800224a:	f7fe fcaa 	bl	8000ba2 <mpiImport>
 800224e:	4603      	mov	r3, r0
 8002250:	86fb      	strh	r3, [r7, #54]	; 0x36
      //Conversion failed?
      if(error)
 8002252:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002254:	2b00      	cmp	r3, #0
 8002256:	d127      	bne.n	80022a8 <rsassaPkcs1v15Verify+0xda>
         break;

      //Apply the RSAVP1 verification primitive
      error = rsavp1(key, &s, &m);
 8002258:	f107 0214 	add.w	r2, r7, #20
 800225c:	f107 0320 	add.w	r3, r7, #32
 8002260:	4619      	mov	r1, r3
 8002262:	68f8      	ldr	r0, [r7, #12]
 8002264:	f000 f95b 	bl	800251e <rsavp1>
 8002268:	4603      	mov	r3, r0
 800226a:	86fb      	strh	r3, [r7, #54]	; 0x36
      //Any error to report?
      if(error)
 800226c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800226e:	2b00      	cmp	r3, #0
 8002270:	d11c      	bne.n	80022ac <rsassaPkcs1v15Verify+0xde>
         break;

      //Convert the message representative m to an encoded message EM of
      //length k octets
      error = mpiWriteRaw(&m, em, k);
 8002272:	f107 0014 	add.w	r0, r7, #20
 8002276:	2301      	movs	r3, #1
 8002278:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800227a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800227c:	f7fe fd45 	bl	8000d0a <mpiExport>
 8002280:	4603      	mov	r3, r0
 8002282:	86fb      	strh	r3, [r7, #54]	; 0x36
      //Conversion failed?
      if(error)
 8002284:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002286:	2b00      	cmp	r3, #0
 8002288:	d112      	bne.n	80022b0 <rsassaPkcs1v15Verify+0xe2>
      //Debug message
      TRACE_DEBUG("  Encoded message:\r\n");
      TRACE_DEBUG_ARRAY("    ", em, k);

      //Verify the encoded message EM
      error = emsaPkcs1v15Verify(hash, digest, em, k);
 800228a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800228c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800228e:	6879      	ldr	r1, [r7, #4]
 8002290:	68b8      	ldr	r0, [r7, #8]
 8002292:	f000 fa06 	bl	80026a2 <emsaPkcs1v15Verify>
 8002296:	4603      	mov	r3, r0
 8002298:	86fb      	strh	r3, [r7, #54]	; 0x36
      //Any error to report?
      if(error)
 800229a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800229c:	2b00      	cmp	r3, #0
 800229e:	d008      	beq.n	80022b2 <rsassaPkcs1v15Verify+0xe4>
      {
         //The signature is not valid
         error = ERROR_INVALID_SIGNATURE;
 80022a0:	f240 230d 	movw	r3, #525	; 0x20d
 80022a4:	86fb      	strh	r3, [r7, #54]	; 0x36
         break;
 80022a6:	e004      	b.n	80022b2 <rsassaPkcs1v15Verify+0xe4>
         break;
 80022a8:	bf00      	nop
 80022aa:	e002      	b.n	80022b2 <rsassaPkcs1v15Verify+0xe4>
         break;
 80022ac:	bf00      	nop
 80022ae:	e000      	b.n	80022b2 <rsassaPkcs1v15Verify+0xe4>
         break;
 80022b0:	bf00      	nop

      //End of exception handling block
   } while(0);

   //Release the encoded message
   cryptoFreeMem(em);
 80022b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80022b4:	f002 f968 	bl	8004588 <osFreeMem>

   //Release multiple precision integers
   mpiFree(&s);
 80022b8:	f107 0320 	add.w	r3, r7, #32
 80022bc:	4618      	mov	r0, r3
 80022be:	f7fe fa18 	bl	80006f2 <mpiFree>
   mpiFree(&m);
 80022c2:	f107 0314 	add.w	r3, r7, #20
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7fe fa13 	bl	80006f2 <mpiFree>

   //Return status code
   return error;
 80022cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3738      	adds	r7, #56	; 0x38
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <rsaep>:
 * @param[out] c Ciphertext representative
 * @return Error code
 **/

__weak_func error_t rsaep(const RsaPublicKey *key, const Mpi *m, Mpi *c)
{
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b084      	sub	sp, #16
 80022da:	af00      	add	r7, sp, #0
 80022dc:	60f8      	str	r0, [r7, #12]
 80022de:	60b9      	str	r1, [r7, #8]
 80022e0:	607a      	str	r2, [r7, #4]
   //Ensure the RSA public key is valid
   if(!key->n.size || !key->e.size)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d003      	beq.n	80022f2 <rsaep+0x1c>
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <rsaep+0x20>
      return ERROR_INVALID_PARAMETER;
 80022f2:	2302      	movs	r3, #2
 80022f4:	e01a      	b.n	800232c <rsaep+0x56>

   //The message representative m shall be between 0 and n - 1
   if(mpiCompInt(m, 0) < 0 || mpiComp(m, &key->n) >= 0)
 80022f6:	2100      	movs	r1, #0
 80022f8:	68b8      	ldr	r0, [r7, #8]
 80022fa:	f7fe fb7f 	bl	80009fc <mpiCompInt>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	db07      	blt.n	8002314 <rsaep+0x3e>
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	4619      	mov	r1, r3
 8002308:	68b8      	ldr	r0, [r7, #8]
 800230a:	f7fe fb11 	bl	8000930 <mpiComp>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	db02      	blt.n	800231a <rsaep+0x44>
      return ERROR_OUT_OF_RANGE;
 8002314:	f44f 7383 	mov.w	r3, #262	; 0x106
 8002318:	e008      	b.n	800232c <rsaep+0x56>

   //Perform modular exponentiation (c = m ^ e mod n)
   return mpiExpModFast(c, m, &key->e, &key->n);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f103 020c 	add.w	r2, r3, #12
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	68b9      	ldr	r1, [r7, #8]
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f7ff fcf2 	bl	8001d0e <mpiExpModFast>
 800232a:	4603      	mov	r3, r0
}
 800232c:	4618      	mov	r0, r3
 800232e:	3710      	adds	r7, #16
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <rsadp>:
 * @param[out] m Message representative
 * @return Error code
 **/

__weak_func error_t rsadp(const RsaPrivateKey *key, const Mpi *c, Mpi *m)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b08e      	sub	sp, #56	; 0x38
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
   Mpi m1;
   Mpi m2;
   Mpi h;

   //The ciphertext representative c shall be between 0 and n - 1
   if(mpiCompInt(c, 0) < 0 || mpiComp(c, &key->n) >= 0)
 8002340:	2100      	movs	r1, #0
 8002342:	68b8      	ldr	r0, [r7, #8]
 8002344:	f7fe fb5a 	bl	80009fc <mpiCompInt>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	db07      	blt.n	800235e <rsadp+0x2a>
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	4619      	mov	r1, r3
 8002352:	68b8      	ldr	r0, [r7, #8]
 8002354:	f7fe faec 	bl	8000930 <mpiComp>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	db02      	blt.n	8002364 <rsadp+0x30>
      return ERROR_OUT_OF_RANGE;
 800235e:	f44f 7383 	mov.w	r3, #262	; 0x106
 8002362:	e0c8      	b.n	80024f6 <rsadp+0x1c2>

   //Initialize multiple-precision integers
   mpiInit(&m1);
 8002364:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002368:	4618      	mov	r0, r3
 800236a:	f7fe f9af 	bl	80006cc <mpiInit>
   mpiInit(&m2);
 800236e:	f107 031c 	add.w	r3, r7, #28
 8002372:	4618      	mov	r0, r3
 8002374:	f7fe f9aa 	bl	80006cc <mpiInit>
   mpiInit(&h);
 8002378:	f107 0310 	add.w	r3, r7, #16
 800237c:	4618      	mov	r0, r3
 800237e:	f7fe f9a5 	bl	80006cc <mpiInit>

   //Use the Chinese remainder algorithm?
   if(mpiGetLength(&key->n) > 0 && mpiGetLength(&key->p) > 0 &&
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	4618      	mov	r0, r3
 8002386:	f7fe fa14 	bl	80007b2 <mpiGetLength>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d07c      	beq.n	800248a <rsadp+0x156>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	3324      	adds	r3, #36	; 0x24
 8002394:	4618      	mov	r0, r3
 8002396:	f7fe fa0c 	bl	80007b2 <mpiGetLength>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d074      	beq.n	800248a <rsadp+0x156>
      mpiGetLength(&key->q) > 0 && mpiGetLength(&key->dp) > 0 &&
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	3330      	adds	r3, #48	; 0x30
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7fe fa04 	bl	80007b2 <mpiGetLength>
 80023aa:	4603      	mov	r3, r0
   if(mpiGetLength(&key->n) > 0 && mpiGetLength(&key->p) > 0 &&
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d06c      	beq.n	800248a <rsadp+0x156>
      mpiGetLength(&key->q) > 0 && mpiGetLength(&key->dp) > 0 &&
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	333c      	adds	r3, #60	; 0x3c
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7fe f9fc 	bl	80007b2 <mpiGetLength>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d064      	beq.n	800248a <rsadp+0x156>
      mpiGetLength(&key->dq) > 0 && mpiGetLength(&key->qinv) > 0)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	3348      	adds	r3, #72	; 0x48
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7fe f9f4 	bl	80007b2 <mpiGetLength>
 80023ca:	4603      	mov	r3, r0
      mpiGetLength(&key->q) > 0 && mpiGetLength(&key->dp) > 0 &&
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d05c      	beq.n	800248a <rsadp+0x156>
      mpiGetLength(&key->dq) > 0 && mpiGetLength(&key->qinv) > 0)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	3354      	adds	r3, #84	; 0x54
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7fe f9ec 	bl	80007b2 <mpiGetLength>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d054      	beq.n	800248a <rsadp+0x156>
   {
      //Compute m1 = c ^ dP mod p
      MPI_CHECK(mpiExpModRegular(&m1, c, &key->dp, &key->p));
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	3324      	adds	r3, #36	; 0x24
 80023ea:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80023ee:	68b9      	ldr	r1, [r7, #8]
 80023f0:	f7ff fc9f 	bl	8001d32 <mpiExpModRegular>
 80023f4:	4603      	mov	r3, r0
 80023f6:	86fb      	strh	r3, [r7, #54]	; 0x36
 80023f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d162      	bne.n	80024c4 <rsadp+0x190>
      //Compute m2 = c ^ dQ mod q
      MPI_CHECK(mpiExpModRegular(&m2, c, &key->dq, &key->q));
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	3330      	adds	r3, #48	; 0x30
 8002408:	f107 001c 	add.w	r0, r7, #28
 800240c:	68b9      	ldr	r1, [r7, #8]
 800240e:	f7ff fc90 	bl	8001d32 <mpiExpModRegular>
 8002412:	4603      	mov	r3, r0
 8002414:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002416:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002418:	2b00      	cmp	r3, #0
 800241a:	d155      	bne.n	80024c8 <rsadp+0x194>
      //Let h = (m1 - m2) * qInv mod p
      MPI_CHECK(mpiSub(&h, &m1, &m2));
 800241c:	f107 021c 	add.w	r2, r7, #28
 8002420:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002424:	f107 0310 	add.w	r3, r7, #16
 8002428:	4618      	mov	r0, r3
 800242a:	f7fe fd21 	bl	8000e70 <mpiSub>
 800242e:	4603      	mov	r3, r0
 8002430:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002432:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002434:	2b00      	cmp	r3, #0
 8002436:	d149      	bne.n	80024cc <rsadp+0x198>
      MPI_CHECK(mpiMulMod(&h, &h, &key->qinv, &key->p));
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	3324      	adds	r3, #36	; 0x24
 8002442:	f107 0110 	add.w	r1, r7, #16
 8002446:	f107 0010 	add.w	r0, r7, #16
 800244a:	f7ff f90b 	bl	8001664 <mpiMulMod>
 800244e:	4603      	mov	r3, r0
 8002450:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002452:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002454:	2b00      	cmp	r3, #0
 8002456:	d13b      	bne.n	80024d0 <rsadp+0x19c>
      //Let m = m2 + q * h
      MPI_CHECK(mpiMul(m, &key->q, &h));
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	3330      	adds	r3, #48	; 0x30
 800245c:	f107 0210 	add.w	r2, r7, #16
 8002460:	4619      	mov	r1, r3
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f7fe ffc2 	bl	80013ec <mpiMul>
 8002468:	4603      	mov	r3, r0
 800246a:	86fb      	strh	r3, [r7, #54]	; 0x36
 800246c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800246e:	2b00      	cmp	r3, #0
 8002470:	d130      	bne.n	80024d4 <rsadp+0x1a0>
      MPI_CHECK(mpiAdd(m, m, &m2));
 8002472:	f107 031c 	add.w	r3, r7, #28
 8002476:	461a      	mov	r2, r3
 8002478:	6879      	ldr	r1, [r7, #4]
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f7fe fcbc 	bl	8000df8 <mpiAdd>
 8002480:	4603      	mov	r3, r0
 8002482:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002484:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002486:	2b00      	cmp	r3, #0
 8002488:	e025      	b.n	80024d6 <rsadp+0x1a2>
   }
   //Use modular exponentiation?
   else if(mpiGetLength(&key->n) > 0 && mpiGetLength(&key->d) > 0)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	4618      	mov	r0, r3
 800248e:	f7fe f990 	bl	80007b2 <mpiGetLength>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d012      	beq.n	80024be <rsadp+0x18a>
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	3318      	adds	r3, #24
 800249c:	4618      	mov	r0, r3
 800249e:	f7fe f988 	bl	80007b2 <mpiGetLength>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d00a      	beq.n	80024be <rsadp+0x18a>
   {
      //Let m = c ^ d mod n
      error = mpiExpModRegular(m, c, &key->d, &key->n);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f103 0218 	add.w	r2, r3, #24
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	68b9      	ldr	r1, [r7, #8]
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f7ff fc3d 	bl	8001d32 <mpiExpModRegular>
 80024b8:	4603      	mov	r3, r0
 80024ba:	86fb      	strh	r3, [r7, #54]	; 0x36
 80024bc:	e00b      	b.n	80024d6 <rsadp+0x1a2>
   }
   //Invalid parameters?
   else
   {
      //Report an error
      error = ERROR_INVALID_PARAMETER;
 80024be:	2302      	movs	r3, #2
 80024c0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80024c2:	e008      	b.n	80024d6 <rsadp+0x1a2>
      MPI_CHECK(mpiExpModRegular(&m1, c, &key->dp, &key->p));
 80024c4:	bf00      	nop
 80024c6:	e006      	b.n	80024d6 <rsadp+0x1a2>
      MPI_CHECK(mpiExpModRegular(&m2, c, &key->dq, &key->q));
 80024c8:	bf00      	nop
 80024ca:	e004      	b.n	80024d6 <rsadp+0x1a2>
      MPI_CHECK(mpiSub(&h, &m1, &m2));
 80024cc:	bf00      	nop
 80024ce:	e002      	b.n	80024d6 <rsadp+0x1a2>
      MPI_CHECK(mpiMulMod(&h, &h, &key->qinv, &key->p));
 80024d0:	bf00      	nop
 80024d2:	e000      	b.n	80024d6 <rsadp+0x1a2>
      MPI_CHECK(mpiMul(m, &key->q, &h));
 80024d4:	bf00      	nop
   }

end:
   //Free previously allocated memory
   mpiFree(&m1);
 80024d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024da:	4618      	mov	r0, r3
 80024dc:	f7fe f909 	bl	80006f2 <mpiFree>
   mpiFree(&m2);
 80024e0:	f107 031c 	add.w	r3, r7, #28
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7fe f904 	bl	80006f2 <mpiFree>
   mpiFree(&h);
 80024ea:	f107 0310 	add.w	r3, r7, #16
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7fe f8ff 	bl	80006f2 <mpiFree>

   //Return status code
   return error;
 80024f4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3738      	adds	r7, #56	; 0x38
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <rsasp1>:
 * @param[out] s Signature representative
 * @return Error code
 **/

error_t rsasp1(const RsaPrivateKey *key, const Mpi *m, Mpi *s)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b084      	sub	sp, #16
 8002502:	af00      	add	r7, sp, #0
 8002504:	60f8      	str	r0, [r7, #12]
 8002506:	60b9      	str	r1, [r7, #8]
 8002508:	607a      	str	r2, [r7, #4]
   //RSASP1 primitive is the same as RSADP except for the names of its input
   //and output arguments. They are distinguished as they are intended for
   //different purposes
   return rsadp(key, m, s);
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	68b9      	ldr	r1, [r7, #8]
 800250e:	68f8      	ldr	r0, [r7, #12]
 8002510:	f7ff ff10 	bl	8002334 <rsadp>
 8002514:	4603      	mov	r3, r0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3710      	adds	r7, #16
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <rsavp1>:
 * @param[out] m Message representative
 * @return Error code
 **/

error_t rsavp1(const RsaPublicKey *key, const Mpi *s, Mpi *m)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b084      	sub	sp, #16
 8002522:	af00      	add	r7, sp, #0
 8002524:	60f8      	str	r0, [r7, #12]
 8002526:	60b9      	str	r1, [r7, #8]
 8002528:	607a      	str	r2, [r7, #4]
   //RSAVP1 primitive is the same as RSAEP except for the names of its input
   //and output arguments. They are distinguished as they are intended for
   //different purposes
   return rsaep(key, s, m);
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	68b9      	ldr	r1, [r7, #8]
 800252e:	68f8      	ldr	r0, [r7, #12]
 8002530:	f7ff fed1 	bl	80022d6 <rsaep>
 8002534:	4603      	mov	r3, r0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <emsaPkcs1v15Encode>:
 * @return Error code
 **/

error_t emsaPkcs1v15Encode(const HashAlgo *hash,
   const uint8_t *digest, uint8_t *em, size_t emLen)
{
 800253e:	b580      	push	{r7, lr}
 8002540:	b086      	sub	sp, #24
 8002542:	af00      	add	r7, sp, #0
 8002544:	60f8      	str	r0, [r7, #12]
 8002546:	60b9      	str	r1, [r7, #8]
 8002548:	607a      	str	r2, [r7, #4]
 800254a:	603b      	str	r3, [r7, #0]
   size_t i;
   size_t n;

   //Check the intended length of the encoded message
   if(emLen < (hash->oidSize + hash->digestSize + 21))
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	689a      	ldr	r2, [r3, #8]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	695b      	ldr	r3, [r3, #20]
 8002554:	4413      	add	r3, r2
 8002556:	3315      	adds	r3, #21
 8002558:	683a      	ldr	r2, [r7, #0]
 800255a:	429a      	cmp	r2, r3
 800255c:	d201      	bcs.n	8002562 <emsaPkcs1v15Encode+0x24>
      return ERROR_INVALID_LENGTH;
 800255e:	23ec      	movs	r3, #236	; 0xec
 8002560:	e09b      	b.n	800269a <emsaPkcs1v15Encode+0x15c>

   //Point to the first byte of the encoded message
   i = 0;
 8002562:	2300      	movs	r3, #0
 8002564:	617b      	str	r3, [r7, #20]

   //The leading 0x00 octet ensures that the encoded message, converted to
   //an integer, is less than the modulus
   em[i++] = 0x00;
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	1c5a      	adds	r2, r3, #1
 800256a:	617a      	str	r2, [r7, #20]
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	4413      	add	r3, r2
 8002570:	2200      	movs	r2, #0
 8002572:	701a      	strb	r2, [r3, #0]
   //Block type 0x01 is used for private-key operations
   em[i++] = 0x01;
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	1c5a      	adds	r2, r3, #1
 8002578:	617a      	str	r2, [r7, #20]
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	4413      	add	r3, r2
 800257e:	2201      	movs	r2, #1
 8002580:	701a      	strb	r2, [r3, #0]

   //Determine the length of the padding string PS
   n = emLen - hash->oidSize - hash->digestSize - 13;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	683a      	ldr	r2, [r7, #0]
 8002588:	1ad2      	subs	r2, r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	3b0d      	subs	r3, #13
 8002592:	613b      	str	r3, [r7, #16]

   //Each byte of PS must be set to 0xFF when the block type is 0x01
   osMemset(em + i, 0xFF, n);
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	4413      	add	r3, r2
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	21ff      	movs	r1, #255	; 0xff
 800259e:	4618      	mov	r0, r3
 80025a0:	f003 ffde 	bl	8006560 <memset>
   i += n;
 80025a4:	697a      	ldr	r2, [r7, #20]
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	4413      	add	r3, r2
 80025aa:	617b      	str	r3, [r7, #20]

   //Append a 0x00 octet to the padding string
   em[i++] = 0x00;
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	1c5a      	adds	r2, r3, #1
 80025b0:	617a      	str	r2, [r7, #20]
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	4413      	add	r3, r2
 80025b6:	2200      	movs	r2, #0
 80025b8:	701a      	strb	r2, [r3, #0]

   //Encode the DigestInfo structure using ASN.1
   em[i++] = (uint8_t) (ASN1_ENCODING_CONSTRUCTED | ASN1_TYPE_SEQUENCE);
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	1c5a      	adds	r2, r3, #1
 80025be:	617a      	str	r2, [r7, #20]
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	4413      	add	r3, r2
 80025c4:	2230      	movs	r2, #48	; 0x30
 80025c6:	701a      	strb	r2, [r3, #0]
   em[i++] = (uint8_t) (hash->oidSize + hash->digestSize + 8);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	b2da      	uxtb	r2, r3
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	695b      	ldr	r3, [r3, #20]
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	4413      	add	r3, r2
 80025d6:	b2da      	uxtb	r2, r3
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	1c59      	adds	r1, r3, #1
 80025dc:	6179      	str	r1, [r7, #20]
 80025de:	6879      	ldr	r1, [r7, #4]
 80025e0:	440b      	add	r3, r1
 80025e2:	3208      	adds	r2, #8
 80025e4:	b2d2      	uxtb	r2, r2
 80025e6:	701a      	strb	r2, [r3, #0]
   em[i++] = (uint8_t) (ASN1_ENCODING_CONSTRUCTED | ASN1_TYPE_SEQUENCE);
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	1c5a      	adds	r2, r3, #1
 80025ec:	617a      	str	r2, [r7, #20]
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	4413      	add	r3, r2
 80025f2:	2230      	movs	r2, #48	; 0x30
 80025f4:	701a      	strb	r2, [r3, #0]
   em[i++] = (uint8_t) (hash->oidSize + 4);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	b2da      	uxtb	r2, r3
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	1c59      	adds	r1, r3, #1
 8002600:	6179      	str	r1, [r7, #20]
 8002602:	6879      	ldr	r1, [r7, #4]
 8002604:	440b      	add	r3, r1
 8002606:	3204      	adds	r2, #4
 8002608:	b2d2      	uxtb	r2, r2
 800260a:	701a      	strb	r2, [r3, #0]
   em[i++] = (uint8_t) ASN1_TYPE_OBJECT_IDENTIFIER;
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	1c5a      	adds	r2, r3, #1
 8002610:	617a      	str	r2, [r7, #20]
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	4413      	add	r3, r2
 8002616:	2206      	movs	r2, #6
 8002618:	701a      	strb	r2, [r3, #0]
   em[i++] = (uint8_t) hash->oidSize;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6899      	ldr	r1, [r3, #8]
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	1c5a      	adds	r2, r3, #1
 8002622:	617a      	str	r2, [r7, #20]
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	4413      	add	r3, r2
 8002628:	b2ca      	uxtb	r2, r1
 800262a:	701a      	strb	r2, [r3, #0]

   //Copy the hash algorithm OID
   osMemcpy(em + i, hash->oid, hash->oidSize);
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	18d0      	adds	r0, r2, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6859      	ldr	r1, [r3, #4]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	461a      	mov	r2, r3
 800263c:	f003 ff82 	bl	8006544 <memcpy>
   i += hash->oidSize;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	697a      	ldr	r2, [r7, #20]
 8002646:	4413      	add	r3, r2
 8002648:	617b      	str	r3, [r7, #20]

   //Encode the rest of the ASN.1 structure
   em[i++] = (uint8_t) ASN1_TYPE_NULL;
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	1c5a      	adds	r2, r3, #1
 800264e:	617a      	str	r2, [r7, #20]
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	4413      	add	r3, r2
 8002654:	2205      	movs	r2, #5
 8002656:	701a      	strb	r2, [r3, #0]
   em[i++] = 0;
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	1c5a      	adds	r2, r3, #1
 800265c:	617a      	str	r2, [r7, #20]
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	4413      	add	r3, r2
 8002662:	2200      	movs	r2, #0
 8002664:	701a      	strb	r2, [r3, #0]
   em[i++] = (uint8_t) ASN1_TYPE_OCTET_STRING;
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	1c5a      	adds	r2, r3, #1
 800266a:	617a      	str	r2, [r7, #20]
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	4413      	add	r3, r2
 8002670:	2204      	movs	r2, #4
 8002672:	701a      	strb	r2, [r3, #0]
   em[i++] = (uint8_t) hash->digestSize;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6959      	ldr	r1, [r3, #20]
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	1c5a      	adds	r2, r3, #1
 800267c:	617a      	str	r2, [r7, #20]
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	4413      	add	r3, r2
 8002682:	b2ca      	uxtb	r2, r1
 8002684:	701a      	strb	r2, [r3, #0]

   //Append the hash value
   osMemcpy(em + i, digest, hash->digestSize);
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	18d0      	adds	r0, r2, r3
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	695b      	ldr	r3, [r3, #20]
 8002690:	461a      	mov	r2, r3
 8002692:	68b9      	ldr	r1, [r7, #8]
 8002694:	f003 ff56 	bl	8006544 <memcpy>

   //Successful processing
   return NO_ERROR;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3718      	adds	r7, #24
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <emsaPkcs1v15Verify>:
 * @return Error code
 **/

error_t emsaPkcs1v15Verify(const HashAlgo *hash, const uint8_t *digest,
   const uint8_t *em, size_t emLen)
{
 80026a2:	b480      	push	{r7}
 80026a4:	b089      	sub	sp, #36	; 0x24
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	60f8      	str	r0, [r7, #12]
 80026aa:	60b9      	str	r1, [r7, #8]
 80026ac:	607a      	str	r2, [r7, #4]
 80026ae:	603b      	str	r3, [r7, #0]
   size_t j;
   size_t n;
   uint8_t bad;

   //Check the length of the encoded message
   if(emLen < (hash->oidSize + hash->digestSize + 21))
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	689a      	ldr	r2, [r3, #8]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	695b      	ldr	r3, [r3, #20]
 80026b8:	4413      	add	r3, r2
 80026ba:	3315      	adds	r3, #21
 80026bc:	683a      	ldr	r2, [r7, #0]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d201      	bcs.n	80026c6 <emsaPkcs1v15Verify+0x24>
      return ERROR_INVALID_LENGTH;
 80026c2:	23ec      	movs	r3, #236	; 0xec
 80026c4:	e123      	b.n	800290e <emsaPkcs1v15Verify+0x26c>

   //Point to the first byte of the encoded message
   i = 0;
 80026c6:	2300      	movs	r3, #0
 80026c8:	61fb      	str	r3, [r7, #28]

   //The first octet of EM must have hexadecimal value 0x00
   bad = em[i++];
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	1c5a      	adds	r2, r3, #1
 80026ce:	61fa      	str	r2, [r7, #28]
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	4413      	add	r3, r2
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	75fb      	strb	r3, [r7, #23]
   //The second octet of EM must have hexadecimal value 0x01
   bad |= em[i++] ^ 0x01;
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	1c5a      	adds	r2, r3, #1
 80026dc:	61fa      	str	r2, [r7, #28]
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	4413      	add	r3, r2
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	f083 0301 	eor.w	r3, r3, #1
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	b25a      	sxtb	r2, r3
 80026ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	b25b      	sxtb	r3, r3
 80026f4:	75fb      	strb	r3, [r7, #23]

   //Determine the length of the padding string PS
   n = emLen - hash->oidSize - hash->digestSize - 13;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	683a      	ldr	r2, [r7, #0]
 80026fc:	1ad2      	subs	r2, r2, r3
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	3b0d      	subs	r3, #13
 8002706:	613b      	str	r3, [r7, #16]

   //Each byte of PS must be set to 0xFF when the block type is 0x01
   for(j = 0; j < n; j++)
 8002708:	2300      	movs	r3, #0
 800270a:	61bb      	str	r3, [r7, #24]
 800270c:	e010      	b.n	8002730 <emsaPkcs1v15Verify+0x8e>
   {
      bad |= em[i++] ^ 0xFF;
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	1c5a      	adds	r2, r3, #1
 8002712:	61fa      	str	r2, [r7, #28]
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	4413      	add	r3, r2
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	43db      	mvns	r3, r3
 800271c:	b2db      	uxtb	r3, r3
 800271e:	b25a      	sxtb	r2, r3
 8002720:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002724:	4313      	orrs	r3, r2
 8002726:	b25b      	sxtb	r3, r3
 8002728:	75fb      	strb	r3, [r7, #23]
   for(j = 0; j < n; j++)
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	3301      	adds	r3, #1
 800272e:	61bb      	str	r3, [r7, #24]
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	429a      	cmp	r2, r3
 8002736:	d3ea      	bcc.n	800270e <emsaPkcs1v15Verify+0x6c>
   }

   //The padding string must be followed by a 0x00 octet
   bad |= em[i++];
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	1c5a      	adds	r2, r3, #1
 800273c:	61fa      	str	r2, [r7, #28]
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	4413      	add	r3, r2
 8002742:	781a      	ldrb	r2, [r3, #0]
 8002744:	7dfb      	ldrb	r3, [r7, #23]
 8002746:	4313      	orrs	r3, r2
 8002748:	75fb      	strb	r3, [r7, #23]

   //Check the ASN.1 syntax of the DigestInfo structure
   bad |= em[i++] ^ (uint8_t) (ASN1_ENCODING_CONSTRUCTED | ASN1_TYPE_SEQUENCE);
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	1c5a      	adds	r2, r3, #1
 800274e:	61fa      	str	r2, [r7, #28]
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	4413      	add	r3, r2
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 800275a:	b2db      	uxtb	r3, r3
 800275c:	b25a      	sxtb	r2, r3
 800275e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002762:	4313      	orrs	r3, r2
 8002764:	b25b      	sxtb	r3, r3
 8002766:	75fb      	strb	r3, [r7, #23]
   bad |= em[i++] ^ (uint8_t) (hash->oidSize + hash->digestSize + 8);
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	1c5a      	adds	r2, r3, #1
 800276c:	61fa      	str	r2, [r7, #28]
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	4413      	add	r3, r2
 8002772:	781a      	ldrb	r2, [r3, #0]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	b2d9      	uxtb	r1, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	b2db      	uxtb	r3, r3
 8002780:	440b      	add	r3, r1
 8002782:	b2db      	uxtb	r3, r3
 8002784:	3308      	adds	r3, #8
 8002786:	b2db      	uxtb	r3, r3
 8002788:	4053      	eors	r3, r2
 800278a:	b2db      	uxtb	r3, r3
 800278c:	b25a      	sxtb	r2, r3
 800278e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002792:	4313      	orrs	r3, r2
 8002794:	b25b      	sxtb	r3, r3
 8002796:	75fb      	strb	r3, [r7, #23]
   bad |= em[i++] ^ (uint8_t) (ASN1_ENCODING_CONSTRUCTED | ASN1_TYPE_SEQUENCE);
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	1c5a      	adds	r2, r3, #1
 800279c:	61fa      	str	r2, [r7, #28]
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	4413      	add	r3, r2
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	b25a      	sxtb	r2, r3
 80027ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	b25b      	sxtb	r3, r3
 80027b4:	75fb      	strb	r3, [r7, #23]
   bad |= em[i++] ^ (uint8_t) (hash->oidSize + 4);
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	1c5a      	adds	r2, r3, #1
 80027ba:	61fa      	str	r2, [r7, #28]
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	4413      	add	r3, r2
 80027c0:	781a      	ldrb	r2, [r3, #0]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	3304      	adds	r3, #4
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	4053      	eors	r3, r2
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	b25a      	sxtb	r2, r3
 80027d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	b25b      	sxtb	r3, r3
 80027da:	75fb      	strb	r3, [r7, #23]
   bad |= em[i++] ^ (uint8_t) ASN1_TYPE_OBJECT_IDENTIFIER;
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	1c5a      	adds	r2, r3, #1
 80027e0:	61fa      	str	r2, [r7, #28]
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	4413      	add	r3, r2
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	f083 0306 	eor.w	r3, r3, #6
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	b25a      	sxtb	r2, r3
 80027f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	b25b      	sxtb	r3, r3
 80027f8:	75fb      	strb	r3, [r7, #23]
   bad |= em[i++] ^ (uint8_t) hash->oidSize;
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	1c5a      	adds	r2, r3, #1
 80027fe:	61fa      	str	r2, [r7, #28]
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	4413      	add	r3, r2
 8002804:	781a      	ldrb	r2, [r3, #0]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	b2db      	uxtb	r3, r3
 800280c:	4053      	eors	r3, r2
 800280e:	b2db      	uxtb	r3, r3
 8002810:	b25a      	sxtb	r2, r3
 8002812:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002816:	4313      	orrs	r3, r2
 8002818:	b25b      	sxtb	r3, r3
 800281a:	75fb      	strb	r3, [r7, #23]

   //Verify the hash algorithm OID
   for(j = 0; j < hash->oidSize; j++)
 800281c:	2300      	movs	r3, #0
 800281e:	61bb      	str	r3, [r7, #24]
 8002820:	e015      	b.n	800284e <emsaPkcs1v15Verify+0x1ac>
   {
      bad |= em[i++] ^ hash->oid[j];
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	1c5a      	adds	r2, r3, #1
 8002826:	61fa      	str	r2, [r7, #28]
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	4413      	add	r3, r2
 800282c:	781a      	ldrb	r2, [r3, #0]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6859      	ldr	r1, [r3, #4]
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	440b      	add	r3, r1
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	4053      	eors	r3, r2
 800283a:	b2db      	uxtb	r3, r3
 800283c:	b25a      	sxtb	r2, r3
 800283e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002842:	4313      	orrs	r3, r2
 8002844:	b25b      	sxtb	r3, r3
 8002846:	75fb      	strb	r3, [r7, #23]
   for(j = 0; j < hash->oidSize; j++)
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	3301      	adds	r3, #1
 800284c:	61bb      	str	r3, [r7, #24]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	429a      	cmp	r2, r3
 8002856:	d3e4      	bcc.n	8002822 <emsaPkcs1v15Verify+0x180>
   }

   //Check the rest of the ASN.1 structure
   bad |= em[i++] ^ (uint8_t) ASN1_TYPE_NULL;
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	1c5a      	adds	r2, r3, #1
 800285c:	61fa      	str	r2, [r7, #28]
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	4413      	add	r3, r2
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	f083 0305 	eor.w	r3, r3, #5
 8002868:	b2db      	uxtb	r3, r3
 800286a:	b25a      	sxtb	r2, r3
 800286c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002870:	4313      	orrs	r3, r2
 8002872:	b25b      	sxtb	r3, r3
 8002874:	75fb      	strb	r3, [r7, #23]
   bad |= em[i++];
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	1c5a      	adds	r2, r3, #1
 800287a:	61fa      	str	r2, [r7, #28]
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	4413      	add	r3, r2
 8002880:	781a      	ldrb	r2, [r3, #0]
 8002882:	7dfb      	ldrb	r3, [r7, #23]
 8002884:	4313      	orrs	r3, r2
 8002886:	75fb      	strb	r3, [r7, #23]
   bad |= em[i++] ^ (uint8_t) ASN1_TYPE_OCTET_STRING;
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	1c5a      	adds	r2, r3, #1
 800288c:	61fa      	str	r2, [r7, #28]
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	4413      	add	r3, r2
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	f083 0304 	eor.w	r3, r3, #4
 8002898:	b2db      	uxtb	r3, r3
 800289a:	b25a      	sxtb	r2, r3
 800289c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	b25b      	sxtb	r3, r3
 80028a4:	75fb      	strb	r3, [r7, #23]
   bad |= em[i++] ^ (uint8_t) hash->digestSize;
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	1c5a      	adds	r2, r3, #1
 80028aa:	61fa      	str	r2, [r7, #28]
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	4413      	add	r3, r2
 80028b0:	781a      	ldrb	r2, [r3, #0]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	4053      	eors	r3, r2
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	b25a      	sxtb	r2, r3
 80028be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	b25b      	sxtb	r3, r3
 80028c6:	75fb      	strb	r3, [r7, #23]

   //Recover the underlying hash value, and then compare it to the newly
   //computed hash value
   for(j = 0; j < hash->digestSize; j++)
 80028c8:	2300      	movs	r3, #0
 80028ca:	61bb      	str	r3, [r7, #24]
 80028cc:	e014      	b.n	80028f8 <emsaPkcs1v15Verify+0x256>
   {
      bad |= em[i++] ^ digest[j];
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	1c5a      	adds	r2, r3, #1
 80028d2:	61fa      	str	r2, [r7, #28]
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	4413      	add	r3, r2
 80028d8:	781a      	ldrb	r2, [r3, #0]
 80028da:	68b9      	ldr	r1, [r7, #8]
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	440b      	add	r3, r1
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	4053      	eors	r3, r2
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	b25a      	sxtb	r2, r3
 80028e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	b25b      	sxtb	r3, r3
 80028f0:	75fb      	strb	r3, [r7, #23]
   for(j = 0; j < hash->digestSize; j++)
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	3301      	adds	r3, #1
 80028f6:	61bb      	str	r3, [r7, #24]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	695b      	ldr	r3, [r3, #20]
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d3e5      	bcc.n	80028ce <emsaPkcs1v15Verify+0x22c>
   }

   //Verification result
   return (bad != 0) ? ERROR_INCONSISTENT_VALUE : NO_ERROR;
 8002902:	7dfb      	ldrb	r3, [r7, #23]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d001      	beq.n	800290c <emsaPkcs1v15Verify+0x26a>
 8002908:	23f9      	movs	r3, #249	; 0xf9
 800290a:	e000      	b.n	800290e <emsaPkcs1v15Verify+0x26c>
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3724      	adds	r7, #36	; 0x24
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr

0800291a <sha256Compute>:
 * @param[out] digest Pointer to the calculated digest
 * @return Error code
 **/

__weak_func error_t sha256Compute(const void *data, size_t length, uint8_t *digest)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b086      	sub	sp, #24
 800291e:	af00      	add	r7, sp, #0
 8002920:	60f8      	str	r0, [r7, #12]
 8002922:	60b9      	str	r1, [r7, #8]
 8002924:	607a      	str	r2, [r7, #4]
   error_t error;
   Sha256Context *context;

   //Allocate a memory buffer to hold the SHA-256 context
   context = cryptoAllocMem(sizeof(Sha256Context));
 8002926:	2070      	movs	r0, #112	; 0x70
 8002928:	f001 fe20 	bl	800456c <osAllocMem>
 800292c:	6138      	str	r0, [r7, #16]

   //Successful memory allocation?
   if(context != NULL)
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d011      	beq.n	8002958 <sha256Compute+0x3e>
   {
      //Initialize the SHA-256 context
      sha256Init(context);
 8002934:	6938      	ldr	r0, [r7, #16]
 8002936:	f000 f817 	bl	8002968 <sha256Init>
      //Digest the message
      sha256Update(context, data, length);
 800293a:	68ba      	ldr	r2, [r7, #8]
 800293c:	68f9      	ldr	r1, [r7, #12]
 800293e:	6938      	ldr	r0, [r7, #16]
 8002940:	f000 f84e 	bl	80029e0 <sha256Update>
      //Finalize the SHA-256 message digest
      sha256Final(context, digest);
 8002944:	6879      	ldr	r1, [r7, #4]
 8002946:	6938      	ldr	r0, [r7, #16]
 8002948:	f000 f896 	bl	8002a78 <sha256Final>

      //Free previously allocated memory
      cryptoFreeMem(context);
 800294c:	6938      	ldr	r0, [r7, #16]
 800294e:	f001 fe1b 	bl	8004588 <osFreeMem>

      //Successful processing
      error = NO_ERROR;
 8002952:	2300      	movs	r3, #0
 8002954:	82fb      	strh	r3, [r7, #22]
 8002956:	e001      	b.n	800295c <sha256Compute+0x42>
   }
   else
   {
      //Failed to allocate memory
      error = ERROR_OUT_OF_MEMORY;
 8002958:	2364      	movs	r3, #100	; 0x64
 800295a:	82fb      	strh	r3, [r7, #22]
   }

   //Return status code
   return error;
 800295c:	8afb      	ldrh	r3, [r7, #22]
}
 800295e:	4618      	mov	r0, r3
 8002960:	3718      	adds	r7, #24
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
	...

08002968 <sha256Init>:
 * @brief Initialize SHA-256 message digest context
 * @param[in] context Pointer to the SHA-256 context to initialize
 **/

__weak_func void sha256Init(Sha256Context *context)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
   //Set initial hash value
   context->h[0] = 0x6A09E667;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4a13      	ldr	r2, [pc, #76]	; (80029c0 <sha256Init+0x58>)
 8002974:	601a      	str	r2, [r3, #0]
   context->h[1] = 0xBB67AE85;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a12      	ldr	r2, [pc, #72]	; (80029c4 <sha256Init+0x5c>)
 800297a:	605a      	str	r2, [r3, #4]
   context->h[2] = 0x3C6EF372;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4a12      	ldr	r2, [pc, #72]	; (80029c8 <sha256Init+0x60>)
 8002980:	609a      	str	r2, [r3, #8]
   context->h[3] = 0xA54FF53A;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a11      	ldr	r2, [pc, #68]	; (80029cc <sha256Init+0x64>)
 8002986:	60da      	str	r2, [r3, #12]
   context->h[4] = 0x510E527F;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	4a11      	ldr	r2, [pc, #68]	; (80029d0 <sha256Init+0x68>)
 800298c:	611a      	str	r2, [r3, #16]
   context->h[5] = 0x9B05688C;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a10      	ldr	r2, [pc, #64]	; (80029d4 <sha256Init+0x6c>)
 8002992:	615a      	str	r2, [r3, #20]
   context->h[6] = 0x1F83D9AB;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4a10      	ldr	r2, [pc, #64]	; (80029d8 <sha256Init+0x70>)
 8002998:	619a      	str	r2, [r3, #24]
   context->h[7] = 0x5BE0CD19;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a0f      	ldr	r2, [pc, #60]	; (80029dc <sha256Init+0x74>)
 800299e:	61da      	str	r2, [r3, #28]

   //Number of bytes in the buffer
   context->size = 0;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	661a      	str	r2, [r3, #96]	; 0x60
   //Total length of the message
   context->totalSize = 0;
 80029a6:	6879      	ldr	r1, [r7, #4]
 80029a8:	f04f 0200 	mov.w	r2, #0
 80029ac:	f04f 0300 	mov.w	r3, #0
 80029b0:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
}
 80029b4:	bf00      	nop
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr
 80029c0:	6a09e667 	.word	0x6a09e667
 80029c4:	bb67ae85 	.word	0xbb67ae85
 80029c8:	3c6ef372 	.word	0x3c6ef372
 80029cc:	a54ff53a 	.word	0xa54ff53a
 80029d0:	510e527f 	.word	0x510e527f
 80029d4:	9b05688c 	.word	0x9b05688c
 80029d8:	1f83d9ab 	.word	0x1f83d9ab
 80029dc:	5be0cd19 	.word	0x5be0cd19

080029e0 <sha256Update>:
 * @param[in] data Pointer to the buffer being hashed
 * @param[in] length Length of the buffer
 **/

__weak_func void sha256Update(Sha256Context *context, const void *data, size_t length)
{
 80029e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80029e4:	b086      	sub	sp, #24
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	60f8      	str	r0, [r7, #12]
 80029ea:	60b9      	str	r1, [r7, #8]
 80029ec:	607a      	str	r2, [r7, #4]
   size_t n;

   //Process the incoming data
   while(length > 0)
 80029ee:	e039      	b.n	8002a64 <sha256Update+0x84>
   {
      //The buffer can hold at most 64 bytes
      n = MIN(length, 64 - context->size);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029f4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	4293      	cmp	r3, r2
 80029fc:	bf28      	it	cs
 80029fe:	4613      	movcs	r3, r2
 8002a00:	617b      	str	r3, [r7, #20]

      //Copy the data to the buffer
      osMemcpy(context->buffer + context->size, data, n);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f103 0220 	add.w	r2, r3, #32
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a0c:	4413      	add	r3, r2
 8002a0e:	697a      	ldr	r2, [r7, #20]
 8002a10:	68b9      	ldr	r1, [r7, #8]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f003 fd96 	bl	8006544 <memcpy>

      //Update the SHA-256 context
      context->size += n;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	441a      	add	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	661a      	str	r2, [r3, #96]	; 0x60
      context->totalSize += n;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002a2a:	6979      	ldr	r1, [r7, #20]
 8002a2c:	2000      	movs	r0, #0
 8002a2e:	460c      	mov	r4, r1
 8002a30:	4605      	mov	r5, r0
 8002a32:	eb12 0804 	adds.w	r8, r2, r4
 8002a36:	eb43 0905 	adc.w	r9, r3, r5
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	e9c3 891a 	strd	r8, r9, [r3, #104]	; 0x68
      //Advance the data pointer
      data = (uint8_t *) data + n;
 8002a40:	68ba      	ldr	r2, [r7, #8]
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	4413      	add	r3, r2
 8002a46:	60bb      	str	r3, [r7, #8]
      //Remaining bytes to process
      length -= n;
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	607b      	str	r3, [r7, #4]

      //Process message in 16-word blocks
      if(context->size == 64)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a54:	2b40      	cmp	r3, #64	; 0x40
 8002a56:	d105      	bne.n	8002a64 <sha256Update+0x84>
      {
         //Transform the 16-word block
         sha256ProcessBlock(context);
 8002a58:	68f8      	ldr	r0, [r7, #12]
 8002a5a:	f000 f8ab 	bl	8002bb4 <sha256ProcessBlock>
         //Empty the buffer
         context->size = 0;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2200      	movs	r2, #0
 8002a62:	661a      	str	r2, [r3, #96]	; 0x60
   while(length > 0)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1c2      	bne.n	80029f0 <sha256Update+0x10>
      }
   }
}
 8002a6a:	bf00      	nop
 8002a6c:	bf00      	nop
 8002a6e:	3718      	adds	r7, #24
 8002a70:	46bd      	mov	sp, r7
 8002a72:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08002a78 <sha256Final>:
 * @param[in] context Pointer to the SHA-256 context
 * @param[out] digest Calculated digest (optional parameter)
 **/

__weak_func void sha256Final(Sha256Context *context, uint8_t *digest)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
   uint_t i;
   size_t paddingSize;
   uint64_t totalSize;

   //Length of the original message (before padding)
   totalSize = context->totalSize * 8;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8002a88:	f04f 0200 	mov.w	r2, #0
 8002a8c:	f04f 0300 	mov.w	r3, #0
 8002a90:	00cb      	lsls	r3, r1, #3
 8002a92:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002a96:	00c2      	lsls	r2, r0, #3
 8002a98:	e9c7 2302 	strd	r2, r3, [r7, #8]

   //Pad the message so that its length is congruent to 56 modulo 64
   if(context->size < 56)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aa0:	2b37      	cmp	r3, #55	; 0x37
 8002aa2:	d805      	bhi.n	8002ab0 <sha256Final+0x38>
   {
      paddingSize = 56 - context->size;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aa8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8002aac:	613b      	str	r3, [r7, #16]
 8002aae:	e004      	b.n	8002aba <sha256Final+0x42>
   }
   else
   {
      paddingSize = 64 + 56 - context->size;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ab4:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 8002ab8:	613b      	str	r3, [r7, #16]
   }

   //Append padding
   sha256Update(context, padding, paddingSize);
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	491f      	ldr	r1, [pc, #124]	; (8002b3c <sha256Final+0xc4>)
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f7ff ff8e 	bl	80029e0 <sha256Update>

   //Append the length of the original message
   context->w[14] = htobe32((uint32_t) (totalSize >> 32));
 8002ac4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ac8:	f04f 0200 	mov.w	r2, #0
 8002acc:	f04f 0300 	mov.w	r3, #0
 8002ad0:	000a      	movs	r2, r1
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f001 fb72 	bl	80041c0 <swapInt32>
 8002adc:	4602      	mov	r2, r0
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	659a      	str	r2, [r3, #88]	; 0x58
   context->w[15] = htobe32((uint32_t) totalSize);
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f001 fb6b 	bl	80041c0 <swapInt32>
 8002aea:	4602      	mov	r2, r0
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	65da      	str	r2, [r3, #92]	; 0x5c

   //Calculate the message digest
   sha256ProcessBlock(context);
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f000 f85f 	bl	8002bb4 <sha256ProcessBlock>

   //Convert from host byte order to big-endian byte order
   for(i = 0; i < 8; i++)
 8002af6:	2300      	movs	r3, #0
 8002af8:	617b      	str	r3, [r7, #20]
 8002afa:	e00e      	b.n	8002b1a <sha256Final+0xa2>
   {
      context->h[i] = htobe32(context->h[i]);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	697a      	ldr	r2, [r7, #20]
 8002b00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f001 fb5b 	bl	80041c0 <swapInt32>
 8002b0a:	4601      	mov	r1, r0
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	697a      	ldr	r2, [r7, #20]
 8002b10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   for(i = 0; i < 8; i++)
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	3301      	adds	r3, #1
 8002b18:	617b      	str	r3, [r7, #20]
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	2b07      	cmp	r3, #7
 8002b1e:	d9ed      	bls.n	8002afc <sha256Final+0x84>
   }

   //Copy the resulting digest
   if(digest != NULL)
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d005      	beq.n	8002b32 <sha256Final+0xba>
   {
      osMemcpy(digest, context->digest, SHA256_DIGEST_SIZE);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2220      	movs	r2, #32
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	6838      	ldr	r0, [r7, #0]
 8002b2e:	f003 fd09 	bl	8006544 <memcpy>
   }
}
 8002b32:	bf00      	nop
 8002b34:	3718      	adds	r7, #24
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	080068bc 	.word	0x080068bc

08002b40 <sha256FinalRaw>:
 * @param[in] context Pointer to the SHA-256 context
 * @param[out] digest Calculated digest
 **/

__weak_func void sha256FinalRaw(Sha256Context *context, uint8_t *digest)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
   uint_t i;

   //Convert from host byte order to big-endian byte order
   for(i = 0; i < 8; i++)
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	60fb      	str	r3, [r7, #12]
 8002b4e:	e00e      	b.n	8002b6e <sha256FinalRaw+0x2e>
   {
      context->h[i] = htobe32(context->h[i]);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f001 fb31 	bl	80041c0 <swapInt32>
 8002b5e:	4601      	mov	r1, r0
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	68fa      	ldr	r2, [r7, #12]
 8002b64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   for(i = 0; i < 8; i++)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	60fb      	str	r3, [r7, #12]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2b07      	cmp	r3, #7
 8002b72:	d9ed      	bls.n	8002b50 <sha256FinalRaw+0x10>
   }

   //Copy the resulting digest
   osMemcpy(digest, context->digest, SHA256_DIGEST_SIZE);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2220      	movs	r2, #32
 8002b78:	4619      	mov	r1, r3
 8002b7a:	6838      	ldr	r0, [r7, #0]
 8002b7c:	f003 fce2 	bl	8006544 <memcpy>

   //Convert from big-endian byte order to host byte order
   for(i = 0; i < 8; i++)
 8002b80:	2300      	movs	r3, #0
 8002b82:	60fb      	str	r3, [r7, #12]
 8002b84:	e00e      	b.n	8002ba4 <sha256FinalRaw+0x64>
   {
      context->h[i] = betoh32(context->h[i]);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	68fa      	ldr	r2, [r7, #12]
 8002b8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f001 fb16 	bl	80041c0 <swapInt32>
 8002b94:	4601      	mov	r1, r0
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	68fa      	ldr	r2, [r7, #12]
 8002b9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   for(i = 0; i < 8; i++)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	60fb      	str	r3, [r7, #12]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2b07      	cmp	r3, #7
 8002ba8:	d9ed      	bls.n	8002b86 <sha256FinalRaw+0x46>
   }
}
 8002baa:	bf00      	nop
 8002bac:	bf00      	nop
 8002bae:	3710      	adds	r7, #16
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <sha256ProcessBlock>:
 * @brief Process message in 16-word blocks
 * @param[in] context Pointer to the SHA-256 context
 **/

__weak_func void sha256ProcessBlock(Sha256Context *context)
{
 8002bb4:	b590      	push	{r4, r7, lr}
 8002bb6:	b08f      	sub	sp, #60	; 0x3c
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
   uint_t t;
   uint32_t temp1;
   uint32_t temp2;

   //Initialize the 8 working registers
   uint32_t a = context->h[0];
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	633b      	str	r3, [r7, #48]	; 0x30
   uint32_t b = context->h[1];
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
   uint32_t c = context->h[2];
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	62bb      	str	r3, [r7, #40]	; 0x28
   uint32_t d = context->h[3];
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	627b      	str	r3, [r7, #36]	; 0x24
   uint32_t e = context->h[4];
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	623b      	str	r3, [r7, #32]
   uint32_t f = context->h[5];
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	695b      	ldr	r3, [r3, #20]
 8002bde:	61fb      	str	r3, [r7, #28]
   uint32_t g = context->h[6];
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	61bb      	str	r3, [r7, #24]
   uint32_t h = context->h[7];
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	69db      	ldr	r3, [r3, #28]
 8002bea:	617b      	str	r3, [r7, #20]

   //Process message in 16-word blocks
   uint32_t *w = context->w;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	3320      	adds	r3, #32
 8002bf0:	613b      	str	r3, [r7, #16]

   //Convert from big-endian byte order to host byte order
   for(t = 0; t < 16; t++)
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	637b      	str	r3, [r7, #52]	; 0x34
 8002bf6:	e010      	b.n	8002c1a <sha256ProcessBlock+0x66>
   {
      w[t] = betoh32(w[t]);
 8002bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	693a      	ldr	r2, [r7, #16]
 8002bfe:	4413      	add	r3, r2
 8002c00:	6819      	ldr	r1, [r3, #0]
 8002c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	18d4      	adds	r4, r2, r3
 8002c0a:	4608      	mov	r0, r1
 8002c0c:	f001 fad8 	bl	80041c0 <swapInt32>
 8002c10:	4603      	mov	r3, r0
 8002c12:	6023      	str	r3, [r4, #0]
   for(t = 0; t < 16; t++)
 8002c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c16:	3301      	adds	r3, #1
 8002c18:	637b      	str	r3, [r7, #52]	; 0x34
 8002c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c1c:	2b0f      	cmp	r3, #15
 8002c1e:	d9eb      	bls.n	8002bf8 <sha256ProcessBlock+0x44>
   }

   //SHA-256 hash computation (alternate method)
   for(t = 0; t < 64; t++)
 8002c20:	2300      	movs	r3, #0
 8002c22:	637b      	str	r3, [r7, #52]	; 0x34
 8002c24:	e0aa      	b.n	8002d7c <sha256ProcessBlock+0x1c8>
   {
      //Prepare the message schedule
      if(t >= 16)
 8002c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c28:	2b0f      	cmp	r3, #15
 8002c2a:	d956      	bls.n	8002cda <sha256ProcessBlock+0x126>
      {
         W(t) += SIGMA4(W(t + 14)) + W(t + 9) + SIGMA3(W(t + 1));
 8002c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c2e:	f003 030f 	and.w	r3, r3, #15
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	693a      	ldr	r2, [r7, #16]
 8002c36:	4413      	add	r3, r2
 8002c38:	6819      	ldr	r1, [r3, #0]
 8002c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c3c:	330e      	adds	r3, #14
 8002c3e:	f003 030f 	and.w	r3, r3, #15
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	693a      	ldr	r2, [r7, #16]
 8002c46:	4413      	add	r3, r2
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	ea4f 4273 	mov.w	r2, r3, ror #17
 8002c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c50:	330e      	adds	r3, #14
 8002c52:	f003 030f 	and.w	r3, r3, #15
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	6938      	ldr	r0, [r7, #16]
 8002c5a:	4403      	add	r3, r0
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8002c62:	405a      	eors	r2, r3
 8002c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c66:	330e      	adds	r3, #14
 8002c68:	f003 030f 	and.w	r3, r3, #15
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	6938      	ldr	r0, [r7, #16]
 8002c70:	4403      	add	r3, r0
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	0a9b      	lsrs	r3, r3, #10
 8002c76:	405a      	eors	r2, r3
 8002c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c7a:	3309      	adds	r3, #9
 8002c7c:	f003 030f 	and.w	r3, r3, #15
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	6938      	ldr	r0, [r7, #16]
 8002c84:	4403      	add	r3, r0
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	441a      	add	r2, r3
 8002c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	f003 030f 	and.w	r3, r3, #15
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	6938      	ldr	r0, [r7, #16]
 8002c96:	4403      	add	r3, r0
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8002c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	f003 030f 	and.w	r3, r3, #15
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	693c      	ldr	r4, [r7, #16]
 8002caa:	4423      	add	r3, r4
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8002cb2:	4058      	eors	r0, r3
 8002cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	f003 030f 	and.w	r3, r3, #15
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	693c      	ldr	r4, [r7, #16]
 8002cc0:	4423      	add	r3, r4
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	08db      	lsrs	r3, r3, #3
 8002cc6:	4043      	eors	r3, r0
 8002cc8:	441a      	add	r2, r3
 8002cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ccc:	f003 030f 	and.w	r3, r3, #15
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	6938      	ldr	r0, [r7, #16]
 8002cd4:	4403      	add	r3, r0
 8002cd6:	440a      	add	r2, r1
 8002cd8:	601a      	str	r2, [r3, #0]
      }

      //Calculate T1 and T2
      temp1 = h + SIGMA2(e) + CH(e, f, g) + k[t] + W(t);
 8002cda:	6a3b      	ldr	r3, [r7, #32]
 8002cdc:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8002ce0:	6a3b      	ldr	r3, [r7, #32]
 8002ce2:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8002ce6:	405a      	eors	r2, r3
 8002ce8:	6a3b      	ldr	r3, [r7, #32]
 8002cea:	ea4f 6373 	mov.w	r3, r3, ror #25
 8002cee:	405a      	eors	r2, r3
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	441a      	add	r2, r3
 8002cf4:	6a39      	ldr	r1, [r7, #32]
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	4019      	ands	r1, r3
 8002cfa:	6a3b      	ldr	r3, [r7, #32]
 8002cfc:	43d8      	mvns	r0, r3
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	4003      	ands	r3, r0
 8002d02:	430b      	orrs	r3, r1
 8002d04:	441a      	add	r2, r3
 8002d06:	4939      	ldr	r1, [pc, #228]	; (8002dec <sha256ProcessBlock+0x238>)
 8002d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d0a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002d0e:	441a      	add	r2, r3
 8002d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d12:	f003 030f 	and.w	r3, r3, #15
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	6939      	ldr	r1, [r7, #16]
 8002d1a:	440b      	add	r3, r1
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4413      	add	r3, r2
 8002d20:	60fb      	str	r3, [r7, #12]
      temp2 = SIGMA1(a) + MAJ(a, b, c);
 8002d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d24:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8002d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d2a:	ea4f 3373 	mov.w	r3, r3, ror #13
 8002d2e:	405a      	eors	r2, r3
 8002d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d32:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8002d36:	405a      	eors	r2, r3
 8002d38:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d3c:	4319      	orrs	r1, r3
 8002d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d40:	4019      	ands	r1, r3
 8002d42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d46:	4003      	ands	r3, r0
 8002d48:	430b      	orrs	r3, r1
 8002d4a:	4413      	add	r3, r2
 8002d4c:	60bb      	str	r3, [r7, #8]

      //Update the working registers
      h = g;
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	617b      	str	r3, [r7, #20]
      g = f;
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	61bb      	str	r3, [r7, #24]
      f = e;
 8002d56:	6a3b      	ldr	r3, [r7, #32]
 8002d58:	61fb      	str	r3, [r7, #28]
      e = d + temp1;
 8002d5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	4413      	add	r3, r2
 8002d60:	623b      	str	r3, [r7, #32]
      d = c;
 8002d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d64:	627b      	str	r3, [r7, #36]	; 0x24
      c = b;
 8002d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d68:	62bb      	str	r3, [r7, #40]	; 0x28
      b = a;
 8002d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
      a = temp1 + temp2;
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	4413      	add	r3, r2
 8002d74:	633b      	str	r3, [r7, #48]	; 0x30
   for(t = 0; t < 64; t++)
 8002d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d78:	3301      	adds	r3, #1
 8002d7a:	637b      	str	r3, [r7, #52]	; 0x34
 8002d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d7e:	2b3f      	cmp	r3, #63	; 0x3f
 8002d80:	f67f af51 	bls.w	8002c26 <sha256ProcessBlock+0x72>
   }

   //Update the hash value
   context->h[0] += a;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d8a:	441a      	add	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	601a      	str	r2, [r3, #0]
   context->h[1] += b;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685a      	ldr	r2, [r3, #4]
 8002d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d96:	441a      	add	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	605a      	str	r2, [r3, #4]
   context->h[2] += c;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689a      	ldr	r2, [r3, #8]
 8002da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da2:	441a      	add	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	609a      	str	r2, [r3, #8]
   context->h[3] += d;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	68da      	ldr	r2, [r3, #12]
 8002dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dae:	441a      	add	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	60da      	str	r2, [r3, #12]
   context->h[4] += e;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	691a      	ldr	r2, [r3, #16]
 8002db8:	6a3b      	ldr	r3, [r7, #32]
 8002dba:	441a      	add	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	611a      	str	r2, [r3, #16]
   context->h[5] += f;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	695a      	ldr	r2, [r3, #20]
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	441a      	add	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	615a      	str	r2, [r3, #20]
   context->h[6] += g;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	699a      	ldr	r2, [r3, #24]
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	441a      	add	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	619a      	str	r2, [r3, #24]
   context->h[7] += h;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	69da      	ldr	r2, [r3, #28]
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	441a      	add	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	61da      	str	r2, [r3, #28]
}
 8002de4:	bf00      	nop
 8002de6:	373c      	adds	r7, #60	; 0x3c
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd90      	pop	{r4, r7, pc}
 8002dec:	080068fc 	.word	0x080068fc

08002df0 <sha384Compute>:
 * @param[out] digest Pointer to the calculated digest
 * @return Error code
 **/

__weak_func error_t sha384Compute(const void *data, size_t length, uint8_t *digest)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b086      	sub	sp, #24
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
   error_t error;
   Sha384Context *context;

   //Allocate a memory buffer to hold the SHA-384 context
   context = cryptoAllocMem(sizeof(Sha384Context));
 8002dfc:	20d0      	movs	r0, #208	; 0xd0
 8002dfe:	f001 fbb5 	bl	800456c <osAllocMem>
 8002e02:	6138      	str	r0, [r7, #16]

   //Successful memory allocation?
   if(context != NULL)
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d011      	beq.n	8002e2e <sha384Compute+0x3e>
   {
      //Initialize the SHA-384 context
      sha384Init(context);
 8002e0a:	6938      	ldr	r0, [r7, #16]
 8002e0c:	f000 f818 	bl	8002e40 <sha384Init>
      //Digest the message
      sha384Update(context, data, length);
 8002e10:	68ba      	ldr	r2, [r7, #8]
 8002e12:	68f9      	ldr	r1, [r7, #12]
 8002e14:	6938      	ldr	r0, [r7, #16]
 8002e16:	f000 f87b 	bl	8002f10 <sha384Update>
      //Finalize the SHA-384 message digest
      sha384Final(context, digest);
 8002e1a:	6879      	ldr	r1, [r7, #4]
 8002e1c:	6938      	ldr	r0, [r7, #16]
 8002e1e:	f000 f886 	bl	8002f2e <sha384Final>

      //Free previously allocated memory
      cryptoFreeMem(context);
 8002e22:	6938      	ldr	r0, [r7, #16]
 8002e24:	f001 fbb0 	bl	8004588 <osFreeMem>

      //Successful processing
      error = NO_ERROR;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	82fb      	strh	r3, [r7, #22]
 8002e2c:	e001      	b.n	8002e32 <sha384Compute+0x42>
   }
   else
   {
      //Failed to allocate memory
      error = ERROR_OUT_OF_MEMORY;
 8002e2e:	2364      	movs	r3, #100	; 0x64
 8002e30:	82fb      	strh	r3, [r7, #22]
   }

   //Return status code
   return error;
 8002e32:	8afb      	ldrh	r3, [r7, #22]
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3718      	adds	r7, #24
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	0000      	movs	r0, r0
	...

08002e40 <sha384Init>:
 * @brief Initialize SHA-384 message digest context
 * @param[in] context Pointer to the SHA-384 context to initialize
 **/

__weak_func void sha384Init(Sha384Context *context)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
   //Set initial hash value
   context->h[0] = 0xCBBB9D5DC1059ED8;
 8002e48:	6879      	ldr	r1, [r7, #4]
 8002e4a:	a321      	add	r3, pc, #132	; (adr r3, 8002ed0 <sha384Init+0x90>)
 8002e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e50:	e9c1 2300 	strd	r2, r3, [r1]
   context->h[1] = 0x629A292A367CD507;
 8002e54:	6879      	ldr	r1, [r7, #4]
 8002e56:	a320      	add	r3, pc, #128	; (adr r3, 8002ed8 <sha384Init+0x98>)
 8002e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e5c:	e9c1 2302 	strd	r2, r3, [r1, #8]
   context->h[2] = 0x9159015A3070DD17;
 8002e60:	6879      	ldr	r1, [r7, #4]
 8002e62:	a31f      	add	r3, pc, #124	; (adr r3, 8002ee0 <sha384Init+0xa0>)
 8002e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e68:	e9c1 2304 	strd	r2, r3, [r1, #16]
   context->h[3] = 0x152FECD8F70E5939;
 8002e6c:	6879      	ldr	r1, [r7, #4]
 8002e6e:	a31e      	add	r3, pc, #120	; (adr r3, 8002ee8 <sha384Init+0xa8>)
 8002e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e74:	e9c1 2306 	strd	r2, r3, [r1, #24]
   context->h[4] = 0x67332667FFC00B31;
 8002e78:	6879      	ldr	r1, [r7, #4]
 8002e7a:	a31d      	add	r3, pc, #116	; (adr r3, 8002ef0 <sha384Init+0xb0>)
 8002e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e80:	e9c1 2308 	strd	r2, r3, [r1, #32]
   context->h[5] = 0x8EB44A8768581511;
 8002e84:	6879      	ldr	r1, [r7, #4]
 8002e86:	a31c      	add	r3, pc, #112	; (adr r3, 8002ef8 <sha384Init+0xb8>)
 8002e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e8c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
   context->h[6] = 0xDB0C2E0D64F98FA7;
 8002e90:	6879      	ldr	r1, [r7, #4]
 8002e92:	a31b      	add	r3, pc, #108	; (adr r3, 8002f00 <sha384Init+0xc0>)
 8002e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e98:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
   context->h[7] = 0x47B5481DBEFA4FA4;
 8002e9c:	6879      	ldr	r1, [r7, #4]
 8002e9e:	a31a      	add	r3, pc, #104	; (adr r3, 8002f08 <sha384Init+0xc8>)
 8002ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea4:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

   //Number of bytes in the buffer
   context->size = 0;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
   //Total length of the message
   context->totalSize = 0;
 8002eb0:	6879      	ldr	r1, [r7, #4]
 8002eb2:	f04f 0200 	mov.w	r2, #0
 8002eb6:	f04f 0300 	mov.w	r3, #0
 8002eba:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
}
 8002ebe:	bf00      	nop
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	f3af 8000 	nop.w
 8002ed0:	c1059ed8 	.word	0xc1059ed8
 8002ed4:	cbbb9d5d 	.word	0xcbbb9d5d
 8002ed8:	367cd507 	.word	0x367cd507
 8002edc:	629a292a 	.word	0x629a292a
 8002ee0:	3070dd17 	.word	0x3070dd17
 8002ee4:	9159015a 	.word	0x9159015a
 8002ee8:	f70e5939 	.word	0xf70e5939
 8002eec:	152fecd8 	.word	0x152fecd8
 8002ef0:	ffc00b31 	.word	0xffc00b31
 8002ef4:	67332667 	.word	0x67332667
 8002ef8:	68581511 	.word	0x68581511
 8002efc:	8eb44a87 	.word	0x8eb44a87
 8002f00:	64f98fa7 	.word	0x64f98fa7
 8002f04:	db0c2e0d 	.word	0xdb0c2e0d
 8002f08:	befa4fa4 	.word	0xbefa4fa4
 8002f0c:	47b5481d 	.word	0x47b5481d

08002f10 <sha384Update>:
 * @param[in] data Pointer to the buffer being hashed
 * @param[in] length Length of the buffer
 **/

__weak_func void sha384Update(Sha384Context *context, const void *data, size_t length)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	60b9      	str	r1, [r7, #8]
 8002f1a:	607a      	str	r2, [r7, #4]
   //The function is defined in the exact same manner as SHA-512
   sha512Update(context, data, length);
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	68b9      	ldr	r1, [r7, #8]
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	f000 f8f1 	bl	8003108 <sha512Update>
}
 8002f26:	bf00      	nop
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <sha384Final>:
 * @param[in] context Pointer to the SHA-384 context
 * @param[out] digest Calculated digest (optional parameter)
 **/

__weak_func void sha384Final(Sha384Context *context, uint8_t *digest)
{
 8002f2e:	b580      	push	{r7, lr}
 8002f30:	b082      	sub	sp, #8
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
 8002f36:	6039      	str	r1, [r7, #0]
   //The function is defined in the exact same manner as SHA-512
   sha512Final(context, NULL);
 8002f38:	2100      	movs	r1, #0
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 f936 	bl	80031ac <sha512Final>

   //Copy the resulting digest
   if(digest != NULL)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d005      	beq.n	8002f52 <sha384Final+0x24>
   {
      osMemcpy(digest, context->digest, SHA384_DIGEST_SIZE);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2230      	movs	r2, #48	; 0x30
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	6838      	ldr	r0, [r7, #0]
 8002f4e:	f003 faf9 	bl	8006544 <memcpy>
   }
}
 8002f52:	bf00      	nop
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <sha384FinalRaw>:
 * @param[in] context Pointer to the SHA-384 context
 * @param[out] digest Calculated digest
 **/

__weak_func void sha384FinalRaw(Sha384Context *context, uint8_t *digest)
{
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b084      	sub	sp, #16
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
 8002f62:	6039      	str	r1, [r7, #0]
   uint_t i;

   //Convert from host byte order to big-endian byte order
   for(i = 0; i < 8; i++)
 8002f64:	2300      	movs	r3, #0
 8002f66:	60fb      	str	r3, [r7, #12]
 8002f68:	e014      	b.n	8002f94 <sha384FinalRaw+0x3a>
   {
      context->h[i] = htobe64(context->h[i]);
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	4413      	add	r3, r2
 8002f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f76:	4610      	mov	r0, r2
 8002f78:	4619      	mov	r1, r3
 8002f7a:	f001 f93a 	bl	80041f2 <swapInt64>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	460b      	mov	r3, r1
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	68f9      	ldr	r1, [r7, #12]
 8002f86:	00c9      	lsls	r1, r1, #3
 8002f88:	4401      	add	r1, r0
 8002f8a:	e9c1 2300 	strd	r2, r3, [r1]
   for(i = 0; i < 8; i++)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	3301      	adds	r3, #1
 8002f92:	60fb      	str	r3, [r7, #12]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2b07      	cmp	r3, #7
 8002f98:	d9e7      	bls.n	8002f6a <sha384FinalRaw+0x10>
   }

   //Copy the resulting digest
   osMemcpy(digest, context->digest, SHA384_DIGEST_SIZE);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2230      	movs	r2, #48	; 0x30
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	6838      	ldr	r0, [r7, #0]
 8002fa2:	f003 facf 	bl	8006544 <memcpy>

   //Convert from big-endian byte order to host byte order
   for(i = 0; i < 8; i++)
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	60fb      	str	r3, [r7, #12]
 8002faa:	e014      	b.n	8002fd6 <sha384FinalRaw+0x7c>
   {
      context->h[i] = betoh64(context->h[i]);
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	00db      	lsls	r3, r3, #3
 8002fb2:	4413      	add	r3, r2
 8002fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb8:	4610      	mov	r0, r2
 8002fba:	4619      	mov	r1, r3
 8002fbc:	f001 f919 	bl	80041f2 <swapInt64>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	68f9      	ldr	r1, [r7, #12]
 8002fc8:	00c9      	lsls	r1, r1, #3
 8002fca:	4401      	add	r1, r0
 8002fcc:	e9c1 2300 	strd	r2, r3, [r1]
   for(i = 0; i < 8; i++)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	60fb      	str	r3, [r7, #12]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2b07      	cmp	r3, #7
 8002fda:	d9e7      	bls.n	8002fac <sha384FinalRaw+0x52>
   }
}
 8002fdc:	bf00      	nop
 8002fde:	bf00      	nop
 8002fe0:	3710      	adds	r7, #16
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}

08002fe6 <sha512Compute>:
 * @param[out] digest Pointer to the calculated digest
 * @return Error code
 **/

__weak_func error_t sha512Compute(const void *data, size_t length, uint8_t *digest)
{
 8002fe6:	b580      	push	{r7, lr}
 8002fe8:	b086      	sub	sp, #24
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	60f8      	str	r0, [r7, #12]
 8002fee:	60b9      	str	r1, [r7, #8]
 8002ff0:	607a      	str	r2, [r7, #4]
   error_t error;
   Sha512Context *context;

   //Allocate a memory buffer to hold the SHA-512 context
   context = cryptoAllocMem(sizeof(Sha512Context));
 8002ff2:	20d0      	movs	r0, #208	; 0xd0
 8002ff4:	f001 faba 	bl	800456c <osAllocMem>
 8002ff8:	6138      	str	r0, [r7, #16]

   //Successful memory allocation?
   if(context != NULL)
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d011      	beq.n	8003024 <sha512Compute+0x3e>
   {
      //Initialize the SHA-512 context
      sha512Init(context);
 8003000:	6938      	ldr	r0, [r7, #16]
 8003002:	f000 f819 	bl	8003038 <sha512Init>
      //Digest the message
      sha512Update(context, data, length);
 8003006:	68ba      	ldr	r2, [r7, #8]
 8003008:	68f9      	ldr	r1, [r7, #12]
 800300a:	6938      	ldr	r0, [r7, #16]
 800300c:	f000 f87c 	bl	8003108 <sha512Update>
      //Finalize the SHA-512 message digest
      sha512Final(context, digest);
 8003010:	6879      	ldr	r1, [r7, #4]
 8003012:	6938      	ldr	r0, [r7, #16]
 8003014:	f000 f8ca 	bl	80031ac <sha512Final>

      //Free previously allocated memory
      cryptoFreeMem(context);
 8003018:	6938      	ldr	r0, [r7, #16]
 800301a:	f001 fab5 	bl	8004588 <osFreeMem>

      //Successful processing
      error = NO_ERROR;
 800301e:	2300      	movs	r3, #0
 8003020:	82fb      	strh	r3, [r7, #22]
 8003022:	e001      	b.n	8003028 <sha512Compute+0x42>
   }
   else
   {
      //Failed to allocate memory
      error = ERROR_OUT_OF_MEMORY;
 8003024:	2364      	movs	r3, #100	; 0x64
 8003026:	82fb      	strh	r3, [r7, #22]
   }

   //Return status code
   return error;
 8003028:	8afb      	ldrh	r3, [r7, #22]
}
 800302a:	4618      	mov	r0, r3
 800302c:	3718      	adds	r7, #24
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	0000      	movs	r0, r0
 8003034:	0000      	movs	r0, r0
	...

08003038 <sha512Init>:
 * @brief Initialize SHA-512 message digest context
 * @param[in] context Pointer to the SHA-512 context to initialize
 **/

__weak_func void sha512Init(Sha512Context *context)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
   //Set initial hash value
   context->h[0] = 0x6A09E667F3BCC908;
 8003040:	6879      	ldr	r1, [r7, #4]
 8003042:	a321      	add	r3, pc, #132	; (adr r3, 80030c8 <sha512Init+0x90>)
 8003044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003048:	e9c1 2300 	strd	r2, r3, [r1]
   context->h[1] = 0xBB67AE8584CAA73B;
 800304c:	6879      	ldr	r1, [r7, #4]
 800304e:	a320      	add	r3, pc, #128	; (adr r3, 80030d0 <sha512Init+0x98>)
 8003050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003054:	e9c1 2302 	strd	r2, r3, [r1, #8]
   context->h[2] = 0x3C6EF372FE94F82B;
 8003058:	6879      	ldr	r1, [r7, #4]
 800305a:	a31f      	add	r3, pc, #124	; (adr r3, 80030d8 <sha512Init+0xa0>)
 800305c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003060:	e9c1 2304 	strd	r2, r3, [r1, #16]
   context->h[3] = 0xA54FF53A5F1D36F1;
 8003064:	6879      	ldr	r1, [r7, #4]
 8003066:	a31e      	add	r3, pc, #120	; (adr r3, 80030e0 <sha512Init+0xa8>)
 8003068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800306c:	e9c1 2306 	strd	r2, r3, [r1, #24]
   context->h[4] = 0x510E527FADE682D1;
 8003070:	6879      	ldr	r1, [r7, #4]
 8003072:	a31d      	add	r3, pc, #116	; (adr r3, 80030e8 <sha512Init+0xb0>)
 8003074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003078:	e9c1 2308 	strd	r2, r3, [r1, #32]
   context->h[5] = 0x9B05688C2B3E6C1F;
 800307c:	6879      	ldr	r1, [r7, #4]
 800307e:	a31c      	add	r3, pc, #112	; (adr r3, 80030f0 <sha512Init+0xb8>)
 8003080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003084:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
   context->h[6] = 0x1F83D9ABFB41BD6B;
 8003088:	6879      	ldr	r1, [r7, #4]
 800308a:	a31b      	add	r3, pc, #108	; (adr r3, 80030f8 <sha512Init+0xc0>)
 800308c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003090:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
   context->h[7] = 0x5BE0CD19137E2179;
 8003094:	6879      	ldr	r1, [r7, #4]
 8003096:	a31a      	add	r3, pc, #104	; (adr r3, 8003100 <sha512Init+0xc8>)
 8003098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800309c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

   //Number of bytes in the buffer
   context->size = 0;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
   //Total length of the message
   context->totalSize = 0;
 80030a8:	6879      	ldr	r1, [r7, #4]
 80030aa:	f04f 0200 	mov.w	r2, #0
 80030ae:	f04f 0300 	mov.w	r3, #0
 80030b2:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
}
 80030b6:	bf00      	nop
 80030b8:	370c      	adds	r7, #12
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop
 80030c4:	f3af 8000 	nop.w
 80030c8:	f3bcc908 	.word	0xf3bcc908
 80030cc:	6a09e667 	.word	0x6a09e667
 80030d0:	84caa73b 	.word	0x84caa73b
 80030d4:	bb67ae85 	.word	0xbb67ae85
 80030d8:	fe94f82b 	.word	0xfe94f82b
 80030dc:	3c6ef372 	.word	0x3c6ef372
 80030e0:	5f1d36f1 	.word	0x5f1d36f1
 80030e4:	a54ff53a 	.word	0xa54ff53a
 80030e8:	ade682d1 	.word	0xade682d1
 80030ec:	510e527f 	.word	0x510e527f
 80030f0:	2b3e6c1f 	.word	0x2b3e6c1f
 80030f4:	9b05688c 	.word	0x9b05688c
 80030f8:	fb41bd6b 	.word	0xfb41bd6b
 80030fc:	1f83d9ab 	.word	0x1f83d9ab
 8003100:	137e2179 	.word	0x137e2179
 8003104:	5be0cd19 	.word	0x5be0cd19

08003108 <sha512Update>:
 * @param[in] data Pointer to the buffer being hashed
 * @param[in] length Length of the buffer
 **/

__weak_func void sha512Update(Sha512Context *context, const void *data, size_t length)
{
 8003108:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800310c:	b086      	sub	sp, #24
 800310e:	af00      	add	r7, sp, #0
 8003110:	60f8      	str	r0, [r7, #12]
 8003112:	60b9      	str	r1, [r7, #8]
 8003114:	607a      	str	r2, [r7, #4]
   size_t n;

   //Process the incoming data
   while(length > 0)
 8003116:	e03f      	b.n	8003198 <sha512Update+0x90>
   {
      //The buffer can hold at most 128 bytes
      n = MIN(length, 128 - context->size);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800311e:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	4293      	cmp	r3, r2
 8003126:	bf28      	it	cs
 8003128:	4613      	movcs	r3, r2
 800312a:	617b      	str	r3, [r7, #20]

      //Copy the data to the buffer
      osMemcpy(context->buffer + context->size, data, n);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003138:	4413      	add	r3, r2
 800313a:	697a      	ldr	r2, [r7, #20]
 800313c:	68b9      	ldr	r1, [r7, #8]
 800313e:	4618      	mov	r0, r3
 8003140:	f003 fa00 	bl	8006544 <memcpy>

      //Update the SHA-512 context
      context->size += n;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	441a      	add	r2, r3
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
      context->totalSize += n;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 800315a:	6979      	ldr	r1, [r7, #20]
 800315c:	2000      	movs	r0, #0
 800315e:	460c      	mov	r4, r1
 8003160:	4605      	mov	r5, r0
 8003162:	eb12 0804 	adds.w	r8, r2, r4
 8003166:	eb43 0905 	adc.w	r9, r3, r5
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	e9c3 8932 	strd	r8, r9, [r3, #200]	; 0xc8
      //Advance the data pointer
      data = (uint8_t *) data + n;
 8003170:	68ba      	ldr	r2, [r7, #8]
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	4413      	add	r3, r2
 8003176:	60bb      	str	r3, [r7, #8]
      //Remaining bytes to process
      length -= n;
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	607b      	str	r3, [r7, #4]

      //Process message in 16-word blocks
      if(context->size == 128)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003186:	2b80      	cmp	r3, #128	; 0x80
 8003188:	d106      	bne.n	8003198 <sha512Update+0x90>
      {
         //Transform the 16-word block
         sha512ProcessBlock(context);
 800318a:	68f8      	ldr	r0, [r7, #12]
 800318c:	f000 f874 	bl	8003278 <sha512ProcessBlock>
         //Empty the buffer
         context->size = 0;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
   while(length > 0)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1bc      	bne.n	8003118 <sha512Update+0x10>
      }
   }
}
 800319e:	bf00      	nop
 80031a0:	bf00      	nop
 80031a2:	3718      	adds	r7, #24
 80031a4:	46bd      	mov	sp, r7
 80031a6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

080031ac <sha512Final>:
 * @param[in] context Pointer to the SHA-512 context
 * @param[out] digest Calculated digest (optional parameter)
 **/

__weak_func void sha512Final(Sha512Context *context, uint8_t *digest)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b086      	sub	sp, #24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
   uint_t i;
   size_t paddingSize;
   uint64_t totalSize;

   //Length of the original message (before padding)
   totalSize = context->totalSize * 8;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	; 0xc8
 80031bc:	f04f 0200 	mov.w	r2, #0
 80031c0:	f04f 0300 	mov.w	r3, #0
 80031c4:	00cb      	lsls	r3, r1, #3
 80031c6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80031ca:	00c2      	lsls	r2, r0, #3
 80031cc:	e9c7 2302 	strd	r2, r3, [r7, #8]

   //Pad the message so that its length is congruent to 112 modulo 128
   if(context->size < 112)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80031d6:	2b6f      	cmp	r3, #111	; 0x6f
 80031d8:	d806      	bhi.n	80031e8 <sha512Final+0x3c>
   {
      paddingSize = 112 - context->size;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80031e0:	f1c3 0370 	rsb	r3, r3, #112	; 0x70
 80031e4:	613b      	str	r3, [r7, #16]
 80031e6:	e005      	b.n	80031f4 <sha512Final+0x48>
   }
   else
   {
      paddingSize = 128 + 112 - context->size;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80031ee:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 80031f2:	613b      	str	r3, [r7, #16]
   }

   //Append padding
   sha512Update(context, padding, paddingSize);
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	491f      	ldr	r1, [pc, #124]	; (8003274 <sha512Final+0xc8>)
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f7ff ff85 	bl	8003108 <sha512Update>

   //Append the length of the original message
   context->w[14] = 0;
 80031fe:	6879      	ldr	r1, [r7, #4]
 8003200:	f04f 0200 	mov.w	r2, #0
 8003204:	f04f 0300 	mov.w	r3, #0
 8003208:	e9c1 232c 	strd	r2, r3, [r1, #176]	; 0xb0
   context->w[15] = htobe64(totalSize);
 800320c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003210:	f000 ffef 	bl	80041f2 <swapInt64>
 8003214:	4602      	mov	r2, r0
 8003216:	460b      	mov	r3, r1
 8003218:	6879      	ldr	r1, [r7, #4]
 800321a:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8

   //Calculate the message digest
   sha512ProcessBlock(context);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 f82a 	bl	8003278 <sha512ProcessBlock>

   //Convert from host byte order to big-endian byte order
   for(i = 0; i < 8; i++)
 8003224:	2300      	movs	r3, #0
 8003226:	617b      	str	r3, [r7, #20]
 8003228:	e014      	b.n	8003254 <sha512Final+0xa8>
   {
      context->h[i] = htobe64(context->h[i]);
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	00db      	lsls	r3, r3, #3
 8003230:	4413      	add	r3, r2
 8003232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003236:	4610      	mov	r0, r2
 8003238:	4619      	mov	r1, r3
 800323a:	f000 ffda 	bl	80041f2 <swapInt64>
 800323e:	4602      	mov	r2, r0
 8003240:	460b      	mov	r3, r1
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	6979      	ldr	r1, [r7, #20]
 8003246:	00c9      	lsls	r1, r1, #3
 8003248:	4401      	add	r1, r0
 800324a:	e9c1 2300 	strd	r2, r3, [r1]
   for(i = 0; i < 8; i++)
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	3301      	adds	r3, #1
 8003252:	617b      	str	r3, [r7, #20]
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	2b07      	cmp	r3, #7
 8003258:	d9e7      	bls.n	800322a <sha512Final+0x7e>
   }

   //Copy the resulting digest
   if(digest != NULL)
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d005      	beq.n	800326c <sha512Final+0xc0>
   {
      osMemcpy(digest, context->digest, SHA512_DIGEST_SIZE);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2240      	movs	r2, #64	; 0x40
 8003264:	4619      	mov	r1, r3
 8003266:	6838      	ldr	r0, [r7, #0]
 8003268:	f003 f96c 	bl	8006544 <memcpy>
   }
}
 800326c:	bf00      	nop
 800326e:	3718      	adds	r7, #24
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	08006a7c 	.word	0x08006a7c

08003278 <sha512ProcessBlock>:
 * @brief Process message in 16-word blocks
 * @param[in] context Pointer to the SHA-512 context
 **/

__weak_func void sha512ProcessBlock(Sha512Context *context)
{
 8003278:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800327c:	b0ee      	sub	sp, #440	; 0x1b8
 800327e:	af00      	add	r7, sp, #0
 8003280:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154
   uint_t t;
   uint64_t temp1;
   uint64_t temp2;

   //Initialize the 8 working registers
   uint64_t a = context->h[0];
 8003284:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800328c:	e9c7 236a 	strd	r2, r3, [r7, #424]	; 0x1a8
   uint64_t b = context->h[1];
 8003290:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003294:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003298:	e9c7 2368 	strd	r2, r3, [r7, #416]	; 0x1a0
   uint64_t c = context->h[2];
 800329c:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80032a0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80032a4:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
   uint64_t d = context->h[3];
 80032a8:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80032ac:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80032b0:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
   uint64_t e = context->h[4];
 80032b4:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80032b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80032bc:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
   uint64_t f = context->h[5];
 80032c0:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80032c4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80032c8:	e9c7 2360 	strd	r2, r3, [r7, #384]	; 0x180
   uint64_t g = context->h[6];
 80032cc:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80032d0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80032d4:	e9c7 235e 	strd	r2, r3, [r7, #376]	; 0x178
   uint64_t h = context->h[7];
 80032d8:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80032dc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80032e0:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170

   //Process message in 16-word blocks
   uint64_t *w = context->w;
 80032e4:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80032e8:	3340      	adds	r3, #64	; 0x40
 80032ea:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c

   //Convert from big-endian byte order to host byte order
   for(t = 0; t < 16; t++)
 80032ee:	2300      	movs	r3, #0
 80032f0:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 80032f4:	e018      	b.n	8003328 <sha512ProcessBlock+0xb0>
   {
      w[t] = betoh64(w[t]);
 80032f6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80032fa:	00da      	lsls	r2, r3, #3
 80032fc:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003300:	4413      	add	r3, r2
 8003302:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003306:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800330a:	00da      	lsls	r2, r3, #3
 800330c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003310:	189c      	adds	r4, r3, r2
 8003312:	f000 ff6e 	bl	80041f2 <swapInt64>
 8003316:	4602      	mov	r2, r0
 8003318:	460b      	mov	r3, r1
 800331a:	e9c4 2300 	strd	r2, r3, [r4]
   for(t = 0; t < 16; t++)
 800331e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003322:	3301      	adds	r3, #1
 8003324:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8003328:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800332c:	2b0f      	cmp	r3, #15
 800332e:	d9e2      	bls.n	80032f6 <sha512ProcessBlock+0x7e>
   }

   //SHA-512 hash computation (alternate method)
   for(t = 0; t < 80; t++)
 8003330:	2300      	movs	r3, #0
 8003332:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8003336:	e26c      	b.n	8003812 <sha512ProcessBlock+0x59a>
   {
      //Prepare the message schedule
      if(t >= 16)
 8003338:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800333c:	2b0f      	cmp	r3, #15
 800333e:	f240 80e4 	bls.w	800350a <sha512ProcessBlock+0x292>
      {
         W(t) += SIGMA4(W(t + 14)) + W(t + 9) + SIGMA3(W(t + 1));
 8003342:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003346:	f003 030f 	and.w	r3, r3, #15
 800334a:	00da      	lsls	r2, r3, #3
 800334c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003350:	4413      	add	r3, r2
 8003352:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003356:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800335a:	330e      	adds	r3, #14
 800335c:	f003 030f 	and.w	r3, r3, #15
 8003360:	00da      	lsls	r2, r3, #3
 8003362:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003366:	4413      	add	r3, r2
 8003368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800336c:	0358      	lsls	r0, r3, #13
 800336e:	0cd1      	lsrs	r1, r2, #19
 8003370:	4301      	orrs	r1, r0
 8003372:	f8c7 1148 	str.w	r1, [r7, #328]	; 0x148
 8003376:	0351      	lsls	r1, r2, #13
 8003378:	0cdb      	lsrs	r3, r3, #19
 800337a:	430b      	orrs	r3, r1
 800337c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003380:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003384:	330e      	adds	r3, #14
 8003386:	f003 030f 	and.w	r3, r3, #15
 800338a:	00da      	lsls	r2, r3, #3
 800338c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003390:	4413      	add	r3, r2
 8003392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003396:	0f50      	lsrs	r0, r2, #29
 8003398:	00d9      	lsls	r1, r3, #3
 800339a:	4301      	orrs	r1, r0
 800339c:	f8c7 1124 	str.w	r1, [r7, #292]	; 0x124
 80033a0:	0f59      	lsrs	r1, r3, #29
 80033a2:	00d3      	lsls	r3, r2, #3
 80033a4:	430b      	orrs	r3, r1
 80033a6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80033aa:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80033ae:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 80033b2:	4602      	mov	r2, r0
 80033b4:	4053      	eors	r3, r2
 80033b6:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80033ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80033be:	460a      	mov	r2, r1
 80033c0:	4053      	eors	r3, r2
 80033c2:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80033c6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80033ca:	330e      	adds	r3, #14
 80033cc:	f003 030f 	and.w	r3, r3, #15
 80033d0:	00da      	lsls	r2, r3, #3
 80033d2:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80033d6:	4413      	add	r3, r2
 80033d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033dc:	f04f 0000 	mov.w	r0, #0
 80033e0:	f04f 0100 	mov.w	r1, #0
 80033e4:	0990      	lsrs	r0, r2, #6
 80033e6:	ea40 6083 	orr.w	r0, r0, r3, lsl #26
 80033ea:	0999      	lsrs	r1, r3, #6
 80033ec:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80033f0:	4043      	eors	r3, r0
 80033f2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80033f6:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80033fa:	404b      	eors	r3, r1
 80033fc:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8003400:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003404:	3309      	adds	r3, #9
 8003406:	f003 030f 	and.w	r3, r3, #15
 800340a:	00da      	lsls	r2, r3, #3
 800340c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003410:	4413      	add	r3, r2
 8003412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003416:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 800341a:	1889      	adds	r1, r1, r2
 800341c:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 8003420:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003424:	eb41 0303 	adc.w	r3, r1, r3
 8003428:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800342c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003430:	3301      	adds	r3, #1
 8003432:	f003 030f 	and.w	r3, r3, #15
 8003436:	00da      	lsls	r2, r3, #3
 8003438:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800343c:	4413      	add	r3, r2
 800343e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003442:	07d8      	lsls	r0, r3, #31
 8003444:	0851      	lsrs	r1, r2, #1
 8003446:	4301      	orrs	r1, r0
 8003448:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 800344c:	07d1      	lsls	r1, r2, #31
 800344e:	085b      	lsrs	r3, r3, #1
 8003450:	430b      	orrs	r3, r1
 8003452:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8003456:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800345a:	3301      	adds	r3, #1
 800345c:	f003 030f 	and.w	r3, r3, #15
 8003460:	00da      	lsls	r2, r3, #3
 8003462:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003466:	4413      	add	r3, r2
 8003468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800346c:	0618      	lsls	r0, r3, #24
 800346e:	0a11      	lsrs	r1, r2, #8
 8003470:	4301      	orrs	r1, r0
 8003472:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8003476:	0611      	lsls	r1, r2, #24
 8003478:	0a1b      	lsrs	r3, r3, #8
 800347a:	430b      	orrs	r3, r1
 800347c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8003480:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003484:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8003488:	4602      	mov	r2, r0
 800348a:	4053      	eors	r3, r2
 800348c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003490:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003494:	460a      	mov	r2, r1
 8003496:	4053      	eors	r3, r2
 8003498:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800349c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80034a0:	3301      	adds	r3, #1
 80034a2:	f003 030f 	and.w	r3, r3, #15
 80034a6:	00da      	lsls	r2, r3, #3
 80034a8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80034ac:	4413      	add	r3, r2
 80034ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b2:	f04f 0000 	mov.w	r0, #0
 80034b6:	f04f 0100 	mov.w	r1, #0
 80034ba:	09d0      	lsrs	r0, r2, #7
 80034bc:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 80034c0:	09d9      	lsrs	r1, r3, #7
 80034c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80034c6:	ea83 0a00 	eor.w	sl, r3, r0
 80034ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80034ce:	ea83 0b01 	eor.w	fp, r3, r1
 80034d2:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	; 0x118
 80034d6:	460b      	mov	r3, r1
 80034d8:	eb13 080a 	adds.w	r8, r3, sl
 80034dc:	4613      	mov	r3, r2
 80034de:	eb43 090b 	adc.w	r9, r3, fp
 80034e2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80034e6:	f003 030f 	and.w	r3, r3, #15
 80034ea:	00da      	lsls	r2, r3, #3
 80034ec:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80034f0:	4413      	add	r3, r2
 80034f2:	eb14 0208 	adds.w	r2, r4, r8
 80034f6:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 80034fa:	eb45 0209 	adc.w	r2, r5, r9
 80034fe:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8003502:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8003506:	e9c3 1200 	strd	r1, r2, [r3]
      }

      //Calculate T1 and T2
      temp1 = h + SIGMA2(e) + CH(e, f, g) + k[t] + W(t);
 800350a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800350e:	049a      	lsls	r2, r3, #18
 8003510:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003514:	0b9b      	lsrs	r3, r3, #14
 8003516:	4313      	orrs	r3, r2
 8003518:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800351c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003520:	049a      	lsls	r2, r3, #18
 8003522:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003526:	0b9b      	lsrs	r3, r3, #14
 8003528:	4313      	orrs	r3, r2
 800352a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800352e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003532:	039a      	lsls	r2, r3, #14
 8003534:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003538:	0c9b      	lsrs	r3, r3, #18
 800353a:	4313      	orrs	r3, r2
 800353c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003540:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003544:	039a      	lsls	r2, r3, #14
 8003546:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800354a:	0c9b      	lsrs	r3, r3, #18
 800354c:	4313      	orrs	r3, r2
 800354e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003552:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8003556:	4623      	mov	r3, r4
 8003558:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800355c:	4602      	mov	r2, r0
 800355e:	4053      	eors	r3, r2
 8003560:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003564:	462b      	mov	r3, r5
 8003566:	460a      	mov	r2, r1
 8003568:	4053      	eors	r3, r2
 800356a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800356e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003572:	0a5a      	lsrs	r2, r3, #9
 8003574:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003578:	05db      	lsls	r3, r3, #23
 800357a:	4313      	orrs	r3, r2
 800357c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003580:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003584:	0a5a      	lsrs	r2, r3, #9
 8003586:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800358a:	05db      	lsls	r3, r3, #23
 800358c:	4313      	orrs	r3, r2
 800358e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003592:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8003596:	4623      	mov	r3, r4
 8003598:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 800359c:	4602      	mov	r2, r0
 800359e:	4053      	eors	r3, r2
 80035a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80035a4:	462b      	mov	r3, r5
 80035a6:	460a      	mov	r2, r1
 80035a8:	4053      	eors	r3, r2
 80035aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80035ae:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 80035b2:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 80035b6:	4621      	mov	r1, r4
 80035b8:	1889      	adds	r1, r1, r2
 80035ba:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 80035be:	4629      	mov	r1, r5
 80035c0:	eb41 0303 	adc.w	r3, r1, r3
 80035c4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80035c8:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80035cc:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 80035d0:	ea00 0402 	and.w	r4, r0, r2
 80035d4:	f8c7 40d0 	str.w	r4, [r7, #208]	; 0xd0
 80035d8:	400b      	ands	r3, r1
 80035da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80035de:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 80035e2:	43d1      	mvns	r1, r2
 80035e4:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 80035e8:	43db      	mvns	r3, r3
 80035ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80035ee:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 80035f2:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 80035f6:	4621      	mov	r1, r4
 80035f8:	4011      	ands	r1, r2
 80035fa:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80035fe:	4629      	mov	r1, r5
 8003600:	400b      	ands	r3, r1
 8003602:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003606:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 800360a:	4623      	mov	r3, r4
 800360c:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8003610:	4602      	mov	r2, r0
 8003612:	4313      	orrs	r3, r2
 8003614:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003618:	462b      	mov	r3, r5
 800361a:	460a      	mov	r2, r1
 800361c:	4313      	orrs	r3, r2
 800361e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003622:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8003626:	4623      	mov	r3, r4
 8003628:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800362c:	4602      	mov	r2, r0
 800362e:	189b      	adds	r3, r3, r2
 8003630:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003634:	462b      	mov	r3, r5
 8003636:	460a      	mov	r2, r1
 8003638:	4153      	adcs	r3, r2
 800363a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800363e:	4abe      	ldr	r2, [pc, #760]	; (8003938 <sha512ProcessBlock+0x6c0>)
 8003640:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003644:	00db      	lsls	r3, r3, #3
 8003646:	4413      	add	r3, r2
 8003648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800364c:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8003650:	4621      	mov	r1, r4
 8003652:	1889      	adds	r1, r1, r2
 8003654:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 8003658:	4629      	mov	r1, r5
 800365a:	eb41 0303 	adc.w	r3, r1, r3
 800365e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003662:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003666:	f003 030f 	and.w	r3, r3, #15
 800366a:	00da      	lsls	r2, r3, #3
 800366c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003670:	4413      	add	r3, r2
 8003672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003676:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 800367a:	4621      	mov	r1, r4
 800367c:	1889      	adds	r1, r1, r2
 800367e:	61b9      	str	r1, [r7, #24]
 8003680:	4629      	mov	r1, r5
 8003682:	eb41 0303 	adc.w	r3, r1, r3
 8003686:	61fb      	str	r3, [r7, #28]
 8003688:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800368c:	e9c7 3458 	strd	r3, r4, [r7, #352]	; 0x160
      temp2 = SIGMA1(a) + MAJ(a, b, c);
 8003690:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003694:	011a      	lsls	r2, r3, #4
 8003696:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800369a:	0f1b      	lsrs	r3, r3, #28
 800369c:	4313      	orrs	r3, r2
 800369e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80036a2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80036a6:	011a      	lsls	r2, r3, #4
 80036a8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80036ac:	0f1b      	lsrs	r3, r3, #28
 80036ae:	4313      	orrs	r3, r2
 80036b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80036b4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80036b8:	089a      	lsrs	r2, r3, #2
 80036ba:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80036be:	079b      	lsls	r3, r3, #30
 80036c0:	4313      	orrs	r3, r2
 80036c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80036c6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80036ca:	089a      	lsrs	r2, r3, #2
 80036cc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80036d0:	079b      	lsls	r3, r3, #30
 80036d2:	4313      	orrs	r3, r2
 80036d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80036d8:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 80036dc:	4623      	mov	r3, r4
 80036de:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80036e2:	4602      	mov	r2, r0
 80036e4:	4053      	eors	r3, r2
 80036e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80036ea:	462b      	mov	r3, r5
 80036ec:	460a      	mov	r2, r1
 80036ee:	4053      	eors	r3, r2
 80036f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80036f4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80036f8:	09da      	lsrs	r2, r3, #7
 80036fa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80036fe:	065b      	lsls	r3, r3, #25
 8003700:	4313      	orrs	r3, r2
 8003702:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003706:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800370a:	09da      	lsrs	r2, r3, #7
 800370c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003710:	065b      	lsls	r3, r3, #25
 8003712:	4313      	orrs	r3, r2
 8003714:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003718:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800371c:	4623      	mov	r3, r4
 800371e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8003722:	4602      	mov	r2, r0
 8003724:	4053      	eors	r3, r2
 8003726:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800372a:	462b      	mov	r3, r5
 800372c:	460a      	mov	r2, r1
 800372e:	4053      	eors	r3, r2
 8003730:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003734:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 8003738:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 800373c:	ea40 0402 	orr.w	r4, r0, r2
 8003740:	67bc      	str	r4, [r7, #120]	; 0x78
 8003742:	430b      	orrs	r3, r1
 8003744:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003746:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	; 0x1a8
 800374a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800374e:	4621      	mov	r1, r4
 8003750:	4011      	ands	r1, r2
 8003752:	6739      	str	r1, [r7, #112]	; 0x70
 8003754:	4629      	mov	r1, r5
 8003756:	400b      	ands	r3, r1
 8003758:	677b      	str	r3, [r7, #116]	; 0x74
 800375a:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 800375e:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 8003762:	ea00 0402 	and.w	r4, r0, r2
 8003766:	66bc      	str	r4, [r7, #104]	; 0x68
 8003768:	400b      	ands	r3, r1
 800376a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800376c:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8003770:	4623      	mov	r3, r4
 8003772:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003776:	4602      	mov	r2, r0
 8003778:	4313      	orrs	r3, r2
 800377a:	663b      	str	r3, [r7, #96]	; 0x60
 800377c:	462b      	mov	r3, r5
 800377e:	460a      	mov	r2, r1
 8003780:	4313      	orrs	r3, r2
 8003782:	667b      	str	r3, [r7, #100]	; 0x64
 8003784:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8003788:	4623      	mov	r3, r4
 800378a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800378e:	4602      	mov	r2, r0
 8003790:	189b      	adds	r3, r3, r2
 8003792:	613b      	str	r3, [r7, #16]
 8003794:	462b      	mov	r3, r5
 8003796:	460a      	mov	r2, r1
 8003798:	4153      	adcs	r3, r2
 800379a:	617b      	str	r3, [r7, #20]
 800379c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80037a0:	e9c7 3456 	strd	r3, r4, [r7, #344]	; 0x158

      //Update the working registers
      h = g;
 80037a4:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 80037a8:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
      g = f;
 80037ac:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 80037b0:	e9c7 235e 	strd	r2, r3, [r7, #376]	; 0x178
      f = e;
 80037b4:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 80037b8:	e9c7 2360 	strd	r2, r3, [r7, #384]	; 0x180
      e = d + temp1;
 80037bc:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80037c0:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 80037c4:	1884      	adds	r4, r0, r2
 80037c6:	60bc      	str	r4, [r7, #8]
 80037c8:	eb41 0303 	adc.w	r3, r1, r3
 80037cc:	60fb      	str	r3, [r7, #12]
 80037ce:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80037d2:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      d = c;
 80037d6:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 80037da:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      c = b;
 80037de:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 80037e2:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      b = a;
 80037e6:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	; 0x1a8
 80037ea:	e9c7 2368 	strd	r2, r3, [r7, #416]	; 0x1a0
      a = temp1 + temp2;
 80037ee:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 80037f2:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 80037f6:	1884      	adds	r4, r0, r2
 80037f8:	603c      	str	r4, [r7, #0]
 80037fa:	eb41 0303 	adc.w	r3, r1, r3
 80037fe:	607b      	str	r3, [r7, #4]
 8003800:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003804:	e9c7 346a 	strd	r3, r4, [r7, #424]	; 0x1a8
   for(t = 0; t < 80; t++)
 8003808:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800380c:	3301      	adds	r3, #1
 800380e:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8003812:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003816:	2b4f      	cmp	r3, #79	; 0x4f
 8003818:	f67f ad8e 	bls.w	8003338 <sha512ProcessBlock+0xc0>
   }

   //Update the hash value
   context->h[0] += a;
 800381c:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003820:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003824:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	; 0x1a8
 8003828:	1884      	adds	r4, r0, r2
 800382a:	65bc      	str	r4, [r7, #88]	; 0x58
 800382c:	eb41 0303 	adc.w	r3, r1, r3
 8003830:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003832:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003836:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800383a:	e9c3 1200 	strd	r1, r2, [r3]
   context->h[1] += b;
 800383e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003842:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003846:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 800384a:	1884      	adds	r4, r0, r2
 800384c:	653c      	str	r4, [r7, #80]	; 0x50
 800384e:	eb41 0303 	adc.w	r3, r1, r3
 8003852:	657b      	str	r3, [r7, #84]	; 0x54
 8003854:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003858:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800385c:	e9c3 1202 	strd	r1, r2, [r3, #8]
   context->h[2] += c;
 8003860:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003864:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8003868:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 800386c:	1884      	adds	r4, r0, r2
 800386e:	64bc      	str	r4, [r7, #72]	; 0x48
 8003870:	eb41 0303 	adc.w	r3, r1, r3
 8003874:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003876:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800387a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800387e:	e9c3 1204 	strd	r1, r2, [r3, #16]
   context->h[3] += d;
 8003882:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003886:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800388a:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 800388e:	1884      	adds	r4, r0, r2
 8003890:	643c      	str	r4, [r7, #64]	; 0x40
 8003892:	eb41 0303 	adc.w	r3, r1, r3
 8003896:	647b      	str	r3, [r7, #68]	; 0x44
 8003898:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800389c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80038a0:	e9c3 1206 	strd	r1, r2, [r3, #24]
   context->h[4] += e;
 80038a4:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80038a8:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80038ac:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 80038b0:	1884      	adds	r4, r0, r2
 80038b2:	63bc      	str	r4, [r7, #56]	; 0x38
 80038b4:	eb41 0303 	adc.w	r3, r1, r3
 80038b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038ba:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80038be:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80038c2:	e9c3 1208 	strd	r1, r2, [r3, #32]
   context->h[5] += f;
 80038c6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80038ca:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80038ce:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 80038d2:	1884      	adds	r4, r0, r2
 80038d4:	633c      	str	r4, [r7, #48]	; 0x30
 80038d6:	eb41 0303 	adc.w	r3, r1, r3
 80038da:	637b      	str	r3, [r7, #52]	; 0x34
 80038dc:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80038e0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80038e4:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
   context->h[6] += g;
 80038e8:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80038ec:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80038f0:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 80038f4:	1884      	adds	r4, r0, r2
 80038f6:	62bc      	str	r4, [r7, #40]	; 0x28
 80038f8:	eb41 0303 	adc.w	r3, r1, r3
 80038fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038fe:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003902:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003906:	e9c3 120c 	strd	r1, r2, [r3, #48]	; 0x30
   context->h[7] += h;
 800390a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800390e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8003912:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8003916:	1884      	adds	r4, r0, r2
 8003918:	623c      	str	r4, [r7, #32]
 800391a:	eb41 0303 	adc.w	r3, r1, r3
 800391e:	627b      	str	r3, [r7, #36]	; 0x24
 8003920:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003924:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003928:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
}
 800392c:	bf00      	nop
 800392e:	f507 77dc 	add.w	r7, r7, #440	; 0x1b8
 8003932:	46bd      	mov	sp, r7
 8003934:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003938:	08006b00 	.word	0x08006b00

0800393c <aesInit>:
 * @return Error code
 **/

__weak_func error_t aesInit(AesContext *context, const uint8_t *key,
   size_t keyLen)
{
 800393c:	b480      	push	{r7}
 800393e:	b089      	sub	sp, #36	; 0x24
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	607a      	str	r2, [r7, #4]
   uint_t i;
   uint32_t temp;
   size_t keyScheduleSize;

   //Check parameters
   if(context == NULL || key == NULL)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d002      	beq.n	8003954 <aesInit+0x18>
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d101      	bne.n	8003958 <aesInit+0x1c>
      return ERROR_INVALID_PARAMETER;
 8003954:	2302      	movs	r3, #2
 8003956:	e1a9      	b.n	8003cac <aesInit+0x370>

   //Check the length of the key
   if(keyLen == 16)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2b10      	cmp	r3, #16
 800395c:	d103      	bne.n	8003966 <aesInit+0x2a>
   {
      //10 rounds are required for 128-bit key
      context->nr = 10;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	220a      	movs	r2, #10
 8003962:	601a      	str	r2, [r3, #0]
 8003964:	e00f      	b.n	8003986 <aesInit+0x4a>
   }
   else if(keyLen == 24)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2b18      	cmp	r3, #24
 800396a:	d103      	bne.n	8003974 <aesInit+0x38>
   {
      //12 rounds are required for 192-bit key
      context->nr = 12;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	220c      	movs	r2, #12
 8003970:	601a      	str	r2, [r3, #0]
 8003972:	e008      	b.n	8003986 <aesInit+0x4a>
   }
   else if(keyLen == 32)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2b20      	cmp	r3, #32
 8003978:	d103      	bne.n	8003982 <aesInit+0x46>
   {
      //14 rounds are required for 256-bit key
      context->nr = 14;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	220e      	movs	r2, #14
 800397e:	601a      	str	r2, [r3, #0]
 8003980:	e001      	b.n	8003986 <aesInit+0x4a>
   }
   else
   {
      //Report an error
      return ERROR_INVALID_KEY_LENGTH;
 8003982:	23e8      	movs	r3, #232	; 0xe8
 8003984:	e192      	b.n	8003cac <aesInit+0x370>
   }

   //Determine the number of 32-bit words in the key
   keyLen /= 4;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	089b      	lsrs	r3, r3, #2
 800398a:	607b      	str	r3, [r7, #4]

   //Copy the original key
   for(i = 0; i < keyLen; i++)
 800398c:	2300      	movs	r3, #0
 800398e:	61fb      	str	r3, [r7, #28]
 8003990:	e026      	b.n	80039e0 <aesInit+0xa4>
   {
      context->ek[i] = LOAD32LE(key + (i * 4));
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	68ba      	ldr	r2, [r7, #8]
 8003998:	4413      	add	r3, r2
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	4619      	mov	r1, r3
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	68ba      	ldr	r2, [r7, #8]
 80039a4:	4413      	add	r3, r2
 80039a6:	3301      	adds	r3, #1
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	021b      	lsls	r3, r3, #8
 80039ac:	ea41 0203 	orr.w	r2, r1, r3
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	68b9      	ldr	r1, [r7, #8]
 80039b6:	440b      	add	r3, r1
 80039b8:	3302      	adds	r3, #2
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	041b      	lsls	r3, r3, #16
 80039be:	431a      	orrs	r2, r3
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	68b9      	ldr	r1, [r7, #8]
 80039c6:	440b      	add	r3, r1
 80039c8:	3303      	adds	r3, #3
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	061b      	lsls	r3, r3, #24
 80039ce:	431a      	orrs	r2, r3
 80039d0:	68f9      	ldr	r1, [r7, #12]
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	440b      	add	r3, r1
 80039d8:	605a      	str	r2, [r3, #4]
   for(i = 0; i < keyLen; i++)
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	3301      	adds	r3, #1
 80039de:	61fb      	str	r3, [r7, #28]
 80039e0:	69fa      	ldr	r2, [r7, #28]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d3d4      	bcc.n	8003992 <aesInit+0x56>
   }

   //The size of the key schedule depends on the number of rounds
   keyScheduleSize = 4 * (context->nr + 1);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	3301      	adds	r3, #1
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	61bb      	str	r3, [r7, #24]

   //Generate the key schedule (encryption)
   for(i = keyLen; i < keyScheduleSize; i++)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	61fb      	str	r3, [r7, #28]
 80039f6:	e0c4      	b.n	8003b82 <aesInit+0x246>
   {
      //Save previous word
      temp = context->ek[i - 1];
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	3b01      	subs	r3, #1
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	4413      	add	r3, r2
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	617b      	str	r3, [r7, #20]

      //Apply transformation
      if((i % keyLen) == 0)
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	fbb3 f2f2 	udiv	r2, r3, r2
 8003a0e:	6879      	ldr	r1, [r7, #4]
 8003a10:	fb01 f202 	mul.w	r2, r1, r2
 8003a14:	1a9b      	subs	r3, r3, r2
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d14e      	bne.n	8003ab8 <aesInit+0x17c>
      {
         context->ek[i] = sbox[(temp >> 8) & 0xFF];
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	0a1b      	lsrs	r3, r3, #8
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	4a66      	ldr	r2, [pc, #408]	; (8003bbc <aesInit+0x280>)
 8003a22:	5cd3      	ldrb	r3, [r2, r3]
 8003a24:	4619      	mov	r1, r3
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	4413      	add	r3, r2
 8003a2e:	6059      	str	r1, [r3, #4]
         context->ek[i] |= (sbox[(temp >> 16) & 0xFF] << 8);
 8003a30:	68fa      	ldr	r2, [r7, #12]
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	4413      	add	r3, r2
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	697a      	ldr	r2, [r7, #20]
 8003a3c:	0c12      	lsrs	r2, r2, #16
 8003a3e:	b2d2      	uxtb	r2, r2
 8003a40:	495e      	ldr	r1, [pc, #376]	; (8003bbc <aesInit+0x280>)
 8003a42:	5c8a      	ldrb	r2, [r1, r2]
 8003a44:	0212      	lsls	r2, r2, #8
 8003a46:	431a      	orrs	r2, r3
 8003a48:	68f9      	ldr	r1, [r7, #12]
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	440b      	add	r3, r1
 8003a50:	605a      	str	r2, [r3, #4]
         context->ek[i] |= (sbox[(temp >> 24) & 0xFF] << 16);
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	4413      	add	r3, r2
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	697a      	ldr	r2, [r7, #20]
 8003a5e:	0e12      	lsrs	r2, r2, #24
 8003a60:	4956      	ldr	r1, [pc, #344]	; (8003bbc <aesInit+0x280>)
 8003a62:	5c8a      	ldrb	r2, [r1, r2]
 8003a64:	0412      	lsls	r2, r2, #16
 8003a66:	431a      	orrs	r2, r3
 8003a68:	68f9      	ldr	r1, [r7, #12]
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	440b      	add	r3, r1
 8003a70:	605a      	str	r2, [r3, #4]
         context->ek[i] |= (sbox[temp & 0xFF] << 24);
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	4413      	add	r3, r2
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	697a      	ldr	r2, [r7, #20]
 8003a7e:	b2d2      	uxtb	r2, r2
 8003a80:	494e      	ldr	r1, [pc, #312]	; (8003bbc <aesInit+0x280>)
 8003a82:	5c8a      	ldrb	r2, [r1, r2]
 8003a84:	0612      	lsls	r2, r2, #24
 8003a86:	431a      	orrs	r2, r3
 8003a88:	68f9      	ldr	r1, [r7, #12]
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	440b      	add	r3, r1
 8003a90:	605a      	str	r2, [r3, #4]
         context->ek[i] ^= rcon[i / keyLen];
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	4413      	add	r3, r2
 8003a9a:	685a      	ldr	r2, [r3, #4]
 8003a9c:	69f9      	ldr	r1, [r7, #28]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	fbb1 f3f3 	udiv	r3, r1, r3
 8003aa4:	4946      	ldr	r1, [pc, #280]	; (8003bc0 <aesInit+0x284>)
 8003aa6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003aaa:	405a      	eors	r2, r3
 8003aac:	68f9      	ldr	r1, [r7, #12]
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	440b      	add	r3, r1
 8003ab4:	605a      	str	r2, [r3, #4]
 8003ab6:	e04f      	b.n	8003b58 <aesInit+0x21c>
      }
      else if(keyLen > 6 && (i % keyLen) == 4)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2b06      	cmp	r3, #6
 8003abc:	d946      	bls.n	8003b4c <aesInit+0x210>
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	fbb3 f2f2 	udiv	r2, r3, r2
 8003ac6:	6879      	ldr	r1, [r7, #4]
 8003ac8:	fb01 f202 	mul.w	r2, r1, r2
 8003acc:	1a9b      	subs	r3, r3, r2
 8003ace:	2b04      	cmp	r3, #4
 8003ad0:	d13c      	bne.n	8003b4c <aesInit+0x210>
      {
         context->ek[i] = sbox[temp & 0xFF];
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	4a39      	ldr	r2, [pc, #228]	; (8003bbc <aesInit+0x280>)
 8003ad8:	5cd3      	ldrb	r3, [r2, r3]
 8003ada:	4619      	mov	r1, r3
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	4413      	add	r3, r2
 8003ae4:	6059      	str	r1, [r3, #4]
         context->ek[i] |= (sbox[(temp >> 8) & 0xFF] << 8);
 8003ae6:	68fa      	ldr	r2, [r7, #12]
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	4413      	add	r3, r2
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	697a      	ldr	r2, [r7, #20]
 8003af2:	0a12      	lsrs	r2, r2, #8
 8003af4:	b2d2      	uxtb	r2, r2
 8003af6:	4931      	ldr	r1, [pc, #196]	; (8003bbc <aesInit+0x280>)
 8003af8:	5c8a      	ldrb	r2, [r1, r2]
 8003afa:	0212      	lsls	r2, r2, #8
 8003afc:	431a      	orrs	r2, r3
 8003afe:	68f9      	ldr	r1, [r7, #12]
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	440b      	add	r3, r1
 8003b06:	605a      	str	r2, [r3, #4]
         context->ek[i] |= (sbox[(temp >> 16) & 0xFF] << 16);
 8003b08:	68fa      	ldr	r2, [r7, #12]
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	4413      	add	r3, r2
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	697a      	ldr	r2, [r7, #20]
 8003b14:	0c12      	lsrs	r2, r2, #16
 8003b16:	b2d2      	uxtb	r2, r2
 8003b18:	4928      	ldr	r1, [pc, #160]	; (8003bbc <aesInit+0x280>)
 8003b1a:	5c8a      	ldrb	r2, [r1, r2]
 8003b1c:	0412      	lsls	r2, r2, #16
 8003b1e:	431a      	orrs	r2, r3
 8003b20:	68f9      	ldr	r1, [r7, #12]
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	440b      	add	r3, r1
 8003b28:	605a      	str	r2, [r3, #4]
         context->ek[i] |= (sbox[(temp >> 24) & 0xFF] << 24);
 8003b2a:	68fa      	ldr	r2, [r7, #12]
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	4413      	add	r3, r2
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	697a      	ldr	r2, [r7, #20]
 8003b36:	0e12      	lsrs	r2, r2, #24
 8003b38:	4920      	ldr	r1, [pc, #128]	; (8003bbc <aesInit+0x280>)
 8003b3a:	5c8a      	ldrb	r2, [r1, r2]
 8003b3c:	0612      	lsls	r2, r2, #24
 8003b3e:	431a      	orrs	r2, r3
 8003b40:	68f9      	ldr	r1, [r7, #12]
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	440b      	add	r3, r1
 8003b48:	605a      	str	r2, [r3, #4]
 8003b4a:	e005      	b.n	8003b58 <aesInit+0x21c>
      }
      else
      {
         context->ek[i] = temp;
 8003b4c:	68fa      	ldr	r2, [r7, #12]
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	4413      	add	r3, r2
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	605a      	str	r2, [r3, #4]
      }

      //Update the key schedule
      context->ek[i] ^= context->ek[i - keyLen];
 8003b58:	68fa      	ldr	r2, [r7, #12]
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	4413      	add	r3, r2
 8003b60:	685a      	ldr	r2, [r3, #4]
 8003b62:	69f9      	ldr	r1, [r7, #28]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	1acb      	subs	r3, r1, r3
 8003b68:	68f9      	ldr	r1, [r7, #12]
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	440b      	add	r3, r1
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	405a      	eors	r2, r3
 8003b72:	68f9      	ldr	r1, [r7, #12]
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	440b      	add	r3, r1
 8003b7a:	605a      	str	r2, [r3, #4]
   for(i = keyLen; i < keyScheduleSize; i++)
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	3301      	adds	r3, #1
 8003b80:	61fb      	str	r3, [r7, #28]
 8003b82:	69fa      	ldr	r2, [r7, #28]
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	429a      	cmp	r2, r3
 8003b88:	f4ff af36 	bcc.w	80039f8 <aesInit+0xbc>
   }

   //Generate the key schedule (decryption)
   for(i = 0; i < keyScheduleSize; i++)
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	61fb      	str	r3, [r7, #28]
 8003b90:	e086      	b.n	8003ca0 <aesInit+0x364>
   {
      //Apply the InvMixColumns transformation to all round keys but the first
      //and the last
      if(i < 4 || i >= (keyScheduleSize - 4))
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	2b03      	cmp	r3, #3
 8003b96:	d904      	bls.n	8003ba2 <aesInit+0x266>
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	3b04      	subs	r3, #4
 8003b9c:	69fa      	ldr	r2, [r7, #28]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d310      	bcc.n	8003bc4 <aesInit+0x288>
      {
         context->dk[i] = context->ek[i];
 8003ba2:	68fa      	ldr	r2, [r7, #12]
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	4413      	add	r3, r2
 8003baa:	685a      	ldr	r2, [r3, #4]
 8003bac:	68f9      	ldr	r1, [r7, #12]
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	333c      	adds	r3, #60	; 0x3c
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	440b      	add	r3, r1
 8003bb6:	605a      	str	r2, [r3, #4]
 8003bb8:	e06f      	b.n	8003c9a <aesInit+0x35e>
 8003bba:	bf00      	nop
 8003bbc:	08006dc0 	.word	0x08006dc0
 8003bc0:	080076c0 	.word	0x080076c0
      }
      else
      {
         context->dk[i] = td[sbox[context->ek[i] & 0xFF]];
 8003bc4:	68fa      	ldr	r2, [r7, #12]
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	4413      	add	r3, r2
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	4a39      	ldr	r2, [pc, #228]	; (8003cb8 <aesInit+0x37c>)
 8003bd2:	5cd3      	ldrb	r3, [r2, r3]
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	4b39      	ldr	r3, [pc, #228]	; (8003cbc <aesInit+0x380>)
 8003bd8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003bdc:	68f9      	ldr	r1, [r7, #12]
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	333c      	adds	r3, #60	; 0x3c
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	440b      	add	r3, r1
 8003be6:	605a      	str	r2, [r3, #4]
         temp = td[sbox[(context->ek[i] >> 8) & 0xFF]];
 8003be8:	68fa      	ldr	r2, [r7, #12]
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	4413      	add	r3, r2
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	0a1b      	lsrs	r3, r3, #8
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	4a30      	ldr	r2, [pc, #192]	; (8003cb8 <aesInit+0x37c>)
 8003bf8:	5cd3      	ldrb	r3, [r2, r3]
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	4b2f      	ldr	r3, [pc, #188]	; (8003cbc <aesInit+0x380>)
 8003bfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c02:	617b      	str	r3, [r7, #20]
         context->dk[i] ^= ROL32(temp, 8);
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	333c      	adds	r3, #60	; 0x3c
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	4413      	add	r3, r2
 8003c0e:	685a      	ldr	r2, [r3, #4]
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	ea4f 6333 	mov.w	r3, r3, ror #24
 8003c16:	405a      	eors	r2, r3
 8003c18:	68f9      	ldr	r1, [r7, #12]
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	333c      	adds	r3, #60	; 0x3c
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	440b      	add	r3, r1
 8003c22:	605a      	str	r2, [r3, #4]
         temp = td[sbox[(context->ek[i] >> 16) & 0xFF]];
 8003c24:	68fa      	ldr	r2, [r7, #12]
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	4413      	add	r3, r2
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	0c1b      	lsrs	r3, r3, #16
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	4a21      	ldr	r2, [pc, #132]	; (8003cb8 <aesInit+0x37c>)
 8003c34:	5cd3      	ldrb	r3, [r2, r3]
 8003c36:	461a      	mov	r2, r3
 8003c38:	4b20      	ldr	r3, [pc, #128]	; (8003cbc <aesInit+0x380>)
 8003c3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c3e:	617b      	str	r3, [r7, #20]
         context->dk[i] ^= ROL32(temp, 16);
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	333c      	adds	r3, #60	; 0x3c
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	4413      	add	r3, r2
 8003c4a:	685a      	ldr	r2, [r3, #4]
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	ea4f 4333 	mov.w	r3, r3, ror #16
 8003c52:	405a      	eors	r2, r3
 8003c54:	68f9      	ldr	r1, [r7, #12]
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	333c      	adds	r3, #60	; 0x3c
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	440b      	add	r3, r1
 8003c5e:	605a      	str	r2, [r3, #4]
         temp = td[sbox[(context->ek[i] >> 24) & 0xFF]];
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	4413      	add	r3, r2
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	0e1b      	lsrs	r3, r3, #24
 8003c6c:	4a12      	ldr	r2, [pc, #72]	; (8003cb8 <aesInit+0x37c>)
 8003c6e:	5cd3      	ldrb	r3, [r2, r3]
 8003c70:	461a      	mov	r2, r3
 8003c72:	4b12      	ldr	r3, [pc, #72]	; (8003cbc <aesInit+0x380>)
 8003c74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c78:	617b      	str	r3, [r7, #20]
         context->dk[i] ^= ROL32(temp, 24);
 8003c7a:	68fa      	ldr	r2, [r7, #12]
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	333c      	adds	r3, #60	; 0x3c
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	4413      	add	r3, r2
 8003c84:	685a      	ldr	r2, [r3, #4]
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	ea4f 2333 	mov.w	r3, r3, ror #8
 8003c8c:	405a      	eors	r2, r3
 8003c8e:	68f9      	ldr	r1, [r7, #12]
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	333c      	adds	r3, #60	; 0x3c
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	440b      	add	r3, r1
 8003c98:	605a      	str	r2, [r3, #4]
   for(i = 0; i < keyScheduleSize; i++)
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	61fb      	str	r3, [r7, #28]
 8003ca0:	69fa      	ldr	r2, [r7, #28]
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	f4ff af74 	bcc.w	8003b92 <aesInit+0x256>
      }
   }

   //No error to report
   return NO_ERROR;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3724      	adds	r7, #36	; 0x24
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr
 8003cb8:	08006dc0 	.word	0x08006dc0
 8003cbc:	080072c0 	.word	0x080072c0

08003cc0 <aesEncryptBlock>:
 * @param[out] output Ciphertext block resulting from encryption
 **/

__weak_func void aesEncryptBlock(AesContext *context, const uint8_t *input,
   uint8_t *output)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b08f      	sub	sp, #60	; 0x3c
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	607a      	str	r2, [r7, #4]
   uint32_t t2;
   uint32_t t3;
   uint32_t temp;

   //Copy the plaintext to the state array
   s0 = LOAD32LE(input + 0);
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	021b      	lsls	r3, r3, #8
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	3302      	adds	r3, #2
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	041b      	lsls	r3, r3, #16
 8003ce4:	431a      	orrs	r2, r3
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	3303      	adds	r3, #3
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	061b      	lsls	r3, r3, #24
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	633b      	str	r3, [r7, #48]	; 0x30
   s1 = LOAD32LE(input + 4);
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	3304      	adds	r3, #4
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	3304      	adds	r3, #4
 8003cfe:	3301      	adds	r3, #1
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	021b      	lsls	r3, r3, #8
 8003d04:	431a      	orrs	r2, r3
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	3304      	adds	r3, #4
 8003d0a:	3302      	adds	r3, #2
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	041b      	lsls	r3, r3, #16
 8003d10:	431a      	orrs	r2, r3
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	3304      	adds	r3, #4
 8003d16:	3303      	adds	r3, #3
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	061b      	lsls	r3, r3, #24
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
   s2 = LOAD32LE(input + 8);
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	3308      	adds	r3, #8
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	461a      	mov	r2, r3
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	3308      	adds	r3, #8
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	021b      	lsls	r3, r3, #8
 8003d32:	431a      	orrs	r2, r3
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	3308      	adds	r3, #8
 8003d38:	3302      	adds	r3, #2
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	041b      	lsls	r3, r3, #16
 8003d3e:	431a      	orrs	r2, r3
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	3308      	adds	r3, #8
 8003d44:	3303      	adds	r3, #3
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	061b      	lsls	r3, r3, #24
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	62bb      	str	r3, [r7, #40]	; 0x28
   s3 = LOAD32LE(input + 12);
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	330c      	adds	r3, #12
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	461a      	mov	r2, r3
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	330c      	adds	r3, #12
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	021b      	lsls	r3, r3, #8
 8003d60:	431a      	orrs	r2, r3
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	330c      	adds	r3, #12
 8003d66:	3302      	adds	r3, #2
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	041b      	lsls	r3, r3, #16
 8003d6c:	431a      	orrs	r2, r3
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	330c      	adds	r3, #12
 8003d72:	3303      	adds	r3, #3
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	061b      	lsls	r3, r3, #24
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	627b      	str	r3, [r7, #36]	; 0x24

   //Initial round key addition
   s0 ^= context->ek[0];
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d82:	4053      	eors	r3, r2
 8003d84:	633b      	str	r3, [r7, #48]	; 0x30
   s1 ^= context->ek[1];
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d8c:	4053      	eors	r3, r2
 8003d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
   s2 ^= context->ek[2];
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d96:	4053      	eors	r3, r2
 8003d98:	62bb      	str	r3, [r7, #40]	; 0x28
   s3 ^= context->ek[3];
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003da0:	4053      	eors	r3, r2
 8003da2:	627b      	str	r3, [r7, #36]	; 0x24

   //The number of rounds depends on the key length
   for(i = 1; i < context->nr; i++)
 8003da4:	2301      	movs	r3, #1
 8003da6:	637b      	str	r3, [r7, #52]	; 0x34
 8003da8:	e0d9      	b.n	8003f5e <aesEncryptBlock+0x29e>
   {
      //Apply round function
      t0 = te[s0 & 0xFF];
 8003daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	4aa2      	ldr	r2, [pc, #648]	; (8004038 <aesEncryptBlock+0x378>)
 8003db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003db4:	623b      	str	r3, [r7, #32]
      temp = te[(s1 >> 8) & 0xFF];
 8003db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003db8:	0a1b      	lsrs	r3, r3, #8
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	4a9e      	ldr	r2, [pc, #632]	; (8004038 <aesEncryptBlock+0x378>)
 8003dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dc2:	613b      	str	r3, [r7, #16]
      t0 ^= ROL32(temp, 8);
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	ea4f 6333 	mov.w	r3, r3, ror #24
 8003dca:	6a3a      	ldr	r2, [r7, #32]
 8003dcc:	4053      	eors	r3, r2
 8003dce:	623b      	str	r3, [r7, #32]
      temp = te[(s2 >> 16) & 0xFF];
 8003dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd2:	0c1b      	lsrs	r3, r3, #16
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	4a98      	ldr	r2, [pc, #608]	; (8004038 <aesEncryptBlock+0x378>)
 8003dd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ddc:	613b      	str	r3, [r7, #16]
      t0 ^= ROL32(temp, 16);
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	ea4f 4333 	mov.w	r3, r3, ror #16
 8003de4:	6a3a      	ldr	r2, [r7, #32]
 8003de6:	4053      	eors	r3, r2
 8003de8:	623b      	str	r3, [r7, #32]
      temp = te[(s3 >> 24) & 0xFF];
 8003dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dec:	0e1b      	lsrs	r3, r3, #24
 8003dee:	4a92      	ldr	r2, [pc, #584]	; (8004038 <aesEncryptBlock+0x378>)
 8003df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003df4:	613b      	str	r3, [r7, #16]
      t0 ^= ROL32(temp, 24);
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	ea4f 2333 	mov.w	r3, r3, ror #8
 8003dfc:	6a3a      	ldr	r2, [r7, #32]
 8003dfe:	4053      	eors	r3, r2
 8003e00:	623b      	str	r3, [r7, #32]

      t1 = te[s1 & 0xFF];
 8003e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	4a8c      	ldr	r2, [pc, #560]	; (8004038 <aesEncryptBlock+0x378>)
 8003e08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e0c:	61fb      	str	r3, [r7, #28]
      temp = te[(s2 >> 8) & 0xFF];
 8003e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e10:	0a1b      	lsrs	r3, r3, #8
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	4a88      	ldr	r2, [pc, #544]	; (8004038 <aesEncryptBlock+0x378>)
 8003e16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e1a:	613b      	str	r3, [r7, #16]
      t1 ^= ROL32(temp, 8);
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	ea4f 6333 	mov.w	r3, r3, ror #24
 8003e22:	69fa      	ldr	r2, [r7, #28]
 8003e24:	4053      	eors	r3, r2
 8003e26:	61fb      	str	r3, [r7, #28]
      temp = te[(s3 >> 16) & 0xFF];
 8003e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2a:	0c1b      	lsrs	r3, r3, #16
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	4a82      	ldr	r2, [pc, #520]	; (8004038 <aesEncryptBlock+0x378>)
 8003e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e34:	613b      	str	r3, [r7, #16]
      t1 ^= ROL32(temp, 16);
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	ea4f 4333 	mov.w	r3, r3, ror #16
 8003e3c:	69fa      	ldr	r2, [r7, #28]
 8003e3e:	4053      	eors	r3, r2
 8003e40:	61fb      	str	r3, [r7, #28]
      temp = te[(s0 >> 24) & 0xFF];
 8003e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e44:	0e1b      	lsrs	r3, r3, #24
 8003e46:	4a7c      	ldr	r2, [pc, #496]	; (8004038 <aesEncryptBlock+0x378>)
 8003e48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e4c:	613b      	str	r3, [r7, #16]
      t1 ^= ROL32(temp, 24);
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	ea4f 2333 	mov.w	r3, r3, ror #8
 8003e54:	69fa      	ldr	r2, [r7, #28]
 8003e56:	4053      	eors	r3, r2
 8003e58:	61fb      	str	r3, [r7, #28]

      t2 = te[s2 & 0xFF];
 8003e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	4a76      	ldr	r2, [pc, #472]	; (8004038 <aesEncryptBlock+0x378>)
 8003e60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e64:	61bb      	str	r3, [r7, #24]
      temp = te[(s3 >> 8) & 0xFF];
 8003e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e68:	0a1b      	lsrs	r3, r3, #8
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	4a72      	ldr	r2, [pc, #456]	; (8004038 <aesEncryptBlock+0x378>)
 8003e6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e72:	613b      	str	r3, [r7, #16]
      t2 ^= ROL32(temp, 8);
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	ea4f 6333 	mov.w	r3, r3, ror #24
 8003e7a:	69ba      	ldr	r2, [r7, #24]
 8003e7c:	4053      	eors	r3, r2
 8003e7e:	61bb      	str	r3, [r7, #24]
      temp = te[(s0 >> 16) & 0xFF];
 8003e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e82:	0c1b      	lsrs	r3, r3, #16
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	4a6c      	ldr	r2, [pc, #432]	; (8004038 <aesEncryptBlock+0x378>)
 8003e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e8c:	613b      	str	r3, [r7, #16]
      t2 ^= ROL32(temp, 16);
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	ea4f 4333 	mov.w	r3, r3, ror #16
 8003e94:	69ba      	ldr	r2, [r7, #24]
 8003e96:	4053      	eors	r3, r2
 8003e98:	61bb      	str	r3, [r7, #24]
      temp = te[(s1 >> 24) & 0xFF];
 8003e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e9c:	0e1b      	lsrs	r3, r3, #24
 8003e9e:	4a66      	ldr	r2, [pc, #408]	; (8004038 <aesEncryptBlock+0x378>)
 8003ea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ea4:	613b      	str	r3, [r7, #16]
      t2 ^= ROL32(temp, 24);
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	ea4f 2333 	mov.w	r3, r3, ror #8
 8003eac:	69ba      	ldr	r2, [r7, #24]
 8003eae:	4053      	eors	r3, r2
 8003eb0:	61bb      	str	r3, [r7, #24]

      t3 = te[s3 & 0xFF];
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	4a60      	ldr	r2, [pc, #384]	; (8004038 <aesEncryptBlock+0x378>)
 8003eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ebc:	617b      	str	r3, [r7, #20]
      temp = te[(s0 >> 8) & 0xFF];
 8003ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec0:	0a1b      	lsrs	r3, r3, #8
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	4a5c      	ldr	r2, [pc, #368]	; (8004038 <aesEncryptBlock+0x378>)
 8003ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003eca:	613b      	str	r3, [r7, #16]
      t3 ^= ROL32(temp, 8);
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	ea4f 6333 	mov.w	r3, r3, ror #24
 8003ed2:	697a      	ldr	r2, [r7, #20]
 8003ed4:	4053      	eors	r3, r2
 8003ed6:	617b      	str	r3, [r7, #20]
      temp = te[(s1 >> 16) & 0xFF];
 8003ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eda:	0c1b      	lsrs	r3, r3, #16
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	4a56      	ldr	r2, [pc, #344]	; (8004038 <aesEncryptBlock+0x378>)
 8003ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ee4:	613b      	str	r3, [r7, #16]
      t3 ^= ROL32(temp, 16);
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	ea4f 4333 	mov.w	r3, r3, ror #16
 8003eec:	697a      	ldr	r2, [r7, #20]
 8003eee:	4053      	eors	r3, r2
 8003ef0:	617b      	str	r3, [r7, #20]
      temp = te[(s2 >> 24) & 0xFF];
 8003ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef4:	0e1b      	lsrs	r3, r3, #24
 8003ef6:	4a50      	ldr	r2, [pc, #320]	; (8004038 <aesEncryptBlock+0x378>)
 8003ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003efc:	613b      	str	r3, [r7, #16]
      t3 ^= ROL32(temp, 24);
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	ea4f 2333 	mov.w	r3, r3, ror #8
 8003f04:	697a      	ldr	r2, [r7, #20]
 8003f06:	4053      	eors	r3, r2
 8003f08:	617b      	str	r3, [r7, #20]

      //Round key addition
      s0 = t0 ^ context->ek[i * 4];
 8003f0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	4413      	add	r3, r2
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	6a3a      	ldr	r2, [r7, #32]
 8003f18:	4053      	eors	r3, r2
 8003f1a:	633b      	str	r3, [r7, #48]	; 0x30
      s1 = t1 ^ context->ek[i * 4 + 1];
 8003f1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	3301      	adds	r3, #1
 8003f22:	68fa      	ldr	r2, [r7, #12]
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	4413      	add	r3, r2
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	69fa      	ldr	r2, [r7, #28]
 8003f2c:	4053      	eors	r3, r2
 8003f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
      s2 = t2 ^ context->ek[i * 4 + 2];
 8003f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	3302      	adds	r3, #2
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	4413      	add	r3, r2
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	69ba      	ldr	r2, [r7, #24]
 8003f40:	4053      	eors	r3, r2
 8003f42:	62bb      	str	r3, [r7, #40]	; 0x28
      s3 = t3 ^ context->ek[i * 4 + 3];
 8003f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	3303      	adds	r3, #3
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	4413      	add	r3, r2
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	697a      	ldr	r2, [r7, #20]
 8003f54:	4053      	eors	r3, r2
 8003f56:	627b      	str	r3, [r7, #36]	; 0x24
   for(i = 1; i < context->nr; i++)
 8003f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	637b      	str	r3, [r7, #52]	; 0x34
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f64:	429a      	cmp	r2, r3
 8003f66:	f4ff af20 	bcc.w	8003daa <aesEncryptBlock+0xea>
   }

   //The last round differs slightly from the first rounds
   t0 = sbox[s0 & 0xFF];
 8003f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	4a33      	ldr	r2, [pc, #204]	; (800403c <aesEncryptBlock+0x37c>)
 8003f70:	5cd3      	ldrb	r3, [r2, r3]
 8003f72:	623b      	str	r3, [r7, #32]
   t0 |= sbox[(s1 >> 8) & 0xFF] << 8;
 8003f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f76:	0a1b      	lsrs	r3, r3, #8
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	4a30      	ldr	r2, [pc, #192]	; (800403c <aesEncryptBlock+0x37c>)
 8003f7c:	5cd3      	ldrb	r3, [r2, r3]
 8003f7e:	021b      	lsls	r3, r3, #8
 8003f80:	461a      	mov	r2, r3
 8003f82:	6a3b      	ldr	r3, [r7, #32]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	623b      	str	r3, [r7, #32]
   t0 |= sbox[(s2 >> 16) & 0xFF] << 16;
 8003f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f8a:	0c1b      	lsrs	r3, r3, #16
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	4a2b      	ldr	r2, [pc, #172]	; (800403c <aesEncryptBlock+0x37c>)
 8003f90:	5cd3      	ldrb	r3, [r2, r3]
 8003f92:	041b      	lsls	r3, r3, #16
 8003f94:	461a      	mov	r2, r3
 8003f96:	6a3b      	ldr	r3, [r7, #32]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	623b      	str	r3, [r7, #32]
   t0 |= sbox[(s3 >> 24) & 0xFF] << 24;
 8003f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9e:	0e1b      	lsrs	r3, r3, #24
 8003fa0:	4a26      	ldr	r2, [pc, #152]	; (800403c <aesEncryptBlock+0x37c>)
 8003fa2:	5cd3      	ldrb	r3, [r2, r3]
 8003fa4:	061b      	lsls	r3, r3, #24
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	6a3b      	ldr	r3, [r7, #32]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	623b      	str	r3, [r7, #32]

   t1 = sbox[s1 & 0xFF];
 8003fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	4a22      	ldr	r2, [pc, #136]	; (800403c <aesEncryptBlock+0x37c>)
 8003fb4:	5cd3      	ldrb	r3, [r2, r3]
 8003fb6:	61fb      	str	r3, [r7, #28]
   t1 |= sbox[(s2 >> 8) & 0xFF] << 8;
 8003fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fba:	0a1b      	lsrs	r3, r3, #8
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	4a1f      	ldr	r2, [pc, #124]	; (800403c <aesEncryptBlock+0x37c>)
 8003fc0:	5cd3      	ldrb	r3, [r2, r3]
 8003fc2:	021b      	lsls	r3, r3, #8
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	61fb      	str	r3, [r7, #28]
   t1 |= sbox[(s3 >> 16) & 0xFF] << 16;
 8003fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fce:	0c1b      	lsrs	r3, r3, #16
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	4a1a      	ldr	r2, [pc, #104]	; (800403c <aesEncryptBlock+0x37c>)
 8003fd4:	5cd3      	ldrb	r3, [r2, r3]
 8003fd6:	041b      	lsls	r3, r3, #16
 8003fd8:	461a      	mov	r2, r3
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	61fb      	str	r3, [r7, #28]
   t1 |= sbox[(s0 >> 24) & 0xFF] << 24;
 8003fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe2:	0e1b      	lsrs	r3, r3, #24
 8003fe4:	4a15      	ldr	r2, [pc, #84]	; (800403c <aesEncryptBlock+0x37c>)
 8003fe6:	5cd3      	ldrb	r3, [r2, r3]
 8003fe8:	061b      	lsls	r3, r3, #24
 8003fea:	461a      	mov	r2, r3
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	61fb      	str	r3, [r7, #28]

   t2 = sbox[s2 & 0xFF];
 8003ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	4a11      	ldr	r2, [pc, #68]	; (800403c <aesEncryptBlock+0x37c>)
 8003ff8:	5cd3      	ldrb	r3, [r2, r3]
 8003ffa:	61bb      	str	r3, [r7, #24]
   t2 |= sbox[(s3 >> 8) & 0xFF] << 8;
 8003ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffe:	0a1b      	lsrs	r3, r3, #8
 8004000:	b2db      	uxtb	r3, r3
 8004002:	4a0e      	ldr	r2, [pc, #56]	; (800403c <aesEncryptBlock+0x37c>)
 8004004:	5cd3      	ldrb	r3, [r2, r3]
 8004006:	021b      	lsls	r3, r3, #8
 8004008:	461a      	mov	r2, r3
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	4313      	orrs	r3, r2
 800400e:	61bb      	str	r3, [r7, #24]
   t2 |= sbox[(s0 >> 16) & 0xFF] << 16;
 8004010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004012:	0c1b      	lsrs	r3, r3, #16
 8004014:	b2db      	uxtb	r3, r3
 8004016:	4a09      	ldr	r2, [pc, #36]	; (800403c <aesEncryptBlock+0x37c>)
 8004018:	5cd3      	ldrb	r3, [r2, r3]
 800401a:	041b      	lsls	r3, r3, #16
 800401c:	461a      	mov	r2, r3
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	4313      	orrs	r3, r2
 8004022:	61bb      	str	r3, [r7, #24]
   t2 |= sbox[(s1 >> 24) & 0xFF] << 24;
 8004024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004026:	0e1b      	lsrs	r3, r3, #24
 8004028:	4a04      	ldr	r2, [pc, #16]	; (800403c <aesEncryptBlock+0x37c>)
 800402a:	5cd3      	ldrb	r3, [r2, r3]
 800402c:	061b      	lsls	r3, r3, #24
 800402e:	461a      	mov	r2, r3
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	4313      	orrs	r3, r2
 8004034:	e004      	b.n	8004040 <aesEncryptBlock+0x380>
 8004036:	bf00      	nop
 8004038:	08006ec0 	.word	0x08006ec0
 800403c:	08006dc0 	.word	0x08006dc0
 8004040:	61bb      	str	r3, [r7, #24]

   t3 = sbox[s3 & 0xFF];
 8004042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004044:	b2db      	uxtb	r3, r3
 8004046:	4a56      	ldr	r2, [pc, #344]	; (80041a0 <aesEncryptBlock+0x4e0>)
 8004048:	5cd3      	ldrb	r3, [r2, r3]
 800404a:	617b      	str	r3, [r7, #20]
   t3 |= sbox[(s0 >> 8) & 0xFF] << 8;
 800404c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800404e:	0a1b      	lsrs	r3, r3, #8
 8004050:	b2db      	uxtb	r3, r3
 8004052:	4a53      	ldr	r2, [pc, #332]	; (80041a0 <aesEncryptBlock+0x4e0>)
 8004054:	5cd3      	ldrb	r3, [r2, r3]
 8004056:	021b      	lsls	r3, r3, #8
 8004058:	461a      	mov	r2, r3
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	4313      	orrs	r3, r2
 800405e:	617b      	str	r3, [r7, #20]
   t3 |= sbox[(s1 >> 16) & 0xFF] << 16;
 8004060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004062:	0c1b      	lsrs	r3, r3, #16
 8004064:	b2db      	uxtb	r3, r3
 8004066:	4a4e      	ldr	r2, [pc, #312]	; (80041a0 <aesEncryptBlock+0x4e0>)
 8004068:	5cd3      	ldrb	r3, [r2, r3]
 800406a:	041b      	lsls	r3, r3, #16
 800406c:	461a      	mov	r2, r3
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	4313      	orrs	r3, r2
 8004072:	617b      	str	r3, [r7, #20]
   t3 |= sbox[(s2 >> 24) & 0xFF] << 24;
 8004074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004076:	0e1b      	lsrs	r3, r3, #24
 8004078:	4a49      	ldr	r2, [pc, #292]	; (80041a0 <aesEncryptBlock+0x4e0>)
 800407a:	5cd3      	ldrb	r3, [r2, r3]
 800407c:	061b      	lsls	r3, r3, #24
 800407e:	461a      	mov	r2, r3
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	4313      	orrs	r3, r2
 8004084:	617b      	str	r3, [r7, #20]

   //Last round key addition
   s0 = t0 ^ context->ek[context->nr * 4];
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	68fa      	ldr	r2, [r7, #12]
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	4413      	add	r3, r2
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	6a3a      	ldr	r2, [r7, #32]
 8004096:	4053      	eors	r3, r2
 8004098:	633b      	str	r3, [r7, #48]	; 0x30
   s1 = t1 ^ context->ek[context->nr * 4 + 1];
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	3301      	adds	r3, #1
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	4413      	add	r3, r2
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	69fa      	ldr	r2, [r7, #28]
 80040ac:	4053      	eors	r3, r2
 80040ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   s2 = t2 ^ context->ek[context->nr * 4 + 2];
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	3302      	adds	r3, #2
 80040b8:	68fa      	ldr	r2, [r7, #12]
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	4413      	add	r3, r2
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	69ba      	ldr	r2, [r7, #24]
 80040c2:	4053      	eors	r3, r2
 80040c4:	62bb      	str	r3, [r7, #40]	; 0x28
   s3 = t3 ^ context->ek[context->nr * 4 + 3];
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	3303      	adds	r3, #3
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	4413      	add	r3, r2
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	697a      	ldr	r2, [r7, #20]
 80040d8:	4053      	eors	r3, r2
 80040da:	627b      	str	r3, [r7, #36]	; 0x24

   //The final state is then copied to the output
   STORE32LE(s0, output + 0);
 80040dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040de:	b2da      	uxtb	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	701a      	strb	r2, [r3, #0]
 80040e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e6:	0a1a      	lsrs	r2, r3, #8
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	3301      	adds	r3, #1
 80040ec:	b2d2      	uxtb	r2, r2
 80040ee:	701a      	strb	r2, [r3, #0]
 80040f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f2:	0c1a      	lsrs	r2, r3, #16
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	3302      	adds	r3, #2
 80040f8:	b2d2      	uxtb	r2, r2
 80040fa:	701a      	strb	r2, [r3, #0]
 80040fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040fe:	0e1a      	lsrs	r2, r3, #24
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	3303      	adds	r3, #3
 8004104:	b2d2      	uxtb	r2, r2
 8004106:	701a      	strb	r2, [r3, #0]
   STORE32LE(s1, output + 4);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	3304      	adds	r3, #4
 800410c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800410e:	b2d2      	uxtb	r2, r2
 8004110:	701a      	strb	r2, [r3, #0]
 8004112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004114:	0a1a      	lsrs	r2, r3, #8
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	3305      	adds	r3, #5
 800411a:	b2d2      	uxtb	r2, r2
 800411c:	701a      	strb	r2, [r3, #0]
 800411e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004120:	0c1a      	lsrs	r2, r3, #16
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	3306      	adds	r3, #6
 8004126:	b2d2      	uxtb	r2, r2
 8004128:	701a      	strb	r2, [r3, #0]
 800412a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800412c:	0e1a      	lsrs	r2, r3, #24
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	3307      	adds	r3, #7
 8004132:	b2d2      	uxtb	r2, r2
 8004134:	701a      	strb	r2, [r3, #0]
   STORE32LE(s2, output + 8);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	3308      	adds	r3, #8
 800413a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800413c:	b2d2      	uxtb	r2, r2
 800413e:	701a      	strb	r2, [r3, #0]
 8004140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004142:	0a1a      	lsrs	r2, r3, #8
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	3309      	adds	r3, #9
 8004148:	b2d2      	uxtb	r2, r2
 800414a:	701a      	strb	r2, [r3, #0]
 800414c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800414e:	0c1a      	lsrs	r2, r3, #16
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	330a      	adds	r3, #10
 8004154:	b2d2      	uxtb	r2, r2
 8004156:	701a      	strb	r2, [r3, #0]
 8004158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800415a:	0e1a      	lsrs	r2, r3, #24
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	330b      	adds	r3, #11
 8004160:	b2d2      	uxtb	r2, r2
 8004162:	701a      	strb	r2, [r3, #0]
   STORE32LE(s3, output + 12);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	330c      	adds	r3, #12
 8004168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800416a:	b2d2      	uxtb	r2, r2
 800416c:	701a      	strb	r2, [r3, #0]
 800416e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004170:	0a1a      	lsrs	r2, r3, #8
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	330d      	adds	r3, #13
 8004176:	b2d2      	uxtb	r2, r2
 8004178:	701a      	strb	r2, [r3, #0]
 800417a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417c:	0c1a      	lsrs	r2, r3, #16
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	330e      	adds	r3, #14
 8004182:	b2d2      	uxtb	r2, r2
 8004184:	701a      	strb	r2, [r3, #0]
 8004186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004188:	0e1a      	lsrs	r2, r3, #24
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	330f      	adds	r3, #15
 800418e:	b2d2      	uxtb	r2, r2
 8004190:	701a      	strb	r2, [r3, #0]
}
 8004192:	bf00      	nop
 8004194:	373c      	adds	r7, #60	; 0x3c
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	08006dc0 	.word	0x08006dc0

080041a4 <aesDeinit>:
 * @brief Release AES context
 * @param[in] context Pointer to the AES context
 **/

__weak_func void aesDeinit(AesContext *context)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
   //Clear AES context
   osMemset(context, 0, sizeof(AesContext));
 80041ac:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80041b0:	2100      	movs	r1, #0
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f002 f9d4 	bl	8006560 <memset>
}
 80041b8:	bf00      	nop
 80041ba:	3708      	adds	r7, #8
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}

080041c0 <swapInt32>:
 * @param[in] value 32-bit value
 * @return 32-bit value with byte order swapped
 **/

uint32_t swapInt32(uint32_t value)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
   return SWAPINT32(value);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	061a      	lsls	r2, r3, #24
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	021b      	lsls	r3, r3, #8
 80041d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80041d4:	431a      	orrs	r2, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	0a1b      	lsrs	r3, r3, #8
 80041da:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80041de:	431a      	orrs	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	0e1b      	lsrs	r3, r3, #24
 80041e4:	4313      	orrs	r3, r2
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	370c      	adds	r7, #12
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr

080041f2 <swapInt64>:
 * @param[in] value 64-bit value
 * @return 64-bit value with byte order swapped
 **/

uint64_t swapInt64(uint64_t value)
{
 80041f2:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80041f6:	b099      	sub	sp, #100	; 0x64
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
   return SWAPINT64(value);
 80041fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004202:	f04f 0800 	mov.w	r8, #0
 8004206:	f04f 0900 	mov.w	r9, #0
 800420a:	ea4f 6902 	mov.w	r9, r2, lsl #24
 800420e:	f04f 0800 	mov.w	r8, #0
 8004212:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004216:	f04f 0000 	mov.w	r0, #0
 800421a:	f04f 0100 	mov.w	r1, #0
 800421e:	0211      	lsls	r1, r2, #8
 8004220:	2000      	movs	r0, #0
 8004222:	2400      	movs	r4, #0
 8004224:	f401 057f 	and.w	r5, r1, #16711680	; 0xff0000
 8004228:	ea48 0304 	orr.w	r3, r8, r4
 800422c:	653b      	str	r3, [r7, #80]	; 0x50
 800422e:	ea49 0305 	orr.w	r3, r9, r5
 8004232:	657b      	str	r3, [r7, #84]	; 0x54
 8004234:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004238:	f04f 0000 	mov.w	r0, #0
 800423c:	f04f 0100 	mov.w	r1, #0
 8004240:	0619      	lsls	r1, r3, #24
 8004242:	ea41 2112 	orr.w	r1, r1, r2, lsr #8
 8004246:	0610      	lsls	r0, r2, #24
 8004248:	f04f 0a00 	mov.w	sl, #0
 800424c:	f401 4b7f 	and.w	fp, r1, #65280	; 0xff00
 8004250:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004254:	460b      	mov	r3, r1
 8004256:	ea43 030a 	orr.w	r3, r3, sl
 800425a:	64bb      	str	r3, [r7, #72]	; 0x48
 800425c:	4613      	mov	r3, r2
 800425e:	ea43 030b 	orr.w	r3, r3, fp
 8004262:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004264:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004268:	f04f 0000 	mov.w	r0, #0
 800426c:	f04f 0100 	mov.w	r1, #0
 8004270:	0219      	lsls	r1, r3, #8
 8004272:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8004276:	0210      	lsls	r0, r2, #8
 8004278:	2300      	movs	r3, #0
 800427a:	643b      	str	r3, [r7, #64]	; 0x40
 800427c:	f001 03ff 	and.w	r3, r1, #255	; 0xff
 8004280:	647b      	str	r3, [r7, #68]	; 0x44
 8004282:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8004286:	4623      	mov	r3, r4
 8004288:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800428c:	4602      	mov	r2, r0
 800428e:	4313      	orrs	r3, r2
 8004290:	63bb      	str	r3, [r7, #56]	; 0x38
 8004292:	462b      	mov	r3, r5
 8004294:	460a      	mov	r2, r1
 8004296:	4313      	orrs	r3, r2
 8004298:	63fb      	str	r3, [r7, #60]	; 0x3c
 800429a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800429e:	f04f 0000 	mov.w	r0, #0
 80042a2:	f04f 0100 	mov.w	r1, #0
 80042a6:	0a10      	lsrs	r0, r2, #8
 80042a8:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80042ac:	0a19      	lsrs	r1, r3, #8
 80042ae:	f000 437f 	and.w	r3, r0, #4278190080	; 0xff000000
 80042b2:	633b      	str	r3, [r7, #48]	; 0x30
 80042b4:	2300      	movs	r3, #0
 80042b6:	637b      	str	r3, [r7, #52]	; 0x34
 80042b8:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 80042bc:	4623      	mov	r3, r4
 80042be:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80042c2:	4602      	mov	r2, r0
 80042c4:	4313      	orrs	r3, r2
 80042c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80042c8:	462b      	mov	r3, r5
 80042ca:	460a      	mov	r2, r1
 80042cc:	4313      	orrs	r3, r2
 80042ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042d0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80042d4:	f04f 0000 	mov.w	r0, #0
 80042d8:	f04f 0100 	mov.w	r1, #0
 80042dc:	0e10      	lsrs	r0, r2, #24
 80042de:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80042e2:	0e19      	lsrs	r1, r3, #24
 80042e4:	f400 037f 	and.w	r3, r0, #16711680	; 0xff0000
 80042e8:	623b      	str	r3, [r7, #32]
 80042ea:	2300      	movs	r3, #0
 80042ec:	627b      	str	r3, [r7, #36]	; 0x24
 80042ee:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80042f2:	4623      	mov	r3, r4
 80042f4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80042f8:	4602      	mov	r2, r0
 80042fa:	4313      	orrs	r3, r2
 80042fc:	61bb      	str	r3, [r7, #24]
 80042fe:	462b      	mov	r3, r5
 8004300:	460a      	mov	r2, r1
 8004302:	4313      	orrs	r3, r2
 8004304:	61fb      	str	r3, [r7, #28]
 8004306:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800430a:	f04f 0200 	mov.w	r2, #0
 800430e:	f04f 0300 	mov.w	r3, #0
 8004312:	0a0a      	lsrs	r2, r1, #8
 8004314:	2300      	movs	r3, #0
 8004316:	f402 437f 	and.w	r3, r2, #65280	; 0xff00
 800431a:	613b      	str	r3, [r7, #16]
 800431c:	2300      	movs	r3, #0
 800431e:	617b      	str	r3, [r7, #20]
 8004320:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8004324:	4623      	mov	r3, r4
 8004326:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800432a:	4602      	mov	r2, r0
 800432c:	4313      	orrs	r3, r2
 800432e:	60bb      	str	r3, [r7, #8]
 8004330:	462b      	mov	r3, r5
 8004332:	460a      	mov	r2, r1
 8004334:	4313      	orrs	r3, r2
 8004336:	60fb      	str	r3, [r7, #12]
 8004338:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800433c:	f04f 0200 	mov.w	r2, #0
 8004340:	f04f 0300 	mov.w	r3, #0
 8004344:	0e0a      	lsrs	r2, r1, #24
 8004346:	2300      	movs	r3, #0
 8004348:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800434c:	4621      	mov	r1, r4
 800434e:	4311      	orrs	r1, r2
 8004350:	6039      	str	r1, [r7, #0]
 8004352:	4629      	mov	r1, r5
 8004354:	4319      	orrs	r1, r3
 8004356:	6079      	str	r1, [r7, #4]
 8004358:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800435c:	4610      	mov	r0, r2
 800435e:	4619      	mov	r1, r3
 8004360:	3764      	adds	r7, #100	; 0x64
 8004362:	46bd      	mov	sp, r7
 8004364:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8004368:	4770      	bx	lr
	...

0800436c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b08a      	sub	sp, #40	; 0x28
 8004370:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004372:	f107 0314 	add.w	r3, r7, #20
 8004376:	2200      	movs	r2, #0
 8004378:	601a      	str	r2, [r3, #0]
 800437a:	605a      	str	r2, [r3, #4]
 800437c:	609a      	str	r2, [r3, #8]
 800437e:	60da      	str	r2, [r3, #12]
 8004380:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004382:	2300      	movs	r3, #0
 8004384:	613b      	str	r3, [r7, #16]
 8004386:	4b2d      	ldr	r3, [pc, #180]	; (800443c <MX_GPIO_Init+0xd0>)
 8004388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438a:	4a2c      	ldr	r2, [pc, #176]	; (800443c <MX_GPIO_Init+0xd0>)
 800438c:	f043 0304 	orr.w	r3, r3, #4
 8004390:	6313      	str	r3, [r2, #48]	; 0x30
 8004392:	4b2a      	ldr	r3, [pc, #168]	; (800443c <MX_GPIO_Init+0xd0>)
 8004394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004396:	f003 0304 	and.w	r3, r3, #4
 800439a:	613b      	str	r3, [r7, #16]
 800439c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800439e:	2300      	movs	r3, #0
 80043a0:	60fb      	str	r3, [r7, #12]
 80043a2:	4b26      	ldr	r3, [pc, #152]	; (800443c <MX_GPIO_Init+0xd0>)
 80043a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a6:	4a25      	ldr	r2, [pc, #148]	; (800443c <MX_GPIO_Init+0xd0>)
 80043a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043ac:	6313      	str	r3, [r2, #48]	; 0x30
 80043ae:	4b23      	ldr	r3, [pc, #140]	; (800443c <MX_GPIO_Init+0xd0>)
 80043b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043b6:	60fb      	str	r3, [r7, #12]
 80043b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80043ba:	2300      	movs	r3, #0
 80043bc:	60bb      	str	r3, [r7, #8]
 80043be:	4b1f      	ldr	r3, [pc, #124]	; (800443c <MX_GPIO_Init+0xd0>)
 80043c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c2:	4a1e      	ldr	r2, [pc, #120]	; (800443c <MX_GPIO_Init+0xd0>)
 80043c4:	f043 0301 	orr.w	r3, r3, #1
 80043c8:	6313      	str	r3, [r2, #48]	; 0x30
 80043ca:	4b1c      	ldr	r3, [pc, #112]	; (800443c <MX_GPIO_Init+0xd0>)
 80043cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	60bb      	str	r3, [r7, #8]
 80043d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80043d6:	2300      	movs	r3, #0
 80043d8:	607b      	str	r3, [r7, #4]
 80043da:	4b18      	ldr	r3, [pc, #96]	; (800443c <MX_GPIO_Init+0xd0>)
 80043dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043de:	4a17      	ldr	r2, [pc, #92]	; (800443c <MX_GPIO_Init+0xd0>)
 80043e0:	f043 0302 	orr.w	r3, r3, #2
 80043e4:	6313      	str	r3, [r2, #48]	; 0x30
 80043e6:	4b15      	ldr	r3, [pc, #84]	; (800443c <MX_GPIO_Init+0xd0>)
 80043e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ea:	f003 0302 	and.w	r3, r3, #2
 80043ee:	607b      	str	r3, [r7, #4]
 80043f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80043f2:	2200      	movs	r2, #0
 80043f4:	2120      	movs	r1, #32
 80043f6:	4812      	ldr	r0, [pc, #72]	; (8004440 <MX_GPIO_Init+0xd4>)
 80043f8:	f000 fde8 	bl	8004fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80043fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004400:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004402:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8004406:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004408:	2300      	movs	r3, #0
 800440a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800440c:	f107 0314 	add.w	r3, r7, #20
 8004410:	4619      	mov	r1, r3
 8004412:	480c      	ldr	r0, [pc, #48]	; (8004444 <MX_GPIO_Init+0xd8>)
 8004414:	f000 fc46 	bl	8004ca4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8004418:	2320      	movs	r3, #32
 800441a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800441c:	2301      	movs	r3, #1
 800441e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004420:	2300      	movs	r3, #0
 8004422:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004424:	2300      	movs	r3, #0
 8004426:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8004428:	f107 0314 	add.w	r3, r7, #20
 800442c:	4619      	mov	r1, r3
 800442e:	4804      	ldr	r0, [pc, #16]	; (8004440 <MX_GPIO_Init+0xd4>)
 8004430:	f000 fc38 	bl	8004ca4 <HAL_GPIO_Init>

}
 8004434:	bf00      	nop
 8004436:	3728      	adds	r7, #40	; 0x28
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}
 800443c:	40023800 	.word	0x40023800
 8004440:	40020000 	.word	0x40020000
 8004444:	40020800 	.word	0x40020800

08004448 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800444c:	f000 fad2 	bl	80049f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004450:	f000 f80a 	bl	8004468 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004454:	f7ff ff8a 	bl	800436c <MX_GPIO_Init>
  MX_TIM6_Init();
 8004458:	f000 f93e 	bl	80046d8 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 800445c:	f000 f994 	bl	8004788 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

 // AesTest();
  RsaTest();
 8004460:	f7fc f854 	bl	800050c <RsaTest>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004464:	e7fe      	b.n	8004464 <main+0x1c>
	...

08004468 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b094      	sub	sp, #80	; 0x50
 800446c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800446e:	f107 031c 	add.w	r3, r7, #28
 8004472:	2234      	movs	r2, #52	; 0x34
 8004474:	2100      	movs	r1, #0
 8004476:	4618      	mov	r0, r3
 8004478:	f002 f872 	bl	8006560 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800447c:	f107 0308 	add.w	r3, r7, #8
 8004480:	2200      	movs	r2, #0
 8004482:	601a      	str	r2, [r3, #0]
 8004484:	605a      	str	r2, [r3, #4]
 8004486:	609a      	str	r2, [r3, #8]
 8004488:	60da      	str	r2, [r3, #12]
 800448a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800448c:	2300      	movs	r3, #0
 800448e:	607b      	str	r3, [r7, #4]
 8004490:	4b2c      	ldr	r3, [pc, #176]	; (8004544 <SystemClock_Config+0xdc>)
 8004492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004494:	4a2b      	ldr	r2, [pc, #172]	; (8004544 <SystemClock_Config+0xdc>)
 8004496:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800449a:	6413      	str	r3, [r2, #64]	; 0x40
 800449c:	4b29      	ldr	r3, [pc, #164]	; (8004544 <SystemClock_Config+0xdc>)
 800449e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044a4:	607b      	str	r3, [r7, #4]
 80044a6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80044a8:	2300      	movs	r3, #0
 80044aa:	603b      	str	r3, [r7, #0]
 80044ac:	4b26      	ldr	r3, [pc, #152]	; (8004548 <SystemClock_Config+0xe0>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a25      	ldr	r2, [pc, #148]	; (8004548 <SystemClock_Config+0xe0>)
 80044b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80044b6:	6013      	str	r3, [r2, #0]
 80044b8:	4b23      	ldr	r3, [pc, #140]	; (8004548 <SystemClock_Config+0xe0>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80044c0:	603b      	str	r3, [r7, #0]
 80044c2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80044c4:	2302      	movs	r3, #2
 80044c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80044c8:	2301      	movs	r3, #1
 80044ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80044cc:	2310      	movs	r3, #16
 80044ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80044d0:	2302      	movs	r3, #2
 80044d2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80044d4:	2300      	movs	r3, #0
 80044d6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80044d8:	2308      	movs	r3, #8
 80044da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80044dc:	23b4      	movs	r3, #180	; 0xb4
 80044de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80044e0:	2302      	movs	r3, #2
 80044e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80044e4:	2302      	movs	r3, #2
 80044e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80044e8:	2302      	movs	r3, #2
 80044ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80044ec:	f107 031c 	add.w	r3, r7, #28
 80044f0:	4618      	mov	r0, r3
 80044f2:	f001 f91f 	bl	8005734 <HAL_RCC_OscConfig>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d001      	beq.n	8004500 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80044fc:	f000 f826 	bl	800454c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8004500:	f000 fd7e 	bl	8005000 <HAL_PWREx_EnableOverDrive>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d001      	beq.n	800450e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800450a:	f000 f81f 	bl	800454c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800450e:	230f      	movs	r3, #15
 8004510:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004512:	2302      	movs	r3, #2
 8004514:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004516:	2300      	movs	r3, #0
 8004518:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800451a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800451e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004520:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004524:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004526:	f107 0308 	add.w	r3, r7, #8
 800452a:	2105      	movs	r1, #5
 800452c:	4618      	mov	r0, r3
 800452e:	f000 fdb7 	bl	80050a0 <HAL_RCC_ClockConfig>
 8004532:	4603      	mov	r3, r0
 8004534:	2b00      	cmp	r3, #0
 8004536:	d001      	beq.n	800453c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8004538:	f000 f808 	bl	800454c <Error_Handler>
  }
}
 800453c:	bf00      	nop
 800453e:	3750      	adds	r7, #80	; 0x50
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}
 8004544:	40023800 	.word	0x40023800
 8004548:	40007000 	.word	0x40007000

0800454c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800454c:	b480      	push	{r7}
 800454e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004550:	b672      	cpsid	i
}
 8004552:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004554:	e7fe      	b.n	8004554 <Error_Handler+0x8>

08004556 <osCreateMutex>:
 * @return The function returns TRUE if the mutex was successfully
 *   created. Otherwise, FALSE is returned
 **/

bool_t osCreateMutex(OsMutex *mutex)
{
 8004556:	b480      	push	{r7}
 8004558:	b083      	sub	sp, #12
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
   //The mutex was successfully created
   return TRUE;
 800455e:	2301      	movs	r3, #1
}
 8004560:	4618      	mov	r0, r3
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr

0800456c <osAllocMem>:
 * @return A pointer to the allocated memory block or NULL if
 *   there is insufficient memory available
 **/

__weak_func void *osAllocMem(size_t size)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
   void *p;

   //Allocate a memory block
   p = malloc(size);
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f001 ffd5 	bl	8006524 <malloc>
 800457a:	4603      	mov	r3, r0
 800457c:	60fb      	str	r3, [r7, #12]
   //Debug message
   TRACE_DEBUG("Allocating %" PRIuSIZE " bytes at 0x%08" PRIXPTR "\r\n",
      size, (uintptr_t) p);

   //Return a pointer to the newly allocated memory block
   return p;
 800457e:	68fb      	ldr	r3, [r7, #12]
}
 8004580:	4618      	mov	r0, r3
 8004582:	3710      	adds	r7, #16
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}

08004588 <osFreeMem>:
 * @brief Release a previously allocated memory block
 * @param[in] p Previously allocated memory block to be freed
 **/

__weak_func void osFreeMem(void *p)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
   //Make sure the pointer is valid
   if(p != NULL)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d002      	beq.n	800459c <osFreeMem+0x14>
   {
      //Debug message
      TRACE_DEBUG("Freeing memory at 0x%08" PRIXPTR "\r\n", (uintptr_t) p);

      //Free memory block
      free(p);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f001 ffcc 	bl	8006534 <free>
   }
}
 800459c:	bf00      	nop
 800459e:	3708      	adds	r7, #8
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045aa:	2300      	movs	r3, #0
 80045ac:	607b      	str	r3, [r7, #4]
 80045ae:	4b10      	ldr	r3, [pc, #64]	; (80045f0 <HAL_MspInit+0x4c>)
 80045b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b2:	4a0f      	ldr	r2, [pc, #60]	; (80045f0 <HAL_MspInit+0x4c>)
 80045b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045b8:	6453      	str	r3, [r2, #68]	; 0x44
 80045ba:	4b0d      	ldr	r3, [pc, #52]	; (80045f0 <HAL_MspInit+0x4c>)
 80045bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045c2:	607b      	str	r3, [r7, #4]
 80045c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80045c6:	2300      	movs	r3, #0
 80045c8:	603b      	str	r3, [r7, #0]
 80045ca:	4b09      	ldr	r3, [pc, #36]	; (80045f0 <HAL_MspInit+0x4c>)
 80045cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ce:	4a08      	ldr	r2, [pc, #32]	; (80045f0 <HAL_MspInit+0x4c>)
 80045d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045d4:	6413      	str	r3, [r2, #64]	; 0x40
 80045d6:	4b06      	ldr	r3, [pc, #24]	; (80045f0 <HAL_MspInit+0x4c>)
 80045d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045de:	603b      	str	r3, [r7, #0]
 80045e0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80045e2:	2007      	movs	r0, #7
 80045e4:	f000 fb2a 	bl	8004c3c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80045e8:	bf00      	nop
 80045ea:	3708      	adds	r7, #8
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	40023800 	.word	0x40023800

080045f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80045f4:	b480      	push	{r7}
 80045f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80045f8:	e7fe      	b.n	80045f8 <NMI_Handler+0x4>

080045fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80045fa:	b480      	push	{r7}
 80045fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80045fe:	e7fe      	b.n	80045fe <HardFault_Handler+0x4>

08004600 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004600:	b480      	push	{r7}
 8004602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004604:	e7fe      	b.n	8004604 <MemManage_Handler+0x4>

08004606 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004606:	b480      	push	{r7}
 8004608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800460a:	e7fe      	b.n	800460a <BusFault_Handler+0x4>

0800460c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800460c:	b480      	push	{r7}
 800460e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004610:	e7fe      	b.n	8004610 <UsageFault_Handler+0x4>

08004612 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004612:	b480      	push	{r7}
 8004614:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004616:	bf00      	nop
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004620:	b480      	push	{r7}
 8004622:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004624:	bf00      	nop
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr

0800462e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800462e:	b480      	push	{r7}
 8004630:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004632:	bf00      	nop
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004640:	f000 fa2a 	bl	8004a98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004644:	bf00      	nop
 8004646:	bd80      	pop	{r7, pc}

08004648 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b086      	sub	sp, #24
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004650:	4a14      	ldr	r2, [pc, #80]	; (80046a4 <_sbrk+0x5c>)
 8004652:	4b15      	ldr	r3, [pc, #84]	; (80046a8 <_sbrk+0x60>)
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800465c:	4b13      	ldr	r3, [pc, #76]	; (80046ac <_sbrk+0x64>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d102      	bne.n	800466a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004664:	4b11      	ldr	r3, [pc, #68]	; (80046ac <_sbrk+0x64>)
 8004666:	4a12      	ldr	r2, [pc, #72]	; (80046b0 <_sbrk+0x68>)
 8004668:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800466a:	4b10      	ldr	r3, [pc, #64]	; (80046ac <_sbrk+0x64>)
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4413      	add	r3, r2
 8004672:	693a      	ldr	r2, [r7, #16]
 8004674:	429a      	cmp	r2, r3
 8004676:	d207      	bcs.n	8004688 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004678:	f001 ff28 	bl	80064cc <__errno>
 800467c:	4603      	mov	r3, r0
 800467e:	220c      	movs	r2, #12
 8004680:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004682:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004686:	e009      	b.n	800469c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004688:	4b08      	ldr	r3, [pc, #32]	; (80046ac <_sbrk+0x64>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800468e:	4b07      	ldr	r3, [pc, #28]	; (80046ac <_sbrk+0x64>)
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4413      	add	r3, r2
 8004696:	4a05      	ldr	r2, [pc, #20]	; (80046ac <_sbrk+0x64>)
 8004698:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800469a:	68fb      	ldr	r3, [r7, #12]
}
 800469c:	4618      	mov	r0, r3
 800469e:	3718      	adds	r7, #24
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	20020000 	.word	0x20020000
 80046a8:	00000400 	.word	0x00000400
 80046ac:	20000c80 	.word	0x20000c80
 80046b0:	20000d28 	.word	0x20000d28

080046b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80046b4:	b480      	push	{r7}
 80046b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80046b8:	4b06      	ldr	r3, [pc, #24]	; (80046d4 <SystemInit+0x20>)
 80046ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046be:	4a05      	ldr	r2, [pc, #20]	; (80046d4 <SystemInit+0x20>)
 80046c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80046c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80046c8:	bf00      	nop
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	e000ed00 	.word	0xe000ed00

080046d8 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80046de:	463b      	mov	r3, r7
 80046e0:	2200      	movs	r2, #0
 80046e2:	601a      	str	r2, [r3, #0]
 80046e4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80046e6:	4b15      	ldr	r3, [pc, #84]	; (800473c <MX_TIM6_Init+0x64>)
 80046e8:	4a15      	ldr	r2, [pc, #84]	; (8004740 <MX_TIM6_Init+0x68>)
 80046ea:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1000;
 80046ec:	4b13      	ldr	r3, [pc, #76]	; (800473c <MX_TIM6_Init+0x64>)
 80046ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80046f2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046f4:	4b11      	ldr	r3, [pc, #68]	; (800473c <MX_TIM6_Init+0x64>)
 80046f6:	2200      	movs	r2, #0
 80046f8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80046fa:	4b10      	ldr	r3, [pc, #64]	; (800473c <MX_TIM6_Init+0x64>)
 80046fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004700:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004702:	4b0e      	ldr	r3, [pc, #56]	; (800473c <MX_TIM6_Init+0x64>)
 8004704:	2200      	movs	r2, #0
 8004706:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004708:	480c      	ldr	r0, [pc, #48]	; (800473c <MX_TIM6_Init+0x64>)
 800470a:	f001 fab1 	bl	8005c70 <HAL_TIM_Base_Init>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d001      	beq.n	8004718 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8004714:	f7ff ff1a 	bl	800454c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004718:	2300      	movs	r3, #0
 800471a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800471c:	2300      	movs	r3, #0
 800471e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004720:	463b      	mov	r3, r7
 8004722:	4619      	mov	r1, r3
 8004724:	4805      	ldr	r0, [pc, #20]	; (800473c <MX_TIM6_Init+0x64>)
 8004726:	f001 fb93 	bl	8005e50 <HAL_TIMEx_MasterConfigSynchronization>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d001      	beq.n	8004734 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8004730:	f7ff ff0c 	bl	800454c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004734:	bf00      	nop
 8004736:	3708      	adds	r7, #8
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	20000c84 	.word	0x20000c84
 8004740:	40001000 	.word	0x40001000

08004744 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004744:	b480      	push	{r7}
 8004746:	b085      	sub	sp, #20
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a0b      	ldr	r2, [pc, #44]	; (8004780 <HAL_TIM_Base_MspInit+0x3c>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d10d      	bne.n	8004772 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004756:	2300      	movs	r3, #0
 8004758:	60fb      	str	r3, [r7, #12]
 800475a:	4b0a      	ldr	r3, [pc, #40]	; (8004784 <HAL_TIM_Base_MspInit+0x40>)
 800475c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475e:	4a09      	ldr	r2, [pc, #36]	; (8004784 <HAL_TIM_Base_MspInit+0x40>)
 8004760:	f043 0310 	orr.w	r3, r3, #16
 8004764:	6413      	str	r3, [r2, #64]	; 0x40
 8004766:	4b07      	ldr	r3, [pc, #28]	; (8004784 <HAL_TIM_Base_MspInit+0x40>)
 8004768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476a:	f003 0310 	and.w	r3, r3, #16
 800476e:	60fb      	str	r3, [r7, #12]
 8004770:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8004772:	bf00      	nop
 8004774:	3714      	adds	r7, #20
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	40001000 	.word	0x40001000
 8004784:	40023800 	.word	0x40023800

08004788 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800478c:	4b11      	ldr	r3, [pc, #68]	; (80047d4 <MX_USART2_UART_Init+0x4c>)
 800478e:	4a12      	ldr	r2, [pc, #72]	; (80047d8 <MX_USART2_UART_Init+0x50>)
 8004790:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004792:	4b10      	ldr	r3, [pc, #64]	; (80047d4 <MX_USART2_UART_Init+0x4c>)
 8004794:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004798:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800479a:	4b0e      	ldr	r3, [pc, #56]	; (80047d4 <MX_USART2_UART_Init+0x4c>)
 800479c:	2200      	movs	r2, #0
 800479e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80047a0:	4b0c      	ldr	r3, [pc, #48]	; (80047d4 <MX_USART2_UART_Init+0x4c>)
 80047a2:	2200      	movs	r2, #0
 80047a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80047a6:	4b0b      	ldr	r3, [pc, #44]	; (80047d4 <MX_USART2_UART_Init+0x4c>)
 80047a8:	2200      	movs	r2, #0
 80047aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80047ac:	4b09      	ldr	r3, [pc, #36]	; (80047d4 <MX_USART2_UART_Init+0x4c>)
 80047ae:	220c      	movs	r2, #12
 80047b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80047b2:	4b08      	ldr	r3, [pc, #32]	; (80047d4 <MX_USART2_UART_Init+0x4c>)
 80047b4:	2200      	movs	r2, #0
 80047b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80047b8:	4b06      	ldr	r3, [pc, #24]	; (80047d4 <MX_USART2_UART_Init+0x4c>)
 80047ba:	2200      	movs	r2, #0
 80047bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80047be:	4805      	ldr	r0, [pc, #20]	; (80047d4 <MX_USART2_UART_Init+0x4c>)
 80047c0:	f001 fbc2 	bl	8005f48 <HAL_UART_Init>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d001      	beq.n	80047ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80047ca:	f7ff febf 	bl	800454c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80047ce:	bf00      	nop
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	20000ccc 	.word	0x20000ccc
 80047d8:	40004400 	.word	0x40004400

080047dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b08a      	sub	sp, #40	; 0x28
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047e4:	f107 0314 	add.w	r3, r7, #20
 80047e8:	2200      	movs	r2, #0
 80047ea:	601a      	str	r2, [r3, #0]
 80047ec:	605a      	str	r2, [r3, #4]
 80047ee:	609a      	str	r2, [r3, #8]
 80047f0:	60da      	str	r2, [r3, #12]
 80047f2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a19      	ldr	r2, [pc, #100]	; (8004860 <HAL_UART_MspInit+0x84>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d12b      	bne.n	8004856 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80047fe:	2300      	movs	r3, #0
 8004800:	613b      	str	r3, [r7, #16]
 8004802:	4b18      	ldr	r3, [pc, #96]	; (8004864 <HAL_UART_MspInit+0x88>)
 8004804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004806:	4a17      	ldr	r2, [pc, #92]	; (8004864 <HAL_UART_MspInit+0x88>)
 8004808:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800480c:	6413      	str	r3, [r2, #64]	; 0x40
 800480e:	4b15      	ldr	r3, [pc, #84]	; (8004864 <HAL_UART_MspInit+0x88>)
 8004810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004816:	613b      	str	r3, [r7, #16]
 8004818:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800481a:	2300      	movs	r3, #0
 800481c:	60fb      	str	r3, [r7, #12]
 800481e:	4b11      	ldr	r3, [pc, #68]	; (8004864 <HAL_UART_MspInit+0x88>)
 8004820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004822:	4a10      	ldr	r2, [pc, #64]	; (8004864 <HAL_UART_MspInit+0x88>)
 8004824:	f043 0301 	orr.w	r3, r3, #1
 8004828:	6313      	str	r3, [r2, #48]	; 0x30
 800482a:	4b0e      	ldr	r3, [pc, #56]	; (8004864 <HAL_UART_MspInit+0x88>)
 800482c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482e:	f003 0301 	and.w	r3, r3, #1
 8004832:	60fb      	str	r3, [r7, #12]
 8004834:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004836:	230c      	movs	r3, #12
 8004838:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800483a:	2302      	movs	r3, #2
 800483c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800483e:	2300      	movs	r3, #0
 8004840:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004842:	2303      	movs	r3, #3
 8004844:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004846:	2307      	movs	r3, #7
 8004848:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800484a:	f107 0314 	add.w	r3, r7, #20
 800484e:	4619      	mov	r1, r3
 8004850:	4805      	ldr	r0, [pc, #20]	; (8004868 <HAL_UART_MspInit+0x8c>)
 8004852:	f000 fa27 	bl	8004ca4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004856:	bf00      	nop
 8004858:	3728      	adds	r7, #40	; 0x28
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	40004400 	.word	0x40004400
 8004864:	40023800 	.word	0x40023800
 8004868:	40020000 	.word	0x40020000

0800486c <yarrowInit>:
 * @param[in] context Pointer to the PRNG context to initialize
 * @return Error code
 **/

error_t yarrowInit(YarrowContext *context)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b082      	sub	sp, #8
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
   //Clear PRNG state
   osMemset(context, 0, sizeof(YarrowContext));
 8004874:	f44f 724c 	mov.w	r2, #816	; 0x330
 8004878:	2100      	movs	r1, #0
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f001 fe70 	bl	8006560 <memset>

   //Create a mutex to prevent simultaneous access to the PRNG state
   if(!osCreateMutex(&context->mutex))
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	4618      	mov	r0, r3
 8004884:	f7ff fe67 	bl	8004556 <osCreateMutex>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d101      	bne.n	8004892 <yarrowInit+0x26>
   {
      //Failed to create mutex
      return ERROR_OUT_OF_RESOURCES;
 800488e:	2365      	movs	r3, #101	; 0x65
 8004890:	e00d      	b.n	80048ae <yarrowInit+0x42>
   }

   //Initialize hash contexts
   sha256Init(&context->fastPool);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	3318      	adds	r3, #24
 8004896:	4618      	mov	r0, r3
 8004898:	f7fe f866 	bl	8002968 <sha256Init>
   sha256Init(&context->slowPool);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	3398      	adds	r3, #152	; 0x98
 80048a0:	4618      	mov	r0, r3
 80048a2:	f7fe f861 	bl	8002968 <sha256Init>

   //The PRNG is not ready to generate random data
   context->ready = FALSE;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	605a      	str	r2, [r3, #4]

   //Successful initialization
   return NO_ERROR;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3708      	adds	r7, #8
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}

080048b6 <yarrowSeed>:
 * @param[in] length Length of the input data
 * @return Error code
 **/

error_t yarrowSeed(YarrowContext *context, const uint8_t *input, size_t length)
{
 80048b6:	b580      	push	{r7, lr}
 80048b8:	b084      	sub	sp, #16
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	60f8      	str	r0, [r7, #12]
 80048be:	60b9      	str	r1, [r7, #8]
 80048c0:	607a      	str	r2, [r7, #4]
   //Check parameters
   if(length < sizeof(context->key))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2b1f      	cmp	r3, #31
 80048c6:	d801      	bhi.n	80048cc <yarrowSeed+0x16>
      return ERROR_INVALID_PARAMETER;
 80048c8:	2302      	movs	r3, #2
 80048ca:	e00a      	b.n	80048e2 <yarrowSeed+0x2c>

   //Add entropy to the fast pool
   sha256Update(&context->fastPool, input, length);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	3318      	adds	r3, #24
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	68b9      	ldr	r1, [r7, #8]
 80048d4:	4618      	mov	r0, r3
 80048d6:	f7fe f883 	bl	80029e0 <sha256Update>
   //Reseed from the fast pool
   yarrowFastReseed(context);
 80048da:	68f8      	ldr	r0, [r7, #12]
 80048dc:	f000 f805 	bl	80048ea <yarrowFastReseed>

   //Successful processing
   return NO_ERROR;
 80048e0:	2300      	movs	r3, #0
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3710      	adds	r7, #16
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}

080048ea <yarrowFastReseed>:
 * @brief Reseed from the fast pool
 * @param[in] context Pointer to the PRNG context
 **/

void yarrowFastReseed(YarrowContext *context)
{
 80048ea:	b580      	push	{r7, lr}
 80048ec:	b084      	sub	sp, #16
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
   size_t i;

   //Erase AES context
   if(context->ready)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d005      	beq.n	8004906 <yarrowFastReseed+0x1c>
   {
      aesDeinit(&context->cipherContext);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8004900:	4618      	mov	r0, r3
 8004902:	f7ff fc4f 	bl	80041a4 <aesDeinit>
   }

   //Reseeding from the fast pool use the current key and the hash of all
   //inputs to the fast pool since the last reseed, to generate a new key
   sha256Update(&context->fastPool, context->key, sizeof(context->key));
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f103 0018 	add.w	r0, r3, #24
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 8004912:	2220      	movs	r2, #32
 8004914:	4619      	mov	r1, r3
 8004916:	f7fe f863 	bl	80029e0 <sha256Update>
   sha256Final(&context->fastPool, context->key);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f103 0218 	add.w	r2, r3, #24
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 8004926:	4619      	mov	r1, r3
 8004928:	4610      	mov	r0, r2
 800492a:	f7fe f8a5 	bl	8002a78 <sha256Final>

   //Set the new key
   aesInit(&context->cipherContext, context->key, sizeof(context->key));
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f503 708a 	add.w	r0, r3, #276	; 0x114
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 800493a:	2220      	movs	r2, #32
 800493c:	4619      	mov	r1, r3
 800493e:	f7fe fffd 	bl	800393c <aesInit>

   //Define the new value of the counter
   osMemset(context->counter, 0, sizeof(context->counter));
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8004948:	2210      	movs	r2, #16
 800494a:	2100      	movs	r1, #0
 800494c:	4618      	mov	r0, r3
 800494e:	f001 fe07 	bl	8006560 <memset>
   aesEncryptBlock(&context->cipherContext, context->counter, context->counter);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f503 708a 	add.w	r0, r3, #276	; 0x114
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f503 7146 	add.w	r1, r3, #792	; 0x318
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8004964:	461a      	mov	r2, r3
 8004966:	f7ff f9ab 	bl	8003cc0 <aesEncryptBlock>

   //Reset the hash context
   sha256Init(&context->fastPool);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	3318      	adds	r3, #24
 800496e:	4618      	mov	r0, r3
 8004970:	f7fd fffa 	bl	8002968 <sha256Init>

   //The entropy estimates for the fast pool are all reset to zero
   for(i = 0; i < YARROW_N; i++)
 8004974:	2300      	movs	r3, #0
 8004976:	60fb      	str	r3, [r7, #12]
 8004978:	e008      	b.n	800498c <yarrowFastReseed+0xa2>
   {
      context->fastPoolEntropy[i] = 0;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	68fa      	ldr	r2, [r7, #12]
 800497e:	3222      	adds	r2, #34	; 0x22
 8004980:	2100      	movs	r1, #0
 8004982:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   for(i = 0; i < YARROW_N; i++)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	3301      	adds	r3, #1
 800498a:	60fb      	str	r3, [r7, #12]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2b02      	cmp	r3, #2
 8004990:	d9f3      	bls.n	800497a <yarrowFastReseed+0x90>
   }

   //The PRNG is ready to generate random data
   context->ready = TRUE;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2201      	movs	r2, #1
 8004996:	605a      	str	r2, [r3, #4]
}
 8004998:	bf00      	nop
 800499a:	3710      	adds	r7, #16
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
 ldr   sp, =_estack      /* set stack pointer */
 80049a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80049d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80049a4:	480d      	ldr	r0, [pc, #52]	; (80049dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80049a6:	490e      	ldr	r1, [pc, #56]	; (80049e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80049a8:	4a0e      	ldr	r2, [pc, #56]	; (80049e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80049aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80049ac:	e002      	b.n	80049b4 <LoopCopyDataInit>

080049ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80049ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80049b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80049b2:	3304      	adds	r3, #4

080049b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80049b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80049b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80049b8:	d3f9      	bcc.n	80049ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80049ba:	4a0b      	ldr	r2, [pc, #44]	; (80049e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80049bc:	4c0b      	ldr	r4, [pc, #44]	; (80049ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80049be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80049c0:	e001      	b.n	80049c6 <LoopFillZerobss>

080049c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80049c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80049c4:	3204      	adds	r2, #4

080049c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80049c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80049c8:	d3fb      	bcc.n	80049c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80049ca:	f7ff fe73 	bl	80046b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80049ce:	f001 fd83 	bl	80064d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80049d2:	f7ff fd39 	bl	8004448 <main>
  bx  lr    
 80049d6:	4770      	bx	lr
 ldr   sp, =_estack      /* set stack pointer */
 80049d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80049dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80049e0:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 80049e4:	08007f74 	.word	0x08007f74
  ldr r2, =_sbss
 80049e8:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 80049ec:	20000d24 	.word	0x20000d24

080049f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80049f0:	e7fe      	b.n	80049f0 <ADC_IRQHandler>
	...

080049f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80049f8:	4b0e      	ldr	r3, [pc, #56]	; (8004a34 <HAL_Init+0x40>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a0d      	ldr	r2, [pc, #52]	; (8004a34 <HAL_Init+0x40>)
 80049fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004a04:	4b0b      	ldr	r3, [pc, #44]	; (8004a34 <HAL_Init+0x40>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a0a      	ldr	r2, [pc, #40]	; (8004a34 <HAL_Init+0x40>)
 8004a0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004a10:	4b08      	ldr	r3, [pc, #32]	; (8004a34 <HAL_Init+0x40>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a07      	ldr	r2, [pc, #28]	; (8004a34 <HAL_Init+0x40>)
 8004a16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a1c:	2003      	movs	r0, #3
 8004a1e:	f000 f90d 	bl	8004c3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004a22:	2000      	movs	r0, #0
 8004a24:	f000 f808 	bl	8004a38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004a28:	f7ff fdbc 	bl	80045a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	40023c00 	.word	0x40023c00

08004a38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b082      	sub	sp, #8
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004a40:	4b12      	ldr	r3, [pc, #72]	; (8004a8c <HAL_InitTick+0x54>)
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	4b12      	ldr	r3, [pc, #72]	; (8004a90 <HAL_InitTick+0x58>)
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	4619      	mov	r1, r3
 8004a4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004a4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a56:	4618      	mov	r0, r3
 8004a58:	f000 f917 	bl	8004c8a <HAL_SYSTICK_Config>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d001      	beq.n	8004a66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e00e      	b.n	8004a84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2b0f      	cmp	r3, #15
 8004a6a:	d80a      	bhi.n	8004a82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	6879      	ldr	r1, [r7, #4]
 8004a70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a74:	f000 f8ed 	bl	8004c52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004a78:	4a06      	ldr	r2, [pc, #24]	; (8004a94 <HAL_InitTick+0x5c>)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	e000      	b.n	8004a84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3708      	adds	r7, #8
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}
 8004a8c:	20000040 	.word	0x20000040
 8004a90:	20000048 	.word	0x20000048
 8004a94:	20000044 	.word	0x20000044

08004a98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004a9c:	4b06      	ldr	r3, [pc, #24]	; (8004ab8 <HAL_IncTick+0x20>)
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	4b06      	ldr	r3, [pc, #24]	; (8004abc <HAL_IncTick+0x24>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4413      	add	r3, r2
 8004aa8:	4a04      	ldr	r2, [pc, #16]	; (8004abc <HAL_IncTick+0x24>)
 8004aaa:	6013      	str	r3, [r2, #0]
}
 8004aac:	bf00      	nop
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop
 8004ab8:	20000048 	.word	0x20000048
 8004abc:	20000d10 	.word	0x20000d10

08004ac0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	af00      	add	r7, sp, #0
  return uwTick;
 8004ac4:	4b03      	ldr	r3, [pc, #12]	; (8004ad4 <HAL_GetTick+0x14>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	20000d10 	.word	0x20000d10

08004ad8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f003 0307 	and.w	r3, r3, #7
 8004ae6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ae8:	4b0c      	ldr	r3, [pc, #48]	; (8004b1c <__NVIC_SetPriorityGrouping+0x44>)
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004aee:	68ba      	ldr	r2, [r7, #8]
 8004af0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004af4:	4013      	ands	r3, r2
 8004af6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004b04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b0a:	4a04      	ldr	r2, [pc, #16]	; (8004b1c <__NVIC_SetPriorityGrouping+0x44>)
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	60d3      	str	r3, [r2, #12]
}
 8004b10:	bf00      	nop
 8004b12:	3714      	adds	r7, #20
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr
 8004b1c:	e000ed00 	.word	0xe000ed00

08004b20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b20:	b480      	push	{r7}
 8004b22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b24:	4b04      	ldr	r3, [pc, #16]	; (8004b38 <__NVIC_GetPriorityGrouping+0x18>)
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	0a1b      	lsrs	r3, r3, #8
 8004b2a:	f003 0307 	and.w	r3, r3, #7
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr
 8004b38:	e000ed00 	.word	0xe000ed00

08004b3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	4603      	mov	r3, r0
 8004b44:	6039      	str	r1, [r7, #0]
 8004b46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	db0a      	blt.n	8004b66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	b2da      	uxtb	r2, r3
 8004b54:	490c      	ldr	r1, [pc, #48]	; (8004b88 <__NVIC_SetPriority+0x4c>)
 8004b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b5a:	0112      	lsls	r2, r2, #4
 8004b5c:	b2d2      	uxtb	r2, r2
 8004b5e:	440b      	add	r3, r1
 8004b60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b64:	e00a      	b.n	8004b7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	b2da      	uxtb	r2, r3
 8004b6a:	4908      	ldr	r1, [pc, #32]	; (8004b8c <__NVIC_SetPriority+0x50>)
 8004b6c:	79fb      	ldrb	r3, [r7, #7]
 8004b6e:	f003 030f 	and.w	r3, r3, #15
 8004b72:	3b04      	subs	r3, #4
 8004b74:	0112      	lsls	r2, r2, #4
 8004b76:	b2d2      	uxtb	r2, r2
 8004b78:	440b      	add	r3, r1
 8004b7a:	761a      	strb	r2, [r3, #24]
}
 8004b7c:	bf00      	nop
 8004b7e:	370c      	adds	r7, #12
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr
 8004b88:	e000e100 	.word	0xe000e100
 8004b8c:	e000ed00 	.word	0xe000ed00

08004b90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b089      	sub	sp, #36	; 0x24
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f003 0307 	and.w	r3, r3, #7
 8004ba2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	f1c3 0307 	rsb	r3, r3, #7
 8004baa:	2b04      	cmp	r3, #4
 8004bac:	bf28      	it	cs
 8004bae:	2304      	movcs	r3, #4
 8004bb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	3304      	adds	r3, #4
 8004bb6:	2b06      	cmp	r3, #6
 8004bb8:	d902      	bls.n	8004bc0 <NVIC_EncodePriority+0x30>
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	3b03      	subs	r3, #3
 8004bbe:	e000      	b.n	8004bc2 <NVIC_EncodePriority+0x32>
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	fa02 f303 	lsl.w	r3, r2, r3
 8004bce:	43da      	mvns	r2, r3
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	401a      	ands	r2, r3
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004bd8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	fa01 f303 	lsl.w	r3, r1, r3
 8004be2:	43d9      	mvns	r1, r3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004be8:	4313      	orrs	r3, r2
         );
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3724      	adds	r7, #36	; 0x24
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr
	...

08004bf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	3b01      	subs	r3, #1
 8004c04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c08:	d301      	bcc.n	8004c0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e00f      	b.n	8004c2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c0e:	4a0a      	ldr	r2, [pc, #40]	; (8004c38 <SysTick_Config+0x40>)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	3b01      	subs	r3, #1
 8004c14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c16:	210f      	movs	r1, #15
 8004c18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c1c:	f7ff ff8e 	bl	8004b3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c20:	4b05      	ldr	r3, [pc, #20]	; (8004c38 <SysTick_Config+0x40>)
 8004c22:	2200      	movs	r2, #0
 8004c24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c26:	4b04      	ldr	r3, [pc, #16]	; (8004c38 <SysTick_Config+0x40>)
 8004c28:	2207      	movs	r2, #7
 8004c2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3708      	adds	r7, #8
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	e000e010 	.word	0xe000e010

08004c3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f7ff ff47 	bl	8004ad8 <__NVIC_SetPriorityGrouping>
}
 8004c4a:	bf00      	nop
 8004c4c:	3708      	adds	r7, #8
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}

08004c52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004c52:	b580      	push	{r7, lr}
 8004c54:	b086      	sub	sp, #24
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	4603      	mov	r3, r0
 8004c5a:	60b9      	str	r1, [r7, #8]
 8004c5c:	607a      	str	r2, [r7, #4]
 8004c5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004c60:	2300      	movs	r3, #0
 8004c62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004c64:	f7ff ff5c 	bl	8004b20 <__NVIC_GetPriorityGrouping>
 8004c68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	68b9      	ldr	r1, [r7, #8]
 8004c6e:	6978      	ldr	r0, [r7, #20]
 8004c70:	f7ff ff8e 	bl	8004b90 <NVIC_EncodePriority>
 8004c74:	4602      	mov	r2, r0
 8004c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c7a:	4611      	mov	r1, r2
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f7ff ff5d 	bl	8004b3c <__NVIC_SetPriority>
}
 8004c82:	bf00      	nop
 8004c84:	3718      	adds	r7, #24
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}

08004c8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c8a:	b580      	push	{r7, lr}
 8004c8c:	b082      	sub	sp, #8
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f7ff ffb0 	bl	8004bf8 <SysTick_Config>
 8004c98:	4603      	mov	r3, r0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3708      	adds	r7, #8
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
	...

08004ca4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b089      	sub	sp, #36	; 0x24
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004cba:	2300      	movs	r3, #0
 8004cbc:	61fb      	str	r3, [r7, #28]
 8004cbe:	e165      	b.n	8004f8c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	697a      	ldr	r2, [r7, #20]
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004cd4:	693a      	ldr	r2, [r7, #16]
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	f040 8154 	bne.w	8004f86 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f003 0303 	and.w	r3, r3, #3
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d005      	beq.n	8004cf6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d130      	bne.n	8004d58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	005b      	lsls	r3, r3, #1
 8004d00:	2203      	movs	r2, #3
 8004d02:	fa02 f303 	lsl.w	r3, r2, r3
 8004d06:	43db      	mvns	r3, r3
 8004d08:	69ba      	ldr	r2, [r7, #24]
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	68da      	ldr	r2, [r3, #12]
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	005b      	lsls	r3, r3, #1
 8004d16:	fa02 f303 	lsl.w	r3, r2, r3
 8004d1a:	69ba      	ldr	r2, [r7, #24]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	69ba      	ldr	r2, [r7, #24]
 8004d24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	fa02 f303 	lsl.w	r3, r2, r3
 8004d34:	43db      	mvns	r3, r3
 8004d36:	69ba      	ldr	r2, [r7, #24]
 8004d38:	4013      	ands	r3, r2
 8004d3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	091b      	lsrs	r3, r3, #4
 8004d42:	f003 0201 	and.w	r2, r3, #1
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4c:	69ba      	ldr	r2, [r7, #24]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	69ba      	ldr	r2, [r7, #24]
 8004d56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	f003 0303 	and.w	r3, r3, #3
 8004d60:	2b03      	cmp	r3, #3
 8004d62:	d017      	beq.n	8004d94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	005b      	lsls	r3, r3, #1
 8004d6e:	2203      	movs	r2, #3
 8004d70:	fa02 f303 	lsl.w	r3, r2, r3
 8004d74:	43db      	mvns	r3, r3
 8004d76:	69ba      	ldr	r2, [r7, #24]
 8004d78:	4013      	ands	r3, r2
 8004d7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	689a      	ldr	r2, [r3, #8]
 8004d80:	69fb      	ldr	r3, [r7, #28]
 8004d82:	005b      	lsls	r3, r3, #1
 8004d84:	fa02 f303 	lsl.w	r3, r2, r3
 8004d88:	69ba      	ldr	r2, [r7, #24]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	69ba      	ldr	r2, [r7, #24]
 8004d92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	f003 0303 	and.w	r3, r3, #3
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	d123      	bne.n	8004de8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	08da      	lsrs	r2, r3, #3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	3208      	adds	r2, #8
 8004da8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	f003 0307 	and.w	r3, r3, #7
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	220f      	movs	r2, #15
 8004db8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dbc:	43db      	mvns	r3, r3
 8004dbe:	69ba      	ldr	r2, [r7, #24]
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	691a      	ldr	r2, [r3, #16]
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	f003 0307 	and.w	r3, r3, #7
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd4:	69ba      	ldr	r2, [r7, #24]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	08da      	lsrs	r2, r3, #3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	3208      	adds	r2, #8
 8004de2:	69b9      	ldr	r1, [r7, #24]
 8004de4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	005b      	lsls	r3, r3, #1
 8004df2:	2203      	movs	r2, #3
 8004df4:	fa02 f303 	lsl.w	r3, r2, r3
 8004df8:	43db      	mvns	r3, r3
 8004dfa:	69ba      	ldr	r2, [r7, #24]
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	f003 0203 	and.w	r2, r3, #3
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	005b      	lsls	r3, r3, #1
 8004e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e10:	69ba      	ldr	r2, [r7, #24]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	69ba      	ldr	r2, [r7, #24]
 8004e1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	f000 80ae 	beq.w	8004f86 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	60fb      	str	r3, [r7, #12]
 8004e2e:	4b5d      	ldr	r3, [pc, #372]	; (8004fa4 <HAL_GPIO_Init+0x300>)
 8004e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e32:	4a5c      	ldr	r2, [pc, #368]	; (8004fa4 <HAL_GPIO_Init+0x300>)
 8004e34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e38:	6453      	str	r3, [r2, #68]	; 0x44
 8004e3a:	4b5a      	ldr	r3, [pc, #360]	; (8004fa4 <HAL_GPIO_Init+0x300>)
 8004e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e42:	60fb      	str	r3, [r7, #12]
 8004e44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e46:	4a58      	ldr	r2, [pc, #352]	; (8004fa8 <HAL_GPIO_Init+0x304>)
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	089b      	lsrs	r3, r3, #2
 8004e4c:	3302      	adds	r3, #2
 8004e4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	f003 0303 	and.w	r3, r3, #3
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	220f      	movs	r2, #15
 8004e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e62:	43db      	mvns	r3, r3
 8004e64:	69ba      	ldr	r2, [r7, #24]
 8004e66:	4013      	ands	r3, r2
 8004e68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a4f      	ldr	r2, [pc, #316]	; (8004fac <HAL_GPIO_Init+0x308>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d025      	beq.n	8004ebe <HAL_GPIO_Init+0x21a>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a4e      	ldr	r2, [pc, #312]	; (8004fb0 <HAL_GPIO_Init+0x30c>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d01f      	beq.n	8004eba <HAL_GPIO_Init+0x216>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a4d      	ldr	r2, [pc, #308]	; (8004fb4 <HAL_GPIO_Init+0x310>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d019      	beq.n	8004eb6 <HAL_GPIO_Init+0x212>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a4c      	ldr	r2, [pc, #304]	; (8004fb8 <HAL_GPIO_Init+0x314>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d013      	beq.n	8004eb2 <HAL_GPIO_Init+0x20e>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a4b      	ldr	r2, [pc, #300]	; (8004fbc <HAL_GPIO_Init+0x318>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d00d      	beq.n	8004eae <HAL_GPIO_Init+0x20a>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a4a      	ldr	r2, [pc, #296]	; (8004fc0 <HAL_GPIO_Init+0x31c>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d007      	beq.n	8004eaa <HAL_GPIO_Init+0x206>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a49      	ldr	r2, [pc, #292]	; (8004fc4 <HAL_GPIO_Init+0x320>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d101      	bne.n	8004ea6 <HAL_GPIO_Init+0x202>
 8004ea2:	2306      	movs	r3, #6
 8004ea4:	e00c      	b.n	8004ec0 <HAL_GPIO_Init+0x21c>
 8004ea6:	2307      	movs	r3, #7
 8004ea8:	e00a      	b.n	8004ec0 <HAL_GPIO_Init+0x21c>
 8004eaa:	2305      	movs	r3, #5
 8004eac:	e008      	b.n	8004ec0 <HAL_GPIO_Init+0x21c>
 8004eae:	2304      	movs	r3, #4
 8004eb0:	e006      	b.n	8004ec0 <HAL_GPIO_Init+0x21c>
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e004      	b.n	8004ec0 <HAL_GPIO_Init+0x21c>
 8004eb6:	2302      	movs	r3, #2
 8004eb8:	e002      	b.n	8004ec0 <HAL_GPIO_Init+0x21c>
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e000      	b.n	8004ec0 <HAL_GPIO_Init+0x21c>
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	69fa      	ldr	r2, [r7, #28]
 8004ec2:	f002 0203 	and.w	r2, r2, #3
 8004ec6:	0092      	lsls	r2, r2, #2
 8004ec8:	4093      	lsls	r3, r2
 8004eca:	69ba      	ldr	r2, [r7, #24]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ed0:	4935      	ldr	r1, [pc, #212]	; (8004fa8 <HAL_GPIO_Init+0x304>)
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	089b      	lsrs	r3, r3, #2
 8004ed6:	3302      	adds	r3, #2
 8004ed8:	69ba      	ldr	r2, [r7, #24]
 8004eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004ede:	4b3a      	ldr	r3, [pc, #232]	; (8004fc8 <HAL_GPIO_Init+0x324>)
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	43db      	mvns	r3, r3
 8004ee8:	69ba      	ldr	r2, [r7, #24]
 8004eea:	4013      	ands	r3, r2
 8004eec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d003      	beq.n	8004f02 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004efa:	69ba      	ldr	r2, [r7, #24]
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004f02:	4a31      	ldr	r2, [pc, #196]	; (8004fc8 <HAL_GPIO_Init+0x324>)
 8004f04:	69bb      	ldr	r3, [r7, #24]
 8004f06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f08:	4b2f      	ldr	r3, [pc, #188]	; (8004fc8 <HAL_GPIO_Init+0x324>)
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	43db      	mvns	r3, r3
 8004f12:	69ba      	ldr	r2, [r7, #24]
 8004f14:	4013      	ands	r3, r2
 8004f16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d003      	beq.n	8004f2c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004f24:	69ba      	ldr	r2, [r7, #24]
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004f2c:	4a26      	ldr	r2, [pc, #152]	; (8004fc8 <HAL_GPIO_Init+0x324>)
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004f32:	4b25      	ldr	r3, [pc, #148]	; (8004fc8 <HAL_GPIO_Init+0x324>)
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	43db      	mvns	r3, r3
 8004f3c:	69ba      	ldr	r2, [r7, #24]
 8004f3e:	4013      	ands	r3, r2
 8004f40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d003      	beq.n	8004f56 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004f4e:	69ba      	ldr	r2, [r7, #24]
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004f56:	4a1c      	ldr	r2, [pc, #112]	; (8004fc8 <HAL_GPIO_Init+0x324>)
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004f5c:	4b1a      	ldr	r3, [pc, #104]	; (8004fc8 <HAL_GPIO_Init+0x324>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	43db      	mvns	r3, r3
 8004f66:	69ba      	ldr	r2, [r7, #24]
 8004f68:	4013      	ands	r3, r2
 8004f6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d003      	beq.n	8004f80 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004f78:	69ba      	ldr	r2, [r7, #24]
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004f80:	4a11      	ldr	r2, [pc, #68]	; (8004fc8 <HAL_GPIO_Init+0x324>)
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	3301      	adds	r3, #1
 8004f8a:	61fb      	str	r3, [r7, #28]
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	2b0f      	cmp	r3, #15
 8004f90:	f67f ae96 	bls.w	8004cc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004f94:	bf00      	nop
 8004f96:	bf00      	nop
 8004f98:	3724      	adds	r7, #36	; 0x24
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr
 8004fa2:	bf00      	nop
 8004fa4:	40023800 	.word	0x40023800
 8004fa8:	40013800 	.word	0x40013800
 8004fac:	40020000 	.word	0x40020000
 8004fb0:	40020400 	.word	0x40020400
 8004fb4:	40020800 	.word	0x40020800
 8004fb8:	40020c00 	.word	0x40020c00
 8004fbc:	40021000 	.word	0x40021000
 8004fc0:	40021400 	.word	0x40021400
 8004fc4:	40021800 	.word	0x40021800
 8004fc8:	40013c00 	.word	0x40013c00

08004fcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	807b      	strh	r3, [r7, #2]
 8004fd8:	4613      	mov	r3, r2
 8004fda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004fdc:	787b      	ldrb	r3, [r7, #1]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d003      	beq.n	8004fea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004fe2:	887a      	ldrh	r2, [r7, #2]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004fe8:	e003      	b.n	8004ff2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004fea:	887b      	ldrh	r3, [r7, #2]
 8004fec:	041a      	lsls	r2, r3, #16
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	619a      	str	r2, [r3, #24]
}
 8004ff2:	bf00      	nop
 8004ff4:	370c      	adds	r7, #12
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr
	...

08005000 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b082      	sub	sp, #8
 8005004:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005006:	2300      	movs	r3, #0
 8005008:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800500a:	2300      	movs	r3, #0
 800500c:	603b      	str	r3, [r7, #0]
 800500e:	4b20      	ldr	r3, [pc, #128]	; (8005090 <HAL_PWREx_EnableOverDrive+0x90>)
 8005010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005012:	4a1f      	ldr	r2, [pc, #124]	; (8005090 <HAL_PWREx_EnableOverDrive+0x90>)
 8005014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005018:	6413      	str	r3, [r2, #64]	; 0x40
 800501a:	4b1d      	ldr	r3, [pc, #116]	; (8005090 <HAL_PWREx_EnableOverDrive+0x90>)
 800501c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005022:	603b      	str	r3, [r7, #0]
 8005024:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005026:	4b1b      	ldr	r3, [pc, #108]	; (8005094 <HAL_PWREx_EnableOverDrive+0x94>)
 8005028:	2201      	movs	r2, #1
 800502a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800502c:	f7ff fd48 	bl	8004ac0 <HAL_GetTick>
 8005030:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005032:	e009      	b.n	8005048 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005034:	f7ff fd44 	bl	8004ac0 <HAL_GetTick>
 8005038:	4602      	mov	r2, r0
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005042:	d901      	bls.n	8005048 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	e01f      	b.n	8005088 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005048:	4b13      	ldr	r3, [pc, #76]	; (8005098 <HAL_PWREx_EnableOverDrive+0x98>)
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005054:	d1ee      	bne.n	8005034 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005056:	4b11      	ldr	r3, [pc, #68]	; (800509c <HAL_PWREx_EnableOverDrive+0x9c>)
 8005058:	2201      	movs	r2, #1
 800505a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800505c:	f7ff fd30 	bl	8004ac0 <HAL_GetTick>
 8005060:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005062:	e009      	b.n	8005078 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005064:	f7ff fd2c 	bl	8004ac0 <HAL_GetTick>
 8005068:	4602      	mov	r2, r0
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005072:	d901      	bls.n	8005078 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005074:	2303      	movs	r3, #3
 8005076:	e007      	b.n	8005088 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005078:	4b07      	ldr	r3, [pc, #28]	; (8005098 <HAL_PWREx_EnableOverDrive+0x98>)
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005080:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005084:	d1ee      	bne.n	8005064 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005086:	2300      	movs	r3, #0
}
 8005088:	4618      	mov	r0, r3
 800508a:	3708      	adds	r7, #8
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}
 8005090:	40023800 	.word	0x40023800
 8005094:	420e0040 	.word	0x420e0040
 8005098:	40007000 	.word	0x40007000
 800509c:	420e0044 	.word	0x420e0044

080050a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d101      	bne.n	80050b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	e0cc      	b.n	800524e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050b4:	4b68      	ldr	r3, [pc, #416]	; (8005258 <HAL_RCC_ClockConfig+0x1b8>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 030f 	and.w	r3, r3, #15
 80050bc:	683a      	ldr	r2, [r7, #0]
 80050be:	429a      	cmp	r2, r3
 80050c0:	d90c      	bls.n	80050dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050c2:	4b65      	ldr	r3, [pc, #404]	; (8005258 <HAL_RCC_ClockConfig+0x1b8>)
 80050c4:	683a      	ldr	r2, [r7, #0]
 80050c6:	b2d2      	uxtb	r2, r2
 80050c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050ca:	4b63      	ldr	r3, [pc, #396]	; (8005258 <HAL_RCC_ClockConfig+0x1b8>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 030f 	and.w	r3, r3, #15
 80050d2:	683a      	ldr	r2, [r7, #0]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d001      	beq.n	80050dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e0b8      	b.n	800524e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 0302 	and.w	r3, r3, #2
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d020      	beq.n	800512a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 0304 	and.w	r3, r3, #4
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d005      	beq.n	8005100 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050f4:	4b59      	ldr	r3, [pc, #356]	; (800525c <HAL_RCC_ClockConfig+0x1bc>)
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	4a58      	ldr	r2, [pc, #352]	; (800525c <HAL_RCC_ClockConfig+0x1bc>)
 80050fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80050fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0308 	and.w	r3, r3, #8
 8005108:	2b00      	cmp	r3, #0
 800510a:	d005      	beq.n	8005118 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800510c:	4b53      	ldr	r3, [pc, #332]	; (800525c <HAL_RCC_ClockConfig+0x1bc>)
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	4a52      	ldr	r2, [pc, #328]	; (800525c <HAL_RCC_ClockConfig+0x1bc>)
 8005112:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005116:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005118:	4b50      	ldr	r3, [pc, #320]	; (800525c <HAL_RCC_ClockConfig+0x1bc>)
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	494d      	ldr	r1, [pc, #308]	; (800525c <HAL_RCC_ClockConfig+0x1bc>)
 8005126:	4313      	orrs	r3, r2
 8005128:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0301 	and.w	r3, r3, #1
 8005132:	2b00      	cmp	r3, #0
 8005134:	d044      	beq.n	80051c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	2b01      	cmp	r3, #1
 800513c:	d107      	bne.n	800514e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800513e:	4b47      	ldr	r3, [pc, #284]	; (800525c <HAL_RCC_ClockConfig+0x1bc>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005146:	2b00      	cmp	r3, #0
 8005148:	d119      	bne.n	800517e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e07f      	b.n	800524e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	2b02      	cmp	r3, #2
 8005154:	d003      	beq.n	800515e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800515a:	2b03      	cmp	r3, #3
 800515c:	d107      	bne.n	800516e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800515e:	4b3f      	ldr	r3, [pc, #252]	; (800525c <HAL_RCC_ClockConfig+0x1bc>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005166:	2b00      	cmp	r3, #0
 8005168:	d109      	bne.n	800517e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e06f      	b.n	800524e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800516e:	4b3b      	ldr	r3, [pc, #236]	; (800525c <HAL_RCC_ClockConfig+0x1bc>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 0302 	and.w	r3, r3, #2
 8005176:	2b00      	cmp	r3, #0
 8005178:	d101      	bne.n	800517e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e067      	b.n	800524e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800517e:	4b37      	ldr	r3, [pc, #220]	; (800525c <HAL_RCC_ClockConfig+0x1bc>)
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	f023 0203 	bic.w	r2, r3, #3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	4934      	ldr	r1, [pc, #208]	; (800525c <HAL_RCC_ClockConfig+0x1bc>)
 800518c:	4313      	orrs	r3, r2
 800518e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005190:	f7ff fc96 	bl	8004ac0 <HAL_GetTick>
 8005194:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005196:	e00a      	b.n	80051ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005198:	f7ff fc92 	bl	8004ac0 <HAL_GetTick>
 800519c:	4602      	mov	r2, r0
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d901      	bls.n	80051ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80051aa:	2303      	movs	r3, #3
 80051ac:	e04f      	b.n	800524e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051ae:	4b2b      	ldr	r3, [pc, #172]	; (800525c <HAL_RCC_ClockConfig+0x1bc>)
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	f003 020c 	and.w	r2, r3, #12
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	429a      	cmp	r2, r3
 80051be:	d1eb      	bne.n	8005198 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80051c0:	4b25      	ldr	r3, [pc, #148]	; (8005258 <HAL_RCC_ClockConfig+0x1b8>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 030f 	and.w	r3, r3, #15
 80051c8:	683a      	ldr	r2, [r7, #0]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d20c      	bcs.n	80051e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051ce:	4b22      	ldr	r3, [pc, #136]	; (8005258 <HAL_RCC_ClockConfig+0x1b8>)
 80051d0:	683a      	ldr	r2, [r7, #0]
 80051d2:	b2d2      	uxtb	r2, r2
 80051d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051d6:	4b20      	ldr	r3, [pc, #128]	; (8005258 <HAL_RCC_ClockConfig+0x1b8>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 030f 	and.w	r3, r3, #15
 80051de:	683a      	ldr	r2, [r7, #0]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d001      	beq.n	80051e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e032      	b.n	800524e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 0304 	and.w	r3, r3, #4
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d008      	beq.n	8005206 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051f4:	4b19      	ldr	r3, [pc, #100]	; (800525c <HAL_RCC_ClockConfig+0x1bc>)
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	4916      	ldr	r1, [pc, #88]	; (800525c <HAL_RCC_ClockConfig+0x1bc>)
 8005202:	4313      	orrs	r3, r2
 8005204:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 0308 	and.w	r3, r3, #8
 800520e:	2b00      	cmp	r3, #0
 8005210:	d009      	beq.n	8005226 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005212:	4b12      	ldr	r3, [pc, #72]	; (800525c <HAL_RCC_ClockConfig+0x1bc>)
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	00db      	lsls	r3, r3, #3
 8005220:	490e      	ldr	r1, [pc, #56]	; (800525c <HAL_RCC_ClockConfig+0x1bc>)
 8005222:	4313      	orrs	r3, r2
 8005224:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005226:	f000 f855 	bl	80052d4 <HAL_RCC_GetSysClockFreq>
 800522a:	4602      	mov	r2, r0
 800522c:	4b0b      	ldr	r3, [pc, #44]	; (800525c <HAL_RCC_ClockConfig+0x1bc>)
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	091b      	lsrs	r3, r3, #4
 8005232:	f003 030f 	and.w	r3, r3, #15
 8005236:	490a      	ldr	r1, [pc, #40]	; (8005260 <HAL_RCC_ClockConfig+0x1c0>)
 8005238:	5ccb      	ldrb	r3, [r1, r3]
 800523a:	fa22 f303 	lsr.w	r3, r2, r3
 800523e:	4a09      	ldr	r2, [pc, #36]	; (8005264 <HAL_RCC_ClockConfig+0x1c4>)
 8005240:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005242:	4b09      	ldr	r3, [pc, #36]	; (8005268 <HAL_RCC_ClockConfig+0x1c8>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4618      	mov	r0, r3
 8005248:	f7ff fbf6 	bl	8004a38 <HAL_InitTick>

  return HAL_OK;
 800524c:	2300      	movs	r3, #0
}
 800524e:	4618      	mov	r0, r3
 8005250:	3710      	adds	r7, #16
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop
 8005258:	40023c00 	.word	0x40023c00
 800525c:	40023800 	.word	0x40023800
 8005260:	08007eec 	.word	0x08007eec
 8005264:	20000040 	.word	0x20000040
 8005268:	20000044 	.word	0x20000044

0800526c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800526c:	b480      	push	{r7}
 800526e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005270:	4b03      	ldr	r3, [pc, #12]	; (8005280 <HAL_RCC_GetHCLKFreq+0x14>)
 8005272:	681b      	ldr	r3, [r3, #0]
}
 8005274:	4618      	mov	r0, r3
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop
 8005280:	20000040 	.word	0x20000040

08005284 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005288:	f7ff fff0 	bl	800526c <HAL_RCC_GetHCLKFreq>
 800528c:	4602      	mov	r2, r0
 800528e:	4b05      	ldr	r3, [pc, #20]	; (80052a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	0a9b      	lsrs	r3, r3, #10
 8005294:	f003 0307 	and.w	r3, r3, #7
 8005298:	4903      	ldr	r1, [pc, #12]	; (80052a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800529a:	5ccb      	ldrb	r3, [r1, r3]
 800529c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	bd80      	pop	{r7, pc}
 80052a4:	40023800 	.word	0x40023800
 80052a8:	08007efc 	.word	0x08007efc

080052ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80052b0:	f7ff ffdc 	bl	800526c <HAL_RCC_GetHCLKFreq>
 80052b4:	4602      	mov	r2, r0
 80052b6:	4b05      	ldr	r3, [pc, #20]	; (80052cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	0b5b      	lsrs	r3, r3, #13
 80052bc:	f003 0307 	and.w	r3, r3, #7
 80052c0:	4903      	ldr	r1, [pc, #12]	; (80052d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80052c2:	5ccb      	ldrb	r3, [r1, r3]
 80052c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	40023800 	.word	0x40023800
 80052d0:	08007efc 	.word	0x08007efc

080052d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052d8:	b0ae      	sub	sp, #184	; 0xb8
 80052da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80052dc:	2300      	movs	r3, #0
 80052de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80052e2:	2300      	movs	r3, #0
 80052e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80052e8:	2300      	movs	r3, #0
 80052ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80052ee:	2300      	movs	r3, #0
 80052f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80052f4:	2300      	movs	r3, #0
 80052f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80052fa:	4bcb      	ldr	r3, [pc, #812]	; (8005628 <HAL_RCC_GetSysClockFreq+0x354>)
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	f003 030c 	and.w	r3, r3, #12
 8005302:	2b0c      	cmp	r3, #12
 8005304:	f200 8206 	bhi.w	8005714 <HAL_RCC_GetSysClockFreq+0x440>
 8005308:	a201      	add	r2, pc, #4	; (adr r2, 8005310 <HAL_RCC_GetSysClockFreq+0x3c>)
 800530a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800530e:	bf00      	nop
 8005310:	08005345 	.word	0x08005345
 8005314:	08005715 	.word	0x08005715
 8005318:	08005715 	.word	0x08005715
 800531c:	08005715 	.word	0x08005715
 8005320:	0800534d 	.word	0x0800534d
 8005324:	08005715 	.word	0x08005715
 8005328:	08005715 	.word	0x08005715
 800532c:	08005715 	.word	0x08005715
 8005330:	08005355 	.word	0x08005355
 8005334:	08005715 	.word	0x08005715
 8005338:	08005715 	.word	0x08005715
 800533c:	08005715 	.word	0x08005715
 8005340:	08005545 	.word	0x08005545
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005344:	4bb9      	ldr	r3, [pc, #740]	; (800562c <HAL_RCC_GetSysClockFreq+0x358>)
 8005346:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800534a:	e1e7      	b.n	800571c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800534c:	4bb8      	ldr	r3, [pc, #736]	; (8005630 <HAL_RCC_GetSysClockFreq+0x35c>)
 800534e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005352:	e1e3      	b.n	800571c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005354:	4bb4      	ldr	r3, [pc, #720]	; (8005628 <HAL_RCC_GetSysClockFreq+0x354>)
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800535c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005360:	4bb1      	ldr	r3, [pc, #708]	; (8005628 <HAL_RCC_GetSysClockFreq+0x354>)
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005368:	2b00      	cmp	r3, #0
 800536a:	d071      	beq.n	8005450 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800536c:	4bae      	ldr	r3, [pc, #696]	; (8005628 <HAL_RCC_GetSysClockFreq+0x354>)
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	099b      	lsrs	r3, r3, #6
 8005372:	2200      	movs	r2, #0
 8005374:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005378:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800537c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005380:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005384:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005388:	2300      	movs	r3, #0
 800538a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800538e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005392:	4622      	mov	r2, r4
 8005394:	462b      	mov	r3, r5
 8005396:	f04f 0000 	mov.w	r0, #0
 800539a:	f04f 0100 	mov.w	r1, #0
 800539e:	0159      	lsls	r1, r3, #5
 80053a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053a4:	0150      	lsls	r0, r2, #5
 80053a6:	4602      	mov	r2, r0
 80053a8:	460b      	mov	r3, r1
 80053aa:	4621      	mov	r1, r4
 80053ac:	1a51      	subs	r1, r2, r1
 80053ae:	6439      	str	r1, [r7, #64]	; 0x40
 80053b0:	4629      	mov	r1, r5
 80053b2:	eb63 0301 	sbc.w	r3, r3, r1
 80053b6:	647b      	str	r3, [r7, #68]	; 0x44
 80053b8:	f04f 0200 	mov.w	r2, #0
 80053bc:	f04f 0300 	mov.w	r3, #0
 80053c0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80053c4:	4649      	mov	r1, r9
 80053c6:	018b      	lsls	r3, r1, #6
 80053c8:	4641      	mov	r1, r8
 80053ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80053ce:	4641      	mov	r1, r8
 80053d0:	018a      	lsls	r2, r1, #6
 80053d2:	4641      	mov	r1, r8
 80053d4:	1a51      	subs	r1, r2, r1
 80053d6:	63b9      	str	r1, [r7, #56]	; 0x38
 80053d8:	4649      	mov	r1, r9
 80053da:	eb63 0301 	sbc.w	r3, r3, r1
 80053de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053e0:	f04f 0200 	mov.w	r2, #0
 80053e4:	f04f 0300 	mov.w	r3, #0
 80053e8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80053ec:	4649      	mov	r1, r9
 80053ee:	00cb      	lsls	r3, r1, #3
 80053f0:	4641      	mov	r1, r8
 80053f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053f6:	4641      	mov	r1, r8
 80053f8:	00ca      	lsls	r2, r1, #3
 80053fa:	4610      	mov	r0, r2
 80053fc:	4619      	mov	r1, r3
 80053fe:	4603      	mov	r3, r0
 8005400:	4622      	mov	r2, r4
 8005402:	189b      	adds	r3, r3, r2
 8005404:	633b      	str	r3, [r7, #48]	; 0x30
 8005406:	462b      	mov	r3, r5
 8005408:	460a      	mov	r2, r1
 800540a:	eb42 0303 	adc.w	r3, r2, r3
 800540e:	637b      	str	r3, [r7, #52]	; 0x34
 8005410:	f04f 0200 	mov.w	r2, #0
 8005414:	f04f 0300 	mov.w	r3, #0
 8005418:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800541c:	4629      	mov	r1, r5
 800541e:	024b      	lsls	r3, r1, #9
 8005420:	4621      	mov	r1, r4
 8005422:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005426:	4621      	mov	r1, r4
 8005428:	024a      	lsls	r2, r1, #9
 800542a:	4610      	mov	r0, r2
 800542c:	4619      	mov	r1, r3
 800542e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005432:	2200      	movs	r2, #0
 8005434:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005438:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800543c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8005440:	f7fa fee2 	bl	8000208 <__aeabi_uldivmod>
 8005444:	4602      	mov	r2, r0
 8005446:	460b      	mov	r3, r1
 8005448:	4613      	mov	r3, r2
 800544a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800544e:	e067      	b.n	8005520 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005450:	4b75      	ldr	r3, [pc, #468]	; (8005628 <HAL_RCC_GetSysClockFreq+0x354>)
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	099b      	lsrs	r3, r3, #6
 8005456:	2200      	movs	r2, #0
 8005458:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800545c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8005460:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005464:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005468:	67bb      	str	r3, [r7, #120]	; 0x78
 800546a:	2300      	movs	r3, #0
 800546c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800546e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8005472:	4622      	mov	r2, r4
 8005474:	462b      	mov	r3, r5
 8005476:	f04f 0000 	mov.w	r0, #0
 800547a:	f04f 0100 	mov.w	r1, #0
 800547e:	0159      	lsls	r1, r3, #5
 8005480:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005484:	0150      	lsls	r0, r2, #5
 8005486:	4602      	mov	r2, r0
 8005488:	460b      	mov	r3, r1
 800548a:	4621      	mov	r1, r4
 800548c:	1a51      	subs	r1, r2, r1
 800548e:	62b9      	str	r1, [r7, #40]	; 0x28
 8005490:	4629      	mov	r1, r5
 8005492:	eb63 0301 	sbc.w	r3, r3, r1
 8005496:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005498:	f04f 0200 	mov.w	r2, #0
 800549c:	f04f 0300 	mov.w	r3, #0
 80054a0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80054a4:	4649      	mov	r1, r9
 80054a6:	018b      	lsls	r3, r1, #6
 80054a8:	4641      	mov	r1, r8
 80054aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80054ae:	4641      	mov	r1, r8
 80054b0:	018a      	lsls	r2, r1, #6
 80054b2:	4641      	mov	r1, r8
 80054b4:	ebb2 0a01 	subs.w	sl, r2, r1
 80054b8:	4649      	mov	r1, r9
 80054ba:	eb63 0b01 	sbc.w	fp, r3, r1
 80054be:	f04f 0200 	mov.w	r2, #0
 80054c2:	f04f 0300 	mov.w	r3, #0
 80054c6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80054ca:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80054ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80054d2:	4692      	mov	sl, r2
 80054d4:	469b      	mov	fp, r3
 80054d6:	4623      	mov	r3, r4
 80054d8:	eb1a 0303 	adds.w	r3, sl, r3
 80054dc:	623b      	str	r3, [r7, #32]
 80054de:	462b      	mov	r3, r5
 80054e0:	eb4b 0303 	adc.w	r3, fp, r3
 80054e4:	627b      	str	r3, [r7, #36]	; 0x24
 80054e6:	f04f 0200 	mov.w	r2, #0
 80054ea:	f04f 0300 	mov.w	r3, #0
 80054ee:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80054f2:	4629      	mov	r1, r5
 80054f4:	028b      	lsls	r3, r1, #10
 80054f6:	4621      	mov	r1, r4
 80054f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80054fc:	4621      	mov	r1, r4
 80054fe:	028a      	lsls	r2, r1, #10
 8005500:	4610      	mov	r0, r2
 8005502:	4619      	mov	r1, r3
 8005504:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005508:	2200      	movs	r2, #0
 800550a:	673b      	str	r3, [r7, #112]	; 0x70
 800550c:	677a      	str	r2, [r7, #116]	; 0x74
 800550e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8005512:	f7fa fe79 	bl	8000208 <__aeabi_uldivmod>
 8005516:	4602      	mov	r2, r0
 8005518:	460b      	mov	r3, r1
 800551a:	4613      	mov	r3, r2
 800551c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005520:	4b41      	ldr	r3, [pc, #260]	; (8005628 <HAL_RCC_GetSysClockFreq+0x354>)
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	0c1b      	lsrs	r3, r3, #16
 8005526:	f003 0303 	and.w	r3, r3, #3
 800552a:	3301      	adds	r3, #1
 800552c:	005b      	lsls	r3, r3, #1
 800552e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8005532:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005536:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800553a:	fbb2 f3f3 	udiv	r3, r2, r3
 800553e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005542:	e0eb      	b.n	800571c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005544:	4b38      	ldr	r3, [pc, #224]	; (8005628 <HAL_RCC_GetSysClockFreq+0x354>)
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800554c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005550:	4b35      	ldr	r3, [pc, #212]	; (8005628 <HAL_RCC_GetSysClockFreq+0x354>)
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005558:	2b00      	cmp	r3, #0
 800555a:	d06b      	beq.n	8005634 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800555c:	4b32      	ldr	r3, [pc, #200]	; (8005628 <HAL_RCC_GetSysClockFreq+0x354>)
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	099b      	lsrs	r3, r3, #6
 8005562:	2200      	movs	r2, #0
 8005564:	66bb      	str	r3, [r7, #104]	; 0x68
 8005566:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005568:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800556a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800556e:	663b      	str	r3, [r7, #96]	; 0x60
 8005570:	2300      	movs	r3, #0
 8005572:	667b      	str	r3, [r7, #100]	; 0x64
 8005574:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8005578:	4622      	mov	r2, r4
 800557a:	462b      	mov	r3, r5
 800557c:	f04f 0000 	mov.w	r0, #0
 8005580:	f04f 0100 	mov.w	r1, #0
 8005584:	0159      	lsls	r1, r3, #5
 8005586:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800558a:	0150      	lsls	r0, r2, #5
 800558c:	4602      	mov	r2, r0
 800558e:	460b      	mov	r3, r1
 8005590:	4621      	mov	r1, r4
 8005592:	1a51      	subs	r1, r2, r1
 8005594:	61b9      	str	r1, [r7, #24]
 8005596:	4629      	mov	r1, r5
 8005598:	eb63 0301 	sbc.w	r3, r3, r1
 800559c:	61fb      	str	r3, [r7, #28]
 800559e:	f04f 0200 	mov.w	r2, #0
 80055a2:	f04f 0300 	mov.w	r3, #0
 80055a6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80055aa:	4659      	mov	r1, fp
 80055ac:	018b      	lsls	r3, r1, #6
 80055ae:	4651      	mov	r1, sl
 80055b0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80055b4:	4651      	mov	r1, sl
 80055b6:	018a      	lsls	r2, r1, #6
 80055b8:	4651      	mov	r1, sl
 80055ba:	ebb2 0801 	subs.w	r8, r2, r1
 80055be:	4659      	mov	r1, fp
 80055c0:	eb63 0901 	sbc.w	r9, r3, r1
 80055c4:	f04f 0200 	mov.w	r2, #0
 80055c8:	f04f 0300 	mov.w	r3, #0
 80055cc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80055d0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80055d4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80055d8:	4690      	mov	r8, r2
 80055da:	4699      	mov	r9, r3
 80055dc:	4623      	mov	r3, r4
 80055de:	eb18 0303 	adds.w	r3, r8, r3
 80055e2:	613b      	str	r3, [r7, #16]
 80055e4:	462b      	mov	r3, r5
 80055e6:	eb49 0303 	adc.w	r3, r9, r3
 80055ea:	617b      	str	r3, [r7, #20]
 80055ec:	f04f 0200 	mov.w	r2, #0
 80055f0:	f04f 0300 	mov.w	r3, #0
 80055f4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80055f8:	4629      	mov	r1, r5
 80055fa:	024b      	lsls	r3, r1, #9
 80055fc:	4621      	mov	r1, r4
 80055fe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005602:	4621      	mov	r1, r4
 8005604:	024a      	lsls	r2, r1, #9
 8005606:	4610      	mov	r0, r2
 8005608:	4619      	mov	r1, r3
 800560a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800560e:	2200      	movs	r2, #0
 8005610:	65bb      	str	r3, [r7, #88]	; 0x58
 8005612:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005614:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005618:	f7fa fdf6 	bl	8000208 <__aeabi_uldivmod>
 800561c:	4602      	mov	r2, r0
 800561e:	460b      	mov	r3, r1
 8005620:	4613      	mov	r3, r2
 8005622:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005626:	e065      	b.n	80056f4 <HAL_RCC_GetSysClockFreq+0x420>
 8005628:	40023800 	.word	0x40023800
 800562c:	00f42400 	.word	0x00f42400
 8005630:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005634:	4b3d      	ldr	r3, [pc, #244]	; (800572c <HAL_RCC_GetSysClockFreq+0x458>)
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	099b      	lsrs	r3, r3, #6
 800563a:	2200      	movs	r2, #0
 800563c:	4618      	mov	r0, r3
 800563e:	4611      	mov	r1, r2
 8005640:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005644:	653b      	str	r3, [r7, #80]	; 0x50
 8005646:	2300      	movs	r3, #0
 8005648:	657b      	str	r3, [r7, #84]	; 0x54
 800564a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800564e:	4642      	mov	r2, r8
 8005650:	464b      	mov	r3, r9
 8005652:	f04f 0000 	mov.w	r0, #0
 8005656:	f04f 0100 	mov.w	r1, #0
 800565a:	0159      	lsls	r1, r3, #5
 800565c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005660:	0150      	lsls	r0, r2, #5
 8005662:	4602      	mov	r2, r0
 8005664:	460b      	mov	r3, r1
 8005666:	4641      	mov	r1, r8
 8005668:	1a51      	subs	r1, r2, r1
 800566a:	60b9      	str	r1, [r7, #8]
 800566c:	4649      	mov	r1, r9
 800566e:	eb63 0301 	sbc.w	r3, r3, r1
 8005672:	60fb      	str	r3, [r7, #12]
 8005674:	f04f 0200 	mov.w	r2, #0
 8005678:	f04f 0300 	mov.w	r3, #0
 800567c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005680:	4659      	mov	r1, fp
 8005682:	018b      	lsls	r3, r1, #6
 8005684:	4651      	mov	r1, sl
 8005686:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800568a:	4651      	mov	r1, sl
 800568c:	018a      	lsls	r2, r1, #6
 800568e:	4651      	mov	r1, sl
 8005690:	1a54      	subs	r4, r2, r1
 8005692:	4659      	mov	r1, fp
 8005694:	eb63 0501 	sbc.w	r5, r3, r1
 8005698:	f04f 0200 	mov.w	r2, #0
 800569c:	f04f 0300 	mov.w	r3, #0
 80056a0:	00eb      	lsls	r3, r5, #3
 80056a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80056a6:	00e2      	lsls	r2, r4, #3
 80056a8:	4614      	mov	r4, r2
 80056aa:	461d      	mov	r5, r3
 80056ac:	4643      	mov	r3, r8
 80056ae:	18e3      	adds	r3, r4, r3
 80056b0:	603b      	str	r3, [r7, #0]
 80056b2:	464b      	mov	r3, r9
 80056b4:	eb45 0303 	adc.w	r3, r5, r3
 80056b8:	607b      	str	r3, [r7, #4]
 80056ba:	f04f 0200 	mov.w	r2, #0
 80056be:	f04f 0300 	mov.w	r3, #0
 80056c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80056c6:	4629      	mov	r1, r5
 80056c8:	028b      	lsls	r3, r1, #10
 80056ca:	4621      	mov	r1, r4
 80056cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80056d0:	4621      	mov	r1, r4
 80056d2:	028a      	lsls	r2, r1, #10
 80056d4:	4610      	mov	r0, r2
 80056d6:	4619      	mov	r1, r3
 80056d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80056dc:	2200      	movs	r2, #0
 80056de:	64bb      	str	r3, [r7, #72]	; 0x48
 80056e0:	64fa      	str	r2, [r7, #76]	; 0x4c
 80056e2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80056e6:	f7fa fd8f 	bl	8000208 <__aeabi_uldivmod>
 80056ea:	4602      	mov	r2, r0
 80056ec:	460b      	mov	r3, r1
 80056ee:	4613      	mov	r3, r2
 80056f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80056f4:	4b0d      	ldr	r3, [pc, #52]	; (800572c <HAL_RCC_GetSysClockFreq+0x458>)
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	0f1b      	lsrs	r3, r3, #28
 80056fa:	f003 0307 	and.w	r3, r3, #7
 80056fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8005702:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005706:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800570a:	fbb2 f3f3 	udiv	r3, r2, r3
 800570e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005712:	e003      	b.n	800571c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005714:	4b06      	ldr	r3, [pc, #24]	; (8005730 <HAL_RCC_GetSysClockFreq+0x45c>)
 8005716:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800571a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800571c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8005720:	4618      	mov	r0, r3
 8005722:	37b8      	adds	r7, #184	; 0xb8
 8005724:	46bd      	mov	sp, r7
 8005726:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800572a:	bf00      	nop
 800572c:	40023800 	.word	0x40023800
 8005730:	00f42400 	.word	0x00f42400

08005734 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b086      	sub	sp, #24
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d101      	bne.n	8005746 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e28d      	b.n	8005c62 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 0301 	and.w	r3, r3, #1
 800574e:	2b00      	cmp	r3, #0
 8005750:	f000 8083 	beq.w	800585a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005754:	4b94      	ldr	r3, [pc, #592]	; (80059a8 <HAL_RCC_OscConfig+0x274>)
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	f003 030c 	and.w	r3, r3, #12
 800575c:	2b04      	cmp	r3, #4
 800575e:	d019      	beq.n	8005794 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005760:	4b91      	ldr	r3, [pc, #580]	; (80059a8 <HAL_RCC_OscConfig+0x274>)
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005768:	2b08      	cmp	r3, #8
 800576a:	d106      	bne.n	800577a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800576c:	4b8e      	ldr	r3, [pc, #568]	; (80059a8 <HAL_RCC_OscConfig+0x274>)
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005774:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005778:	d00c      	beq.n	8005794 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800577a:	4b8b      	ldr	r3, [pc, #556]	; (80059a8 <HAL_RCC_OscConfig+0x274>)
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005782:	2b0c      	cmp	r3, #12
 8005784:	d112      	bne.n	80057ac <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005786:	4b88      	ldr	r3, [pc, #544]	; (80059a8 <HAL_RCC_OscConfig+0x274>)
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800578e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005792:	d10b      	bne.n	80057ac <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005794:	4b84      	ldr	r3, [pc, #528]	; (80059a8 <HAL_RCC_OscConfig+0x274>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800579c:	2b00      	cmp	r3, #0
 800579e:	d05b      	beq.n	8005858 <HAL_RCC_OscConfig+0x124>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d157      	bne.n	8005858 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	e25a      	b.n	8005c62 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057b4:	d106      	bne.n	80057c4 <HAL_RCC_OscConfig+0x90>
 80057b6:	4b7c      	ldr	r3, [pc, #496]	; (80059a8 <HAL_RCC_OscConfig+0x274>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a7b      	ldr	r2, [pc, #492]	; (80059a8 <HAL_RCC_OscConfig+0x274>)
 80057bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057c0:	6013      	str	r3, [r2, #0]
 80057c2:	e01d      	b.n	8005800 <HAL_RCC_OscConfig+0xcc>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80057cc:	d10c      	bne.n	80057e8 <HAL_RCC_OscConfig+0xb4>
 80057ce:	4b76      	ldr	r3, [pc, #472]	; (80059a8 <HAL_RCC_OscConfig+0x274>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a75      	ldr	r2, [pc, #468]	; (80059a8 <HAL_RCC_OscConfig+0x274>)
 80057d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057d8:	6013      	str	r3, [r2, #0]
 80057da:	4b73      	ldr	r3, [pc, #460]	; (80059a8 <HAL_RCC_OscConfig+0x274>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a72      	ldr	r2, [pc, #456]	; (80059a8 <HAL_RCC_OscConfig+0x274>)
 80057e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057e4:	6013      	str	r3, [r2, #0]
 80057e6:	e00b      	b.n	8005800 <HAL_RCC_OscConfig+0xcc>
 80057e8:	4b6f      	ldr	r3, [pc, #444]	; (80059a8 <HAL_RCC_OscConfig+0x274>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a6e      	ldr	r2, [pc, #440]	; (80059a8 <HAL_RCC_OscConfig+0x274>)
 80057ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057f2:	6013      	str	r3, [r2, #0]
 80057f4:	4b6c      	ldr	r3, [pc, #432]	; (80059a8 <HAL_RCC_OscConfig+0x274>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a6b      	ldr	r2, [pc, #428]	; (80059a8 <HAL_RCC_OscConfig+0x274>)
 80057fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d013      	beq.n	8005830 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005808:	f7ff f95a 	bl	8004ac0 <HAL_GetTick>
 800580c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800580e:	e008      	b.n	8005822 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005810:	f7ff f956 	bl	8004ac0 <HAL_GetTick>
 8005814:	4602      	mov	r2, r0
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	2b64      	cmp	r3, #100	; 0x64
 800581c:	d901      	bls.n	8005822 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800581e:	2303      	movs	r3, #3
 8005820:	e21f      	b.n	8005c62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005822:	4b61      	ldr	r3, [pc, #388]	; (80059a8 <HAL_RCC_OscConfig+0x274>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800582a:	2b00      	cmp	r3, #0
 800582c:	d0f0      	beq.n	8005810 <HAL_RCC_OscConfig+0xdc>
 800582e:	e014      	b.n	800585a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005830:	f7ff f946 	bl	8004ac0 <HAL_GetTick>
 8005834:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005836:	e008      	b.n	800584a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005838:	f7ff f942 	bl	8004ac0 <HAL_GetTick>
 800583c:	4602      	mov	r2, r0
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	2b64      	cmp	r3, #100	; 0x64
 8005844:	d901      	bls.n	800584a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005846:	2303      	movs	r3, #3
 8005848:	e20b      	b.n	8005c62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800584a:	4b57      	ldr	r3, [pc, #348]	; (80059a8 <HAL_RCC_OscConfig+0x274>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005852:	2b00      	cmp	r3, #0
 8005854:	d1f0      	bne.n	8005838 <HAL_RCC_OscConfig+0x104>
 8005856:	e000      	b.n	800585a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005858:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 0302 	and.w	r3, r3, #2
 8005862:	2b00      	cmp	r3, #0
 8005864:	d06f      	beq.n	8005946 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005866:	4b50      	ldr	r3, [pc, #320]	; (80059a8 <HAL_RCC_OscConfig+0x274>)
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	f003 030c 	and.w	r3, r3, #12
 800586e:	2b00      	cmp	r3, #0
 8005870:	d017      	beq.n	80058a2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005872:	4b4d      	ldr	r3, [pc, #308]	; (80059a8 <HAL_RCC_OscConfig+0x274>)
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800587a:	2b08      	cmp	r3, #8
 800587c:	d105      	bne.n	800588a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800587e:	4b4a      	ldr	r3, [pc, #296]	; (80059a8 <HAL_RCC_OscConfig+0x274>)
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005886:	2b00      	cmp	r3, #0
 8005888:	d00b      	beq.n	80058a2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800588a:	4b47      	ldr	r3, [pc, #284]	; (80059a8 <HAL_RCC_OscConfig+0x274>)
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005892:	2b0c      	cmp	r3, #12
 8005894:	d11c      	bne.n	80058d0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005896:	4b44      	ldr	r3, [pc, #272]	; (80059a8 <HAL_RCC_OscConfig+0x274>)
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d116      	bne.n	80058d0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058a2:	4b41      	ldr	r3, [pc, #260]	; (80059a8 <HAL_RCC_OscConfig+0x274>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 0302 	and.w	r3, r3, #2
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d005      	beq.n	80058ba <HAL_RCC_OscConfig+0x186>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d001      	beq.n	80058ba <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e1d3      	b.n	8005c62 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058ba:	4b3b      	ldr	r3, [pc, #236]	; (80059a8 <HAL_RCC_OscConfig+0x274>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	00db      	lsls	r3, r3, #3
 80058c8:	4937      	ldr	r1, [pc, #220]	; (80059a8 <HAL_RCC_OscConfig+0x274>)
 80058ca:	4313      	orrs	r3, r2
 80058cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058ce:	e03a      	b.n	8005946 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d020      	beq.n	800591a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058d8:	4b34      	ldr	r3, [pc, #208]	; (80059ac <HAL_RCC_OscConfig+0x278>)
 80058da:	2201      	movs	r2, #1
 80058dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058de:	f7ff f8ef 	bl	8004ac0 <HAL_GetTick>
 80058e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058e4:	e008      	b.n	80058f8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80058e6:	f7ff f8eb 	bl	8004ac0 <HAL_GetTick>
 80058ea:	4602      	mov	r2, r0
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	1ad3      	subs	r3, r2, r3
 80058f0:	2b02      	cmp	r3, #2
 80058f2:	d901      	bls.n	80058f8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80058f4:	2303      	movs	r3, #3
 80058f6:	e1b4      	b.n	8005c62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058f8:	4b2b      	ldr	r3, [pc, #172]	; (80059a8 <HAL_RCC_OscConfig+0x274>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0302 	and.w	r3, r3, #2
 8005900:	2b00      	cmp	r3, #0
 8005902:	d0f0      	beq.n	80058e6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005904:	4b28      	ldr	r3, [pc, #160]	; (80059a8 <HAL_RCC_OscConfig+0x274>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	00db      	lsls	r3, r3, #3
 8005912:	4925      	ldr	r1, [pc, #148]	; (80059a8 <HAL_RCC_OscConfig+0x274>)
 8005914:	4313      	orrs	r3, r2
 8005916:	600b      	str	r3, [r1, #0]
 8005918:	e015      	b.n	8005946 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800591a:	4b24      	ldr	r3, [pc, #144]	; (80059ac <HAL_RCC_OscConfig+0x278>)
 800591c:	2200      	movs	r2, #0
 800591e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005920:	f7ff f8ce 	bl	8004ac0 <HAL_GetTick>
 8005924:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005926:	e008      	b.n	800593a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005928:	f7ff f8ca 	bl	8004ac0 <HAL_GetTick>
 800592c:	4602      	mov	r2, r0
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	2b02      	cmp	r3, #2
 8005934:	d901      	bls.n	800593a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005936:	2303      	movs	r3, #3
 8005938:	e193      	b.n	8005c62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800593a:	4b1b      	ldr	r3, [pc, #108]	; (80059a8 <HAL_RCC_OscConfig+0x274>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 0302 	and.w	r3, r3, #2
 8005942:	2b00      	cmp	r3, #0
 8005944:	d1f0      	bne.n	8005928 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 0308 	and.w	r3, r3, #8
 800594e:	2b00      	cmp	r3, #0
 8005950:	d036      	beq.n	80059c0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	695b      	ldr	r3, [r3, #20]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d016      	beq.n	8005988 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800595a:	4b15      	ldr	r3, [pc, #84]	; (80059b0 <HAL_RCC_OscConfig+0x27c>)
 800595c:	2201      	movs	r2, #1
 800595e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005960:	f7ff f8ae 	bl	8004ac0 <HAL_GetTick>
 8005964:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005966:	e008      	b.n	800597a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005968:	f7ff f8aa 	bl	8004ac0 <HAL_GetTick>
 800596c:	4602      	mov	r2, r0
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	1ad3      	subs	r3, r2, r3
 8005972:	2b02      	cmp	r3, #2
 8005974:	d901      	bls.n	800597a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005976:	2303      	movs	r3, #3
 8005978:	e173      	b.n	8005c62 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800597a:	4b0b      	ldr	r3, [pc, #44]	; (80059a8 <HAL_RCC_OscConfig+0x274>)
 800597c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800597e:	f003 0302 	and.w	r3, r3, #2
 8005982:	2b00      	cmp	r3, #0
 8005984:	d0f0      	beq.n	8005968 <HAL_RCC_OscConfig+0x234>
 8005986:	e01b      	b.n	80059c0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005988:	4b09      	ldr	r3, [pc, #36]	; (80059b0 <HAL_RCC_OscConfig+0x27c>)
 800598a:	2200      	movs	r2, #0
 800598c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800598e:	f7ff f897 	bl	8004ac0 <HAL_GetTick>
 8005992:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005994:	e00e      	b.n	80059b4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005996:	f7ff f893 	bl	8004ac0 <HAL_GetTick>
 800599a:	4602      	mov	r2, r0
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	1ad3      	subs	r3, r2, r3
 80059a0:	2b02      	cmp	r3, #2
 80059a2:	d907      	bls.n	80059b4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80059a4:	2303      	movs	r3, #3
 80059a6:	e15c      	b.n	8005c62 <HAL_RCC_OscConfig+0x52e>
 80059a8:	40023800 	.word	0x40023800
 80059ac:	42470000 	.word	0x42470000
 80059b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059b4:	4b8a      	ldr	r3, [pc, #552]	; (8005be0 <HAL_RCC_OscConfig+0x4ac>)
 80059b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059b8:	f003 0302 	and.w	r3, r3, #2
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d1ea      	bne.n	8005996 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 0304 	and.w	r3, r3, #4
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	f000 8097 	beq.w	8005afc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059ce:	2300      	movs	r3, #0
 80059d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059d2:	4b83      	ldr	r3, [pc, #524]	; (8005be0 <HAL_RCC_OscConfig+0x4ac>)
 80059d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d10f      	bne.n	80059fe <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059de:	2300      	movs	r3, #0
 80059e0:	60bb      	str	r3, [r7, #8]
 80059e2:	4b7f      	ldr	r3, [pc, #508]	; (8005be0 <HAL_RCC_OscConfig+0x4ac>)
 80059e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e6:	4a7e      	ldr	r2, [pc, #504]	; (8005be0 <HAL_RCC_OscConfig+0x4ac>)
 80059e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059ec:	6413      	str	r3, [r2, #64]	; 0x40
 80059ee:	4b7c      	ldr	r3, [pc, #496]	; (8005be0 <HAL_RCC_OscConfig+0x4ac>)
 80059f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059f6:	60bb      	str	r3, [r7, #8]
 80059f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059fa:	2301      	movs	r3, #1
 80059fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059fe:	4b79      	ldr	r3, [pc, #484]	; (8005be4 <HAL_RCC_OscConfig+0x4b0>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d118      	bne.n	8005a3c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a0a:	4b76      	ldr	r3, [pc, #472]	; (8005be4 <HAL_RCC_OscConfig+0x4b0>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a75      	ldr	r2, [pc, #468]	; (8005be4 <HAL_RCC_OscConfig+0x4b0>)
 8005a10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a16:	f7ff f853 	bl	8004ac0 <HAL_GetTick>
 8005a1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a1c:	e008      	b.n	8005a30 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a1e:	f7ff f84f 	bl	8004ac0 <HAL_GetTick>
 8005a22:	4602      	mov	r2, r0
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	1ad3      	subs	r3, r2, r3
 8005a28:	2b02      	cmp	r3, #2
 8005a2a:	d901      	bls.n	8005a30 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	e118      	b.n	8005c62 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a30:	4b6c      	ldr	r3, [pc, #432]	; (8005be4 <HAL_RCC_OscConfig+0x4b0>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d0f0      	beq.n	8005a1e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d106      	bne.n	8005a52 <HAL_RCC_OscConfig+0x31e>
 8005a44:	4b66      	ldr	r3, [pc, #408]	; (8005be0 <HAL_RCC_OscConfig+0x4ac>)
 8005a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a48:	4a65      	ldr	r2, [pc, #404]	; (8005be0 <HAL_RCC_OscConfig+0x4ac>)
 8005a4a:	f043 0301 	orr.w	r3, r3, #1
 8005a4e:	6713      	str	r3, [r2, #112]	; 0x70
 8005a50:	e01c      	b.n	8005a8c <HAL_RCC_OscConfig+0x358>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	2b05      	cmp	r3, #5
 8005a58:	d10c      	bne.n	8005a74 <HAL_RCC_OscConfig+0x340>
 8005a5a:	4b61      	ldr	r3, [pc, #388]	; (8005be0 <HAL_RCC_OscConfig+0x4ac>)
 8005a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a5e:	4a60      	ldr	r2, [pc, #384]	; (8005be0 <HAL_RCC_OscConfig+0x4ac>)
 8005a60:	f043 0304 	orr.w	r3, r3, #4
 8005a64:	6713      	str	r3, [r2, #112]	; 0x70
 8005a66:	4b5e      	ldr	r3, [pc, #376]	; (8005be0 <HAL_RCC_OscConfig+0x4ac>)
 8005a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a6a:	4a5d      	ldr	r2, [pc, #372]	; (8005be0 <HAL_RCC_OscConfig+0x4ac>)
 8005a6c:	f043 0301 	orr.w	r3, r3, #1
 8005a70:	6713      	str	r3, [r2, #112]	; 0x70
 8005a72:	e00b      	b.n	8005a8c <HAL_RCC_OscConfig+0x358>
 8005a74:	4b5a      	ldr	r3, [pc, #360]	; (8005be0 <HAL_RCC_OscConfig+0x4ac>)
 8005a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a78:	4a59      	ldr	r2, [pc, #356]	; (8005be0 <HAL_RCC_OscConfig+0x4ac>)
 8005a7a:	f023 0301 	bic.w	r3, r3, #1
 8005a7e:	6713      	str	r3, [r2, #112]	; 0x70
 8005a80:	4b57      	ldr	r3, [pc, #348]	; (8005be0 <HAL_RCC_OscConfig+0x4ac>)
 8005a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a84:	4a56      	ldr	r2, [pc, #344]	; (8005be0 <HAL_RCC_OscConfig+0x4ac>)
 8005a86:	f023 0304 	bic.w	r3, r3, #4
 8005a8a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d015      	beq.n	8005ac0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a94:	f7ff f814 	bl	8004ac0 <HAL_GetTick>
 8005a98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a9a:	e00a      	b.n	8005ab2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a9c:	f7ff f810 	bl	8004ac0 <HAL_GetTick>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	1ad3      	subs	r3, r2, r3
 8005aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d901      	bls.n	8005ab2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005aae:	2303      	movs	r3, #3
 8005ab0:	e0d7      	b.n	8005c62 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ab2:	4b4b      	ldr	r3, [pc, #300]	; (8005be0 <HAL_RCC_OscConfig+0x4ac>)
 8005ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ab6:	f003 0302 	and.w	r3, r3, #2
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d0ee      	beq.n	8005a9c <HAL_RCC_OscConfig+0x368>
 8005abe:	e014      	b.n	8005aea <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ac0:	f7fe fffe 	bl	8004ac0 <HAL_GetTick>
 8005ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ac6:	e00a      	b.n	8005ade <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ac8:	f7fe fffa 	bl	8004ac0 <HAL_GetTick>
 8005acc:	4602      	mov	r2, r0
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	1ad3      	subs	r3, r2, r3
 8005ad2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d901      	bls.n	8005ade <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005ada:	2303      	movs	r3, #3
 8005adc:	e0c1      	b.n	8005c62 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ade:	4b40      	ldr	r3, [pc, #256]	; (8005be0 <HAL_RCC_OscConfig+0x4ac>)
 8005ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ae2:	f003 0302 	and.w	r3, r3, #2
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d1ee      	bne.n	8005ac8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005aea:	7dfb      	ldrb	r3, [r7, #23]
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d105      	bne.n	8005afc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005af0:	4b3b      	ldr	r3, [pc, #236]	; (8005be0 <HAL_RCC_OscConfig+0x4ac>)
 8005af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af4:	4a3a      	ldr	r2, [pc, #232]	; (8005be0 <HAL_RCC_OscConfig+0x4ac>)
 8005af6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005afa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	699b      	ldr	r3, [r3, #24]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	f000 80ad 	beq.w	8005c60 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b06:	4b36      	ldr	r3, [pc, #216]	; (8005be0 <HAL_RCC_OscConfig+0x4ac>)
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	f003 030c 	and.w	r3, r3, #12
 8005b0e:	2b08      	cmp	r3, #8
 8005b10:	d060      	beq.n	8005bd4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	699b      	ldr	r3, [r3, #24]
 8005b16:	2b02      	cmp	r3, #2
 8005b18:	d145      	bne.n	8005ba6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b1a:	4b33      	ldr	r3, [pc, #204]	; (8005be8 <HAL_RCC_OscConfig+0x4b4>)
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b20:	f7fe ffce 	bl	8004ac0 <HAL_GetTick>
 8005b24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b26:	e008      	b.n	8005b3a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b28:	f7fe ffca 	bl	8004ac0 <HAL_GetTick>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	2b02      	cmp	r3, #2
 8005b34:	d901      	bls.n	8005b3a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005b36:	2303      	movs	r3, #3
 8005b38:	e093      	b.n	8005c62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b3a:	4b29      	ldr	r3, [pc, #164]	; (8005be0 <HAL_RCC_OscConfig+0x4ac>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d1f0      	bne.n	8005b28 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	69da      	ldr	r2, [r3, #28]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a1b      	ldr	r3, [r3, #32]
 8005b4e:	431a      	orrs	r2, r3
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b54:	019b      	lsls	r3, r3, #6
 8005b56:	431a      	orrs	r2, r3
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b5c:	085b      	lsrs	r3, r3, #1
 8005b5e:	3b01      	subs	r3, #1
 8005b60:	041b      	lsls	r3, r3, #16
 8005b62:	431a      	orrs	r2, r3
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b68:	061b      	lsls	r3, r3, #24
 8005b6a:	431a      	orrs	r2, r3
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b70:	071b      	lsls	r3, r3, #28
 8005b72:	491b      	ldr	r1, [pc, #108]	; (8005be0 <HAL_RCC_OscConfig+0x4ac>)
 8005b74:	4313      	orrs	r3, r2
 8005b76:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b78:	4b1b      	ldr	r3, [pc, #108]	; (8005be8 <HAL_RCC_OscConfig+0x4b4>)
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b7e:	f7fe ff9f 	bl	8004ac0 <HAL_GetTick>
 8005b82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b84:	e008      	b.n	8005b98 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b86:	f7fe ff9b 	bl	8004ac0 <HAL_GetTick>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	1ad3      	subs	r3, r2, r3
 8005b90:	2b02      	cmp	r3, #2
 8005b92:	d901      	bls.n	8005b98 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005b94:	2303      	movs	r3, #3
 8005b96:	e064      	b.n	8005c62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b98:	4b11      	ldr	r3, [pc, #68]	; (8005be0 <HAL_RCC_OscConfig+0x4ac>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d0f0      	beq.n	8005b86 <HAL_RCC_OscConfig+0x452>
 8005ba4:	e05c      	b.n	8005c60 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ba6:	4b10      	ldr	r3, [pc, #64]	; (8005be8 <HAL_RCC_OscConfig+0x4b4>)
 8005ba8:	2200      	movs	r2, #0
 8005baa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bac:	f7fe ff88 	bl	8004ac0 <HAL_GetTick>
 8005bb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bb2:	e008      	b.n	8005bc6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bb4:	f7fe ff84 	bl	8004ac0 <HAL_GetTick>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	2b02      	cmp	r3, #2
 8005bc0:	d901      	bls.n	8005bc6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005bc2:	2303      	movs	r3, #3
 8005bc4:	e04d      	b.n	8005c62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bc6:	4b06      	ldr	r3, [pc, #24]	; (8005be0 <HAL_RCC_OscConfig+0x4ac>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d1f0      	bne.n	8005bb4 <HAL_RCC_OscConfig+0x480>
 8005bd2:	e045      	b.n	8005c60 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	699b      	ldr	r3, [r3, #24]
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d107      	bne.n	8005bec <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e040      	b.n	8005c62 <HAL_RCC_OscConfig+0x52e>
 8005be0:	40023800 	.word	0x40023800
 8005be4:	40007000 	.word	0x40007000
 8005be8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005bec:	4b1f      	ldr	r3, [pc, #124]	; (8005c6c <HAL_RCC_OscConfig+0x538>)
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	699b      	ldr	r3, [r3, #24]
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d030      	beq.n	8005c5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d129      	bne.n	8005c5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d122      	bne.n	8005c5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c16:	68fa      	ldr	r2, [r7, #12]
 8005c18:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005c22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d119      	bne.n	8005c5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c32:	085b      	lsrs	r3, r3, #1
 8005c34:	3b01      	subs	r3, #1
 8005c36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d10f      	bne.n	8005c5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d107      	bne.n	8005c5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c56:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d001      	beq.n	8005c60 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e000      	b.n	8005c62 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3718      	adds	r7, #24
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	40023800 	.word	0x40023800

08005c70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b082      	sub	sp, #8
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d101      	bne.n	8005c82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e041      	b.n	8005d06 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d106      	bne.n	8005c9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f7fe fd54 	bl	8004744 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2202      	movs	r2, #2
 8005ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	3304      	adds	r3, #4
 8005cac:	4619      	mov	r1, r3
 8005cae:	4610      	mov	r0, r2
 8005cb0:	f000 f82e 	bl	8005d10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3708      	adds	r7, #8
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}
	...

08005d10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b085      	sub	sp, #20
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a40      	ldr	r2, [pc, #256]	; (8005e24 <TIM_Base_SetConfig+0x114>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d013      	beq.n	8005d50 <TIM_Base_SetConfig+0x40>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d2e:	d00f      	beq.n	8005d50 <TIM_Base_SetConfig+0x40>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a3d      	ldr	r2, [pc, #244]	; (8005e28 <TIM_Base_SetConfig+0x118>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d00b      	beq.n	8005d50 <TIM_Base_SetConfig+0x40>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4a3c      	ldr	r2, [pc, #240]	; (8005e2c <TIM_Base_SetConfig+0x11c>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d007      	beq.n	8005d50 <TIM_Base_SetConfig+0x40>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4a3b      	ldr	r2, [pc, #236]	; (8005e30 <TIM_Base_SetConfig+0x120>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d003      	beq.n	8005d50 <TIM_Base_SetConfig+0x40>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4a3a      	ldr	r2, [pc, #232]	; (8005e34 <TIM_Base_SetConfig+0x124>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d108      	bne.n	8005d62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	68fa      	ldr	r2, [r7, #12]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4a2f      	ldr	r2, [pc, #188]	; (8005e24 <TIM_Base_SetConfig+0x114>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d02b      	beq.n	8005dc2 <TIM_Base_SetConfig+0xb2>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d70:	d027      	beq.n	8005dc2 <TIM_Base_SetConfig+0xb2>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	4a2c      	ldr	r2, [pc, #176]	; (8005e28 <TIM_Base_SetConfig+0x118>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d023      	beq.n	8005dc2 <TIM_Base_SetConfig+0xb2>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	4a2b      	ldr	r2, [pc, #172]	; (8005e2c <TIM_Base_SetConfig+0x11c>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d01f      	beq.n	8005dc2 <TIM_Base_SetConfig+0xb2>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a2a      	ldr	r2, [pc, #168]	; (8005e30 <TIM_Base_SetConfig+0x120>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d01b      	beq.n	8005dc2 <TIM_Base_SetConfig+0xb2>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a29      	ldr	r2, [pc, #164]	; (8005e34 <TIM_Base_SetConfig+0x124>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d017      	beq.n	8005dc2 <TIM_Base_SetConfig+0xb2>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a28      	ldr	r2, [pc, #160]	; (8005e38 <TIM_Base_SetConfig+0x128>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d013      	beq.n	8005dc2 <TIM_Base_SetConfig+0xb2>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a27      	ldr	r2, [pc, #156]	; (8005e3c <TIM_Base_SetConfig+0x12c>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d00f      	beq.n	8005dc2 <TIM_Base_SetConfig+0xb2>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a26      	ldr	r2, [pc, #152]	; (8005e40 <TIM_Base_SetConfig+0x130>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d00b      	beq.n	8005dc2 <TIM_Base_SetConfig+0xb2>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4a25      	ldr	r2, [pc, #148]	; (8005e44 <TIM_Base_SetConfig+0x134>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d007      	beq.n	8005dc2 <TIM_Base_SetConfig+0xb2>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a24      	ldr	r2, [pc, #144]	; (8005e48 <TIM_Base_SetConfig+0x138>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d003      	beq.n	8005dc2 <TIM_Base_SetConfig+0xb2>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4a23      	ldr	r2, [pc, #140]	; (8005e4c <TIM_Base_SetConfig+0x13c>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d108      	bne.n	8005dd4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	68fa      	ldr	r2, [r7, #12]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	695b      	ldr	r3, [r3, #20]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	68fa      	ldr	r2, [r7, #12]
 8005de6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	689a      	ldr	r2, [r3, #8]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	4a0a      	ldr	r2, [pc, #40]	; (8005e24 <TIM_Base_SetConfig+0x114>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d003      	beq.n	8005e08 <TIM_Base_SetConfig+0xf8>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4a0c      	ldr	r2, [pc, #48]	; (8005e34 <TIM_Base_SetConfig+0x124>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d103      	bne.n	8005e10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	691a      	ldr	r2, [r3, #16]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	615a      	str	r2, [r3, #20]
}
 8005e16:	bf00      	nop
 8005e18:	3714      	adds	r7, #20
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr
 8005e22:	bf00      	nop
 8005e24:	40010000 	.word	0x40010000
 8005e28:	40000400 	.word	0x40000400
 8005e2c:	40000800 	.word	0x40000800
 8005e30:	40000c00 	.word	0x40000c00
 8005e34:	40010400 	.word	0x40010400
 8005e38:	40014000 	.word	0x40014000
 8005e3c:	40014400 	.word	0x40014400
 8005e40:	40014800 	.word	0x40014800
 8005e44:	40001800 	.word	0x40001800
 8005e48:	40001c00 	.word	0x40001c00
 8005e4c:	40002000 	.word	0x40002000

08005e50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b085      	sub	sp, #20
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d101      	bne.n	8005e68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e64:	2302      	movs	r3, #2
 8005e66:	e05a      	b.n	8005f1e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2202      	movs	r2, #2
 8005e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	68fa      	ldr	r2, [r7, #12]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	68fa      	ldr	r2, [r7, #12]
 8005ea0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a21      	ldr	r2, [pc, #132]	; (8005f2c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d022      	beq.n	8005ef2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eb4:	d01d      	beq.n	8005ef2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a1d      	ldr	r2, [pc, #116]	; (8005f30 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d018      	beq.n	8005ef2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a1b      	ldr	r2, [pc, #108]	; (8005f34 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d013      	beq.n	8005ef2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a1a      	ldr	r2, [pc, #104]	; (8005f38 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d00e      	beq.n	8005ef2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a18      	ldr	r2, [pc, #96]	; (8005f3c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d009      	beq.n	8005ef2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a17      	ldr	r2, [pc, #92]	; (8005f40 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d004      	beq.n	8005ef2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a15      	ldr	r2, [pc, #84]	; (8005f44 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d10c      	bne.n	8005f0c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ef8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	68ba      	ldr	r2, [r7, #8]
 8005f00:	4313      	orrs	r3, r2
 8005f02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	68ba      	ldr	r2, [r7, #8]
 8005f0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f1c:	2300      	movs	r3, #0
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3714      	adds	r7, #20
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr
 8005f2a:	bf00      	nop
 8005f2c:	40010000 	.word	0x40010000
 8005f30:	40000400 	.word	0x40000400
 8005f34:	40000800 	.word	0x40000800
 8005f38:	40000c00 	.word	0x40000c00
 8005f3c:	40010400 	.word	0x40010400
 8005f40:	40014000 	.word	0x40014000
 8005f44:	40001800 	.word	0x40001800

08005f48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b082      	sub	sp, #8
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d101      	bne.n	8005f5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e03f      	b.n	8005fda <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d106      	bne.n	8005f74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f7fe fc34 	bl	80047dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2224      	movs	r2, #36	; 0x24
 8005f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	68da      	ldr	r2, [r3, #12]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f000 f829 	bl	8005fe4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	691a      	ldr	r2, [r3, #16]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005fa0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	695a      	ldr	r2, [r3, #20]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005fb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68da      	ldr	r2, [r3, #12]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005fc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2220      	movs	r2, #32
 8005fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2220      	movs	r2, #32
 8005fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3708      	adds	r7, #8
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
	...

08005fe4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fe4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fe8:	b0c0      	sub	sp, #256	; 0x100
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	691b      	ldr	r3, [r3, #16]
 8005ff8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006000:	68d9      	ldr	r1, [r3, #12]
 8006002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	ea40 0301 	orr.w	r3, r0, r1
 800600c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800600e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006012:	689a      	ldr	r2, [r3, #8]
 8006014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	431a      	orrs	r2, r3
 800601c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006020:	695b      	ldr	r3, [r3, #20]
 8006022:	431a      	orrs	r2, r3
 8006024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006028:	69db      	ldr	r3, [r3, #28]
 800602a:	4313      	orrs	r3, r2
 800602c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	68db      	ldr	r3, [r3, #12]
 8006038:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800603c:	f021 010c 	bic.w	r1, r1, #12
 8006040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800604a:	430b      	orrs	r3, r1
 800604c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800604e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	695b      	ldr	r3, [r3, #20]
 8006056:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800605a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800605e:	6999      	ldr	r1, [r3, #24]
 8006060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	ea40 0301 	orr.w	r3, r0, r1
 800606a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800606c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	4b8f      	ldr	r3, [pc, #572]	; (80062b0 <UART_SetConfig+0x2cc>)
 8006074:	429a      	cmp	r2, r3
 8006076:	d005      	beq.n	8006084 <UART_SetConfig+0xa0>
 8006078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	4b8d      	ldr	r3, [pc, #564]	; (80062b4 <UART_SetConfig+0x2d0>)
 8006080:	429a      	cmp	r2, r3
 8006082:	d104      	bne.n	800608e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006084:	f7ff f912 	bl	80052ac <HAL_RCC_GetPCLK2Freq>
 8006088:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800608c:	e003      	b.n	8006096 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800608e:	f7ff f8f9 	bl	8005284 <HAL_RCC_GetPCLK1Freq>
 8006092:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800609a:	69db      	ldr	r3, [r3, #28]
 800609c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060a0:	f040 810c 	bne.w	80062bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80060a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060a8:	2200      	movs	r2, #0
 80060aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80060ae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80060b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80060b6:	4622      	mov	r2, r4
 80060b8:	462b      	mov	r3, r5
 80060ba:	1891      	adds	r1, r2, r2
 80060bc:	65b9      	str	r1, [r7, #88]	; 0x58
 80060be:	415b      	adcs	r3, r3
 80060c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80060c6:	4621      	mov	r1, r4
 80060c8:	eb12 0801 	adds.w	r8, r2, r1
 80060cc:	4629      	mov	r1, r5
 80060ce:	eb43 0901 	adc.w	r9, r3, r1
 80060d2:	f04f 0200 	mov.w	r2, #0
 80060d6:	f04f 0300 	mov.w	r3, #0
 80060da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80060de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80060e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80060e6:	4690      	mov	r8, r2
 80060e8:	4699      	mov	r9, r3
 80060ea:	4623      	mov	r3, r4
 80060ec:	eb18 0303 	adds.w	r3, r8, r3
 80060f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80060f4:	462b      	mov	r3, r5
 80060f6:	eb49 0303 	adc.w	r3, r9, r3
 80060fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80060fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800610a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800610e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006112:	460b      	mov	r3, r1
 8006114:	18db      	adds	r3, r3, r3
 8006116:	653b      	str	r3, [r7, #80]	; 0x50
 8006118:	4613      	mov	r3, r2
 800611a:	eb42 0303 	adc.w	r3, r2, r3
 800611e:	657b      	str	r3, [r7, #84]	; 0x54
 8006120:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006124:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006128:	f7fa f86e 	bl	8000208 <__aeabi_uldivmod>
 800612c:	4602      	mov	r2, r0
 800612e:	460b      	mov	r3, r1
 8006130:	4b61      	ldr	r3, [pc, #388]	; (80062b8 <UART_SetConfig+0x2d4>)
 8006132:	fba3 2302 	umull	r2, r3, r3, r2
 8006136:	095b      	lsrs	r3, r3, #5
 8006138:	011c      	lsls	r4, r3, #4
 800613a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800613e:	2200      	movs	r2, #0
 8006140:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006144:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006148:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800614c:	4642      	mov	r2, r8
 800614e:	464b      	mov	r3, r9
 8006150:	1891      	adds	r1, r2, r2
 8006152:	64b9      	str	r1, [r7, #72]	; 0x48
 8006154:	415b      	adcs	r3, r3
 8006156:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006158:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800615c:	4641      	mov	r1, r8
 800615e:	eb12 0a01 	adds.w	sl, r2, r1
 8006162:	4649      	mov	r1, r9
 8006164:	eb43 0b01 	adc.w	fp, r3, r1
 8006168:	f04f 0200 	mov.w	r2, #0
 800616c:	f04f 0300 	mov.w	r3, #0
 8006170:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006174:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006178:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800617c:	4692      	mov	sl, r2
 800617e:	469b      	mov	fp, r3
 8006180:	4643      	mov	r3, r8
 8006182:	eb1a 0303 	adds.w	r3, sl, r3
 8006186:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800618a:	464b      	mov	r3, r9
 800618c:	eb4b 0303 	adc.w	r3, fp, r3
 8006190:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80061a0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80061a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80061a8:	460b      	mov	r3, r1
 80061aa:	18db      	adds	r3, r3, r3
 80061ac:	643b      	str	r3, [r7, #64]	; 0x40
 80061ae:	4613      	mov	r3, r2
 80061b0:	eb42 0303 	adc.w	r3, r2, r3
 80061b4:	647b      	str	r3, [r7, #68]	; 0x44
 80061b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80061ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80061be:	f7fa f823 	bl	8000208 <__aeabi_uldivmod>
 80061c2:	4602      	mov	r2, r0
 80061c4:	460b      	mov	r3, r1
 80061c6:	4611      	mov	r1, r2
 80061c8:	4b3b      	ldr	r3, [pc, #236]	; (80062b8 <UART_SetConfig+0x2d4>)
 80061ca:	fba3 2301 	umull	r2, r3, r3, r1
 80061ce:	095b      	lsrs	r3, r3, #5
 80061d0:	2264      	movs	r2, #100	; 0x64
 80061d2:	fb02 f303 	mul.w	r3, r2, r3
 80061d6:	1acb      	subs	r3, r1, r3
 80061d8:	00db      	lsls	r3, r3, #3
 80061da:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80061de:	4b36      	ldr	r3, [pc, #216]	; (80062b8 <UART_SetConfig+0x2d4>)
 80061e0:	fba3 2302 	umull	r2, r3, r3, r2
 80061e4:	095b      	lsrs	r3, r3, #5
 80061e6:	005b      	lsls	r3, r3, #1
 80061e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80061ec:	441c      	add	r4, r3
 80061ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061f2:	2200      	movs	r2, #0
 80061f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80061f8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80061fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006200:	4642      	mov	r2, r8
 8006202:	464b      	mov	r3, r9
 8006204:	1891      	adds	r1, r2, r2
 8006206:	63b9      	str	r1, [r7, #56]	; 0x38
 8006208:	415b      	adcs	r3, r3
 800620a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800620c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006210:	4641      	mov	r1, r8
 8006212:	1851      	adds	r1, r2, r1
 8006214:	6339      	str	r1, [r7, #48]	; 0x30
 8006216:	4649      	mov	r1, r9
 8006218:	414b      	adcs	r3, r1
 800621a:	637b      	str	r3, [r7, #52]	; 0x34
 800621c:	f04f 0200 	mov.w	r2, #0
 8006220:	f04f 0300 	mov.w	r3, #0
 8006224:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006228:	4659      	mov	r1, fp
 800622a:	00cb      	lsls	r3, r1, #3
 800622c:	4651      	mov	r1, sl
 800622e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006232:	4651      	mov	r1, sl
 8006234:	00ca      	lsls	r2, r1, #3
 8006236:	4610      	mov	r0, r2
 8006238:	4619      	mov	r1, r3
 800623a:	4603      	mov	r3, r0
 800623c:	4642      	mov	r2, r8
 800623e:	189b      	adds	r3, r3, r2
 8006240:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006244:	464b      	mov	r3, r9
 8006246:	460a      	mov	r2, r1
 8006248:	eb42 0303 	adc.w	r3, r2, r3
 800624c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800625c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006260:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006264:	460b      	mov	r3, r1
 8006266:	18db      	adds	r3, r3, r3
 8006268:	62bb      	str	r3, [r7, #40]	; 0x28
 800626a:	4613      	mov	r3, r2
 800626c:	eb42 0303 	adc.w	r3, r2, r3
 8006270:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006272:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006276:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800627a:	f7f9 ffc5 	bl	8000208 <__aeabi_uldivmod>
 800627e:	4602      	mov	r2, r0
 8006280:	460b      	mov	r3, r1
 8006282:	4b0d      	ldr	r3, [pc, #52]	; (80062b8 <UART_SetConfig+0x2d4>)
 8006284:	fba3 1302 	umull	r1, r3, r3, r2
 8006288:	095b      	lsrs	r3, r3, #5
 800628a:	2164      	movs	r1, #100	; 0x64
 800628c:	fb01 f303 	mul.w	r3, r1, r3
 8006290:	1ad3      	subs	r3, r2, r3
 8006292:	00db      	lsls	r3, r3, #3
 8006294:	3332      	adds	r3, #50	; 0x32
 8006296:	4a08      	ldr	r2, [pc, #32]	; (80062b8 <UART_SetConfig+0x2d4>)
 8006298:	fba2 2303 	umull	r2, r3, r2, r3
 800629c:	095b      	lsrs	r3, r3, #5
 800629e:	f003 0207 	and.w	r2, r3, #7
 80062a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4422      	add	r2, r4
 80062aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80062ac:	e105      	b.n	80064ba <UART_SetConfig+0x4d6>
 80062ae:	bf00      	nop
 80062b0:	40011000 	.word	0x40011000
 80062b4:	40011400 	.word	0x40011400
 80062b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80062bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062c0:	2200      	movs	r2, #0
 80062c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80062c6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80062ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80062ce:	4642      	mov	r2, r8
 80062d0:	464b      	mov	r3, r9
 80062d2:	1891      	adds	r1, r2, r2
 80062d4:	6239      	str	r1, [r7, #32]
 80062d6:	415b      	adcs	r3, r3
 80062d8:	627b      	str	r3, [r7, #36]	; 0x24
 80062da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80062de:	4641      	mov	r1, r8
 80062e0:	1854      	adds	r4, r2, r1
 80062e2:	4649      	mov	r1, r9
 80062e4:	eb43 0501 	adc.w	r5, r3, r1
 80062e8:	f04f 0200 	mov.w	r2, #0
 80062ec:	f04f 0300 	mov.w	r3, #0
 80062f0:	00eb      	lsls	r3, r5, #3
 80062f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80062f6:	00e2      	lsls	r2, r4, #3
 80062f8:	4614      	mov	r4, r2
 80062fa:	461d      	mov	r5, r3
 80062fc:	4643      	mov	r3, r8
 80062fe:	18e3      	adds	r3, r4, r3
 8006300:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006304:	464b      	mov	r3, r9
 8006306:	eb45 0303 	adc.w	r3, r5, r3
 800630a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800630e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800631a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800631e:	f04f 0200 	mov.w	r2, #0
 8006322:	f04f 0300 	mov.w	r3, #0
 8006326:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800632a:	4629      	mov	r1, r5
 800632c:	008b      	lsls	r3, r1, #2
 800632e:	4621      	mov	r1, r4
 8006330:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006334:	4621      	mov	r1, r4
 8006336:	008a      	lsls	r2, r1, #2
 8006338:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800633c:	f7f9 ff64 	bl	8000208 <__aeabi_uldivmod>
 8006340:	4602      	mov	r2, r0
 8006342:	460b      	mov	r3, r1
 8006344:	4b60      	ldr	r3, [pc, #384]	; (80064c8 <UART_SetConfig+0x4e4>)
 8006346:	fba3 2302 	umull	r2, r3, r3, r2
 800634a:	095b      	lsrs	r3, r3, #5
 800634c:	011c      	lsls	r4, r3, #4
 800634e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006352:	2200      	movs	r2, #0
 8006354:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006358:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800635c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006360:	4642      	mov	r2, r8
 8006362:	464b      	mov	r3, r9
 8006364:	1891      	adds	r1, r2, r2
 8006366:	61b9      	str	r1, [r7, #24]
 8006368:	415b      	adcs	r3, r3
 800636a:	61fb      	str	r3, [r7, #28]
 800636c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006370:	4641      	mov	r1, r8
 8006372:	1851      	adds	r1, r2, r1
 8006374:	6139      	str	r1, [r7, #16]
 8006376:	4649      	mov	r1, r9
 8006378:	414b      	adcs	r3, r1
 800637a:	617b      	str	r3, [r7, #20]
 800637c:	f04f 0200 	mov.w	r2, #0
 8006380:	f04f 0300 	mov.w	r3, #0
 8006384:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006388:	4659      	mov	r1, fp
 800638a:	00cb      	lsls	r3, r1, #3
 800638c:	4651      	mov	r1, sl
 800638e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006392:	4651      	mov	r1, sl
 8006394:	00ca      	lsls	r2, r1, #3
 8006396:	4610      	mov	r0, r2
 8006398:	4619      	mov	r1, r3
 800639a:	4603      	mov	r3, r0
 800639c:	4642      	mov	r2, r8
 800639e:	189b      	adds	r3, r3, r2
 80063a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80063a4:	464b      	mov	r3, r9
 80063a6:	460a      	mov	r2, r1
 80063a8:	eb42 0303 	adc.w	r3, r2, r3
 80063ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80063b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80063ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80063bc:	f04f 0200 	mov.w	r2, #0
 80063c0:	f04f 0300 	mov.w	r3, #0
 80063c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80063c8:	4649      	mov	r1, r9
 80063ca:	008b      	lsls	r3, r1, #2
 80063cc:	4641      	mov	r1, r8
 80063ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063d2:	4641      	mov	r1, r8
 80063d4:	008a      	lsls	r2, r1, #2
 80063d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80063da:	f7f9 ff15 	bl	8000208 <__aeabi_uldivmod>
 80063de:	4602      	mov	r2, r0
 80063e0:	460b      	mov	r3, r1
 80063e2:	4b39      	ldr	r3, [pc, #228]	; (80064c8 <UART_SetConfig+0x4e4>)
 80063e4:	fba3 1302 	umull	r1, r3, r3, r2
 80063e8:	095b      	lsrs	r3, r3, #5
 80063ea:	2164      	movs	r1, #100	; 0x64
 80063ec:	fb01 f303 	mul.w	r3, r1, r3
 80063f0:	1ad3      	subs	r3, r2, r3
 80063f2:	011b      	lsls	r3, r3, #4
 80063f4:	3332      	adds	r3, #50	; 0x32
 80063f6:	4a34      	ldr	r2, [pc, #208]	; (80064c8 <UART_SetConfig+0x4e4>)
 80063f8:	fba2 2303 	umull	r2, r3, r2, r3
 80063fc:	095b      	lsrs	r3, r3, #5
 80063fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006402:	441c      	add	r4, r3
 8006404:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006408:	2200      	movs	r2, #0
 800640a:	673b      	str	r3, [r7, #112]	; 0x70
 800640c:	677a      	str	r2, [r7, #116]	; 0x74
 800640e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006412:	4642      	mov	r2, r8
 8006414:	464b      	mov	r3, r9
 8006416:	1891      	adds	r1, r2, r2
 8006418:	60b9      	str	r1, [r7, #8]
 800641a:	415b      	adcs	r3, r3
 800641c:	60fb      	str	r3, [r7, #12]
 800641e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006422:	4641      	mov	r1, r8
 8006424:	1851      	adds	r1, r2, r1
 8006426:	6039      	str	r1, [r7, #0]
 8006428:	4649      	mov	r1, r9
 800642a:	414b      	adcs	r3, r1
 800642c:	607b      	str	r3, [r7, #4]
 800642e:	f04f 0200 	mov.w	r2, #0
 8006432:	f04f 0300 	mov.w	r3, #0
 8006436:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800643a:	4659      	mov	r1, fp
 800643c:	00cb      	lsls	r3, r1, #3
 800643e:	4651      	mov	r1, sl
 8006440:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006444:	4651      	mov	r1, sl
 8006446:	00ca      	lsls	r2, r1, #3
 8006448:	4610      	mov	r0, r2
 800644a:	4619      	mov	r1, r3
 800644c:	4603      	mov	r3, r0
 800644e:	4642      	mov	r2, r8
 8006450:	189b      	adds	r3, r3, r2
 8006452:	66bb      	str	r3, [r7, #104]	; 0x68
 8006454:	464b      	mov	r3, r9
 8006456:	460a      	mov	r2, r1
 8006458:	eb42 0303 	adc.w	r3, r2, r3
 800645c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800645e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	663b      	str	r3, [r7, #96]	; 0x60
 8006468:	667a      	str	r2, [r7, #100]	; 0x64
 800646a:	f04f 0200 	mov.w	r2, #0
 800646e:	f04f 0300 	mov.w	r3, #0
 8006472:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006476:	4649      	mov	r1, r9
 8006478:	008b      	lsls	r3, r1, #2
 800647a:	4641      	mov	r1, r8
 800647c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006480:	4641      	mov	r1, r8
 8006482:	008a      	lsls	r2, r1, #2
 8006484:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006488:	f7f9 febe 	bl	8000208 <__aeabi_uldivmod>
 800648c:	4602      	mov	r2, r0
 800648e:	460b      	mov	r3, r1
 8006490:	4b0d      	ldr	r3, [pc, #52]	; (80064c8 <UART_SetConfig+0x4e4>)
 8006492:	fba3 1302 	umull	r1, r3, r3, r2
 8006496:	095b      	lsrs	r3, r3, #5
 8006498:	2164      	movs	r1, #100	; 0x64
 800649a:	fb01 f303 	mul.w	r3, r1, r3
 800649e:	1ad3      	subs	r3, r2, r3
 80064a0:	011b      	lsls	r3, r3, #4
 80064a2:	3332      	adds	r3, #50	; 0x32
 80064a4:	4a08      	ldr	r2, [pc, #32]	; (80064c8 <UART_SetConfig+0x4e4>)
 80064a6:	fba2 2303 	umull	r2, r3, r2, r3
 80064aa:	095b      	lsrs	r3, r3, #5
 80064ac:	f003 020f 	and.w	r2, r3, #15
 80064b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4422      	add	r2, r4
 80064b8:	609a      	str	r2, [r3, #8]
}
 80064ba:	bf00      	nop
 80064bc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80064c0:	46bd      	mov	sp, r7
 80064c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064c6:	bf00      	nop
 80064c8:	51eb851f 	.word	0x51eb851f

080064cc <__errno>:
 80064cc:	4b01      	ldr	r3, [pc, #4]	; (80064d4 <__errno+0x8>)
 80064ce:	6818      	ldr	r0, [r3, #0]
 80064d0:	4770      	bx	lr
 80064d2:	bf00      	nop
 80064d4:	2000004c 	.word	0x2000004c

080064d8 <__libc_init_array>:
 80064d8:	b570      	push	{r4, r5, r6, lr}
 80064da:	4d0d      	ldr	r5, [pc, #52]	; (8006510 <__libc_init_array+0x38>)
 80064dc:	4c0d      	ldr	r4, [pc, #52]	; (8006514 <__libc_init_array+0x3c>)
 80064de:	1b64      	subs	r4, r4, r5
 80064e0:	10a4      	asrs	r4, r4, #2
 80064e2:	2600      	movs	r6, #0
 80064e4:	42a6      	cmp	r6, r4
 80064e6:	d109      	bne.n	80064fc <__libc_init_array+0x24>
 80064e8:	4d0b      	ldr	r5, [pc, #44]	; (8006518 <__libc_init_array+0x40>)
 80064ea:	4c0c      	ldr	r4, [pc, #48]	; (800651c <__libc_init_array+0x44>)
 80064ec:	f000 f93c 	bl	8006768 <_init>
 80064f0:	1b64      	subs	r4, r4, r5
 80064f2:	10a4      	asrs	r4, r4, #2
 80064f4:	2600      	movs	r6, #0
 80064f6:	42a6      	cmp	r6, r4
 80064f8:	d105      	bne.n	8006506 <__libc_init_array+0x2e>
 80064fa:	bd70      	pop	{r4, r5, r6, pc}
 80064fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006500:	4798      	blx	r3
 8006502:	3601      	adds	r6, #1
 8006504:	e7ee      	b.n	80064e4 <__libc_init_array+0xc>
 8006506:	f855 3b04 	ldr.w	r3, [r5], #4
 800650a:	4798      	blx	r3
 800650c:	3601      	adds	r6, #1
 800650e:	e7f2      	b.n	80064f6 <__libc_init_array+0x1e>
 8006510:	08007f6c 	.word	0x08007f6c
 8006514:	08007f6c 	.word	0x08007f6c
 8006518:	08007f6c 	.word	0x08007f6c
 800651c:	08007f70 	.word	0x08007f70

08006520 <__retarget_lock_acquire_recursive>:
 8006520:	4770      	bx	lr

08006522 <__retarget_lock_release_recursive>:
 8006522:	4770      	bx	lr

08006524 <malloc>:
 8006524:	4b02      	ldr	r3, [pc, #8]	; (8006530 <malloc+0xc>)
 8006526:	4601      	mov	r1, r0
 8006528:	6818      	ldr	r0, [r3, #0]
 800652a:	f000 b88d 	b.w	8006648 <_malloc_r>
 800652e:	bf00      	nop
 8006530:	2000004c 	.word	0x2000004c

08006534 <free>:
 8006534:	4b02      	ldr	r3, [pc, #8]	; (8006540 <free+0xc>)
 8006536:	4601      	mov	r1, r0
 8006538:	6818      	ldr	r0, [r3, #0]
 800653a:	f000 b819 	b.w	8006570 <_free_r>
 800653e:	bf00      	nop
 8006540:	2000004c 	.word	0x2000004c

08006544 <memcpy>:
 8006544:	440a      	add	r2, r1
 8006546:	4291      	cmp	r1, r2
 8006548:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800654c:	d100      	bne.n	8006550 <memcpy+0xc>
 800654e:	4770      	bx	lr
 8006550:	b510      	push	{r4, lr}
 8006552:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006556:	f803 4f01 	strb.w	r4, [r3, #1]!
 800655a:	4291      	cmp	r1, r2
 800655c:	d1f9      	bne.n	8006552 <memcpy+0xe>
 800655e:	bd10      	pop	{r4, pc}

08006560 <memset>:
 8006560:	4402      	add	r2, r0
 8006562:	4603      	mov	r3, r0
 8006564:	4293      	cmp	r3, r2
 8006566:	d100      	bne.n	800656a <memset+0xa>
 8006568:	4770      	bx	lr
 800656a:	f803 1b01 	strb.w	r1, [r3], #1
 800656e:	e7f9      	b.n	8006564 <memset+0x4>

08006570 <_free_r>:
 8006570:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006572:	2900      	cmp	r1, #0
 8006574:	d044      	beq.n	8006600 <_free_r+0x90>
 8006576:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800657a:	9001      	str	r0, [sp, #4]
 800657c:	2b00      	cmp	r3, #0
 800657e:	f1a1 0404 	sub.w	r4, r1, #4
 8006582:	bfb8      	it	lt
 8006584:	18e4      	addlt	r4, r4, r3
 8006586:	f000 f8e3 	bl	8006750 <__malloc_lock>
 800658a:	4a1e      	ldr	r2, [pc, #120]	; (8006604 <_free_r+0x94>)
 800658c:	9801      	ldr	r0, [sp, #4]
 800658e:	6813      	ldr	r3, [r2, #0]
 8006590:	b933      	cbnz	r3, 80065a0 <_free_r+0x30>
 8006592:	6063      	str	r3, [r4, #4]
 8006594:	6014      	str	r4, [r2, #0]
 8006596:	b003      	add	sp, #12
 8006598:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800659c:	f000 b8de 	b.w	800675c <__malloc_unlock>
 80065a0:	42a3      	cmp	r3, r4
 80065a2:	d908      	bls.n	80065b6 <_free_r+0x46>
 80065a4:	6825      	ldr	r5, [r4, #0]
 80065a6:	1961      	adds	r1, r4, r5
 80065a8:	428b      	cmp	r3, r1
 80065aa:	bf01      	itttt	eq
 80065ac:	6819      	ldreq	r1, [r3, #0]
 80065ae:	685b      	ldreq	r3, [r3, #4]
 80065b0:	1949      	addeq	r1, r1, r5
 80065b2:	6021      	streq	r1, [r4, #0]
 80065b4:	e7ed      	b.n	8006592 <_free_r+0x22>
 80065b6:	461a      	mov	r2, r3
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	b10b      	cbz	r3, 80065c0 <_free_r+0x50>
 80065bc:	42a3      	cmp	r3, r4
 80065be:	d9fa      	bls.n	80065b6 <_free_r+0x46>
 80065c0:	6811      	ldr	r1, [r2, #0]
 80065c2:	1855      	adds	r5, r2, r1
 80065c4:	42a5      	cmp	r5, r4
 80065c6:	d10b      	bne.n	80065e0 <_free_r+0x70>
 80065c8:	6824      	ldr	r4, [r4, #0]
 80065ca:	4421      	add	r1, r4
 80065cc:	1854      	adds	r4, r2, r1
 80065ce:	42a3      	cmp	r3, r4
 80065d0:	6011      	str	r1, [r2, #0]
 80065d2:	d1e0      	bne.n	8006596 <_free_r+0x26>
 80065d4:	681c      	ldr	r4, [r3, #0]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	6053      	str	r3, [r2, #4]
 80065da:	4421      	add	r1, r4
 80065dc:	6011      	str	r1, [r2, #0]
 80065de:	e7da      	b.n	8006596 <_free_r+0x26>
 80065e0:	d902      	bls.n	80065e8 <_free_r+0x78>
 80065e2:	230c      	movs	r3, #12
 80065e4:	6003      	str	r3, [r0, #0]
 80065e6:	e7d6      	b.n	8006596 <_free_r+0x26>
 80065e8:	6825      	ldr	r5, [r4, #0]
 80065ea:	1961      	adds	r1, r4, r5
 80065ec:	428b      	cmp	r3, r1
 80065ee:	bf04      	itt	eq
 80065f0:	6819      	ldreq	r1, [r3, #0]
 80065f2:	685b      	ldreq	r3, [r3, #4]
 80065f4:	6063      	str	r3, [r4, #4]
 80065f6:	bf04      	itt	eq
 80065f8:	1949      	addeq	r1, r1, r5
 80065fa:	6021      	streq	r1, [r4, #0]
 80065fc:	6054      	str	r4, [r2, #4]
 80065fe:	e7ca      	b.n	8006596 <_free_r+0x26>
 8006600:	b003      	add	sp, #12
 8006602:	bd30      	pop	{r4, r5, pc}
 8006604:	20000d18 	.word	0x20000d18

08006608 <sbrk_aligned>:
 8006608:	b570      	push	{r4, r5, r6, lr}
 800660a:	4e0e      	ldr	r6, [pc, #56]	; (8006644 <sbrk_aligned+0x3c>)
 800660c:	460c      	mov	r4, r1
 800660e:	6831      	ldr	r1, [r6, #0]
 8006610:	4605      	mov	r5, r0
 8006612:	b911      	cbnz	r1, 800661a <sbrk_aligned+0x12>
 8006614:	f000 f88c 	bl	8006730 <_sbrk_r>
 8006618:	6030      	str	r0, [r6, #0]
 800661a:	4621      	mov	r1, r4
 800661c:	4628      	mov	r0, r5
 800661e:	f000 f887 	bl	8006730 <_sbrk_r>
 8006622:	1c43      	adds	r3, r0, #1
 8006624:	d00a      	beq.n	800663c <sbrk_aligned+0x34>
 8006626:	1cc4      	adds	r4, r0, #3
 8006628:	f024 0403 	bic.w	r4, r4, #3
 800662c:	42a0      	cmp	r0, r4
 800662e:	d007      	beq.n	8006640 <sbrk_aligned+0x38>
 8006630:	1a21      	subs	r1, r4, r0
 8006632:	4628      	mov	r0, r5
 8006634:	f000 f87c 	bl	8006730 <_sbrk_r>
 8006638:	3001      	adds	r0, #1
 800663a:	d101      	bne.n	8006640 <sbrk_aligned+0x38>
 800663c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006640:	4620      	mov	r0, r4
 8006642:	bd70      	pop	{r4, r5, r6, pc}
 8006644:	20000d1c 	.word	0x20000d1c

08006648 <_malloc_r>:
 8006648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800664c:	1ccd      	adds	r5, r1, #3
 800664e:	f025 0503 	bic.w	r5, r5, #3
 8006652:	3508      	adds	r5, #8
 8006654:	2d0c      	cmp	r5, #12
 8006656:	bf38      	it	cc
 8006658:	250c      	movcc	r5, #12
 800665a:	2d00      	cmp	r5, #0
 800665c:	4607      	mov	r7, r0
 800665e:	db01      	blt.n	8006664 <_malloc_r+0x1c>
 8006660:	42a9      	cmp	r1, r5
 8006662:	d905      	bls.n	8006670 <_malloc_r+0x28>
 8006664:	230c      	movs	r3, #12
 8006666:	603b      	str	r3, [r7, #0]
 8006668:	2600      	movs	r6, #0
 800666a:	4630      	mov	r0, r6
 800666c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006670:	4e2e      	ldr	r6, [pc, #184]	; (800672c <_malloc_r+0xe4>)
 8006672:	f000 f86d 	bl	8006750 <__malloc_lock>
 8006676:	6833      	ldr	r3, [r6, #0]
 8006678:	461c      	mov	r4, r3
 800667a:	bb34      	cbnz	r4, 80066ca <_malloc_r+0x82>
 800667c:	4629      	mov	r1, r5
 800667e:	4638      	mov	r0, r7
 8006680:	f7ff ffc2 	bl	8006608 <sbrk_aligned>
 8006684:	1c43      	adds	r3, r0, #1
 8006686:	4604      	mov	r4, r0
 8006688:	d14d      	bne.n	8006726 <_malloc_r+0xde>
 800668a:	6834      	ldr	r4, [r6, #0]
 800668c:	4626      	mov	r6, r4
 800668e:	2e00      	cmp	r6, #0
 8006690:	d140      	bne.n	8006714 <_malloc_r+0xcc>
 8006692:	6823      	ldr	r3, [r4, #0]
 8006694:	4631      	mov	r1, r6
 8006696:	4638      	mov	r0, r7
 8006698:	eb04 0803 	add.w	r8, r4, r3
 800669c:	f000 f848 	bl	8006730 <_sbrk_r>
 80066a0:	4580      	cmp	r8, r0
 80066a2:	d13a      	bne.n	800671a <_malloc_r+0xd2>
 80066a4:	6821      	ldr	r1, [r4, #0]
 80066a6:	3503      	adds	r5, #3
 80066a8:	1a6d      	subs	r5, r5, r1
 80066aa:	f025 0503 	bic.w	r5, r5, #3
 80066ae:	3508      	adds	r5, #8
 80066b0:	2d0c      	cmp	r5, #12
 80066b2:	bf38      	it	cc
 80066b4:	250c      	movcc	r5, #12
 80066b6:	4629      	mov	r1, r5
 80066b8:	4638      	mov	r0, r7
 80066ba:	f7ff ffa5 	bl	8006608 <sbrk_aligned>
 80066be:	3001      	adds	r0, #1
 80066c0:	d02b      	beq.n	800671a <_malloc_r+0xd2>
 80066c2:	6823      	ldr	r3, [r4, #0]
 80066c4:	442b      	add	r3, r5
 80066c6:	6023      	str	r3, [r4, #0]
 80066c8:	e00e      	b.n	80066e8 <_malloc_r+0xa0>
 80066ca:	6822      	ldr	r2, [r4, #0]
 80066cc:	1b52      	subs	r2, r2, r5
 80066ce:	d41e      	bmi.n	800670e <_malloc_r+0xc6>
 80066d0:	2a0b      	cmp	r2, #11
 80066d2:	d916      	bls.n	8006702 <_malloc_r+0xba>
 80066d4:	1961      	adds	r1, r4, r5
 80066d6:	42a3      	cmp	r3, r4
 80066d8:	6025      	str	r5, [r4, #0]
 80066da:	bf18      	it	ne
 80066dc:	6059      	strne	r1, [r3, #4]
 80066de:	6863      	ldr	r3, [r4, #4]
 80066e0:	bf08      	it	eq
 80066e2:	6031      	streq	r1, [r6, #0]
 80066e4:	5162      	str	r2, [r4, r5]
 80066e6:	604b      	str	r3, [r1, #4]
 80066e8:	4638      	mov	r0, r7
 80066ea:	f104 060b 	add.w	r6, r4, #11
 80066ee:	f000 f835 	bl	800675c <__malloc_unlock>
 80066f2:	f026 0607 	bic.w	r6, r6, #7
 80066f6:	1d23      	adds	r3, r4, #4
 80066f8:	1af2      	subs	r2, r6, r3
 80066fa:	d0b6      	beq.n	800666a <_malloc_r+0x22>
 80066fc:	1b9b      	subs	r3, r3, r6
 80066fe:	50a3      	str	r3, [r4, r2]
 8006700:	e7b3      	b.n	800666a <_malloc_r+0x22>
 8006702:	6862      	ldr	r2, [r4, #4]
 8006704:	42a3      	cmp	r3, r4
 8006706:	bf0c      	ite	eq
 8006708:	6032      	streq	r2, [r6, #0]
 800670a:	605a      	strne	r2, [r3, #4]
 800670c:	e7ec      	b.n	80066e8 <_malloc_r+0xa0>
 800670e:	4623      	mov	r3, r4
 8006710:	6864      	ldr	r4, [r4, #4]
 8006712:	e7b2      	b.n	800667a <_malloc_r+0x32>
 8006714:	4634      	mov	r4, r6
 8006716:	6876      	ldr	r6, [r6, #4]
 8006718:	e7b9      	b.n	800668e <_malloc_r+0x46>
 800671a:	230c      	movs	r3, #12
 800671c:	603b      	str	r3, [r7, #0]
 800671e:	4638      	mov	r0, r7
 8006720:	f000 f81c 	bl	800675c <__malloc_unlock>
 8006724:	e7a1      	b.n	800666a <_malloc_r+0x22>
 8006726:	6025      	str	r5, [r4, #0]
 8006728:	e7de      	b.n	80066e8 <_malloc_r+0xa0>
 800672a:	bf00      	nop
 800672c:	20000d18 	.word	0x20000d18

08006730 <_sbrk_r>:
 8006730:	b538      	push	{r3, r4, r5, lr}
 8006732:	4d06      	ldr	r5, [pc, #24]	; (800674c <_sbrk_r+0x1c>)
 8006734:	2300      	movs	r3, #0
 8006736:	4604      	mov	r4, r0
 8006738:	4608      	mov	r0, r1
 800673a:	602b      	str	r3, [r5, #0]
 800673c:	f7fd ff84 	bl	8004648 <_sbrk>
 8006740:	1c43      	adds	r3, r0, #1
 8006742:	d102      	bne.n	800674a <_sbrk_r+0x1a>
 8006744:	682b      	ldr	r3, [r5, #0]
 8006746:	b103      	cbz	r3, 800674a <_sbrk_r+0x1a>
 8006748:	6023      	str	r3, [r4, #0]
 800674a:	bd38      	pop	{r3, r4, r5, pc}
 800674c:	20000d20 	.word	0x20000d20

08006750 <__malloc_lock>:
 8006750:	4801      	ldr	r0, [pc, #4]	; (8006758 <__malloc_lock+0x8>)
 8006752:	f7ff bee5 	b.w	8006520 <__retarget_lock_acquire_recursive>
 8006756:	bf00      	nop
 8006758:	20000d14 	.word	0x20000d14

0800675c <__malloc_unlock>:
 800675c:	4801      	ldr	r0, [pc, #4]	; (8006764 <__malloc_unlock+0x8>)
 800675e:	f7ff bee0 	b.w	8006522 <__retarget_lock_release_recursive>
 8006762:	bf00      	nop
 8006764:	20000d14 	.word	0x20000d14

08006768 <_init>:
 8006768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800676a:	bf00      	nop
 800676c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800676e:	bc08      	pop	{r3}
 8006770:	469e      	mov	lr, r3
 8006772:	4770      	bx	lr

08006774 <_fini>:
 8006774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006776:	bf00      	nop
 8006778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800677a:	bc08      	pop	{r3}
 800677c:	469e      	mov	lr, r3
 800677e:	4770      	bx	lr
