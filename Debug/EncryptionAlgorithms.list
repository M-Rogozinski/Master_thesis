
EncryptionAlgorithms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037e4  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012f0  080039a8  080039a8  000139a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c98  08004c98  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004c98  08004c98  00014c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ca0  08004ca0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ca0  08004ca0  00014ca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ca4  08004ca4  00014ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004ca8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001658  2000000c  08004cb4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001664  08004cb4  00021664  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f0be  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020e6  00000000  00000000  0002f0fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb8  00000000  00000000  000311e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bd0  00000000  00000000  00031e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020d10  00000000  00000000  00032a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010d7f  00000000  00000000  00053778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7875  00000000  00000000  000644f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013bd6c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034dc  00000000  00000000  0013bdbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003990 	.word	0x08003990

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08003990 	.word	0x08003990

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000224:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000228:	f000 b974 	b.w	8000514 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	4604      	mov	r4, r0
 800024c:	468e      	mov	lr, r1
 800024e:	2b00      	cmp	r3, #0
 8000250:	d14d      	bne.n	80002ee <__udivmoddi4+0xaa>
 8000252:	428a      	cmp	r2, r1
 8000254:	4694      	mov	ip, r2
 8000256:	d969      	bls.n	800032c <__udivmoddi4+0xe8>
 8000258:	fab2 f282 	clz	r2, r2
 800025c:	b152      	cbz	r2, 8000274 <__udivmoddi4+0x30>
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	f1c2 0120 	rsb	r1, r2, #32
 8000266:	fa20 f101 	lsr.w	r1, r0, r1
 800026a:	fa0c fc02 	lsl.w	ip, ip, r2
 800026e:	ea41 0e03 	orr.w	lr, r1, r3
 8000272:	4094      	lsls	r4, r2
 8000274:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000278:	0c21      	lsrs	r1, r4, #16
 800027a:	fbbe f6f8 	udiv	r6, lr, r8
 800027e:	fa1f f78c 	uxth.w	r7, ip
 8000282:	fb08 e316 	mls	r3, r8, r6, lr
 8000286:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028a:	fb06 f107 	mul.w	r1, r6, r7
 800028e:	4299      	cmp	r1, r3
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x64>
 8000292:	eb1c 0303 	adds.w	r3, ip, r3
 8000296:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800029a:	f080 811f 	bcs.w	80004dc <__udivmoddi4+0x298>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 811c 	bls.w	80004dc <__udivmoddi4+0x298>
 80002a4:	3e02      	subs	r6, #2
 80002a6:	4463      	add	r3, ip
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b0:	fb08 3310 	mls	r3, r8, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 f707 	mul.w	r7, r0, r7
 80002bc:	42a7      	cmp	r7, r4
 80002be:	d90a      	bls.n	80002d6 <__udivmoddi4+0x92>
 80002c0:	eb1c 0404 	adds.w	r4, ip, r4
 80002c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002c8:	f080 810a 	bcs.w	80004e0 <__udivmoddi4+0x29c>
 80002cc:	42a7      	cmp	r7, r4
 80002ce:	f240 8107 	bls.w	80004e0 <__udivmoddi4+0x29c>
 80002d2:	4464      	add	r4, ip
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002da:	1be4      	subs	r4, r4, r7
 80002dc:	2600      	movs	r6, #0
 80002de:	b11d      	cbz	r5, 80002e8 <__udivmoddi4+0xa4>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c5 4300 	strd	r4, r3, [r5]
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xc2>
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	f000 80ef 	beq.w	80004d6 <__udivmoddi4+0x292>
 80002f8:	2600      	movs	r6, #0
 80002fa:	e9c5 0100 	strd	r0, r1, [r5]
 80002fe:	4630      	mov	r0, r6
 8000300:	4631      	mov	r1, r6
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f683 	clz	r6, r3
 800030a:	2e00      	cmp	r6, #0
 800030c:	d14a      	bne.n	80003a4 <__udivmoddi4+0x160>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd4>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80f9 	bhi.w	800050a <__udivmoddi4+0x2c6>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	469e      	mov	lr, r3
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa4>
 8000326:	e9c5 4e00 	strd	r4, lr, [r5]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa4>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xec>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 8092 	bne.w	800045e <__udivmoddi4+0x21a>
 800033a:	eba1 010c 	sub.w	r1, r1, ip
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f fe8c 	uxth.w	lr, ip
 8000346:	2601      	movs	r6, #1
 8000348:	0c20      	lsrs	r0, r4, #16
 800034a:	fbb1 f3f7 	udiv	r3, r1, r7
 800034e:	fb07 1113 	mls	r1, r7, r3, r1
 8000352:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000356:	fb0e f003 	mul.w	r0, lr, r3
 800035a:	4288      	cmp	r0, r1
 800035c:	d908      	bls.n	8000370 <__udivmoddi4+0x12c>
 800035e:	eb1c 0101 	adds.w	r1, ip, r1
 8000362:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x12a>
 8000368:	4288      	cmp	r0, r1
 800036a:	f200 80cb 	bhi.w	8000504 <__udivmoddi4+0x2c0>
 800036e:	4643      	mov	r3, r8
 8000370:	1a09      	subs	r1, r1, r0
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb1 f0f7 	udiv	r0, r1, r7
 8000378:	fb07 1110 	mls	r1, r7, r0, r1
 800037c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000380:	fb0e fe00 	mul.w	lr, lr, r0
 8000384:	45a6      	cmp	lr, r4
 8000386:	d908      	bls.n	800039a <__udivmoddi4+0x156>
 8000388:	eb1c 0404 	adds.w	r4, ip, r4
 800038c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000390:	d202      	bcs.n	8000398 <__udivmoddi4+0x154>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f200 80bb 	bhi.w	800050e <__udivmoddi4+0x2ca>
 8000398:	4608      	mov	r0, r1
 800039a:	eba4 040e 	sub.w	r4, r4, lr
 800039e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a2:	e79c      	b.n	80002de <__udivmoddi4+0x9a>
 80003a4:	f1c6 0720 	rsb	r7, r6, #32
 80003a8:	40b3      	lsls	r3, r6
 80003aa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ae:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b2:	fa20 f407 	lsr.w	r4, r0, r7
 80003b6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ba:	431c      	orrs	r4, r3
 80003bc:	40f9      	lsrs	r1, r7
 80003be:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c2:	fa00 f306 	lsl.w	r3, r0, r6
 80003c6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ca:	0c20      	lsrs	r0, r4, #16
 80003cc:	fa1f fe8c 	uxth.w	lr, ip
 80003d0:	fb09 1118 	mls	r1, r9, r8, r1
 80003d4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d8:	fb08 f00e 	mul.w	r0, r8, lr
 80003dc:	4288      	cmp	r0, r1
 80003de:	fa02 f206 	lsl.w	r2, r2, r6
 80003e2:	d90b      	bls.n	80003fc <__udivmoddi4+0x1b8>
 80003e4:	eb1c 0101 	adds.w	r1, ip, r1
 80003e8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003ec:	f080 8088 	bcs.w	8000500 <__udivmoddi4+0x2bc>
 80003f0:	4288      	cmp	r0, r1
 80003f2:	f240 8085 	bls.w	8000500 <__udivmoddi4+0x2bc>
 80003f6:	f1a8 0802 	sub.w	r8, r8, #2
 80003fa:	4461      	add	r1, ip
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f9 	udiv	r0, r1, r9
 8000404:	fb09 1110 	mls	r1, r9, r0, r1
 8000408:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800040c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000410:	458e      	cmp	lr, r1
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x1e2>
 8000414:	eb1c 0101 	adds.w	r1, ip, r1
 8000418:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800041c:	d26c      	bcs.n	80004f8 <__udivmoddi4+0x2b4>
 800041e:	458e      	cmp	lr, r1
 8000420:	d96a      	bls.n	80004f8 <__udivmoddi4+0x2b4>
 8000422:	3802      	subs	r0, #2
 8000424:	4461      	add	r1, ip
 8000426:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042a:	fba0 9402 	umull	r9, r4, r0, r2
 800042e:	eba1 010e 	sub.w	r1, r1, lr
 8000432:	42a1      	cmp	r1, r4
 8000434:	46c8      	mov	r8, r9
 8000436:	46a6      	mov	lr, r4
 8000438:	d356      	bcc.n	80004e8 <__udivmoddi4+0x2a4>
 800043a:	d053      	beq.n	80004e4 <__udivmoddi4+0x2a0>
 800043c:	b15d      	cbz	r5, 8000456 <__udivmoddi4+0x212>
 800043e:	ebb3 0208 	subs.w	r2, r3, r8
 8000442:	eb61 010e 	sbc.w	r1, r1, lr
 8000446:	fa01 f707 	lsl.w	r7, r1, r7
 800044a:	fa22 f306 	lsr.w	r3, r2, r6
 800044e:	40f1      	lsrs	r1, r6
 8000450:	431f      	orrs	r7, r3
 8000452:	e9c5 7100 	strd	r7, r1, [r5]
 8000456:	2600      	movs	r6, #0
 8000458:	4631      	mov	r1, r6
 800045a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045e:	f1c2 0320 	rsb	r3, r2, #32
 8000462:	40d8      	lsrs	r0, r3
 8000464:	fa0c fc02 	lsl.w	ip, ip, r2
 8000468:	fa21 f303 	lsr.w	r3, r1, r3
 800046c:	4091      	lsls	r1, r2
 800046e:	4301      	orrs	r1, r0
 8000470:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000474:	fa1f fe8c 	uxth.w	lr, ip
 8000478:	fbb3 f0f7 	udiv	r0, r3, r7
 800047c:	fb07 3610 	mls	r6, r7, r0, r3
 8000480:	0c0b      	lsrs	r3, r1, #16
 8000482:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000486:	fb00 f60e 	mul.w	r6, r0, lr
 800048a:	429e      	cmp	r6, r3
 800048c:	fa04 f402 	lsl.w	r4, r4, r2
 8000490:	d908      	bls.n	80004a4 <__udivmoddi4+0x260>
 8000492:	eb1c 0303 	adds.w	r3, ip, r3
 8000496:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800049a:	d22f      	bcs.n	80004fc <__udivmoddi4+0x2b8>
 800049c:	429e      	cmp	r6, r3
 800049e:	d92d      	bls.n	80004fc <__udivmoddi4+0x2b8>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4463      	add	r3, ip
 80004a4:	1b9b      	subs	r3, r3, r6
 80004a6:	b289      	uxth	r1, r1
 80004a8:	fbb3 f6f7 	udiv	r6, r3, r7
 80004ac:	fb07 3316 	mls	r3, r7, r6, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb06 f30e 	mul.w	r3, r6, lr
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x28a>
 80004bc:	eb1c 0101 	adds.w	r1, ip, r1
 80004c0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004c4:	d216      	bcs.n	80004f4 <__udivmoddi4+0x2b0>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d914      	bls.n	80004f4 <__udivmoddi4+0x2b0>
 80004ca:	3e02      	subs	r6, #2
 80004cc:	4461      	add	r1, ip
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d4:	e738      	b.n	8000348 <__udivmoddi4+0x104>
 80004d6:	462e      	mov	r6, r5
 80004d8:	4628      	mov	r0, r5
 80004da:	e705      	b.n	80002e8 <__udivmoddi4+0xa4>
 80004dc:	4606      	mov	r6, r0
 80004de:	e6e3      	b.n	80002a8 <__udivmoddi4+0x64>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6f8      	b.n	80002d6 <__udivmoddi4+0x92>
 80004e4:	454b      	cmp	r3, r9
 80004e6:	d2a9      	bcs.n	800043c <__udivmoddi4+0x1f8>
 80004e8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ec:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f0:	3801      	subs	r0, #1
 80004f2:	e7a3      	b.n	800043c <__udivmoddi4+0x1f8>
 80004f4:	4646      	mov	r6, r8
 80004f6:	e7ea      	b.n	80004ce <__udivmoddi4+0x28a>
 80004f8:	4620      	mov	r0, r4
 80004fa:	e794      	b.n	8000426 <__udivmoddi4+0x1e2>
 80004fc:	4640      	mov	r0, r8
 80004fe:	e7d1      	b.n	80004a4 <__udivmoddi4+0x260>
 8000500:	46d0      	mov	r8, sl
 8000502:	e77b      	b.n	80003fc <__udivmoddi4+0x1b8>
 8000504:	3b02      	subs	r3, #2
 8000506:	4461      	add	r1, ip
 8000508:	e732      	b.n	8000370 <__udivmoddi4+0x12c>
 800050a:	4630      	mov	r0, r6
 800050c:	e709      	b.n	8000322 <__udivmoddi4+0xde>
 800050e:	4464      	add	r4, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e742      	b.n	800039a <__udivmoddi4+0x156>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <aesInit>:
 * @return Error code
 **/

__weak_func error_t aesInit(AesContext *context, const uint8_t *key,
   size_t keyLen)
{
 8000518:	b480      	push	{r7}
 800051a:	b089      	sub	sp, #36	; 0x24
 800051c:	af00      	add	r7, sp, #0
 800051e:	60f8      	str	r0, [r7, #12]
 8000520:	60b9      	str	r1, [r7, #8]
 8000522:	607a      	str	r2, [r7, #4]
   uint_t i;
   uint32_t temp;
   size_t keyScheduleSize;

   //Check parameters
   if(context == NULL || key == NULL)
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d002      	beq.n	8000530 <aesInit+0x18>
 800052a:	68bb      	ldr	r3, [r7, #8]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d101      	bne.n	8000534 <aesInit+0x1c>
      return ERROR_INVALID_PARAMETER;
 8000530:	2302      	movs	r3, #2
 8000532:	e1a9      	b.n	8000888 <aesInit+0x370>

   //Check the length of the key
   if(keyLen == 16)
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	2b10      	cmp	r3, #16
 8000538:	d103      	bne.n	8000542 <aesInit+0x2a>
   {
      //10 rounds are required for 128-bit key
      context->nr = 10;
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	220a      	movs	r2, #10
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	e00f      	b.n	8000562 <aesInit+0x4a>
   }
   else if(keyLen == 24)
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	2b18      	cmp	r3, #24
 8000546:	d103      	bne.n	8000550 <aesInit+0x38>
   {
      //12 rounds are required for 192-bit key
      context->nr = 12;
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	220c      	movs	r2, #12
 800054c:	601a      	str	r2, [r3, #0]
 800054e:	e008      	b.n	8000562 <aesInit+0x4a>
   }
   else if(keyLen == 32)
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	2b20      	cmp	r3, #32
 8000554:	d103      	bne.n	800055e <aesInit+0x46>
   {
      //14 rounds are required for 256-bit key
      context->nr = 14;
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	220e      	movs	r2, #14
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	e001      	b.n	8000562 <aesInit+0x4a>
   }
   else
   {
      //Report an error
      return ERROR_INVALID_KEY_LENGTH;
 800055e:	23e8      	movs	r3, #232	; 0xe8
 8000560:	e192      	b.n	8000888 <aesInit+0x370>
   }

   //Determine the number of 32-bit words in the key
   keyLen /= 4;
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	089b      	lsrs	r3, r3, #2
 8000566:	607b      	str	r3, [r7, #4]

   //Copy the original key
   for(i = 0; i < keyLen; i++)
 8000568:	2300      	movs	r3, #0
 800056a:	61fb      	str	r3, [r7, #28]
 800056c:	e026      	b.n	80005bc <aesInit+0xa4>
   {
      context->ek[i] = LOAD32LE(key + (i * 4));
 800056e:	69fb      	ldr	r3, [r7, #28]
 8000570:	009b      	lsls	r3, r3, #2
 8000572:	68ba      	ldr	r2, [r7, #8]
 8000574:	4413      	add	r3, r2
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	4619      	mov	r1, r3
 800057a:	69fb      	ldr	r3, [r7, #28]
 800057c:	009b      	lsls	r3, r3, #2
 800057e:	68ba      	ldr	r2, [r7, #8]
 8000580:	4413      	add	r3, r2
 8000582:	3301      	adds	r3, #1
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	021b      	lsls	r3, r3, #8
 8000588:	ea41 0203 	orr.w	r2, r1, r3
 800058c:	69fb      	ldr	r3, [r7, #28]
 800058e:	009b      	lsls	r3, r3, #2
 8000590:	68b9      	ldr	r1, [r7, #8]
 8000592:	440b      	add	r3, r1
 8000594:	3302      	adds	r3, #2
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	041b      	lsls	r3, r3, #16
 800059a:	431a      	orrs	r2, r3
 800059c:	69fb      	ldr	r3, [r7, #28]
 800059e:	009b      	lsls	r3, r3, #2
 80005a0:	68b9      	ldr	r1, [r7, #8]
 80005a2:	440b      	add	r3, r1
 80005a4:	3303      	adds	r3, #3
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	061b      	lsls	r3, r3, #24
 80005aa:	431a      	orrs	r2, r3
 80005ac:	68f9      	ldr	r1, [r7, #12]
 80005ae:	69fb      	ldr	r3, [r7, #28]
 80005b0:	009b      	lsls	r3, r3, #2
 80005b2:	440b      	add	r3, r1
 80005b4:	605a      	str	r2, [r3, #4]
   for(i = 0; i < keyLen; i++)
 80005b6:	69fb      	ldr	r3, [r7, #28]
 80005b8:	3301      	adds	r3, #1
 80005ba:	61fb      	str	r3, [r7, #28]
 80005bc:	69fa      	ldr	r2, [r7, #28]
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	429a      	cmp	r2, r3
 80005c2:	d3d4      	bcc.n	800056e <aesInit+0x56>
   }

   //The size of the key schedule depends on the number of rounds
   keyScheduleSize = 4 * (context->nr + 1);
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	3301      	adds	r3, #1
 80005ca:	009b      	lsls	r3, r3, #2
 80005cc:	61bb      	str	r3, [r7, #24]

   //Generate the key schedule (encryption)
   for(i = keyLen; i < keyScheduleSize; i++)
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	61fb      	str	r3, [r7, #28]
 80005d2:	e0c4      	b.n	800075e <aesInit+0x246>
   {
      //Save previous word
      temp = context->ek[i - 1];
 80005d4:	69fb      	ldr	r3, [r7, #28]
 80005d6:	3b01      	subs	r3, #1
 80005d8:	68fa      	ldr	r2, [r7, #12]
 80005da:	009b      	lsls	r3, r3, #2
 80005dc:	4413      	add	r3, r2
 80005de:	685b      	ldr	r3, [r3, #4]
 80005e0:	617b      	str	r3, [r7, #20]

      //Apply transformation
      if((i % keyLen) == 0)
 80005e2:	69fb      	ldr	r3, [r7, #28]
 80005e4:	687a      	ldr	r2, [r7, #4]
 80005e6:	fbb3 f2f2 	udiv	r2, r3, r2
 80005ea:	6879      	ldr	r1, [r7, #4]
 80005ec:	fb01 f202 	mul.w	r2, r1, r2
 80005f0:	1a9b      	subs	r3, r3, r2
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d14e      	bne.n	8000694 <aesInit+0x17c>
      {
         context->ek[i] = sbox[(temp >> 8) & 0xFF];
 80005f6:	697b      	ldr	r3, [r7, #20]
 80005f8:	0a1b      	lsrs	r3, r3, #8
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	4a66      	ldr	r2, [pc, #408]	; (8000798 <aesInit+0x280>)
 80005fe:	5cd3      	ldrb	r3, [r2, r3]
 8000600:	4619      	mov	r1, r3
 8000602:	68fa      	ldr	r2, [r7, #12]
 8000604:	69fb      	ldr	r3, [r7, #28]
 8000606:	009b      	lsls	r3, r3, #2
 8000608:	4413      	add	r3, r2
 800060a:	6059      	str	r1, [r3, #4]
         context->ek[i] |= (sbox[(temp >> 16) & 0xFF] << 8);
 800060c:	68fa      	ldr	r2, [r7, #12]
 800060e:	69fb      	ldr	r3, [r7, #28]
 8000610:	009b      	lsls	r3, r3, #2
 8000612:	4413      	add	r3, r2
 8000614:	685b      	ldr	r3, [r3, #4]
 8000616:	697a      	ldr	r2, [r7, #20]
 8000618:	0c12      	lsrs	r2, r2, #16
 800061a:	b2d2      	uxtb	r2, r2
 800061c:	495e      	ldr	r1, [pc, #376]	; (8000798 <aesInit+0x280>)
 800061e:	5c8a      	ldrb	r2, [r1, r2]
 8000620:	0212      	lsls	r2, r2, #8
 8000622:	431a      	orrs	r2, r3
 8000624:	68f9      	ldr	r1, [r7, #12]
 8000626:	69fb      	ldr	r3, [r7, #28]
 8000628:	009b      	lsls	r3, r3, #2
 800062a:	440b      	add	r3, r1
 800062c:	605a      	str	r2, [r3, #4]
         context->ek[i] |= (sbox[(temp >> 24) & 0xFF] << 16);
 800062e:	68fa      	ldr	r2, [r7, #12]
 8000630:	69fb      	ldr	r3, [r7, #28]
 8000632:	009b      	lsls	r3, r3, #2
 8000634:	4413      	add	r3, r2
 8000636:	685b      	ldr	r3, [r3, #4]
 8000638:	697a      	ldr	r2, [r7, #20]
 800063a:	0e12      	lsrs	r2, r2, #24
 800063c:	4956      	ldr	r1, [pc, #344]	; (8000798 <aesInit+0x280>)
 800063e:	5c8a      	ldrb	r2, [r1, r2]
 8000640:	0412      	lsls	r2, r2, #16
 8000642:	431a      	orrs	r2, r3
 8000644:	68f9      	ldr	r1, [r7, #12]
 8000646:	69fb      	ldr	r3, [r7, #28]
 8000648:	009b      	lsls	r3, r3, #2
 800064a:	440b      	add	r3, r1
 800064c:	605a      	str	r2, [r3, #4]
         context->ek[i] |= (sbox[temp & 0xFF] << 24);
 800064e:	68fa      	ldr	r2, [r7, #12]
 8000650:	69fb      	ldr	r3, [r7, #28]
 8000652:	009b      	lsls	r3, r3, #2
 8000654:	4413      	add	r3, r2
 8000656:	685b      	ldr	r3, [r3, #4]
 8000658:	697a      	ldr	r2, [r7, #20]
 800065a:	b2d2      	uxtb	r2, r2
 800065c:	494e      	ldr	r1, [pc, #312]	; (8000798 <aesInit+0x280>)
 800065e:	5c8a      	ldrb	r2, [r1, r2]
 8000660:	0612      	lsls	r2, r2, #24
 8000662:	431a      	orrs	r2, r3
 8000664:	68f9      	ldr	r1, [r7, #12]
 8000666:	69fb      	ldr	r3, [r7, #28]
 8000668:	009b      	lsls	r3, r3, #2
 800066a:	440b      	add	r3, r1
 800066c:	605a      	str	r2, [r3, #4]
         context->ek[i] ^= rcon[i / keyLen];
 800066e:	68fa      	ldr	r2, [r7, #12]
 8000670:	69fb      	ldr	r3, [r7, #28]
 8000672:	009b      	lsls	r3, r3, #2
 8000674:	4413      	add	r3, r2
 8000676:	685a      	ldr	r2, [r3, #4]
 8000678:	69f9      	ldr	r1, [r7, #28]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000680:	4946      	ldr	r1, [pc, #280]	; (800079c <aesInit+0x284>)
 8000682:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000686:	405a      	eors	r2, r3
 8000688:	68f9      	ldr	r1, [r7, #12]
 800068a:	69fb      	ldr	r3, [r7, #28]
 800068c:	009b      	lsls	r3, r3, #2
 800068e:	440b      	add	r3, r1
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	e04f      	b.n	8000734 <aesInit+0x21c>
      }
      else if(keyLen > 6 && (i % keyLen) == 4)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	2b06      	cmp	r3, #6
 8000698:	d946      	bls.n	8000728 <aesInit+0x210>
 800069a:	69fb      	ldr	r3, [r7, #28]
 800069c:	687a      	ldr	r2, [r7, #4]
 800069e:	fbb3 f2f2 	udiv	r2, r3, r2
 80006a2:	6879      	ldr	r1, [r7, #4]
 80006a4:	fb01 f202 	mul.w	r2, r1, r2
 80006a8:	1a9b      	subs	r3, r3, r2
 80006aa:	2b04      	cmp	r3, #4
 80006ac:	d13c      	bne.n	8000728 <aesInit+0x210>
      {
         context->ek[i] = sbox[temp & 0xFF];
 80006ae:	697b      	ldr	r3, [r7, #20]
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	4a39      	ldr	r2, [pc, #228]	; (8000798 <aesInit+0x280>)
 80006b4:	5cd3      	ldrb	r3, [r2, r3]
 80006b6:	4619      	mov	r1, r3
 80006b8:	68fa      	ldr	r2, [r7, #12]
 80006ba:	69fb      	ldr	r3, [r7, #28]
 80006bc:	009b      	lsls	r3, r3, #2
 80006be:	4413      	add	r3, r2
 80006c0:	6059      	str	r1, [r3, #4]
         context->ek[i] |= (sbox[(temp >> 8) & 0xFF] << 8);
 80006c2:	68fa      	ldr	r2, [r7, #12]
 80006c4:	69fb      	ldr	r3, [r7, #28]
 80006c6:	009b      	lsls	r3, r3, #2
 80006c8:	4413      	add	r3, r2
 80006ca:	685b      	ldr	r3, [r3, #4]
 80006cc:	697a      	ldr	r2, [r7, #20]
 80006ce:	0a12      	lsrs	r2, r2, #8
 80006d0:	b2d2      	uxtb	r2, r2
 80006d2:	4931      	ldr	r1, [pc, #196]	; (8000798 <aesInit+0x280>)
 80006d4:	5c8a      	ldrb	r2, [r1, r2]
 80006d6:	0212      	lsls	r2, r2, #8
 80006d8:	431a      	orrs	r2, r3
 80006da:	68f9      	ldr	r1, [r7, #12]
 80006dc:	69fb      	ldr	r3, [r7, #28]
 80006de:	009b      	lsls	r3, r3, #2
 80006e0:	440b      	add	r3, r1
 80006e2:	605a      	str	r2, [r3, #4]
         context->ek[i] |= (sbox[(temp >> 16) & 0xFF] << 16);
 80006e4:	68fa      	ldr	r2, [r7, #12]
 80006e6:	69fb      	ldr	r3, [r7, #28]
 80006e8:	009b      	lsls	r3, r3, #2
 80006ea:	4413      	add	r3, r2
 80006ec:	685b      	ldr	r3, [r3, #4]
 80006ee:	697a      	ldr	r2, [r7, #20]
 80006f0:	0c12      	lsrs	r2, r2, #16
 80006f2:	b2d2      	uxtb	r2, r2
 80006f4:	4928      	ldr	r1, [pc, #160]	; (8000798 <aesInit+0x280>)
 80006f6:	5c8a      	ldrb	r2, [r1, r2]
 80006f8:	0412      	lsls	r2, r2, #16
 80006fa:	431a      	orrs	r2, r3
 80006fc:	68f9      	ldr	r1, [r7, #12]
 80006fe:	69fb      	ldr	r3, [r7, #28]
 8000700:	009b      	lsls	r3, r3, #2
 8000702:	440b      	add	r3, r1
 8000704:	605a      	str	r2, [r3, #4]
         context->ek[i] |= (sbox[(temp >> 24) & 0xFF] << 24);
 8000706:	68fa      	ldr	r2, [r7, #12]
 8000708:	69fb      	ldr	r3, [r7, #28]
 800070a:	009b      	lsls	r3, r3, #2
 800070c:	4413      	add	r3, r2
 800070e:	685b      	ldr	r3, [r3, #4]
 8000710:	697a      	ldr	r2, [r7, #20]
 8000712:	0e12      	lsrs	r2, r2, #24
 8000714:	4920      	ldr	r1, [pc, #128]	; (8000798 <aesInit+0x280>)
 8000716:	5c8a      	ldrb	r2, [r1, r2]
 8000718:	0612      	lsls	r2, r2, #24
 800071a:	431a      	orrs	r2, r3
 800071c:	68f9      	ldr	r1, [r7, #12]
 800071e:	69fb      	ldr	r3, [r7, #28]
 8000720:	009b      	lsls	r3, r3, #2
 8000722:	440b      	add	r3, r1
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	e005      	b.n	8000734 <aesInit+0x21c>
      }
      else
      {
         context->ek[i] = temp;
 8000728:	68fa      	ldr	r2, [r7, #12]
 800072a:	69fb      	ldr	r3, [r7, #28]
 800072c:	009b      	lsls	r3, r3, #2
 800072e:	4413      	add	r3, r2
 8000730:	697a      	ldr	r2, [r7, #20]
 8000732:	605a      	str	r2, [r3, #4]
      }

      //Update the key schedule
      context->ek[i] ^= context->ek[i - keyLen];
 8000734:	68fa      	ldr	r2, [r7, #12]
 8000736:	69fb      	ldr	r3, [r7, #28]
 8000738:	009b      	lsls	r3, r3, #2
 800073a:	4413      	add	r3, r2
 800073c:	685a      	ldr	r2, [r3, #4]
 800073e:	69f9      	ldr	r1, [r7, #28]
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	1acb      	subs	r3, r1, r3
 8000744:	68f9      	ldr	r1, [r7, #12]
 8000746:	009b      	lsls	r3, r3, #2
 8000748:	440b      	add	r3, r1
 800074a:	685b      	ldr	r3, [r3, #4]
 800074c:	405a      	eors	r2, r3
 800074e:	68f9      	ldr	r1, [r7, #12]
 8000750:	69fb      	ldr	r3, [r7, #28]
 8000752:	009b      	lsls	r3, r3, #2
 8000754:	440b      	add	r3, r1
 8000756:	605a      	str	r2, [r3, #4]
   for(i = keyLen; i < keyScheduleSize; i++)
 8000758:	69fb      	ldr	r3, [r7, #28]
 800075a:	3301      	adds	r3, #1
 800075c:	61fb      	str	r3, [r7, #28]
 800075e:	69fa      	ldr	r2, [r7, #28]
 8000760:	69bb      	ldr	r3, [r7, #24]
 8000762:	429a      	cmp	r2, r3
 8000764:	f4ff af36 	bcc.w	80005d4 <aesInit+0xbc>
   }

   //Generate the key schedule (decryption)
   for(i = 0; i < keyScheduleSize; i++)
 8000768:	2300      	movs	r3, #0
 800076a:	61fb      	str	r3, [r7, #28]
 800076c:	e086      	b.n	800087c <aesInit+0x364>
   {
      //Apply the InvMixColumns transformation to all round keys but the first
      //and the last
      if(i < 4 || i >= (keyScheduleSize - 4))
 800076e:	69fb      	ldr	r3, [r7, #28]
 8000770:	2b03      	cmp	r3, #3
 8000772:	d904      	bls.n	800077e <aesInit+0x266>
 8000774:	69bb      	ldr	r3, [r7, #24]
 8000776:	3b04      	subs	r3, #4
 8000778:	69fa      	ldr	r2, [r7, #28]
 800077a:	429a      	cmp	r2, r3
 800077c:	d310      	bcc.n	80007a0 <aesInit+0x288>
      {
         context->dk[i] = context->ek[i];
 800077e:	68fa      	ldr	r2, [r7, #12]
 8000780:	69fb      	ldr	r3, [r7, #28]
 8000782:	009b      	lsls	r3, r3, #2
 8000784:	4413      	add	r3, r2
 8000786:	685a      	ldr	r2, [r3, #4]
 8000788:	68f9      	ldr	r1, [r7, #12]
 800078a:	69fb      	ldr	r3, [r7, #28]
 800078c:	333c      	adds	r3, #60	; 0x3c
 800078e:	009b      	lsls	r3, r3, #2
 8000790:	440b      	add	r3, r1
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	e06f      	b.n	8000876 <aesInit+0x35e>
 8000796:	bf00      	nop
 8000798:	080039d4 	.word	0x080039d4
 800079c:	080043d4 	.word	0x080043d4
      }
      else
      {
         context->dk[i] = td[sbox[context->ek[i] & 0xFF]];
 80007a0:	68fa      	ldr	r2, [r7, #12]
 80007a2:	69fb      	ldr	r3, [r7, #28]
 80007a4:	009b      	lsls	r3, r3, #2
 80007a6:	4413      	add	r3, r2
 80007a8:	685b      	ldr	r3, [r3, #4]
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	4a39      	ldr	r2, [pc, #228]	; (8000894 <aesInit+0x37c>)
 80007ae:	5cd3      	ldrb	r3, [r2, r3]
 80007b0:	461a      	mov	r2, r3
 80007b2:	4b39      	ldr	r3, [pc, #228]	; (8000898 <aesInit+0x380>)
 80007b4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80007b8:	68f9      	ldr	r1, [r7, #12]
 80007ba:	69fb      	ldr	r3, [r7, #28]
 80007bc:	333c      	adds	r3, #60	; 0x3c
 80007be:	009b      	lsls	r3, r3, #2
 80007c0:	440b      	add	r3, r1
 80007c2:	605a      	str	r2, [r3, #4]
         temp = td[sbox[(context->ek[i] >> 8) & 0xFF]];
 80007c4:	68fa      	ldr	r2, [r7, #12]
 80007c6:	69fb      	ldr	r3, [r7, #28]
 80007c8:	009b      	lsls	r3, r3, #2
 80007ca:	4413      	add	r3, r2
 80007cc:	685b      	ldr	r3, [r3, #4]
 80007ce:	0a1b      	lsrs	r3, r3, #8
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	4a30      	ldr	r2, [pc, #192]	; (8000894 <aesInit+0x37c>)
 80007d4:	5cd3      	ldrb	r3, [r2, r3]
 80007d6:	461a      	mov	r2, r3
 80007d8:	4b2f      	ldr	r3, [pc, #188]	; (8000898 <aesInit+0x380>)
 80007da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007de:	617b      	str	r3, [r7, #20]
         context->dk[i] ^= ROL32(temp, 8);
 80007e0:	68fa      	ldr	r2, [r7, #12]
 80007e2:	69fb      	ldr	r3, [r7, #28]
 80007e4:	333c      	adds	r3, #60	; 0x3c
 80007e6:	009b      	lsls	r3, r3, #2
 80007e8:	4413      	add	r3, r2
 80007ea:	685a      	ldr	r2, [r3, #4]
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	ea4f 6333 	mov.w	r3, r3, ror #24
 80007f2:	405a      	eors	r2, r3
 80007f4:	68f9      	ldr	r1, [r7, #12]
 80007f6:	69fb      	ldr	r3, [r7, #28]
 80007f8:	333c      	adds	r3, #60	; 0x3c
 80007fa:	009b      	lsls	r3, r3, #2
 80007fc:	440b      	add	r3, r1
 80007fe:	605a      	str	r2, [r3, #4]
         temp = td[sbox[(context->ek[i] >> 16) & 0xFF]];
 8000800:	68fa      	ldr	r2, [r7, #12]
 8000802:	69fb      	ldr	r3, [r7, #28]
 8000804:	009b      	lsls	r3, r3, #2
 8000806:	4413      	add	r3, r2
 8000808:	685b      	ldr	r3, [r3, #4]
 800080a:	0c1b      	lsrs	r3, r3, #16
 800080c:	b2db      	uxtb	r3, r3
 800080e:	4a21      	ldr	r2, [pc, #132]	; (8000894 <aesInit+0x37c>)
 8000810:	5cd3      	ldrb	r3, [r2, r3]
 8000812:	461a      	mov	r2, r3
 8000814:	4b20      	ldr	r3, [pc, #128]	; (8000898 <aesInit+0x380>)
 8000816:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800081a:	617b      	str	r3, [r7, #20]
         context->dk[i] ^= ROL32(temp, 16);
 800081c:	68fa      	ldr	r2, [r7, #12]
 800081e:	69fb      	ldr	r3, [r7, #28]
 8000820:	333c      	adds	r3, #60	; 0x3c
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	4413      	add	r3, r2
 8000826:	685a      	ldr	r2, [r3, #4]
 8000828:	697b      	ldr	r3, [r7, #20]
 800082a:	ea4f 4333 	mov.w	r3, r3, ror #16
 800082e:	405a      	eors	r2, r3
 8000830:	68f9      	ldr	r1, [r7, #12]
 8000832:	69fb      	ldr	r3, [r7, #28]
 8000834:	333c      	adds	r3, #60	; 0x3c
 8000836:	009b      	lsls	r3, r3, #2
 8000838:	440b      	add	r3, r1
 800083a:	605a      	str	r2, [r3, #4]
         temp = td[sbox[(context->ek[i] >> 24) & 0xFF]];
 800083c:	68fa      	ldr	r2, [r7, #12]
 800083e:	69fb      	ldr	r3, [r7, #28]
 8000840:	009b      	lsls	r3, r3, #2
 8000842:	4413      	add	r3, r2
 8000844:	685b      	ldr	r3, [r3, #4]
 8000846:	0e1b      	lsrs	r3, r3, #24
 8000848:	4a12      	ldr	r2, [pc, #72]	; (8000894 <aesInit+0x37c>)
 800084a:	5cd3      	ldrb	r3, [r2, r3]
 800084c:	461a      	mov	r2, r3
 800084e:	4b12      	ldr	r3, [pc, #72]	; (8000898 <aesInit+0x380>)
 8000850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000854:	617b      	str	r3, [r7, #20]
         context->dk[i] ^= ROL32(temp, 24);
 8000856:	68fa      	ldr	r2, [r7, #12]
 8000858:	69fb      	ldr	r3, [r7, #28]
 800085a:	333c      	adds	r3, #60	; 0x3c
 800085c:	009b      	lsls	r3, r3, #2
 800085e:	4413      	add	r3, r2
 8000860:	685a      	ldr	r2, [r3, #4]
 8000862:	697b      	ldr	r3, [r7, #20]
 8000864:	ea4f 2333 	mov.w	r3, r3, ror #8
 8000868:	405a      	eors	r2, r3
 800086a:	68f9      	ldr	r1, [r7, #12]
 800086c:	69fb      	ldr	r3, [r7, #28]
 800086e:	333c      	adds	r3, #60	; 0x3c
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	440b      	add	r3, r1
 8000874:	605a      	str	r2, [r3, #4]
   for(i = 0; i < keyScheduleSize; i++)
 8000876:	69fb      	ldr	r3, [r7, #28]
 8000878:	3301      	adds	r3, #1
 800087a:	61fb      	str	r3, [r7, #28]
 800087c:	69fa      	ldr	r2, [r7, #28]
 800087e:	69bb      	ldr	r3, [r7, #24]
 8000880:	429a      	cmp	r2, r3
 8000882:	f4ff af74 	bcc.w	800076e <aesInit+0x256>
      }
   }

   //No error to report
   return NO_ERROR;
 8000886:	2300      	movs	r3, #0
}
 8000888:	4618      	mov	r0, r3
 800088a:	3724      	adds	r7, #36	; 0x24
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr
 8000894:	080039d4 	.word	0x080039d4
 8000898:	08003fd4 	.word	0x08003fd4

0800089c <aesEncryptBlock>:
 * @param[out] output Ciphertext block resulting from encryption
 **/

__weak_func void aesEncryptBlock(AesContext *context, const uint8_t *input,
   uint8_t *output)
{
 800089c:	b480      	push	{r7}
 800089e:	b08f      	sub	sp, #60	; 0x3c
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	60f8      	str	r0, [r7, #12]
 80008a4:	60b9      	str	r1, [r7, #8]
 80008a6:	607a      	str	r2, [r7, #4]
   uint32_t t2;
   uint32_t t3;
   uint32_t temp;

   //Copy the plaintext to the state array
   s0 = LOAD32LE(input + 0);
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	461a      	mov	r2, r3
 80008ae:	68bb      	ldr	r3, [r7, #8]
 80008b0:	3301      	adds	r3, #1
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	021b      	lsls	r3, r3, #8
 80008b6:	431a      	orrs	r2, r3
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	3302      	adds	r3, #2
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	041b      	lsls	r3, r3, #16
 80008c0:	431a      	orrs	r2, r3
 80008c2:	68bb      	ldr	r3, [r7, #8]
 80008c4:	3303      	adds	r3, #3
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	061b      	lsls	r3, r3, #24
 80008ca:	4313      	orrs	r3, r2
 80008cc:	633b      	str	r3, [r7, #48]	; 0x30
   s1 = LOAD32LE(input + 4);
 80008ce:	68bb      	ldr	r3, [r7, #8]
 80008d0:	3304      	adds	r3, #4
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	461a      	mov	r2, r3
 80008d6:	68bb      	ldr	r3, [r7, #8]
 80008d8:	3304      	adds	r3, #4
 80008da:	3301      	adds	r3, #1
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	021b      	lsls	r3, r3, #8
 80008e0:	431a      	orrs	r2, r3
 80008e2:	68bb      	ldr	r3, [r7, #8]
 80008e4:	3304      	adds	r3, #4
 80008e6:	3302      	adds	r3, #2
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	041b      	lsls	r3, r3, #16
 80008ec:	431a      	orrs	r2, r3
 80008ee:	68bb      	ldr	r3, [r7, #8]
 80008f0:	3304      	adds	r3, #4
 80008f2:	3303      	adds	r3, #3
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	061b      	lsls	r3, r3, #24
 80008f8:	4313      	orrs	r3, r2
 80008fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   s2 = LOAD32LE(input + 8);
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	3308      	adds	r3, #8
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	461a      	mov	r2, r3
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	3308      	adds	r3, #8
 8000908:	3301      	adds	r3, #1
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	021b      	lsls	r3, r3, #8
 800090e:	431a      	orrs	r2, r3
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	3308      	adds	r3, #8
 8000914:	3302      	adds	r3, #2
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	041b      	lsls	r3, r3, #16
 800091a:	431a      	orrs	r2, r3
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	3308      	adds	r3, #8
 8000920:	3303      	adds	r3, #3
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	061b      	lsls	r3, r3, #24
 8000926:	4313      	orrs	r3, r2
 8000928:	62bb      	str	r3, [r7, #40]	; 0x28
   s3 = LOAD32LE(input + 12);
 800092a:	68bb      	ldr	r3, [r7, #8]
 800092c:	330c      	adds	r3, #12
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	461a      	mov	r2, r3
 8000932:	68bb      	ldr	r3, [r7, #8]
 8000934:	330c      	adds	r3, #12
 8000936:	3301      	adds	r3, #1
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	021b      	lsls	r3, r3, #8
 800093c:	431a      	orrs	r2, r3
 800093e:	68bb      	ldr	r3, [r7, #8]
 8000940:	330c      	adds	r3, #12
 8000942:	3302      	adds	r3, #2
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	041b      	lsls	r3, r3, #16
 8000948:	431a      	orrs	r2, r3
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	330c      	adds	r3, #12
 800094e:	3303      	adds	r3, #3
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	061b      	lsls	r3, r3, #24
 8000954:	4313      	orrs	r3, r2
 8000956:	627b      	str	r3, [r7, #36]	; 0x24

   //Initial round key addition
   s0 ^= context->ek[0];
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	685b      	ldr	r3, [r3, #4]
 800095c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800095e:	4053      	eors	r3, r2
 8000960:	633b      	str	r3, [r7, #48]	; 0x30
   s1 ^= context->ek[1];
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	689b      	ldr	r3, [r3, #8]
 8000966:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000968:	4053      	eors	r3, r2
 800096a:	62fb      	str	r3, [r7, #44]	; 0x2c
   s2 ^= context->ek[2];
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	68db      	ldr	r3, [r3, #12]
 8000970:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000972:	4053      	eors	r3, r2
 8000974:	62bb      	str	r3, [r7, #40]	; 0x28
   s3 ^= context->ek[3];
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	691b      	ldr	r3, [r3, #16]
 800097a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800097c:	4053      	eors	r3, r2
 800097e:	627b      	str	r3, [r7, #36]	; 0x24

   //The number of rounds depends on the key length
   for(i = 1; i < context->nr; i++)
 8000980:	2301      	movs	r3, #1
 8000982:	637b      	str	r3, [r7, #52]	; 0x34
 8000984:	e0d9      	b.n	8000b3a <aesEncryptBlock+0x29e>
   {
      //Apply round function
      t0 = te[s0 & 0xFF];
 8000986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000988:	b2db      	uxtb	r3, r3
 800098a:	4aa2      	ldr	r2, [pc, #648]	; (8000c14 <aesEncryptBlock+0x378>)
 800098c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000990:	623b      	str	r3, [r7, #32]
      temp = te[(s1 >> 8) & 0xFF];
 8000992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000994:	0a1b      	lsrs	r3, r3, #8
 8000996:	b2db      	uxtb	r3, r3
 8000998:	4a9e      	ldr	r2, [pc, #632]	; (8000c14 <aesEncryptBlock+0x378>)
 800099a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800099e:	613b      	str	r3, [r7, #16]
      t0 ^= ROL32(temp, 8);
 80009a0:	693b      	ldr	r3, [r7, #16]
 80009a2:	ea4f 6333 	mov.w	r3, r3, ror #24
 80009a6:	6a3a      	ldr	r2, [r7, #32]
 80009a8:	4053      	eors	r3, r2
 80009aa:	623b      	str	r3, [r7, #32]
      temp = te[(s2 >> 16) & 0xFF];
 80009ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009ae:	0c1b      	lsrs	r3, r3, #16
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	4a98      	ldr	r2, [pc, #608]	; (8000c14 <aesEncryptBlock+0x378>)
 80009b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009b8:	613b      	str	r3, [r7, #16]
      t0 ^= ROL32(temp, 16);
 80009ba:	693b      	ldr	r3, [r7, #16]
 80009bc:	ea4f 4333 	mov.w	r3, r3, ror #16
 80009c0:	6a3a      	ldr	r2, [r7, #32]
 80009c2:	4053      	eors	r3, r2
 80009c4:	623b      	str	r3, [r7, #32]
      temp = te[(s3 >> 24) & 0xFF];
 80009c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c8:	0e1b      	lsrs	r3, r3, #24
 80009ca:	4a92      	ldr	r2, [pc, #584]	; (8000c14 <aesEncryptBlock+0x378>)
 80009cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009d0:	613b      	str	r3, [r7, #16]
      t0 ^= ROL32(temp, 24);
 80009d2:	693b      	ldr	r3, [r7, #16]
 80009d4:	ea4f 2333 	mov.w	r3, r3, ror #8
 80009d8:	6a3a      	ldr	r2, [r7, #32]
 80009da:	4053      	eors	r3, r2
 80009dc:	623b      	str	r3, [r7, #32]

      t1 = te[s1 & 0xFF];
 80009de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	4a8c      	ldr	r2, [pc, #560]	; (8000c14 <aesEncryptBlock+0x378>)
 80009e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009e8:	61fb      	str	r3, [r7, #28]
      temp = te[(s2 >> 8) & 0xFF];
 80009ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009ec:	0a1b      	lsrs	r3, r3, #8
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	4a88      	ldr	r2, [pc, #544]	; (8000c14 <aesEncryptBlock+0x378>)
 80009f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009f6:	613b      	str	r3, [r7, #16]
      t1 ^= ROL32(temp, 8);
 80009f8:	693b      	ldr	r3, [r7, #16]
 80009fa:	ea4f 6333 	mov.w	r3, r3, ror #24
 80009fe:	69fa      	ldr	r2, [r7, #28]
 8000a00:	4053      	eors	r3, r2
 8000a02:	61fb      	str	r3, [r7, #28]
      temp = te[(s3 >> 16) & 0xFF];
 8000a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a06:	0c1b      	lsrs	r3, r3, #16
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	4a82      	ldr	r2, [pc, #520]	; (8000c14 <aesEncryptBlock+0x378>)
 8000a0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a10:	613b      	str	r3, [r7, #16]
      t1 ^= ROL32(temp, 16);
 8000a12:	693b      	ldr	r3, [r7, #16]
 8000a14:	ea4f 4333 	mov.w	r3, r3, ror #16
 8000a18:	69fa      	ldr	r2, [r7, #28]
 8000a1a:	4053      	eors	r3, r2
 8000a1c:	61fb      	str	r3, [r7, #28]
      temp = te[(s0 >> 24) & 0xFF];
 8000a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a20:	0e1b      	lsrs	r3, r3, #24
 8000a22:	4a7c      	ldr	r2, [pc, #496]	; (8000c14 <aesEncryptBlock+0x378>)
 8000a24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a28:	613b      	str	r3, [r7, #16]
      t1 ^= ROL32(temp, 24);
 8000a2a:	693b      	ldr	r3, [r7, #16]
 8000a2c:	ea4f 2333 	mov.w	r3, r3, ror #8
 8000a30:	69fa      	ldr	r2, [r7, #28]
 8000a32:	4053      	eors	r3, r2
 8000a34:	61fb      	str	r3, [r7, #28]

      t2 = te[s2 & 0xFF];
 8000a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	4a76      	ldr	r2, [pc, #472]	; (8000c14 <aesEncryptBlock+0x378>)
 8000a3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a40:	61bb      	str	r3, [r7, #24]
      temp = te[(s3 >> 8) & 0xFF];
 8000a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a44:	0a1b      	lsrs	r3, r3, #8
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	4a72      	ldr	r2, [pc, #456]	; (8000c14 <aesEncryptBlock+0x378>)
 8000a4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a4e:	613b      	str	r3, [r7, #16]
      t2 ^= ROL32(temp, 8);
 8000a50:	693b      	ldr	r3, [r7, #16]
 8000a52:	ea4f 6333 	mov.w	r3, r3, ror #24
 8000a56:	69ba      	ldr	r2, [r7, #24]
 8000a58:	4053      	eors	r3, r2
 8000a5a:	61bb      	str	r3, [r7, #24]
      temp = te[(s0 >> 16) & 0xFF];
 8000a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a5e:	0c1b      	lsrs	r3, r3, #16
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	4a6c      	ldr	r2, [pc, #432]	; (8000c14 <aesEncryptBlock+0x378>)
 8000a64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a68:	613b      	str	r3, [r7, #16]
      t2 ^= ROL32(temp, 16);
 8000a6a:	693b      	ldr	r3, [r7, #16]
 8000a6c:	ea4f 4333 	mov.w	r3, r3, ror #16
 8000a70:	69ba      	ldr	r2, [r7, #24]
 8000a72:	4053      	eors	r3, r2
 8000a74:	61bb      	str	r3, [r7, #24]
      temp = te[(s1 >> 24) & 0xFF];
 8000a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a78:	0e1b      	lsrs	r3, r3, #24
 8000a7a:	4a66      	ldr	r2, [pc, #408]	; (8000c14 <aesEncryptBlock+0x378>)
 8000a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a80:	613b      	str	r3, [r7, #16]
      t2 ^= ROL32(temp, 24);
 8000a82:	693b      	ldr	r3, [r7, #16]
 8000a84:	ea4f 2333 	mov.w	r3, r3, ror #8
 8000a88:	69ba      	ldr	r2, [r7, #24]
 8000a8a:	4053      	eors	r3, r2
 8000a8c:	61bb      	str	r3, [r7, #24]

      t3 = te[s3 & 0xFF];
 8000a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	4a60      	ldr	r2, [pc, #384]	; (8000c14 <aesEncryptBlock+0x378>)
 8000a94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a98:	617b      	str	r3, [r7, #20]
      temp = te[(s0 >> 8) & 0xFF];
 8000a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a9c:	0a1b      	lsrs	r3, r3, #8
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	4a5c      	ldr	r2, [pc, #368]	; (8000c14 <aesEncryptBlock+0x378>)
 8000aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aa6:	613b      	str	r3, [r7, #16]
      t3 ^= ROL32(temp, 8);
 8000aa8:	693b      	ldr	r3, [r7, #16]
 8000aaa:	ea4f 6333 	mov.w	r3, r3, ror #24
 8000aae:	697a      	ldr	r2, [r7, #20]
 8000ab0:	4053      	eors	r3, r2
 8000ab2:	617b      	str	r3, [r7, #20]
      temp = te[(s1 >> 16) & 0xFF];
 8000ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ab6:	0c1b      	lsrs	r3, r3, #16
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	4a56      	ldr	r2, [pc, #344]	; (8000c14 <aesEncryptBlock+0x378>)
 8000abc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ac0:	613b      	str	r3, [r7, #16]
      t3 ^= ROL32(temp, 16);
 8000ac2:	693b      	ldr	r3, [r7, #16]
 8000ac4:	ea4f 4333 	mov.w	r3, r3, ror #16
 8000ac8:	697a      	ldr	r2, [r7, #20]
 8000aca:	4053      	eors	r3, r2
 8000acc:	617b      	str	r3, [r7, #20]
      temp = te[(s2 >> 24) & 0xFF];
 8000ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ad0:	0e1b      	lsrs	r3, r3, #24
 8000ad2:	4a50      	ldr	r2, [pc, #320]	; (8000c14 <aesEncryptBlock+0x378>)
 8000ad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ad8:	613b      	str	r3, [r7, #16]
      t3 ^= ROL32(temp, 24);
 8000ada:	693b      	ldr	r3, [r7, #16]
 8000adc:	ea4f 2333 	mov.w	r3, r3, ror #8
 8000ae0:	697a      	ldr	r2, [r7, #20]
 8000ae2:	4053      	eors	r3, r2
 8000ae4:	617b      	str	r3, [r7, #20]

      //Round key addition
      s0 = t0 ^ context->ek[i * 4];
 8000ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ae8:	009b      	lsls	r3, r3, #2
 8000aea:	68fa      	ldr	r2, [r7, #12]
 8000aec:	009b      	lsls	r3, r3, #2
 8000aee:	4413      	add	r3, r2
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	6a3a      	ldr	r2, [r7, #32]
 8000af4:	4053      	eors	r3, r2
 8000af6:	633b      	str	r3, [r7, #48]	; 0x30
      s1 = t1 ^ context->ek[i * 4 + 1];
 8000af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000afa:	009b      	lsls	r3, r3, #2
 8000afc:	3301      	adds	r3, #1
 8000afe:	68fa      	ldr	r2, [r7, #12]
 8000b00:	009b      	lsls	r3, r3, #2
 8000b02:	4413      	add	r3, r2
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	69fa      	ldr	r2, [r7, #28]
 8000b08:	4053      	eors	r3, r2
 8000b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
      s2 = t2 ^ context->ek[i * 4 + 2];
 8000b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b0e:	009b      	lsls	r3, r3, #2
 8000b10:	3302      	adds	r3, #2
 8000b12:	68fa      	ldr	r2, [r7, #12]
 8000b14:	009b      	lsls	r3, r3, #2
 8000b16:	4413      	add	r3, r2
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	69ba      	ldr	r2, [r7, #24]
 8000b1c:	4053      	eors	r3, r2
 8000b1e:	62bb      	str	r3, [r7, #40]	; 0x28
      s3 = t3 ^ context->ek[i * 4 + 3];
 8000b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b22:	009b      	lsls	r3, r3, #2
 8000b24:	3303      	adds	r3, #3
 8000b26:	68fa      	ldr	r2, [r7, #12]
 8000b28:	009b      	lsls	r3, r3, #2
 8000b2a:	4413      	add	r3, r2
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	697a      	ldr	r2, [r7, #20]
 8000b30:	4053      	eors	r3, r2
 8000b32:	627b      	str	r3, [r7, #36]	; 0x24
   for(i = 1; i < context->nr; i++)
 8000b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b36:	3301      	adds	r3, #1
 8000b38:	637b      	str	r3, [r7, #52]	; 0x34
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b40:	429a      	cmp	r2, r3
 8000b42:	f4ff af20 	bcc.w	8000986 <aesEncryptBlock+0xea>
   }

   //The last round differs slightly from the first rounds
   t0 = sbox[s0 & 0xFF];
 8000b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	4a33      	ldr	r2, [pc, #204]	; (8000c18 <aesEncryptBlock+0x37c>)
 8000b4c:	5cd3      	ldrb	r3, [r2, r3]
 8000b4e:	623b      	str	r3, [r7, #32]
   t0 |= sbox[(s1 >> 8) & 0xFF] << 8;
 8000b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b52:	0a1b      	lsrs	r3, r3, #8
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	4a30      	ldr	r2, [pc, #192]	; (8000c18 <aesEncryptBlock+0x37c>)
 8000b58:	5cd3      	ldrb	r3, [r2, r3]
 8000b5a:	021b      	lsls	r3, r3, #8
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	6a3b      	ldr	r3, [r7, #32]
 8000b60:	4313      	orrs	r3, r2
 8000b62:	623b      	str	r3, [r7, #32]
   t0 |= sbox[(s2 >> 16) & 0xFF] << 16;
 8000b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b66:	0c1b      	lsrs	r3, r3, #16
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	4a2b      	ldr	r2, [pc, #172]	; (8000c18 <aesEncryptBlock+0x37c>)
 8000b6c:	5cd3      	ldrb	r3, [r2, r3]
 8000b6e:	041b      	lsls	r3, r3, #16
 8000b70:	461a      	mov	r2, r3
 8000b72:	6a3b      	ldr	r3, [r7, #32]
 8000b74:	4313      	orrs	r3, r2
 8000b76:	623b      	str	r3, [r7, #32]
   t0 |= sbox[(s3 >> 24) & 0xFF] << 24;
 8000b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b7a:	0e1b      	lsrs	r3, r3, #24
 8000b7c:	4a26      	ldr	r2, [pc, #152]	; (8000c18 <aesEncryptBlock+0x37c>)
 8000b7e:	5cd3      	ldrb	r3, [r2, r3]
 8000b80:	061b      	lsls	r3, r3, #24
 8000b82:	461a      	mov	r2, r3
 8000b84:	6a3b      	ldr	r3, [r7, #32]
 8000b86:	4313      	orrs	r3, r2
 8000b88:	623b      	str	r3, [r7, #32]

   t1 = sbox[s1 & 0xFF];
 8000b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	4a22      	ldr	r2, [pc, #136]	; (8000c18 <aesEncryptBlock+0x37c>)
 8000b90:	5cd3      	ldrb	r3, [r2, r3]
 8000b92:	61fb      	str	r3, [r7, #28]
   t1 |= sbox[(s2 >> 8) & 0xFF] << 8;
 8000b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b96:	0a1b      	lsrs	r3, r3, #8
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	4a1f      	ldr	r2, [pc, #124]	; (8000c18 <aesEncryptBlock+0x37c>)
 8000b9c:	5cd3      	ldrb	r3, [r2, r3]
 8000b9e:	021b      	lsls	r3, r3, #8
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	61fb      	str	r3, [r7, #28]
   t1 |= sbox[(s3 >> 16) & 0xFF] << 16;
 8000ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000baa:	0c1b      	lsrs	r3, r3, #16
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	4a1a      	ldr	r2, [pc, #104]	; (8000c18 <aesEncryptBlock+0x37c>)
 8000bb0:	5cd3      	ldrb	r3, [r2, r3]
 8000bb2:	041b      	lsls	r3, r3, #16
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	69fb      	ldr	r3, [r7, #28]
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	61fb      	str	r3, [r7, #28]
   t1 |= sbox[(s0 >> 24) & 0xFF] << 24;
 8000bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bbe:	0e1b      	lsrs	r3, r3, #24
 8000bc0:	4a15      	ldr	r2, [pc, #84]	; (8000c18 <aesEncryptBlock+0x37c>)
 8000bc2:	5cd3      	ldrb	r3, [r2, r3]
 8000bc4:	061b      	lsls	r3, r3, #24
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	69fb      	ldr	r3, [r7, #28]
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	61fb      	str	r3, [r7, #28]

   t2 = sbox[s2 & 0xFF];
 8000bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	4a11      	ldr	r2, [pc, #68]	; (8000c18 <aesEncryptBlock+0x37c>)
 8000bd4:	5cd3      	ldrb	r3, [r2, r3]
 8000bd6:	61bb      	str	r3, [r7, #24]
   t2 |= sbox[(s3 >> 8) & 0xFF] << 8;
 8000bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bda:	0a1b      	lsrs	r3, r3, #8
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	4a0e      	ldr	r2, [pc, #56]	; (8000c18 <aesEncryptBlock+0x37c>)
 8000be0:	5cd3      	ldrb	r3, [r2, r3]
 8000be2:	021b      	lsls	r3, r3, #8
 8000be4:	461a      	mov	r2, r3
 8000be6:	69bb      	ldr	r3, [r7, #24]
 8000be8:	4313      	orrs	r3, r2
 8000bea:	61bb      	str	r3, [r7, #24]
   t2 |= sbox[(s0 >> 16) & 0xFF] << 16;
 8000bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bee:	0c1b      	lsrs	r3, r3, #16
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	4a09      	ldr	r2, [pc, #36]	; (8000c18 <aesEncryptBlock+0x37c>)
 8000bf4:	5cd3      	ldrb	r3, [r2, r3]
 8000bf6:	041b      	lsls	r3, r3, #16
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	69bb      	ldr	r3, [r7, #24]
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	61bb      	str	r3, [r7, #24]
   t2 |= sbox[(s1 >> 24) & 0xFF] << 24;
 8000c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c02:	0e1b      	lsrs	r3, r3, #24
 8000c04:	4a04      	ldr	r2, [pc, #16]	; (8000c18 <aesEncryptBlock+0x37c>)
 8000c06:	5cd3      	ldrb	r3, [r2, r3]
 8000c08:	061b      	lsls	r3, r3, #24
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	69bb      	ldr	r3, [r7, #24]
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	e004      	b.n	8000c1c <aesEncryptBlock+0x380>
 8000c12:	bf00      	nop
 8000c14:	08003bd4 	.word	0x08003bd4
 8000c18:	080039d4 	.word	0x080039d4
 8000c1c:	61bb      	str	r3, [r7, #24]

   t3 = sbox[s3 & 0xFF];
 8000c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	4a56      	ldr	r2, [pc, #344]	; (8000d7c <aesEncryptBlock+0x4e0>)
 8000c24:	5cd3      	ldrb	r3, [r2, r3]
 8000c26:	617b      	str	r3, [r7, #20]
   t3 |= sbox[(s0 >> 8) & 0xFF] << 8;
 8000c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c2a:	0a1b      	lsrs	r3, r3, #8
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	4a53      	ldr	r2, [pc, #332]	; (8000d7c <aesEncryptBlock+0x4e0>)
 8000c30:	5cd3      	ldrb	r3, [r2, r3]
 8000c32:	021b      	lsls	r3, r3, #8
 8000c34:	461a      	mov	r2, r3
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	617b      	str	r3, [r7, #20]
   t3 |= sbox[(s1 >> 16) & 0xFF] << 16;
 8000c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c3e:	0c1b      	lsrs	r3, r3, #16
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	4a4e      	ldr	r2, [pc, #312]	; (8000d7c <aesEncryptBlock+0x4e0>)
 8000c44:	5cd3      	ldrb	r3, [r2, r3]
 8000c46:	041b      	lsls	r3, r3, #16
 8000c48:	461a      	mov	r2, r3
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	617b      	str	r3, [r7, #20]
   t3 |= sbox[(s2 >> 24) & 0xFF] << 24;
 8000c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c52:	0e1b      	lsrs	r3, r3, #24
 8000c54:	4a49      	ldr	r2, [pc, #292]	; (8000d7c <aesEncryptBlock+0x4e0>)
 8000c56:	5cd3      	ldrb	r3, [r2, r3]
 8000c58:	061b      	lsls	r3, r3, #24
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	617b      	str	r3, [r7, #20]

   //Last round key addition
   s0 = t0 ^ context->ek[context->nr * 4];
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	68fa      	ldr	r2, [r7, #12]
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	4413      	add	r3, r2
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	6a3a      	ldr	r2, [r7, #32]
 8000c72:	4053      	eors	r3, r2
 8000c74:	633b      	str	r3, [r7, #48]	; 0x30
   s1 = t1 ^ context->ek[context->nr * 4 + 1];
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	009b      	lsls	r3, r3, #2
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	68fa      	ldr	r2, [r7, #12]
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	4413      	add	r3, r2
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	69fa      	ldr	r2, [r7, #28]
 8000c88:	4053      	eors	r3, r2
 8000c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
   s2 = t2 ^ context->ek[context->nr * 4 + 2];
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	3302      	adds	r3, #2
 8000c94:	68fa      	ldr	r2, [r7, #12]
 8000c96:	009b      	lsls	r3, r3, #2
 8000c98:	4413      	add	r3, r2
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	69ba      	ldr	r2, [r7, #24]
 8000c9e:	4053      	eors	r3, r2
 8000ca0:	62bb      	str	r3, [r7, #40]	; 0x28
   s3 = t3 ^ context->ek[context->nr * 4 + 3];
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	3303      	adds	r3, #3
 8000caa:	68fa      	ldr	r2, [r7, #12]
 8000cac:	009b      	lsls	r3, r3, #2
 8000cae:	4413      	add	r3, r2
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	697a      	ldr	r2, [r7, #20]
 8000cb4:	4053      	eors	r3, r2
 8000cb6:	627b      	str	r3, [r7, #36]	; 0x24

   //The final state is then copied to the output
   STORE32LE(s0, output + 0);
 8000cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cba:	b2da      	uxtb	r2, r3
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	701a      	strb	r2, [r3, #0]
 8000cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cc2:	0a1a      	lsrs	r2, r3, #8
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	b2d2      	uxtb	r2, r2
 8000cca:	701a      	strb	r2, [r3, #0]
 8000ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cce:	0c1a      	lsrs	r2, r3, #16
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	3302      	adds	r3, #2
 8000cd4:	b2d2      	uxtb	r2, r2
 8000cd6:	701a      	strb	r2, [r3, #0]
 8000cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cda:	0e1a      	lsrs	r2, r3, #24
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	3303      	adds	r3, #3
 8000ce0:	b2d2      	uxtb	r2, r2
 8000ce2:	701a      	strb	r2, [r3, #0]
   STORE32LE(s1, output + 4);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	3304      	adds	r3, #4
 8000ce8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000cea:	b2d2      	uxtb	r2, r2
 8000cec:	701a      	strb	r2, [r3, #0]
 8000cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cf0:	0a1a      	lsrs	r2, r3, #8
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	3305      	adds	r3, #5
 8000cf6:	b2d2      	uxtb	r2, r2
 8000cf8:	701a      	strb	r2, [r3, #0]
 8000cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cfc:	0c1a      	lsrs	r2, r3, #16
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	3306      	adds	r3, #6
 8000d02:	b2d2      	uxtb	r2, r2
 8000d04:	701a      	strb	r2, [r3, #0]
 8000d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d08:	0e1a      	lsrs	r2, r3, #24
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	3307      	adds	r3, #7
 8000d0e:	b2d2      	uxtb	r2, r2
 8000d10:	701a      	strb	r2, [r3, #0]
   STORE32LE(s2, output + 8);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	3308      	adds	r3, #8
 8000d16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d18:	b2d2      	uxtb	r2, r2
 8000d1a:	701a      	strb	r2, [r3, #0]
 8000d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d1e:	0a1a      	lsrs	r2, r3, #8
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	3309      	adds	r3, #9
 8000d24:	b2d2      	uxtb	r2, r2
 8000d26:	701a      	strb	r2, [r3, #0]
 8000d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d2a:	0c1a      	lsrs	r2, r3, #16
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	330a      	adds	r3, #10
 8000d30:	b2d2      	uxtb	r2, r2
 8000d32:	701a      	strb	r2, [r3, #0]
 8000d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d36:	0e1a      	lsrs	r2, r3, #24
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	330b      	adds	r3, #11
 8000d3c:	b2d2      	uxtb	r2, r2
 8000d3e:	701a      	strb	r2, [r3, #0]
   STORE32LE(s3, output + 12);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	330c      	adds	r3, #12
 8000d44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d46:	b2d2      	uxtb	r2, r2
 8000d48:	701a      	strb	r2, [r3, #0]
 8000d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d4c:	0a1a      	lsrs	r2, r3, #8
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	330d      	adds	r3, #13
 8000d52:	b2d2      	uxtb	r2, r2
 8000d54:	701a      	strb	r2, [r3, #0]
 8000d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d58:	0c1a      	lsrs	r2, r3, #16
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	330e      	adds	r3, #14
 8000d5e:	b2d2      	uxtb	r2, r2
 8000d60:	701a      	strb	r2, [r3, #0]
 8000d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d64:	0e1a      	lsrs	r2, r3, #24
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	330f      	adds	r3, #15
 8000d6a:	b2d2      	uxtb	r2, r2
 8000d6c:	701a      	strb	r2, [r3, #0]
}
 8000d6e:	bf00      	nop
 8000d70:	373c      	adds	r7, #60	; 0x3c
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	080039d4 	.word	0x080039d4

08000d80 <aesDecryptBlock>:
 * @param[out] output Plaintext block resulting from decryption
 **/

__weak_func void aesDecryptBlock(AesContext *context, const uint8_t *input,
   uint8_t *output)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b08f      	sub	sp, #60	; 0x3c
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
   uint32_t t2;
   uint32_t t3;
   uint32_t temp;

   //Copy the ciphertext to the state array
   s0 = LOAD32LE(input + 0);
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	461a      	mov	r2, r3
 8000d92:	68bb      	ldr	r3, [r7, #8]
 8000d94:	3301      	adds	r3, #1
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	021b      	lsls	r3, r3, #8
 8000d9a:	431a      	orrs	r2, r3
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	3302      	adds	r3, #2
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	041b      	lsls	r3, r3, #16
 8000da4:	431a      	orrs	r2, r3
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	3303      	adds	r3, #3
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	061b      	lsls	r3, r3, #24
 8000dae:	4313      	orrs	r3, r2
 8000db0:	633b      	str	r3, [r7, #48]	; 0x30
   s1 = LOAD32LE(input + 4);
 8000db2:	68bb      	ldr	r3, [r7, #8]
 8000db4:	3304      	adds	r3, #4
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	461a      	mov	r2, r3
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	3304      	adds	r3, #4
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	021b      	lsls	r3, r3, #8
 8000dc4:	431a      	orrs	r2, r3
 8000dc6:	68bb      	ldr	r3, [r7, #8]
 8000dc8:	3304      	adds	r3, #4
 8000dca:	3302      	adds	r3, #2
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	041b      	lsls	r3, r3, #16
 8000dd0:	431a      	orrs	r2, r3
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	3304      	adds	r3, #4
 8000dd6:	3303      	adds	r3, #3
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	061b      	lsls	r3, r3, #24
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	62fb      	str	r3, [r7, #44]	; 0x2c
   s2 = LOAD32LE(input + 8);
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	3308      	adds	r3, #8
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	461a      	mov	r2, r3
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	3308      	adds	r3, #8
 8000dec:	3301      	adds	r3, #1
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	021b      	lsls	r3, r3, #8
 8000df2:	431a      	orrs	r2, r3
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	3308      	adds	r3, #8
 8000df8:	3302      	adds	r3, #2
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	041b      	lsls	r3, r3, #16
 8000dfe:	431a      	orrs	r2, r3
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	3308      	adds	r3, #8
 8000e04:	3303      	adds	r3, #3
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	061b      	lsls	r3, r3, #24
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	62bb      	str	r3, [r7, #40]	; 0x28
   s3 = LOAD32LE(input + 12);
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	330c      	adds	r3, #12
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	461a      	mov	r2, r3
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	330c      	adds	r3, #12
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	021b      	lsls	r3, r3, #8
 8000e20:	431a      	orrs	r2, r3
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	330c      	adds	r3, #12
 8000e26:	3302      	adds	r3, #2
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	041b      	lsls	r3, r3, #16
 8000e2c:	431a      	orrs	r2, r3
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	330c      	adds	r3, #12
 8000e32:	3303      	adds	r3, #3
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	061b      	lsls	r3, r3, #24
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	627b      	str	r3, [r7, #36]	; 0x24

   //Initial round key addition
   s0 ^= context->dk[context->nr * 4];
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	68fa      	ldr	r2, [r7, #12]
 8000e44:	333c      	adds	r3, #60	; 0x3c
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	4413      	add	r3, r2
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e4e:	4053      	eors	r3, r2
 8000e50:	633b      	str	r3, [r7, #48]	; 0x30
   s1 ^= context->dk[context->nr * 4 + 1];
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	3301      	adds	r3, #1
 8000e5a:	68fa      	ldr	r2, [r7, #12]
 8000e5c:	333c      	adds	r3, #60	; 0x3c
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	4413      	add	r3, r2
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e66:	4053      	eors	r3, r2
 8000e68:	62fb      	str	r3, [r7, #44]	; 0x2c
   s2 ^= context->dk[context->nr * 4 + 2];
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	3302      	adds	r3, #2
 8000e72:	68fa      	ldr	r2, [r7, #12]
 8000e74:	333c      	adds	r3, #60	; 0x3c
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	4413      	add	r3, r2
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e7e:	4053      	eors	r3, r2
 8000e80:	62bb      	str	r3, [r7, #40]	; 0x28
   s3 ^= context->dk[context->nr * 4 + 3];
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	3303      	adds	r3, #3
 8000e8a:	68fa      	ldr	r2, [r7, #12]
 8000e8c:	333c      	adds	r3, #60	; 0x3c
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	4413      	add	r3, r2
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e96:	4053      	eors	r3, r2
 8000e98:	627b      	str	r3, [r7, #36]	; 0x24

   //The number of rounds depends on the key length
   for(i = context->nr - 1; i >= 1; i--)
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	637b      	str	r3, [r7, #52]	; 0x34
 8000ea2:	e0dd      	b.n	8001060 <aesDecryptBlock+0x2e0>
   {
      //Apply round function
      t0 = td[s0 & 0xFF];
 8000ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	4aa2      	ldr	r2, [pc, #648]	; (8001134 <aesDecryptBlock+0x3b4>)
 8000eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eae:	623b      	str	r3, [r7, #32]
      temp = td[(s3 >> 8) & 0xFF];
 8000eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb2:	0a1b      	lsrs	r3, r3, #8
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	4a9f      	ldr	r2, [pc, #636]	; (8001134 <aesDecryptBlock+0x3b4>)
 8000eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ebc:	613b      	str	r3, [r7, #16]
      t0 ^= ROL32(temp, 8);
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	ea4f 6333 	mov.w	r3, r3, ror #24
 8000ec4:	6a3a      	ldr	r2, [r7, #32]
 8000ec6:	4053      	eors	r3, r2
 8000ec8:	623b      	str	r3, [r7, #32]
      temp = td[(s2 >> 16) & 0xFF];
 8000eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ecc:	0c1b      	lsrs	r3, r3, #16
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	4a98      	ldr	r2, [pc, #608]	; (8001134 <aesDecryptBlock+0x3b4>)
 8000ed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ed6:	613b      	str	r3, [r7, #16]
      t0 ^= ROL32(temp, 16);
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	ea4f 4333 	mov.w	r3, r3, ror #16
 8000ede:	6a3a      	ldr	r2, [r7, #32]
 8000ee0:	4053      	eors	r3, r2
 8000ee2:	623b      	str	r3, [r7, #32]
      temp = td[(s1 >> 24) & 0xFF];
 8000ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ee6:	0e1b      	lsrs	r3, r3, #24
 8000ee8:	4a92      	ldr	r2, [pc, #584]	; (8001134 <aesDecryptBlock+0x3b4>)
 8000eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eee:	613b      	str	r3, [r7, #16]
      t0 ^= ROL32(temp, 24);
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	ea4f 2333 	mov.w	r3, r3, ror #8
 8000ef6:	6a3a      	ldr	r2, [r7, #32]
 8000ef8:	4053      	eors	r3, r2
 8000efa:	623b      	str	r3, [r7, #32]

      t1 = td[s1 & 0xFF];
 8000efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	4a8c      	ldr	r2, [pc, #560]	; (8001134 <aesDecryptBlock+0x3b4>)
 8000f02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f06:	61fb      	str	r3, [r7, #28]
      temp = td[(s0 >> 8) & 0xFF];
 8000f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f0a:	0a1b      	lsrs	r3, r3, #8
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	4a89      	ldr	r2, [pc, #548]	; (8001134 <aesDecryptBlock+0x3b4>)
 8000f10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f14:	613b      	str	r3, [r7, #16]
      t1 ^= ROL32(temp, 8);
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	ea4f 6333 	mov.w	r3, r3, ror #24
 8000f1c:	69fa      	ldr	r2, [r7, #28]
 8000f1e:	4053      	eors	r3, r2
 8000f20:	61fb      	str	r3, [r7, #28]
      temp = td[(s3 >> 16) & 0xFF];
 8000f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f24:	0c1b      	lsrs	r3, r3, #16
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	4a82      	ldr	r2, [pc, #520]	; (8001134 <aesDecryptBlock+0x3b4>)
 8000f2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f2e:	613b      	str	r3, [r7, #16]
      t1 ^= ROL32(temp, 16);
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	ea4f 4333 	mov.w	r3, r3, ror #16
 8000f36:	69fa      	ldr	r2, [r7, #28]
 8000f38:	4053      	eors	r3, r2
 8000f3a:	61fb      	str	r3, [r7, #28]
      temp = td[(s2 >> 24) & 0xFF];
 8000f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f3e:	0e1b      	lsrs	r3, r3, #24
 8000f40:	4a7c      	ldr	r2, [pc, #496]	; (8001134 <aesDecryptBlock+0x3b4>)
 8000f42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f46:	613b      	str	r3, [r7, #16]
      t1 ^= ROL32(temp, 24);
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	ea4f 2333 	mov.w	r3, r3, ror #8
 8000f4e:	69fa      	ldr	r2, [r7, #28]
 8000f50:	4053      	eors	r3, r2
 8000f52:	61fb      	str	r3, [r7, #28]

      t2 = td[s2 & 0xFF];
 8000f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	4a76      	ldr	r2, [pc, #472]	; (8001134 <aesDecryptBlock+0x3b4>)
 8000f5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f5e:	61bb      	str	r3, [r7, #24]
      temp = td[(s1 >> 8) & 0xFF];
 8000f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f62:	0a1b      	lsrs	r3, r3, #8
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	4a73      	ldr	r2, [pc, #460]	; (8001134 <aesDecryptBlock+0x3b4>)
 8000f68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f6c:	613b      	str	r3, [r7, #16]
      t2 ^= ROL32(temp, 8);
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	ea4f 6333 	mov.w	r3, r3, ror #24
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	4053      	eors	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
      temp = td[(s0 >> 16) & 0xFF];
 8000f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f7c:	0c1b      	lsrs	r3, r3, #16
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	4a6c      	ldr	r2, [pc, #432]	; (8001134 <aesDecryptBlock+0x3b4>)
 8000f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f86:	613b      	str	r3, [r7, #16]
      t2 ^= ROL32(temp, 16);
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	ea4f 4333 	mov.w	r3, r3, ror #16
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	4053      	eors	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
      temp = td[(s3 >> 24) & 0xFF];
 8000f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f96:	0e1b      	lsrs	r3, r3, #24
 8000f98:	4a66      	ldr	r2, [pc, #408]	; (8001134 <aesDecryptBlock+0x3b4>)
 8000f9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f9e:	613b      	str	r3, [r7, #16]
      t2 ^= ROL32(temp, 24);
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	ea4f 2333 	mov.w	r3, r3, ror #8
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4053      	eors	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]

      t3 = td[s3 & 0xFF];
 8000fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	4a60      	ldr	r2, [pc, #384]	; (8001134 <aesDecryptBlock+0x3b4>)
 8000fb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb6:	617b      	str	r3, [r7, #20]
      temp = td[(s2 >> 8) & 0xFF];
 8000fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fba:	0a1b      	lsrs	r3, r3, #8
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	4a5d      	ldr	r2, [pc, #372]	; (8001134 <aesDecryptBlock+0x3b4>)
 8000fc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fc4:	613b      	str	r3, [r7, #16]
      t3 ^= ROL32(temp, 8);
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	ea4f 6333 	mov.w	r3, r3, ror #24
 8000fcc:	697a      	ldr	r2, [r7, #20]
 8000fce:	4053      	eors	r3, r2
 8000fd0:	617b      	str	r3, [r7, #20]
      temp = td[(s1 >> 16) & 0xFF];
 8000fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fd4:	0c1b      	lsrs	r3, r3, #16
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	4a56      	ldr	r2, [pc, #344]	; (8001134 <aesDecryptBlock+0x3b4>)
 8000fda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fde:	613b      	str	r3, [r7, #16]
      t3 ^= ROL32(temp, 16);
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	ea4f 4333 	mov.w	r3, r3, ror #16
 8000fe6:	697a      	ldr	r2, [r7, #20]
 8000fe8:	4053      	eors	r3, r2
 8000fea:	617b      	str	r3, [r7, #20]
      temp = td[(s0 >> 24) & 0xFF];
 8000fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fee:	0e1b      	lsrs	r3, r3, #24
 8000ff0:	4a50      	ldr	r2, [pc, #320]	; (8001134 <aesDecryptBlock+0x3b4>)
 8000ff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ff6:	613b      	str	r3, [r7, #16]
      t3 ^= ROL32(temp, 24);
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	ea4f 2333 	mov.w	r3, r3, ror #8
 8000ffe:	697a      	ldr	r2, [r7, #20]
 8001000:	4053      	eors	r3, r2
 8001002:	617b      	str	r3, [r7, #20]

      //Round key addition
      s0 = t0 ^ context->dk[i * 4];
 8001004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	68fa      	ldr	r2, [r7, #12]
 800100a:	333c      	adds	r3, #60	; 0x3c
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	4413      	add	r3, r2
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	6a3a      	ldr	r2, [r7, #32]
 8001014:	4053      	eors	r3, r2
 8001016:	633b      	str	r3, [r7, #48]	; 0x30
      s1 = t1 ^ context->dk[i * 4 + 1];
 8001018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	3301      	adds	r3, #1
 800101e:	68fa      	ldr	r2, [r7, #12]
 8001020:	333c      	adds	r3, #60	; 0x3c
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	4413      	add	r3, r2
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	69fa      	ldr	r2, [r7, #28]
 800102a:	4053      	eors	r3, r2
 800102c:	62fb      	str	r3, [r7, #44]	; 0x2c
      s2 = t2 ^ context->dk[i * 4 + 2];
 800102e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	3302      	adds	r3, #2
 8001034:	68fa      	ldr	r2, [r7, #12]
 8001036:	333c      	adds	r3, #60	; 0x3c
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	4413      	add	r3, r2
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4053      	eors	r3, r2
 8001042:	62bb      	str	r3, [r7, #40]	; 0x28
      s3 = t3 ^ context->dk[i * 4 + 3];
 8001044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	3303      	adds	r3, #3
 800104a:	68fa      	ldr	r2, [r7, #12]
 800104c:	333c      	adds	r3, #60	; 0x3c
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	4413      	add	r3, r2
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	697a      	ldr	r2, [r7, #20]
 8001056:	4053      	eors	r3, r2
 8001058:	627b      	str	r3, [r7, #36]	; 0x24
   for(i = context->nr - 1; i >= 1; i--)
 800105a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800105c:	3b01      	subs	r3, #1
 800105e:	637b      	str	r3, [r7, #52]	; 0x34
 8001060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001062:	2b00      	cmp	r3, #0
 8001064:	f47f af1e 	bne.w	8000ea4 <aesDecryptBlock+0x124>
   }

   //The last round differs slightly from the first rounds
   t0 = isbox[s0 & 0xFF];
 8001068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800106a:	b2db      	uxtb	r3, r3
 800106c:	4a32      	ldr	r2, [pc, #200]	; (8001138 <aesDecryptBlock+0x3b8>)
 800106e:	5cd3      	ldrb	r3, [r2, r3]
 8001070:	623b      	str	r3, [r7, #32]
   t0 |= isbox[(s3 >> 8) & 0xFF] << 8;
 8001072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001074:	0a1b      	lsrs	r3, r3, #8
 8001076:	b2db      	uxtb	r3, r3
 8001078:	4a2f      	ldr	r2, [pc, #188]	; (8001138 <aesDecryptBlock+0x3b8>)
 800107a:	5cd3      	ldrb	r3, [r2, r3]
 800107c:	021b      	lsls	r3, r3, #8
 800107e:	461a      	mov	r2, r3
 8001080:	6a3b      	ldr	r3, [r7, #32]
 8001082:	4313      	orrs	r3, r2
 8001084:	623b      	str	r3, [r7, #32]
   t0 |= isbox[(s2 >> 16) & 0xFF] << 16;
 8001086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001088:	0c1b      	lsrs	r3, r3, #16
 800108a:	b2db      	uxtb	r3, r3
 800108c:	4a2a      	ldr	r2, [pc, #168]	; (8001138 <aesDecryptBlock+0x3b8>)
 800108e:	5cd3      	ldrb	r3, [r2, r3]
 8001090:	041b      	lsls	r3, r3, #16
 8001092:	461a      	mov	r2, r3
 8001094:	6a3b      	ldr	r3, [r7, #32]
 8001096:	4313      	orrs	r3, r2
 8001098:	623b      	str	r3, [r7, #32]
   t0 |= isbox[(s1 >> 24) & 0xFF] << 24;
 800109a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800109c:	0e1b      	lsrs	r3, r3, #24
 800109e:	4a26      	ldr	r2, [pc, #152]	; (8001138 <aesDecryptBlock+0x3b8>)
 80010a0:	5cd3      	ldrb	r3, [r2, r3]
 80010a2:	061b      	lsls	r3, r3, #24
 80010a4:	461a      	mov	r2, r3
 80010a6:	6a3b      	ldr	r3, [r7, #32]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	623b      	str	r3, [r7, #32]

   t1 = isbox[s1 & 0xFF];
 80010ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	4a21      	ldr	r2, [pc, #132]	; (8001138 <aesDecryptBlock+0x3b8>)
 80010b2:	5cd3      	ldrb	r3, [r2, r3]
 80010b4:	61fb      	str	r3, [r7, #28]
   t1 |= isbox[(s0 >> 8) & 0xFF] << 8;
 80010b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010b8:	0a1b      	lsrs	r3, r3, #8
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	4a1e      	ldr	r2, [pc, #120]	; (8001138 <aesDecryptBlock+0x3b8>)
 80010be:	5cd3      	ldrb	r3, [r2, r3]
 80010c0:	021b      	lsls	r3, r3, #8
 80010c2:	461a      	mov	r2, r3
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	61fb      	str	r3, [r7, #28]
   t1 |= isbox[(s3 >> 16) & 0xFF] << 16;
 80010ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010cc:	0c1b      	lsrs	r3, r3, #16
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	4a19      	ldr	r2, [pc, #100]	; (8001138 <aesDecryptBlock+0x3b8>)
 80010d2:	5cd3      	ldrb	r3, [r2, r3]
 80010d4:	041b      	lsls	r3, r3, #16
 80010d6:	461a      	mov	r2, r3
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	4313      	orrs	r3, r2
 80010dc:	61fb      	str	r3, [r7, #28]
   t1 |= isbox[(s2 >> 24) & 0xFF] << 24;
 80010de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010e0:	0e1b      	lsrs	r3, r3, #24
 80010e2:	4a15      	ldr	r2, [pc, #84]	; (8001138 <aesDecryptBlock+0x3b8>)
 80010e4:	5cd3      	ldrb	r3, [r2, r3]
 80010e6:	061b      	lsls	r3, r3, #24
 80010e8:	461a      	mov	r2, r3
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	61fb      	str	r3, [r7, #28]

   t2 = isbox[s2 & 0xFF];
 80010f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	4a10      	ldr	r2, [pc, #64]	; (8001138 <aesDecryptBlock+0x3b8>)
 80010f6:	5cd3      	ldrb	r3, [r2, r3]
 80010f8:	61bb      	str	r3, [r7, #24]
   t2 |= isbox[(s1 >> 8) & 0xFF] << 8;
 80010fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010fc:	0a1b      	lsrs	r3, r3, #8
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	4a0d      	ldr	r2, [pc, #52]	; (8001138 <aesDecryptBlock+0x3b8>)
 8001102:	5cd3      	ldrb	r3, [r2, r3]
 8001104:	021b      	lsls	r3, r3, #8
 8001106:	461a      	mov	r2, r3
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	4313      	orrs	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
   t2 |= isbox[(s0 >> 16) & 0xFF] << 16;
 800110e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001110:	0c1b      	lsrs	r3, r3, #16
 8001112:	b2db      	uxtb	r3, r3
 8001114:	4a08      	ldr	r2, [pc, #32]	; (8001138 <aesDecryptBlock+0x3b8>)
 8001116:	5cd3      	ldrb	r3, [r2, r3]
 8001118:	041b      	lsls	r3, r3, #16
 800111a:	461a      	mov	r2, r3
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	4313      	orrs	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
   t2 |= isbox[(s3 >> 24) & 0xFF] << 24;
 8001122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001124:	0e1b      	lsrs	r3, r3, #24
 8001126:	4a04      	ldr	r2, [pc, #16]	; (8001138 <aesDecryptBlock+0x3b8>)
 8001128:	5cd3      	ldrb	r3, [r2, r3]
 800112a:	061b      	lsls	r3, r3, #24
 800112c:	461a      	mov	r2, r3
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	4313      	orrs	r3, r2
 8001132:	e003      	b.n	800113c <aesDecryptBlock+0x3bc>
 8001134:	08003fd4 	.word	0x08003fd4
 8001138:	08003ad4 	.word	0x08003ad4
 800113c:	61bb      	str	r3, [r7, #24]

   t3 = isbox[s3 & 0xFF];
 800113e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001140:	b2db      	uxtb	r3, r3
 8001142:	4a4c      	ldr	r2, [pc, #304]	; (8001274 <aesDecryptBlock+0x4f4>)
 8001144:	5cd3      	ldrb	r3, [r2, r3]
 8001146:	617b      	str	r3, [r7, #20]
   t3 |= isbox[(s2 >> 8) & 0xFF] << 8;
 8001148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800114a:	0a1b      	lsrs	r3, r3, #8
 800114c:	b2db      	uxtb	r3, r3
 800114e:	4a49      	ldr	r2, [pc, #292]	; (8001274 <aesDecryptBlock+0x4f4>)
 8001150:	5cd3      	ldrb	r3, [r2, r3]
 8001152:	021b      	lsls	r3, r3, #8
 8001154:	461a      	mov	r2, r3
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	4313      	orrs	r3, r2
 800115a:	617b      	str	r3, [r7, #20]
   t3 |= isbox[(s1 >> 16) & 0xFF] << 16;
 800115c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800115e:	0c1b      	lsrs	r3, r3, #16
 8001160:	b2db      	uxtb	r3, r3
 8001162:	4a44      	ldr	r2, [pc, #272]	; (8001274 <aesDecryptBlock+0x4f4>)
 8001164:	5cd3      	ldrb	r3, [r2, r3]
 8001166:	041b      	lsls	r3, r3, #16
 8001168:	461a      	mov	r2, r3
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	4313      	orrs	r3, r2
 800116e:	617b      	str	r3, [r7, #20]
   t3 |= isbox[(s0 >> 24) & 0xFF] << 24;
 8001170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001172:	0e1b      	lsrs	r3, r3, #24
 8001174:	4a3f      	ldr	r2, [pc, #252]	; (8001274 <aesDecryptBlock+0x4f4>)
 8001176:	5cd3      	ldrb	r3, [r2, r3]
 8001178:	061b      	lsls	r3, r3, #24
 800117a:	461a      	mov	r2, r3
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	4313      	orrs	r3, r2
 8001180:	617b      	str	r3, [r7, #20]

   //Last round key addition
   s0 = t0 ^ context->dk[0];
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001188:	6a3a      	ldr	r2, [r7, #32]
 800118a:	4053      	eors	r3, r2
 800118c:	633b      	str	r3, [r7, #48]	; 0x30
   s1 = t1 ^ context->dk[1];
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8001194:	69fa      	ldr	r2, [r7, #28]
 8001196:	4053      	eors	r3, r2
 8001198:	62fb      	str	r3, [r7, #44]	; 0x2c
   s2 = t2 ^ context->dk[2];
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4053      	eors	r3, r2
 80011a4:	62bb      	str	r3, [r7, #40]	; 0x28
   s3 = t3 ^ context->dk[3];
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80011ac:	697a      	ldr	r2, [r7, #20]
 80011ae:	4053      	eors	r3, r2
 80011b0:	627b      	str	r3, [r7, #36]	; 0x24

   //The final state is then copied to the output
   STORE32LE(s0, output + 0);
 80011b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011b4:	b2da      	uxtb	r2, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	701a      	strb	r2, [r3, #0]
 80011ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011bc:	0a1a      	lsrs	r2, r3, #8
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	3301      	adds	r3, #1
 80011c2:	b2d2      	uxtb	r2, r2
 80011c4:	701a      	strb	r2, [r3, #0]
 80011c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011c8:	0c1a      	lsrs	r2, r3, #16
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	3302      	adds	r3, #2
 80011ce:	b2d2      	uxtb	r2, r2
 80011d0:	701a      	strb	r2, [r3, #0]
 80011d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011d4:	0e1a      	lsrs	r2, r3, #24
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	3303      	adds	r3, #3
 80011da:	b2d2      	uxtb	r2, r2
 80011dc:	701a      	strb	r2, [r3, #0]
   STORE32LE(s1, output + 4);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	3304      	adds	r3, #4
 80011e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80011e4:	b2d2      	uxtb	r2, r2
 80011e6:	701a      	strb	r2, [r3, #0]
 80011e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011ea:	0a1a      	lsrs	r2, r3, #8
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	3305      	adds	r3, #5
 80011f0:	b2d2      	uxtb	r2, r2
 80011f2:	701a      	strb	r2, [r3, #0]
 80011f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011f6:	0c1a      	lsrs	r2, r3, #16
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3306      	adds	r3, #6
 80011fc:	b2d2      	uxtb	r2, r2
 80011fe:	701a      	strb	r2, [r3, #0]
 8001200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001202:	0e1a      	lsrs	r2, r3, #24
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3307      	adds	r3, #7
 8001208:	b2d2      	uxtb	r2, r2
 800120a:	701a      	strb	r2, [r3, #0]
   STORE32LE(s2, output + 8);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	3308      	adds	r3, #8
 8001210:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001212:	b2d2      	uxtb	r2, r2
 8001214:	701a      	strb	r2, [r3, #0]
 8001216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001218:	0a1a      	lsrs	r2, r3, #8
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	3309      	adds	r3, #9
 800121e:	b2d2      	uxtb	r2, r2
 8001220:	701a      	strb	r2, [r3, #0]
 8001222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001224:	0c1a      	lsrs	r2, r3, #16
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	330a      	adds	r3, #10
 800122a:	b2d2      	uxtb	r2, r2
 800122c:	701a      	strb	r2, [r3, #0]
 800122e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001230:	0e1a      	lsrs	r2, r3, #24
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	330b      	adds	r3, #11
 8001236:	b2d2      	uxtb	r2, r2
 8001238:	701a      	strb	r2, [r3, #0]
   STORE32LE(s3, output + 12);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	330c      	adds	r3, #12
 800123e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001240:	b2d2      	uxtb	r2, r2
 8001242:	701a      	strb	r2, [r3, #0]
 8001244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001246:	0a1a      	lsrs	r2, r3, #8
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	330d      	adds	r3, #13
 800124c:	b2d2      	uxtb	r2, r2
 800124e:	701a      	strb	r2, [r3, #0]
 8001250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001252:	0c1a      	lsrs	r2, r3, #16
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	330e      	adds	r3, #14
 8001258:	b2d2      	uxtb	r2, r2
 800125a:	701a      	strb	r2, [r3, #0]
 800125c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125e:	0e1a      	lsrs	r2, r3, #24
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	330f      	adds	r3, #15
 8001264:	b2d2      	uxtb	r2, r2
 8001266:	701a      	strb	r2, [r3, #0]
}
 8001268:	bf00      	nop
 800126a:	373c      	adds	r7, #60	; 0x3c
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr
 8001274:	08003ad4 	.word	0x08003ad4

08001278 <AesTest>:
								0x9d, 0x22, 0x69, 0x41, 0x8f, 0xfa, 0xe1, 0xa5, 0xf8, 0x06, 0xc9, 0xef, 0x34, 0x9c, 0xf3, 0x78 };
uint8_t tmp[2048];
uint8_t out[2048];

void AesTest(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
	aesInit(&contextAes16, key32, 16);
 800127c:	2210      	movs	r2, #16
 800127e:	490f      	ldr	r1, [pc, #60]	; (80012bc <AesTest+0x44>)
 8001280:	480f      	ldr	r0, [pc, #60]	; (80012c0 <AesTest+0x48>)
 8001282:	f7ff f949 	bl	8000518 <aesInit>
	aesInit(&contextAes24, key32, 24);
 8001286:	2218      	movs	r2, #24
 8001288:	490c      	ldr	r1, [pc, #48]	; (80012bc <AesTest+0x44>)
 800128a:	480e      	ldr	r0, [pc, #56]	; (80012c4 <AesTest+0x4c>)
 800128c:	f7ff f944 	bl	8000518 <aesInit>
	aesInit(&contextAes32, key32, 32);
 8001290:	2220      	movs	r2, #32
 8001292:	490a      	ldr	r1, [pc, #40]	; (80012bc <AesTest+0x44>)
 8001294:	480c      	ldr	r0, [pc, #48]	; (80012c8 <AesTest+0x50>)
 8001296:	f7ff f93f 	bl	8000518 <aesInit>

	PrintResults(AES16, 2048);
 800129a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800129e:	2001      	movs	r0, #1
 80012a0:	f000 f92a 	bl	80014f8 <PrintResults>
	PrintResults(AES24, 2048);
 80012a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012a8:	2002      	movs	r0, #2
 80012aa:	f000 f925 	bl	80014f8 <PrintResults>
	PrintResults(AES32, 2048);
 80012ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012b2:	2003      	movs	r0, #3
 80012b4:	f000 f920 	bl	80014f8 <PrintResults>
}
 80012b8:	bf00      	nop
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	08004c38 	.word	0x08004c38
 80012c0:	20000028 	.word	0x20000028
 80012c4:	2000020c 	.word	0x2000020c
 80012c8:	200003f0 	.word	0x200003f0

080012cc <EncryptBuf>:

void EncryptBuf(void (*func)(void*, const uint8_t*, uint8_t* ), uint8_t block_size,
				void *context, const uint8_t *input, uint8_t *output, uint32_t data_length)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	607a      	str	r2, [r7, #4]
 80012d6:	603b      	str	r3, [r7, #0]
 80012d8:	460b      	mov	r3, r1
 80012da:	72fb      	strb	r3, [r7, #11]

	for (uint32_t i = 0; i < data_length; i++){
 80012dc:	2300      	movs	r3, #0
 80012de:	617b      	str	r3, [r7, #20]
 80012e0:	e014      	b.n	800130c <EncryptBuf+0x40>
		if (i % block_size == 0) {
 80012e2:	7afa      	ldrb	r2, [r7, #11]
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	fbb3 f1f2 	udiv	r1, r3, r2
 80012ea:	fb01 f202 	mul.w	r2, r1, r2
 80012ee:	1a9b      	subs	r3, r3, r2
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d108      	bne.n	8001306 <EncryptBuf+0x3a>
			func(context, &input[i], &output[i]);
 80012f4:	683a      	ldr	r2, [r7, #0]
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	18d1      	adds	r1, r2, r3
 80012fa:	6a3a      	ldr	r2, [r7, #32]
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	441a      	add	r2, r3
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	4798      	blx	r3
	for (uint32_t i = 0; i < data_length; i++){
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	3301      	adds	r3, #1
 800130a:	617b      	str	r3, [r7, #20]
 800130c:	697a      	ldr	r2, [r7, #20]
 800130e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001310:	429a      	cmp	r2, r3
 8001312:	d3e6      	bcc.n	80012e2 <EncryptBuf+0x16>
		}
	}
}
 8001314:	bf00      	nop
 8001316:	bf00      	nop
 8001318:	3718      	adds	r7, #24
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
	...

08001320 <CleanTabs>:
void CleanTabs(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
	memset(tmp, '\0', sizeof(tmp));
 8001324:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001328:	2100      	movs	r1, #0
 800132a:	4805      	ldr	r0, [pc, #20]	; (8001340 <CleanTabs+0x20>)
 800132c:	f002 fae6 	bl	80038fc <memset>
	memset(out, '\0', sizeof(out));
 8001330:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001334:	2100      	movs	r1, #0
 8001336:	4803      	ldr	r0, [pc, #12]	; (8001344 <CleanTabs+0x24>)
 8001338:	f002 fae0 	bl	80038fc <memset>
}
 800133c:	bf00      	nop
 800133e:	bd80      	pop	{r7, pc}
 8001340:	200005d4 	.word	0x200005d4
 8001344:	20000dd4 	.word	0x20000dd4

08001348 <Compare>:
	HAL_UART_Transmit(&huart2, (uint8_t*)out, strlen((const char *)out), HAL_MAX_DELAY);
	HAL_UART_Transmit(&huart2, (uint8_t*)"\n", strlen("\n"), HAL_MAX_DELAY);
	HAL_UART_Transmit(&huart2, (uint8_t*)"\n", strlen("\n"), HAL_MAX_DELAY);
}
void Compare(uint32_t data_length)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
	if (memcmp(out, input, data_length) == 0) {
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	491b      	ldr	r1, [pc, #108]	; (80013c0 <Compare+0x78>)
 8001354:	481b      	ldr	r0, [pc, #108]	; (80013c4 <Compare+0x7c>)
 8001356:	f002 fac1 	bl	80038dc <memcmp>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d115      	bne.n	800138c <Compare+0x44>
		HAL_UART_Transmit(&huart2, (uint8_t*)"OK", strlen("OK"), HAL_MAX_DELAY);
 8001360:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001364:	2202      	movs	r2, #2
 8001366:	4918      	ldr	r1, [pc, #96]	; (80013c8 <Compare+0x80>)
 8001368:	4818      	ldr	r0, [pc, #96]	; (80013cc <Compare+0x84>)
 800136a:	f001 ff04 	bl	8003176 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)"\n", strlen("\n"), HAL_MAX_DELAY);
 800136e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001372:	2201      	movs	r2, #1
 8001374:	4916      	ldr	r1, [pc, #88]	; (80013d0 <Compare+0x88>)
 8001376:	4815      	ldr	r0, [pc, #84]	; (80013cc <Compare+0x84>)
 8001378:	f001 fefd 	bl	8003176 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)"\n", strlen("\n"), HAL_MAX_DELAY);
 800137c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001380:	2201      	movs	r2, #1
 8001382:	4913      	ldr	r1, [pc, #76]	; (80013d0 <Compare+0x88>)
 8001384:	4811      	ldr	r0, [pc, #68]	; (80013cc <Compare+0x84>)
 8001386:	f001 fef6 	bl	8003176 <HAL_UART_Transmit>
	else {
		HAL_UART_Transmit(&huart2, (uint8_t*)"not OK", strlen("not OK"), HAL_MAX_DELAY);
		HAL_UART_Transmit(&huart2, (uint8_t*)"\n", strlen("\n"), HAL_MAX_DELAY);
		HAL_UART_Transmit(&huart2, (uint8_t*)"\n", strlen("\n"), HAL_MAX_DELAY);
	}
}
 800138a:	e014      	b.n	80013b6 <Compare+0x6e>
		HAL_UART_Transmit(&huart2, (uint8_t*)"not OK", strlen("not OK"), HAL_MAX_DELAY);
 800138c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001390:	2206      	movs	r2, #6
 8001392:	4910      	ldr	r1, [pc, #64]	; (80013d4 <Compare+0x8c>)
 8001394:	480d      	ldr	r0, [pc, #52]	; (80013cc <Compare+0x84>)
 8001396:	f001 feee 	bl	8003176 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)"\n", strlen("\n"), HAL_MAX_DELAY);
 800139a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800139e:	2201      	movs	r2, #1
 80013a0:	490b      	ldr	r1, [pc, #44]	; (80013d0 <Compare+0x88>)
 80013a2:	480a      	ldr	r0, [pc, #40]	; (80013cc <Compare+0x84>)
 80013a4:	f001 fee7 	bl	8003176 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)"\n", strlen("\n"), HAL_MAX_DELAY);
 80013a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013ac:	2201      	movs	r2, #1
 80013ae:	4908      	ldr	r1, [pc, #32]	; (80013d0 <Compare+0x88>)
 80013b0:	4806      	ldr	r0, [pc, #24]	; (80013cc <Compare+0x84>)
 80013b2:	f001 fee0 	bl	8003176 <HAL_UART_Transmit>
}
 80013b6:	bf00      	nop
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	08004400 	.word	0x08004400
 80013c4:	20000dd4 	.word	0x20000dd4
 80013c8:	080039ac 	.word	0x080039ac
 80013cc:	2000161c 	.word	0x2000161c
 80013d0:	080039a8 	.word	0x080039a8
 80013d4:	080039b0 	.word	0x080039b0

080013d8 <PrintTime>:

void PrintTime(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
	uint8_t time_tab[5];

	itoa(TIM6->CNT, (char*)time_tab, 10);
 80013de:	4b11      	ldr	r3, [pc, #68]	; (8001424 <PrintTime+0x4c>)
 80013e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e2:	4618      	mov	r0, r3
 80013e4:	463b      	mov	r3, r7
 80013e6:	220a      	movs	r2, #10
 80013e8:	4619      	mov	r1, r3
 80013ea:	f002 fa75 	bl	80038d8 <itoa>

	TIM6->CNT = 0;
 80013ee:	4b0d      	ldr	r3, [pc, #52]	; (8001424 <PrintTime+0x4c>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_UART_Transmit(&huart2, (uint8_t*)time_tab, strlen((const char *)time_tab), HAL_MAX_DELAY);
 80013f4:	463b      	mov	r3, r7
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7fe ff04 	bl	8000204 <strlen>
 80013fc:	4603      	mov	r3, r0
 80013fe:	b29a      	uxth	r2, r3
 8001400:	4639      	mov	r1, r7
 8001402:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001406:	4808      	ldr	r0, [pc, #32]	; (8001428 <PrintTime+0x50>)
 8001408:	f001 feb5 	bl	8003176 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)"\n", strlen("\n"), HAL_MAX_DELAY);
 800140c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001410:	2201      	movs	r2, #1
 8001412:	4906      	ldr	r1, [pc, #24]	; (800142c <PrintTime+0x54>)
 8001414:	4804      	ldr	r0, [pc, #16]	; (8001428 <PrintTime+0x50>)
 8001416:	f001 feae 	bl	8003176 <HAL_UART_Transmit>

}
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40001000 	.word	0x40001000
 8001428:	2000161c 	.word	0x2000161c
 800142c:	080039a8 	.word	0x080039a8

08001430 <PrintInfo>:
void PrintInfo(const uint8_t* cryptoName, uint32_t dataLength, uint8_t keySize)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b088      	sub	sp, #32
 8001434:	af00      	add	r7, sp, #0
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	4613      	mov	r3, r2
 800143c:	71fb      	strb	r3, [r7, #7]
	uint8_t keySizeTab[2];
	uint8_t dataLengthTab[10];

	itoa(keySize, (char*)keySizeTab, 10);
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	f107 011c 	add.w	r1, r7, #28
 8001444:	220a      	movs	r2, #10
 8001446:	4618      	mov	r0, r3
 8001448:	f002 fa46 	bl	80038d8 <itoa>
	itoa(dataLength, (char*)dataLengthTab, 10);
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	f107 0110 	add.w	r1, r7, #16
 8001452:	220a      	movs	r2, #10
 8001454:	4618      	mov	r0, r3
 8001456:	f002 fa3f 	bl	80038d8 <itoa>
	// Algorithm name
	HAL_UART_Transmit(&huart2, cryptoName, strlen((const char *)cryptoName), HAL_MAX_DELAY);
 800145a:	68f8      	ldr	r0, [r7, #12]
 800145c:	f7fe fed2 	bl	8000204 <strlen>
 8001460:	4603      	mov	r3, r0
 8001462:	b29a      	uxth	r2, r3
 8001464:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001468:	68f9      	ldr	r1, [r7, #12]
 800146a:	481f      	ldr	r0, [pc, #124]	; (80014e8 <PrintInfo+0xb8>)
 800146c:	f001 fe83 	bl	8003176 <HAL_UART_Transmit>
	// Key size
	HAL_UART_Transmit(&huart2, keySizeName, sizeof(keySizeName), HAL_MAX_DELAY);
 8001470:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001474:	220e      	movs	r2, #14
 8001476:	491d      	ldr	r1, [pc, #116]	; (80014ec <PrintInfo+0xbc>)
 8001478:	481b      	ldr	r0, [pc, #108]	; (80014e8 <PrintInfo+0xb8>)
 800147a:	f001 fe7c 	bl	8003176 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, keySizeTab, strlen((const char *)keySizeTab), HAL_MAX_DELAY);
 800147e:	f107 031c 	add.w	r3, r7, #28
 8001482:	4618      	mov	r0, r3
 8001484:	f7fe febe 	bl	8000204 <strlen>
 8001488:	4603      	mov	r3, r0
 800148a:	b29a      	uxth	r2, r3
 800148c:	f107 011c 	add.w	r1, r7, #28
 8001490:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001494:	4814      	ldr	r0, [pc, #80]	; (80014e8 <PrintInfo+0xb8>)
 8001496:	f001 fe6e 	bl	8003176 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)"\n", strlen("\n"), HAL_MAX_DELAY);
 800149a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800149e:	2201      	movs	r2, #1
 80014a0:	4913      	ldr	r1, [pc, #76]	; (80014f0 <PrintInfo+0xc0>)
 80014a2:	4811      	ldr	r0, [pc, #68]	; (80014e8 <PrintInfo+0xb8>)
 80014a4:	f001 fe67 	bl	8003176 <HAL_UART_Transmit>
	// Data length
	HAL_UART_Transmit(&huart2, dataLengthName, sizeof(dataLengthName), HAL_MAX_DELAY);
 80014a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014ac:	2218      	movs	r2, #24
 80014ae:	4911      	ldr	r1, [pc, #68]	; (80014f4 <PrintInfo+0xc4>)
 80014b0:	480d      	ldr	r0, [pc, #52]	; (80014e8 <PrintInfo+0xb8>)
 80014b2:	f001 fe60 	bl	8003176 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, dataLengthTab, strlen((const char *)dataLengthTab), HAL_MAX_DELAY);
 80014b6:	f107 0310 	add.w	r3, r7, #16
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7fe fea2 	bl	8000204 <strlen>
 80014c0:	4603      	mov	r3, r0
 80014c2:	b29a      	uxth	r2, r3
 80014c4:	f107 0110 	add.w	r1, r7, #16
 80014c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014cc:	4806      	ldr	r0, [pc, #24]	; (80014e8 <PrintInfo+0xb8>)
 80014ce:	f001 fe52 	bl	8003176 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)"\n", strlen("\n"), HAL_MAX_DELAY);
 80014d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014d6:	2201      	movs	r2, #1
 80014d8:	4905      	ldr	r1, [pc, #20]	; (80014f0 <PrintInfo+0xc0>)
 80014da:	4803      	ldr	r0, [pc, #12]	; (80014e8 <PrintInfo+0xb8>)
 80014dc:	f001 fe4b 	bl	8003176 <HAL_UART_Transmit>

}
 80014e0:	bf00      	nop
 80014e2:	3720      	adds	r7, #32
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	2000161c 	.word	0x2000161c
 80014ec:	08004c10 	.word	0x08004c10
 80014f0:	080039a8 	.word	0x080039a8
 80014f4:	08004c20 	.word	0x08004c20

080014f8 <PrintResults>:

void PrintResults (uint8_t crypto, uint32_t data_length)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af02      	add	r7, sp, #8
 80014fe:	4603      	mov	r3, r0
 8001500:	6039      	str	r1, [r7, #0]
 8001502:	71fb      	strb	r3, [r7, #7]
	CleanTabs();
 8001504:	f7ff ff0c 	bl	8001320 <CleanTabs>

	switch(crypto){
 8001508:	79fb      	ldrb	r3, [r7, #7]
 800150a:	2b03      	cmp	r3, #3
 800150c:	d061      	beq.n	80015d2 <PrintResults+0xda>
 800150e:	2b03      	cmp	r3, #3
 8001510:	f300 808c 	bgt.w	800162c <PrintResults+0x134>
 8001514:	2b01      	cmp	r3, #1
 8001516:	d002      	beq.n	800151e <PrintResults+0x26>
 8001518:	2b02      	cmp	r3, #2
 800151a:	d02d      	beq.n	8001578 <PrintResults+0x80>
 800151c:	e086      	b.n	800162c <PrintResults+0x134>

		case AES16:
			PrintInfo(aesName, data_length, 16);
 800151e:	2210      	movs	r2, #16
 8001520:	6839      	ldr	r1, [r7, #0]
 8001522:	4848      	ldr	r0, [pc, #288]	; (8001644 <PrintResults+0x14c>)
 8001524:	f7ff ff84 	bl	8001430 <PrintInfo>
			HAL_TIM_Base_Start(&htim6);
 8001528:	4847      	ldr	r0, [pc, #284]	; (8001648 <PrintResults+0x150>)
 800152a:	f001 fc2b 	bl	8002d84 <HAL_TIM_Base_Start>
			EncryptBuf(aesEncryptBlock, 16, &contextAes16, input, tmp, data_length);
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	9301      	str	r3, [sp, #4]
 8001532:	4b46      	ldr	r3, [pc, #280]	; (800164c <PrintResults+0x154>)
 8001534:	9300      	str	r3, [sp, #0]
 8001536:	4b46      	ldr	r3, [pc, #280]	; (8001650 <PrintResults+0x158>)
 8001538:	4a46      	ldr	r2, [pc, #280]	; (8001654 <PrintResults+0x15c>)
 800153a:	2110      	movs	r1, #16
 800153c:	4846      	ldr	r0, [pc, #280]	; (8001658 <PrintResults+0x160>)
 800153e:	f7ff fec5 	bl	80012cc <EncryptBuf>
			HAL_TIM_Base_Stop(&htim6);
 8001542:	4841      	ldr	r0, [pc, #260]	; (8001648 <PrintResults+0x150>)
 8001544:	f001 fc86 	bl	8002e54 <HAL_TIM_Base_Stop>
			PrintTime();
 8001548:	f7ff ff46 	bl	80013d8 <PrintTime>

			HAL_TIM_Base_Start(&htim6);
 800154c:	483e      	ldr	r0, [pc, #248]	; (8001648 <PrintResults+0x150>)
 800154e:	f001 fc19 	bl	8002d84 <HAL_TIM_Base_Start>
			EncryptBuf(aesDecryptBlock, 16, &contextAes16, tmp, out, data_length);
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	9301      	str	r3, [sp, #4]
 8001556:	4b41      	ldr	r3, [pc, #260]	; (800165c <PrintResults+0x164>)
 8001558:	9300      	str	r3, [sp, #0]
 800155a:	4b3c      	ldr	r3, [pc, #240]	; (800164c <PrintResults+0x154>)
 800155c:	4a3d      	ldr	r2, [pc, #244]	; (8001654 <PrintResults+0x15c>)
 800155e:	2110      	movs	r1, #16
 8001560:	483f      	ldr	r0, [pc, #252]	; (8001660 <PrintResults+0x168>)
 8001562:	f7ff feb3 	bl	80012cc <EncryptBuf>
			HAL_TIM_Base_Stop(&htim6);
 8001566:	4838      	ldr	r0, [pc, #224]	; (8001648 <PrintResults+0x150>)
 8001568:	f001 fc74 	bl	8002e54 <HAL_TIM_Base_Stop>
			PrintTime();
 800156c:	f7ff ff34 	bl	80013d8 <PrintTime>

			Compare(data_length);
 8001570:	6838      	ldr	r0, [r7, #0]
 8001572:	f7ff fee9 	bl	8001348 <Compare>

			break;
 8001576:	e061      	b.n	800163c <PrintResults+0x144>

		case AES24:
			PrintInfo(aesName, data_length, 24);
 8001578:	2218      	movs	r2, #24
 800157a:	6839      	ldr	r1, [r7, #0]
 800157c:	4831      	ldr	r0, [pc, #196]	; (8001644 <PrintResults+0x14c>)
 800157e:	f7ff ff57 	bl	8001430 <PrintInfo>
			HAL_TIM_Base_Start(&htim6);
 8001582:	4831      	ldr	r0, [pc, #196]	; (8001648 <PrintResults+0x150>)
 8001584:	f001 fbfe 	bl	8002d84 <HAL_TIM_Base_Start>
			EncryptBuf(aesEncryptBlock, 16, &contextAes24, input, tmp, data_length);
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	9301      	str	r3, [sp, #4]
 800158c:	4b2f      	ldr	r3, [pc, #188]	; (800164c <PrintResults+0x154>)
 800158e:	9300      	str	r3, [sp, #0]
 8001590:	4b2f      	ldr	r3, [pc, #188]	; (8001650 <PrintResults+0x158>)
 8001592:	4a34      	ldr	r2, [pc, #208]	; (8001664 <PrintResults+0x16c>)
 8001594:	2110      	movs	r1, #16
 8001596:	4830      	ldr	r0, [pc, #192]	; (8001658 <PrintResults+0x160>)
 8001598:	f7ff fe98 	bl	80012cc <EncryptBuf>
			HAL_TIM_Base_Stop(&htim6);
 800159c:	482a      	ldr	r0, [pc, #168]	; (8001648 <PrintResults+0x150>)
 800159e:	f001 fc59 	bl	8002e54 <HAL_TIM_Base_Stop>
			PrintTime();
 80015a2:	f7ff ff19 	bl	80013d8 <PrintTime>

			HAL_TIM_Base_Start(&htim6);
 80015a6:	4828      	ldr	r0, [pc, #160]	; (8001648 <PrintResults+0x150>)
 80015a8:	f001 fbec 	bl	8002d84 <HAL_TIM_Base_Start>
			EncryptBuf(aesDecryptBlock, 16, &contextAes24, tmp, out, data_length);
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	9301      	str	r3, [sp, #4]
 80015b0:	4b2a      	ldr	r3, [pc, #168]	; (800165c <PrintResults+0x164>)
 80015b2:	9300      	str	r3, [sp, #0]
 80015b4:	4b25      	ldr	r3, [pc, #148]	; (800164c <PrintResults+0x154>)
 80015b6:	4a2b      	ldr	r2, [pc, #172]	; (8001664 <PrintResults+0x16c>)
 80015b8:	2110      	movs	r1, #16
 80015ba:	4829      	ldr	r0, [pc, #164]	; (8001660 <PrintResults+0x168>)
 80015bc:	f7ff fe86 	bl	80012cc <EncryptBuf>
			HAL_TIM_Base_Stop(&htim6);
 80015c0:	4821      	ldr	r0, [pc, #132]	; (8001648 <PrintResults+0x150>)
 80015c2:	f001 fc47 	bl	8002e54 <HAL_TIM_Base_Stop>
			PrintTime();
 80015c6:	f7ff ff07 	bl	80013d8 <PrintTime>

			Compare(data_length);
 80015ca:	6838      	ldr	r0, [r7, #0]
 80015cc:	f7ff febc 	bl	8001348 <Compare>

			break;
 80015d0:	e034      	b.n	800163c <PrintResults+0x144>

		case AES32:
			PrintInfo(aesName, data_length, 32);
 80015d2:	2220      	movs	r2, #32
 80015d4:	6839      	ldr	r1, [r7, #0]
 80015d6:	481b      	ldr	r0, [pc, #108]	; (8001644 <PrintResults+0x14c>)
 80015d8:	f7ff ff2a 	bl	8001430 <PrintInfo>
			HAL_TIM_Base_Start(&htim6);
 80015dc:	481a      	ldr	r0, [pc, #104]	; (8001648 <PrintResults+0x150>)
 80015de:	f001 fbd1 	bl	8002d84 <HAL_TIM_Base_Start>
			EncryptBuf(aesEncryptBlock, 16, &contextAes32, input, tmp, data_length);
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	9301      	str	r3, [sp, #4]
 80015e6:	4b19      	ldr	r3, [pc, #100]	; (800164c <PrintResults+0x154>)
 80015e8:	9300      	str	r3, [sp, #0]
 80015ea:	4b19      	ldr	r3, [pc, #100]	; (8001650 <PrintResults+0x158>)
 80015ec:	4a1e      	ldr	r2, [pc, #120]	; (8001668 <PrintResults+0x170>)
 80015ee:	2110      	movs	r1, #16
 80015f0:	4819      	ldr	r0, [pc, #100]	; (8001658 <PrintResults+0x160>)
 80015f2:	f7ff fe6b 	bl	80012cc <EncryptBuf>
			HAL_TIM_Base_Stop(&htim6);
 80015f6:	4814      	ldr	r0, [pc, #80]	; (8001648 <PrintResults+0x150>)
 80015f8:	f001 fc2c 	bl	8002e54 <HAL_TIM_Base_Stop>
			PrintTime();
 80015fc:	f7ff feec 	bl	80013d8 <PrintTime>

			HAL_TIM_Base_Start(&htim6);
 8001600:	4811      	ldr	r0, [pc, #68]	; (8001648 <PrintResults+0x150>)
 8001602:	f001 fbbf 	bl	8002d84 <HAL_TIM_Base_Start>
			EncryptBuf(aesDecryptBlock, 16, &contextAes32, tmp, out, data_length);
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	9301      	str	r3, [sp, #4]
 800160a:	4b14      	ldr	r3, [pc, #80]	; (800165c <PrintResults+0x164>)
 800160c:	9300      	str	r3, [sp, #0]
 800160e:	4b0f      	ldr	r3, [pc, #60]	; (800164c <PrintResults+0x154>)
 8001610:	4a15      	ldr	r2, [pc, #84]	; (8001668 <PrintResults+0x170>)
 8001612:	2110      	movs	r1, #16
 8001614:	4812      	ldr	r0, [pc, #72]	; (8001660 <PrintResults+0x168>)
 8001616:	f7ff fe59 	bl	80012cc <EncryptBuf>
			HAL_TIM_Base_Stop(&htim6);
 800161a:	480b      	ldr	r0, [pc, #44]	; (8001648 <PrintResults+0x150>)
 800161c:	f001 fc1a 	bl	8002e54 <HAL_TIM_Base_Stop>
			PrintTime();
 8001620:	f7ff feda 	bl	80013d8 <PrintTime>

			Compare(data_length);
 8001624:	6838      	ldr	r0, [r7, #0]
 8001626:	f7ff fe8f 	bl	8001348 <Compare>

			break;
 800162a:	e007      	b.n	800163c <PrintResults+0x144>
			Compare(input1024);

			break;
*/
		default:
			HAL_UART_Transmit(&huart2, (uint8_t*)"Incorrect algorithm's name.", strlen("Incorrect algorithm's name."), HAL_MAX_DELAY);
 800162c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001630:	221b      	movs	r2, #27
 8001632:	490e      	ldr	r1, [pc, #56]	; (800166c <PrintResults+0x174>)
 8001634:	480e      	ldr	r0, [pc, #56]	; (8001670 <PrintResults+0x178>)
 8001636:	f001 fd9e 	bl	8003176 <HAL_UART_Transmit>
	}
}
 800163a:	bf00      	nop
 800163c:	bf00      	nop
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	08004c00 	.word	0x08004c00
 8001648:	200015d4 	.word	0x200015d4
 800164c:	200005d4 	.word	0x200005d4
 8001650:	08004400 	.word	0x08004400
 8001654:	20000028 	.word	0x20000028
 8001658:	0800089d 	.word	0x0800089d
 800165c:	20000dd4 	.word	0x20000dd4
 8001660:	08000d81 	.word	0x08000d81
 8001664:	2000020c 	.word	0x2000020c
 8001668:	200003f0 	.word	0x200003f0
 800166c:	080039b8 	.word	0x080039b8
 8001670:	2000161c 	.word	0x2000161c

08001674 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b08a      	sub	sp, #40	; 0x28
 8001678:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167a:	f107 0314 	add.w	r3, r7, #20
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	605a      	str	r2, [r3, #4]
 8001684:	609a      	str	r2, [r3, #8]
 8001686:	60da      	str	r2, [r3, #12]
 8001688:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	613b      	str	r3, [r7, #16]
 800168e:	4b2d      	ldr	r3, [pc, #180]	; (8001744 <MX_GPIO_Init+0xd0>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	4a2c      	ldr	r2, [pc, #176]	; (8001744 <MX_GPIO_Init+0xd0>)
 8001694:	f043 0304 	orr.w	r3, r3, #4
 8001698:	6313      	str	r3, [r2, #48]	; 0x30
 800169a:	4b2a      	ldr	r3, [pc, #168]	; (8001744 <MX_GPIO_Init+0xd0>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	f003 0304 	and.w	r3, r3, #4
 80016a2:	613b      	str	r3, [r7, #16]
 80016a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	4b26      	ldr	r3, [pc, #152]	; (8001744 <MX_GPIO_Init+0xd0>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	4a25      	ldr	r2, [pc, #148]	; (8001744 <MX_GPIO_Init+0xd0>)
 80016b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016b4:	6313      	str	r3, [r2, #48]	; 0x30
 80016b6:	4b23      	ldr	r3, [pc, #140]	; (8001744 <MX_GPIO_Init+0xd0>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	60bb      	str	r3, [r7, #8]
 80016c6:	4b1f      	ldr	r3, [pc, #124]	; (8001744 <MX_GPIO_Init+0xd0>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	4a1e      	ldr	r2, [pc, #120]	; (8001744 <MX_GPIO_Init+0xd0>)
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	6313      	str	r3, [r2, #48]	; 0x30
 80016d2:	4b1c      	ldr	r3, [pc, #112]	; (8001744 <MX_GPIO_Init+0xd0>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	60bb      	str	r3, [r7, #8]
 80016dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	607b      	str	r3, [r7, #4]
 80016e2:	4b18      	ldr	r3, [pc, #96]	; (8001744 <MX_GPIO_Init+0xd0>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	4a17      	ldr	r2, [pc, #92]	; (8001744 <MX_GPIO_Init+0xd0>)
 80016e8:	f043 0302 	orr.w	r3, r3, #2
 80016ec:	6313      	str	r3, [r2, #48]	; 0x30
 80016ee:	4b15      	ldr	r3, [pc, #84]	; (8001744 <MX_GPIO_Init+0xd0>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	607b      	str	r3, [r7, #4]
 80016f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80016fa:	2200      	movs	r2, #0
 80016fc:	2120      	movs	r1, #32
 80016fe:	4812      	ldr	r0, [pc, #72]	; (8001748 <MX_GPIO_Init+0xd4>)
 8001700:	f000 fcee 	bl	80020e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001704:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001708:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800170a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800170e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001710:	2300      	movs	r3, #0
 8001712:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001714:	f107 0314 	add.w	r3, r7, #20
 8001718:	4619      	mov	r1, r3
 800171a:	480c      	ldr	r0, [pc, #48]	; (800174c <MX_GPIO_Init+0xd8>)
 800171c:	f000 fb4c 	bl	8001db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001720:	2320      	movs	r3, #32
 8001722:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001724:	2301      	movs	r3, #1
 8001726:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172c:	2300      	movs	r3, #0
 800172e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001730:	f107 0314 	add.w	r3, r7, #20
 8001734:	4619      	mov	r1, r3
 8001736:	4804      	ldr	r0, [pc, #16]	; (8001748 <MX_GPIO_Init+0xd4>)
 8001738:	f000 fb3e 	bl	8001db8 <HAL_GPIO_Init>

}
 800173c:	bf00      	nop
 800173e:	3728      	adds	r7, #40	; 0x28
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40023800 	.word	0x40023800
 8001748:	40020000 	.word	0x40020000
 800174c:	40020800 	.word	0x40020800

08001750 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001754:	f000 f9d8 	bl	8001b08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001758:	f000 f80a 	bl	8001770 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800175c:	f7ff ff8a 	bl	8001674 <MX_GPIO_Init>
  MX_TIM6_Init();
 8001760:	f000 f8de 	bl	8001920 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 8001764:	f000 f934 	bl	80019d0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  AesTest();
 8001768:	f7ff fd86 	bl	8001278 <AesTest>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800176c:	e7fe      	b.n	800176c <main+0x1c>
	...

08001770 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b094      	sub	sp, #80	; 0x50
 8001774:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001776:	f107 031c 	add.w	r3, r7, #28
 800177a:	2234      	movs	r2, #52	; 0x34
 800177c:	2100      	movs	r1, #0
 800177e:	4618      	mov	r0, r3
 8001780:	f002 f8bc 	bl	80038fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001784:	f107 0308 	add.w	r3, r7, #8
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	609a      	str	r2, [r3, #8]
 8001790:	60da      	str	r2, [r3, #12]
 8001792:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001794:	2300      	movs	r3, #0
 8001796:	607b      	str	r3, [r7, #4]
 8001798:	4b2a      	ldr	r3, [pc, #168]	; (8001844 <SystemClock_Config+0xd4>)
 800179a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179c:	4a29      	ldr	r2, [pc, #164]	; (8001844 <SystemClock_Config+0xd4>)
 800179e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017a2:	6413      	str	r3, [r2, #64]	; 0x40
 80017a4:	4b27      	ldr	r3, [pc, #156]	; (8001844 <SystemClock_Config+0xd4>)
 80017a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ac:	607b      	str	r3, [r7, #4]
 80017ae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80017b0:	2300      	movs	r3, #0
 80017b2:	603b      	str	r3, [r7, #0]
 80017b4:	4b24      	ldr	r3, [pc, #144]	; (8001848 <SystemClock_Config+0xd8>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80017bc:	4a22      	ldr	r2, [pc, #136]	; (8001848 <SystemClock_Config+0xd8>)
 80017be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017c2:	6013      	str	r3, [r2, #0]
 80017c4:	4b20      	ldr	r3, [pc, #128]	; (8001848 <SystemClock_Config+0xd8>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017cc:	603b      	str	r3, [r7, #0]
 80017ce:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017d0:	2302      	movs	r3, #2
 80017d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017d4:	2301      	movs	r3, #1
 80017d6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017d8:	2310      	movs	r3, #16
 80017da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017dc:	2302      	movs	r3, #2
 80017de:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017e0:	2300      	movs	r3, #0
 80017e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80017e4:	2310      	movs	r3, #16
 80017e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80017e8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80017ec:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80017ee:	2304      	movs	r3, #4
 80017f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80017f2:	2302      	movs	r3, #2
 80017f4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80017f6:	2302      	movs	r3, #2
 80017f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017fa:	f107 031c 	add.w	r3, r7, #28
 80017fe:	4618      	mov	r0, r3
 8001800:	f000 ffd2 	bl	80027a8 <HAL_RCC_OscConfig>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800180a:	f000 f81f 	bl	800184c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800180e:	230f      	movs	r3, #15
 8001810:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001812:	2302      	movs	r3, #2
 8001814:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001816:	2300      	movs	r3, #0
 8001818:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800181a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800181e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001820:	2300      	movs	r3, #0
 8001822:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001824:	f107 0308 	add.w	r3, r7, #8
 8001828:	2102      	movs	r1, #2
 800182a:	4618      	mov	r0, r3
 800182c:	f000 fc72 	bl	8002114 <HAL_RCC_ClockConfig>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001836:	f000 f809 	bl	800184c <Error_Handler>
  }
}
 800183a:	bf00      	nop
 800183c:	3750      	adds	r7, #80	; 0x50
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40023800 	.word	0x40023800
 8001848:	40007000 	.word	0x40007000

0800184c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001850:	b672      	cpsid	i
}
 8001852:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001854:	e7fe      	b.n	8001854 <Error_Handler+0x8>
	...

08001858 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	607b      	str	r3, [r7, #4]
 8001862:	4b10      	ldr	r3, [pc, #64]	; (80018a4 <HAL_MspInit+0x4c>)
 8001864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001866:	4a0f      	ldr	r2, [pc, #60]	; (80018a4 <HAL_MspInit+0x4c>)
 8001868:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800186c:	6453      	str	r3, [r2, #68]	; 0x44
 800186e:	4b0d      	ldr	r3, [pc, #52]	; (80018a4 <HAL_MspInit+0x4c>)
 8001870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001872:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001876:	607b      	str	r3, [r7, #4]
 8001878:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	603b      	str	r3, [r7, #0]
 800187e:	4b09      	ldr	r3, [pc, #36]	; (80018a4 <HAL_MspInit+0x4c>)
 8001880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001882:	4a08      	ldr	r2, [pc, #32]	; (80018a4 <HAL_MspInit+0x4c>)
 8001884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001888:	6413      	str	r3, [r2, #64]	; 0x40
 800188a:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <HAL_MspInit+0x4c>)
 800188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001892:	603b      	str	r3, [r7, #0]
 8001894:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001896:	2007      	movs	r0, #7
 8001898:	f000 fa5a 	bl	8001d50 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800189c:	bf00      	nop
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40023800 	.word	0x40023800

080018a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018ac:	e7fe      	b.n	80018ac <NMI_Handler+0x4>

080018ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ae:	b480      	push	{r7}
 80018b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018b2:	e7fe      	b.n	80018b2 <HardFault_Handler+0x4>

080018b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018b8:	e7fe      	b.n	80018b8 <MemManage_Handler+0x4>

080018ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018ba:	b480      	push	{r7}
 80018bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018be:	e7fe      	b.n	80018be <BusFault_Handler+0x4>

080018c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018c4:	e7fe      	b.n	80018c4 <UsageFault_Handler+0x4>

080018c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018c6:	b480      	push	{r7}
 80018c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018ca:	bf00      	nop
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018d8:	bf00      	nop
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr

080018e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018e2:	b480      	push	{r7}
 80018e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018f4:	f000 f95a 	bl	8001bac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018f8:	bf00      	nop
 80018fa:	bd80      	pop	{r7, pc}

080018fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001900:	4b06      	ldr	r3, [pc, #24]	; (800191c <SystemInit+0x20>)
 8001902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001906:	4a05      	ldr	r2, [pc, #20]	; (800191c <SystemInit+0x20>)
 8001908:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800190c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001910:	bf00      	nop
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	e000ed00 	.word	0xe000ed00

08001920 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001926:	463b      	mov	r3, r7
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800192e:	4b15      	ldr	r3, [pc, #84]	; (8001984 <MX_TIM6_Init+0x64>)
 8001930:	4a15      	ldr	r2, [pc, #84]	; (8001988 <MX_TIM6_Init+0x68>)
 8001932:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1000;
 8001934:	4b13      	ldr	r3, [pc, #76]	; (8001984 <MX_TIM6_Init+0x64>)
 8001936:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800193a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800193c:	4b11      	ldr	r3, [pc, #68]	; (8001984 <MX_TIM6_Init+0x64>)
 800193e:	2200      	movs	r2, #0
 8001940:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001942:	4b10      	ldr	r3, [pc, #64]	; (8001984 <MX_TIM6_Init+0x64>)
 8001944:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001948:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800194a:	4b0e      	ldr	r3, [pc, #56]	; (8001984 <MX_TIM6_Init+0x64>)
 800194c:	2200      	movs	r2, #0
 800194e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001950:	480c      	ldr	r0, [pc, #48]	; (8001984 <MX_TIM6_Init+0x64>)
 8001952:	f001 f9c7 	bl	8002ce4 <HAL_TIM_Base_Init>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800195c:	f7ff ff76 	bl	800184c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001960:	2300      	movs	r3, #0
 8001962:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001964:	2300      	movs	r3, #0
 8001966:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001968:	463b      	mov	r3, r7
 800196a:	4619      	mov	r1, r3
 800196c:	4805      	ldr	r0, [pc, #20]	; (8001984 <MX_TIM6_Init+0x64>)
 800196e:	f001 fb39 	bl	8002fe4 <HAL_TIMEx_MasterConfigSynchronization>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001978:	f7ff ff68 	bl	800184c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800197c:	bf00      	nop
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	200015d4 	.word	0x200015d4
 8001988:	40001000 	.word	0x40001000

0800198c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a0b      	ldr	r2, [pc, #44]	; (80019c8 <HAL_TIM_Base_MspInit+0x3c>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d10d      	bne.n	80019ba <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	60fb      	str	r3, [r7, #12]
 80019a2:	4b0a      	ldr	r3, [pc, #40]	; (80019cc <HAL_TIM_Base_MspInit+0x40>)
 80019a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a6:	4a09      	ldr	r2, [pc, #36]	; (80019cc <HAL_TIM_Base_MspInit+0x40>)
 80019a8:	f043 0310 	orr.w	r3, r3, #16
 80019ac:	6413      	str	r3, [r2, #64]	; 0x40
 80019ae:	4b07      	ldr	r3, [pc, #28]	; (80019cc <HAL_TIM_Base_MspInit+0x40>)
 80019b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b2:	f003 0310 	and.w	r3, r3, #16
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80019ba:	bf00      	nop
 80019bc:	3714      	adds	r7, #20
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	40001000 	.word	0x40001000
 80019cc:	40023800 	.word	0x40023800

080019d0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019d4:	4b11      	ldr	r3, [pc, #68]	; (8001a1c <MX_USART2_UART_Init+0x4c>)
 80019d6:	4a12      	ldr	r2, [pc, #72]	; (8001a20 <MX_USART2_UART_Init+0x50>)
 80019d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80019da:	4b10      	ldr	r3, [pc, #64]	; (8001a1c <MX_USART2_UART_Init+0x4c>)
 80019dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019e2:	4b0e      	ldr	r3, [pc, #56]	; (8001a1c <MX_USART2_UART_Init+0x4c>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019e8:	4b0c      	ldr	r3, [pc, #48]	; (8001a1c <MX_USART2_UART_Init+0x4c>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019ee:	4b0b      	ldr	r3, [pc, #44]	; (8001a1c <MX_USART2_UART_Init+0x4c>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019f4:	4b09      	ldr	r3, [pc, #36]	; (8001a1c <MX_USART2_UART_Init+0x4c>)
 80019f6:	220c      	movs	r2, #12
 80019f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019fa:	4b08      	ldr	r3, [pc, #32]	; (8001a1c <MX_USART2_UART_Init+0x4c>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a00:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <MX_USART2_UART_Init+0x4c>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a06:	4805      	ldr	r0, [pc, #20]	; (8001a1c <MX_USART2_UART_Init+0x4c>)
 8001a08:	f001 fb68 	bl	80030dc <HAL_UART_Init>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a12:	f7ff ff1b 	bl	800184c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	2000161c 	.word	0x2000161c
 8001a20:	40004400 	.word	0x40004400

08001a24 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b08a      	sub	sp, #40	; 0x28
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2c:	f107 0314 	add.w	r3, r7, #20
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	60da      	str	r2, [r3, #12]
 8001a3a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a19      	ldr	r2, [pc, #100]	; (8001aa8 <HAL_UART_MspInit+0x84>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d12b      	bne.n	8001a9e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	613b      	str	r3, [r7, #16]
 8001a4a:	4b18      	ldr	r3, [pc, #96]	; (8001aac <HAL_UART_MspInit+0x88>)
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4e:	4a17      	ldr	r2, [pc, #92]	; (8001aac <HAL_UART_MspInit+0x88>)
 8001a50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a54:	6413      	str	r3, [r2, #64]	; 0x40
 8001a56:	4b15      	ldr	r3, [pc, #84]	; (8001aac <HAL_UART_MspInit+0x88>)
 8001a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5e:	613b      	str	r3, [r7, #16]
 8001a60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	4b11      	ldr	r3, [pc, #68]	; (8001aac <HAL_UART_MspInit+0x88>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	4a10      	ldr	r2, [pc, #64]	; (8001aac <HAL_UART_MspInit+0x88>)
 8001a6c:	f043 0301 	orr.w	r3, r3, #1
 8001a70:	6313      	str	r3, [r2, #48]	; 0x30
 8001a72:	4b0e      	ldr	r3, [pc, #56]	; (8001aac <HAL_UART_MspInit+0x88>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a7e:	230c      	movs	r3, #12
 8001a80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a82:	2302      	movs	r3, #2
 8001a84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a86:	2300      	movs	r3, #0
 8001a88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a8e:	2307      	movs	r3, #7
 8001a90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a92:	f107 0314 	add.w	r3, r7, #20
 8001a96:	4619      	mov	r1, r3
 8001a98:	4805      	ldr	r0, [pc, #20]	; (8001ab0 <HAL_UART_MspInit+0x8c>)
 8001a9a:	f000 f98d 	bl	8001db8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001a9e:	bf00      	nop
 8001aa0:	3728      	adds	r7, #40	; 0x28
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40004400 	.word	0x40004400
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	40020000 	.word	0x40020000

08001ab4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ab4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001aec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ab8:	480d      	ldr	r0, [pc, #52]	; (8001af0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001aba:	490e      	ldr	r1, [pc, #56]	; (8001af4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001abc:	4a0e      	ldr	r2, [pc, #56]	; (8001af8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001abe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ac0:	e002      	b.n	8001ac8 <LoopCopyDataInit>

08001ac2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ac2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ac4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ac6:	3304      	adds	r3, #4

08001ac8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ac8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001acc:	d3f9      	bcc.n	8001ac2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ace:	4a0b      	ldr	r2, [pc, #44]	; (8001afc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ad0:	4c0b      	ldr	r4, [pc, #44]	; (8001b00 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ad2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ad4:	e001      	b.n	8001ada <LoopFillZerobss>

08001ad6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ad6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ad8:	3204      	adds	r2, #4

08001ada <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ada:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001adc:	d3fb      	bcc.n	8001ad6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ade:	f7ff ff0d 	bl	80018fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ae2:	f001 febd 	bl	8003860 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ae6:	f7ff fe33 	bl	8001750 <main>
  bx  lr    
 8001aea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001aec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001af0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001af4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001af8:	08004ca8 	.word	0x08004ca8
  ldr r2, =_sbss
 8001afc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001b00:	20001664 	.word	0x20001664

08001b04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b04:	e7fe      	b.n	8001b04 <ADC_IRQHandler>
	...

08001b08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b0c:	4b0e      	ldr	r3, [pc, #56]	; (8001b48 <HAL_Init+0x40>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a0d      	ldr	r2, [pc, #52]	; (8001b48 <HAL_Init+0x40>)
 8001b12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b18:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <HAL_Init+0x40>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a0a      	ldr	r2, [pc, #40]	; (8001b48 <HAL_Init+0x40>)
 8001b1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b24:	4b08      	ldr	r3, [pc, #32]	; (8001b48 <HAL_Init+0x40>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a07      	ldr	r2, [pc, #28]	; (8001b48 <HAL_Init+0x40>)
 8001b2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b30:	2003      	movs	r0, #3
 8001b32:	f000 f90d 	bl	8001d50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b36:	2000      	movs	r0, #0
 8001b38:	f000 f808 	bl	8001b4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b3c:	f7ff fe8c 	bl	8001858 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40023c00 	.word	0x40023c00

08001b4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b54:	4b12      	ldr	r3, [pc, #72]	; (8001ba0 <HAL_InitTick+0x54>)
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	4b12      	ldr	r3, [pc, #72]	; (8001ba4 <HAL_InitTick+0x58>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b62:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f000 f917 	bl	8001d9e <HAL_SYSTICK_Config>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e00e      	b.n	8001b98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2b0f      	cmp	r3, #15
 8001b7e:	d80a      	bhi.n	8001b96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b80:	2200      	movs	r2, #0
 8001b82:	6879      	ldr	r1, [r7, #4]
 8001b84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b88:	f000 f8ed 	bl	8001d66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b8c:	4a06      	ldr	r2, [pc, #24]	; (8001ba8 <HAL_InitTick+0x5c>)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b92:	2300      	movs	r3, #0
 8001b94:	e000      	b.n	8001b98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	20000000 	.word	0x20000000
 8001ba4:	20000008 	.word	0x20000008
 8001ba8:	20000004 	.word	0x20000004

08001bac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bb0:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <HAL_IncTick+0x20>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	4b06      	ldr	r3, [pc, #24]	; (8001bd0 <HAL_IncTick+0x24>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4413      	add	r3, r2
 8001bbc:	4a04      	ldr	r2, [pc, #16]	; (8001bd0 <HAL_IncTick+0x24>)
 8001bbe:	6013      	str	r3, [r2, #0]
}
 8001bc0:	bf00      	nop
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	20000008 	.word	0x20000008
 8001bd0:	20001660 	.word	0x20001660

08001bd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  return uwTick;
 8001bd8:	4b03      	ldr	r3, [pc, #12]	; (8001be8 <HAL_GetTick+0x14>)
 8001bda:	681b      	ldr	r3, [r3, #0]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	20001660 	.word	0x20001660

08001bec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bfc:	4b0c      	ldr	r3, [pc, #48]	; (8001c30 <__NVIC_SetPriorityGrouping+0x44>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c02:	68ba      	ldr	r2, [r7, #8]
 8001c04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c08:	4013      	ands	r3, r2
 8001c0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c1e:	4a04      	ldr	r2, [pc, #16]	; (8001c30 <__NVIC_SetPriorityGrouping+0x44>)
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	60d3      	str	r3, [r2, #12]
}
 8001c24:	bf00      	nop
 8001c26:	3714      	adds	r7, #20
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	e000ed00 	.word	0xe000ed00

08001c34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c38:	4b04      	ldr	r3, [pc, #16]	; (8001c4c <__NVIC_GetPriorityGrouping+0x18>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	0a1b      	lsrs	r3, r3, #8
 8001c3e:	f003 0307 	and.w	r3, r3, #7
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	e000ed00 	.word	0xe000ed00

08001c50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	4603      	mov	r3, r0
 8001c58:	6039      	str	r1, [r7, #0]
 8001c5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	db0a      	blt.n	8001c7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	b2da      	uxtb	r2, r3
 8001c68:	490c      	ldr	r1, [pc, #48]	; (8001c9c <__NVIC_SetPriority+0x4c>)
 8001c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6e:	0112      	lsls	r2, r2, #4
 8001c70:	b2d2      	uxtb	r2, r2
 8001c72:	440b      	add	r3, r1
 8001c74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c78:	e00a      	b.n	8001c90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	b2da      	uxtb	r2, r3
 8001c7e:	4908      	ldr	r1, [pc, #32]	; (8001ca0 <__NVIC_SetPriority+0x50>)
 8001c80:	79fb      	ldrb	r3, [r7, #7]
 8001c82:	f003 030f 	and.w	r3, r3, #15
 8001c86:	3b04      	subs	r3, #4
 8001c88:	0112      	lsls	r2, r2, #4
 8001c8a:	b2d2      	uxtb	r2, r2
 8001c8c:	440b      	add	r3, r1
 8001c8e:	761a      	strb	r2, [r3, #24]
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	e000e100 	.word	0xe000e100
 8001ca0:	e000ed00 	.word	0xe000ed00

08001ca4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b089      	sub	sp, #36	; 0x24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	f1c3 0307 	rsb	r3, r3, #7
 8001cbe:	2b04      	cmp	r3, #4
 8001cc0:	bf28      	it	cs
 8001cc2:	2304      	movcs	r3, #4
 8001cc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	3304      	adds	r3, #4
 8001cca:	2b06      	cmp	r3, #6
 8001ccc:	d902      	bls.n	8001cd4 <NVIC_EncodePriority+0x30>
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	3b03      	subs	r3, #3
 8001cd2:	e000      	b.n	8001cd6 <NVIC_EncodePriority+0x32>
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	43da      	mvns	r2, r3
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	401a      	ands	r2, r3
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf6:	43d9      	mvns	r1, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cfc:	4313      	orrs	r3, r2
         );
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3724      	adds	r7, #36	; 0x24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
	...

08001d0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	3b01      	subs	r3, #1
 8001d18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d1c:	d301      	bcc.n	8001d22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e00f      	b.n	8001d42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d22:	4a0a      	ldr	r2, [pc, #40]	; (8001d4c <SysTick_Config+0x40>)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	3b01      	subs	r3, #1
 8001d28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d2a:	210f      	movs	r1, #15
 8001d2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d30:	f7ff ff8e 	bl	8001c50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d34:	4b05      	ldr	r3, [pc, #20]	; (8001d4c <SysTick_Config+0x40>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d3a:	4b04      	ldr	r3, [pc, #16]	; (8001d4c <SysTick_Config+0x40>)
 8001d3c:	2207      	movs	r2, #7
 8001d3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	e000e010 	.word	0xe000e010

08001d50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f7ff ff47 	bl	8001bec <__NVIC_SetPriorityGrouping>
}
 8001d5e:	bf00      	nop
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b086      	sub	sp, #24
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	60b9      	str	r1, [r7, #8]
 8001d70:	607a      	str	r2, [r7, #4]
 8001d72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d74:	2300      	movs	r3, #0
 8001d76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d78:	f7ff ff5c 	bl	8001c34 <__NVIC_GetPriorityGrouping>
 8001d7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	68b9      	ldr	r1, [r7, #8]
 8001d82:	6978      	ldr	r0, [r7, #20]
 8001d84:	f7ff ff8e 	bl	8001ca4 <NVIC_EncodePriority>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d8e:	4611      	mov	r1, r2
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff ff5d 	bl	8001c50 <__NVIC_SetPriority>
}
 8001d96:	bf00      	nop
 8001d98:	3718      	adds	r7, #24
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b082      	sub	sp, #8
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f7ff ffb0 	bl	8001d0c <SysTick_Config>
 8001dac:	4603      	mov	r3, r0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
	...

08001db8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b089      	sub	sp, #36	; 0x24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dce:	2300      	movs	r3, #0
 8001dd0:	61fb      	str	r3, [r7, #28]
 8001dd2:	e165      	b.n	80020a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	697a      	ldr	r2, [r7, #20]
 8001de4:	4013      	ands	r3, r2
 8001de6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	f040 8154 	bne.w	800209a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f003 0303 	and.w	r3, r3, #3
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d005      	beq.n	8001e0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d130      	bne.n	8001e6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	2203      	movs	r2, #3
 8001e16:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1a:	43db      	mvns	r3, r3
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	68da      	ldr	r2, [r3, #12]
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e40:	2201      	movs	r2, #1
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	091b      	lsrs	r3, r3, #4
 8001e56:	f003 0201 	and.w	r2, r3, #1
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f003 0303 	and.w	r3, r3, #3
 8001e74:	2b03      	cmp	r3, #3
 8001e76:	d017      	beq.n	8001ea8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	2203      	movs	r2, #3
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	689a      	ldr	r2, [r3, #8]
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f003 0303 	and.w	r3, r3, #3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d123      	bne.n	8001efc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	08da      	lsrs	r2, r3, #3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	3208      	adds	r2, #8
 8001ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	f003 0307 	and.w	r3, r3, #7
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	220f      	movs	r2, #15
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	691a      	ldr	r2, [r3, #16]
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	f003 0307 	and.w	r3, r3, #7
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	08da      	lsrs	r2, r3, #3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	3208      	adds	r2, #8
 8001ef6:	69b9      	ldr	r1, [r7, #24]
 8001ef8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	2203      	movs	r2, #3
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	4013      	ands	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f003 0203 	and.w	r2, r3, #3
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	f000 80ae 	beq.w	800209a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60fb      	str	r3, [r7, #12]
 8001f42:	4b5d      	ldr	r3, [pc, #372]	; (80020b8 <HAL_GPIO_Init+0x300>)
 8001f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f46:	4a5c      	ldr	r2, [pc, #368]	; (80020b8 <HAL_GPIO_Init+0x300>)
 8001f48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f4e:	4b5a      	ldr	r3, [pc, #360]	; (80020b8 <HAL_GPIO_Init+0x300>)
 8001f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f5a:	4a58      	ldr	r2, [pc, #352]	; (80020bc <HAL_GPIO_Init+0x304>)
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	089b      	lsrs	r3, r3, #2
 8001f60:	3302      	adds	r3, #2
 8001f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	f003 0303 	and.w	r3, r3, #3
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	220f      	movs	r2, #15
 8001f72:	fa02 f303 	lsl.w	r3, r2, r3
 8001f76:	43db      	mvns	r3, r3
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a4f      	ldr	r2, [pc, #316]	; (80020c0 <HAL_GPIO_Init+0x308>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d025      	beq.n	8001fd2 <HAL_GPIO_Init+0x21a>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a4e      	ldr	r2, [pc, #312]	; (80020c4 <HAL_GPIO_Init+0x30c>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d01f      	beq.n	8001fce <HAL_GPIO_Init+0x216>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a4d      	ldr	r2, [pc, #308]	; (80020c8 <HAL_GPIO_Init+0x310>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d019      	beq.n	8001fca <HAL_GPIO_Init+0x212>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a4c      	ldr	r2, [pc, #304]	; (80020cc <HAL_GPIO_Init+0x314>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d013      	beq.n	8001fc6 <HAL_GPIO_Init+0x20e>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a4b      	ldr	r2, [pc, #300]	; (80020d0 <HAL_GPIO_Init+0x318>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d00d      	beq.n	8001fc2 <HAL_GPIO_Init+0x20a>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a4a      	ldr	r2, [pc, #296]	; (80020d4 <HAL_GPIO_Init+0x31c>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d007      	beq.n	8001fbe <HAL_GPIO_Init+0x206>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a49      	ldr	r2, [pc, #292]	; (80020d8 <HAL_GPIO_Init+0x320>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d101      	bne.n	8001fba <HAL_GPIO_Init+0x202>
 8001fb6:	2306      	movs	r3, #6
 8001fb8:	e00c      	b.n	8001fd4 <HAL_GPIO_Init+0x21c>
 8001fba:	2307      	movs	r3, #7
 8001fbc:	e00a      	b.n	8001fd4 <HAL_GPIO_Init+0x21c>
 8001fbe:	2305      	movs	r3, #5
 8001fc0:	e008      	b.n	8001fd4 <HAL_GPIO_Init+0x21c>
 8001fc2:	2304      	movs	r3, #4
 8001fc4:	e006      	b.n	8001fd4 <HAL_GPIO_Init+0x21c>
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e004      	b.n	8001fd4 <HAL_GPIO_Init+0x21c>
 8001fca:	2302      	movs	r3, #2
 8001fcc:	e002      	b.n	8001fd4 <HAL_GPIO_Init+0x21c>
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e000      	b.n	8001fd4 <HAL_GPIO_Init+0x21c>
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	69fa      	ldr	r2, [r7, #28]
 8001fd6:	f002 0203 	and.w	r2, r2, #3
 8001fda:	0092      	lsls	r2, r2, #2
 8001fdc:	4093      	lsls	r3, r2
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fe4:	4935      	ldr	r1, [pc, #212]	; (80020bc <HAL_GPIO_Init+0x304>)
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	089b      	lsrs	r3, r3, #2
 8001fea:	3302      	adds	r3, #2
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ff2:	4b3a      	ldr	r3, [pc, #232]	; (80020dc <HAL_GPIO_Init+0x324>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	43db      	mvns	r3, r3
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	4013      	ands	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d003      	beq.n	8002016 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	4313      	orrs	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002016:	4a31      	ldr	r2, [pc, #196]	; (80020dc <HAL_GPIO_Init+0x324>)
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800201c:	4b2f      	ldr	r3, [pc, #188]	; (80020dc <HAL_GPIO_Init+0x324>)
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	43db      	mvns	r3, r3
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	4013      	ands	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d003      	beq.n	8002040 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	4313      	orrs	r3, r2
 800203e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002040:	4a26      	ldr	r2, [pc, #152]	; (80020dc <HAL_GPIO_Init+0x324>)
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002046:	4b25      	ldr	r3, [pc, #148]	; (80020dc <HAL_GPIO_Init+0x324>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	43db      	mvns	r3, r3
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	4013      	ands	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d003      	beq.n	800206a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	4313      	orrs	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800206a:	4a1c      	ldr	r2, [pc, #112]	; (80020dc <HAL_GPIO_Init+0x324>)
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002070:	4b1a      	ldr	r3, [pc, #104]	; (80020dc <HAL_GPIO_Init+0x324>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	43db      	mvns	r3, r3
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	4013      	ands	r3, r2
 800207e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d003      	beq.n	8002094 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	4313      	orrs	r3, r2
 8002092:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002094:	4a11      	ldr	r2, [pc, #68]	; (80020dc <HAL_GPIO_Init+0x324>)
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	3301      	adds	r3, #1
 800209e:	61fb      	str	r3, [r7, #28]
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	2b0f      	cmp	r3, #15
 80020a4:	f67f ae96 	bls.w	8001dd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020a8:	bf00      	nop
 80020aa:	bf00      	nop
 80020ac:	3724      	adds	r7, #36	; 0x24
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	40023800 	.word	0x40023800
 80020bc:	40013800 	.word	0x40013800
 80020c0:	40020000 	.word	0x40020000
 80020c4:	40020400 	.word	0x40020400
 80020c8:	40020800 	.word	0x40020800
 80020cc:	40020c00 	.word	0x40020c00
 80020d0:	40021000 	.word	0x40021000
 80020d4:	40021400 	.word	0x40021400
 80020d8:	40021800 	.word	0x40021800
 80020dc:	40013c00 	.word	0x40013c00

080020e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	460b      	mov	r3, r1
 80020ea:	807b      	strh	r3, [r7, #2]
 80020ec:	4613      	mov	r3, r2
 80020ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020f0:	787b      	ldrb	r3, [r7, #1]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d003      	beq.n	80020fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020f6:	887a      	ldrh	r2, [r7, #2]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020fc:	e003      	b.n	8002106 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020fe:	887b      	ldrh	r3, [r7, #2]
 8002100:	041a      	lsls	r2, r3, #16
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	619a      	str	r2, [r3, #24]
}
 8002106:	bf00      	nop
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
	...

08002114 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d101      	bne.n	8002128 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e0cc      	b.n	80022c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002128:	4b68      	ldr	r3, [pc, #416]	; (80022cc <HAL_RCC_ClockConfig+0x1b8>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 030f 	and.w	r3, r3, #15
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	429a      	cmp	r2, r3
 8002134:	d90c      	bls.n	8002150 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002136:	4b65      	ldr	r3, [pc, #404]	; (80022cc <HAL_RCC_ClockConfig+0x1b8>)
 8002138:	683a      	ldr	r2, [r7, #0]
 800213a:	b2d2      	uxtb	r2, r2
 800213c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800213e:	4b63      	ldr	r3, [pc, #396]	; (80022cc <HAL_RCC_ClockConfig+0x1b8>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 030f 	and.w	r3, r3, #15
 8002146:	683a      	ldr	r2, [r7, #0]
 8002148:	429a      	cmp	r2, r3
 800214a:	d001      	beq.n	8002150 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e0b8      	b.n	80022c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d020      	beq.n	800219e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0304 	and.w	r3, r3, #4
 8002164:	2b00      	cmp	r3, #0
 8002166:	d005      	beq.n	8002174 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002168:	4b59      	ldr	r3, [pc, #356]	; (80022d0 <HAL_RCC_ClockConfig+0x1bc>)
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	4a58      	ldr	r2, [pc, #352]	; (80022d0 <HAL_RCC_ClockConfig+0x1bc>)
 800216e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002172:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0308 	and.w	r3, r3, #8
 800217c:	2b00      	cmp	r3, #0
 800217e:	d005      	beq.n	800218c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002180:	4b53      	ldr	r3, [pc, #332]	; (80022d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	4a52      	ldr	r2, [pc, #328]	; (80022d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002186:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800218a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800218c:	4b50      	ldr	r3, [pc, #320]	; (80022d0 <HAL_RCC_ClockConfig+0x1bc>)
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	494d      	ldr	r1, [pc, #308]	; (80022d0 <HAL_RCC_ClockConfig+0x1bc>)
 800219a:	4313      	orrs	r3, r2
 800219c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d044      	beq.n	8002234 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d107      	bne.n	80021c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021b2:	4b47      	ldr	r3, [pc, #284]	; (80022d0 <HAL_RCC_ClockConfig+0x1bc>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d119      	bne.n	80021f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e07f      	b.n	80022c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d003      	beq.n	80021d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021ce:	2b03      	cmp	r3, #3
 80021d0:	d107      	bne.n	80021e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021d2:	4b3f      	ldr	r3, [pc, #252]	; (80022d0 <HAL_RCC_ClockConfig+0x1bc>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d109      	bne.n	80021f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e06f      	b.n	80022c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021e2:	4b3b      	ldr	r3, [pc, #236]	; (80022d0 <HAL_RCC_ClockConfig+0x1bc>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e067      	b.n	80022c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021f2:	4b37      	ldr	r3, [pc, #220]	; (80022d0 <HAL_RCC_ClockConfig+0x1bc>)
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f023 0203 	bic.w	r2, r3, #3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	4934      	ldr	r1, [pc, #208]	; (80022d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002200:	4313      	orrs	r3, r2
 8002202:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002204:	f7ff fce6 	bl	8001bd4 <HAL_GetTick>
 8002208:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800220a:	e00a      	b.n	8002222 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800220c:	f7ff fce2 	bl	8001bd4 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	f241 3288 	movw	r2, #5000	; 0x1388
 800221a:	4293      	cmp	r3, r2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e04f      	b.n	80022c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002222:	4b2b      	ldr	r3, [pc, #172]	; (80022d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f003 020c 	and.w	r2, r3, #12
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	429a      	cmp	r2, r3
 8002232:	d1eb      	bne.n	800220c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002234:	4b25      	ldr	r3, [pc, #148]	; (80022cc <HAL_RCC_ClockConfig+0x1b8>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 030f 	and.w	r3, r3, #15
 800223c:	683a      	ldr	r2, [r7, #0]
 800223e:	429a      	cmp	r2, r3
 8002240:	d20c      	bcs.n	800225c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002242:	4b22      	ldr	r3, [pc, #136]	; (80022cc <HAL_RCC_ClockConfig+0x1b8>)
 8002244:	683a      	ldr	r2, [r7, #0]
 8002246:	b2d2      	uxtb	r2, r2
 8002248:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800224a:	4b20      	ldr	r3, [pc, #128]	; (80022cc <HAL_RCC_ClockConfig+0x1b8>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 030f 	and.w	r3, r3, #15
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	429a      	cmp	r2, r3
 8002256:	d001      	beq.n	800225c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e032      	b.n	80022c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0304 	and.w	r3, r3, #4
 8002264:	2b00      	cmp	r3, #0
 8002266:	d008      	beq.n	800227a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002268:	4b19      	ldr	r3, [pc, #100]	; (80022d0 <HAL_RCC_ClockConfig+0x1bc>)
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	4916      	ldr	r1, [pc, #88]	; (80022d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002276:	4313      	orrs	r3, r2
 8002278:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0308 	and.w	r3, r3, #8
 8002282:	2b00      	cmp	r3, #0
 8002284:	d009      	beq.n	800229a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002286:	4b12      	ldr	r3, [pc, #72]	; (80022d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	490e      	ldr	r1, [pc, #56]	; (80022d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002296:	4313      	orrs	r3, r2
 8002298:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800229a:	f000 f855 	bl	8002348 <HAL_RCC_GetSysClockFreq>
 800229e:	4602      	mov	r2, r0
 80022a0:	4b0b      	ldr	r3, [pc, #44]	; (80022d0 <HAL_RCC_ClockConfig+0x1bc>)
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	091b      	lsrs	r3, r3, #4
 80022a6:	f003 030f 	and.w	r3, r3, #15
 80022aa:	490a      	ldr	r1, [pc, #40]	; (80022d4 <HAL_RCC_ClockConfig+0x1c0>)
 80022ac:	5ccb      	ldrb	r3, [r1, r3]
 80022ae:	fa22 f303 	lsr.w	r3, r2, r3
 80022b2:	4a09      	ldr	r2, [pc, #36]	; (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 80022b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80022b6:	4b09      	ldr	r3, [pc, #36]	; (80022dc <HAL_RCC_ClockConfig+0x1c8>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7ff fc46 	bl	8001b4c <HAL_InitTick>

  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	40023c00 	.word	0x40023c00
 80022d0:	40023800 	.word	0x40023800
 80022d4:	08004c58 	.word	0x08004c58
 80022d8:	20000000 	.word	0x20000000
 80022dc:	20000004 	.word	0x20000004

080022e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022e4:	4b03      	ldr	r3, [pc, #12]	; (80022f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80022e6:	681b      	ldr	r3, [r3, #0]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	20000000 	.word	0x20000000

080022f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80022fc:	f7ff fff0 	bl	80022e0 <HAL_RCC_GetHCLKFreq>
 8002300:	4602      	mov	r2, r0
 8002302:	4b05      	ldr	r3, [pc, #20]	; (8002318 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	0a9b      	lsrs	r3, r3, #10
 8002308:	f003 0307 	and.w	r3, r3, #7
 800230c:	4903      	ldr	r1, [pc, #12]	; (800231c <HAL_RCC_GetPCLK1Freq+0x24>)
 800230e:	5ccb      	ldrb	r3, [r1, r3]
 8002310:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002314:	4618      	mov	r0, r3
 8002316:	bd80      	pop	{r7, pc}
 8002318:	40023800 	.word	0x40023800
 800231c:	08004c68 	.word	0x08004c68

08002320 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002324:	f7ff ffdc 	bl	80022e0 <HAL_RCC_GetHCLKFreq>
 8002328:	4602      	mov	r2, r0
 800232a:	4b05      	ldr	r3, [pc, #20]	; (8002340 <HAL_RCC_GetPCLK2Freq+0x20>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	0b5b      	lsrs	r3, r3, #13
 8002330:	f003 0307 	and.w	r3, r3, #7
 8002334:	4903      	ldr	r1, [pc, #12]	; (8002344 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002336:	5ccb      	ldrb	r3, [r1, r3]
 8002338:	fa22 f303 	lsr.w	r3, r2, r3
}
 800233c:	4618      	mov	r0, r3
 800233e:	bd80      	pop	{r7, pc}
 8002340:	40023800 	.word	0x40023800
 8002344:	08004c68 	.word	0x08004c68

08002348 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002348:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800234c:	b0ae      	sub	sp, #184	; 0xb8
 800234e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002350:	2300      	movs	r3, #0
 8002352:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002356:	2300      	movs	r3, #0
 8002358:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800235c:	2300      	movs	r3, #0
 800235e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002362:	2300      	movs	r3, #0
 8002364:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002368:	2300      	movs	r3, #0
 800236a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800236e:	4bcb      	ldr	r3, [pc, #812]	; (800269c <HAL_RCC_GetSysClockFreq+0x354>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f003 030c 	and.w	r3, r3, #12
 8002376:	2b0c      	cmp	r3, #12
 8002378:	f200 8206 	bhi.w	8002788 <HAL_RCC_GetSysClockFreq+0x440>
 800237c:	a201      	add	r2, pc, #4	; (adr r2, 8002384 <HAL_RCC_GetSysClockFreq+0x3c>)
 800237e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002382:	bf00      	nop
 8002384:	080023b9 	.word	0x080023b9
 8002388:	08002789 	.word	0x08002789
 800238c:	08002789 	.word	0x08002789
 8002390:	08002789 	.word	0x08002789
 8002394:	080023c1 	.word	0x080023c1
 8002398:	08002789 	.word	0x08002789
 800239c:	08002789 	.word	0x08002789
 80023a0:	08002789 	.word	0x08002789
 80023a4:	080023c9 	.word	0x080023c9
 80023a8:	08002789 	.word	0x08002789
 80023ac:	08002789 	.word	0x08002789
 80023b0:	08002789 	.word	0x08002789
 80023b4:	080025b9 	.word	0x080025b9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023b8:	4bb9      	ldr	r3, [pc, #740]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x358>)
 80023ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80023be:	e1e7      	b.n	8002790 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023c0:	4bb8      	ldr	r3, [pc, #736]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80023c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80023c6:	e1e3      	b.n	8002790 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023c8:	4bb4      	ldr	r3, [pc, #720]	; (800269c <HAL_RCC_GetSysClockFreq+0x354>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023d4:	4bb1      	ldr	r3, [pc, #708]	; (800269c <HAL_RCC_GetSysClockFreq+0x354>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d071      	beq.n	80024c4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023e0:	4bae      	ldr	r3, [pc, #696]	; (800269c <HAL_RCC_GetSysClockFreq+0x354>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	099b      	lsrs	r3, r3, #6
 80023e6:	2200      	movs	r2, #0
 80023e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80023ec:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80023f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80023f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80023fc:	2300      	movs	r3, #0
 80023fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002402:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002406:	4622      	mov	r2, r4
 8002408:	462b      	mov	r3, r5
 800240a:	f04f 0000 	mov.w	r0, #0
 800240e:	f04f 0100 	mov.w	r1, #0
 8002412:	0159      	lsls	r1, r3, #5
 8002414:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002418:	0150      	lsls	r0, r2, #5
 800241a:	4602      	mov	r2, r0
 800241c:	460b      	mov	r3, r1
 800241e:	4621      	mov	r1, r4
 8002420:	1a51      	subs	r1, r2, r1
 8002422:	6439      	str	r1, [r7, #64]	; 0x40
 8002424:	4629      	mov	r1, r5
 8002426:	eb63 0301 	sbc.w	r3, r3, r1
 800242a:	647b      	str	r3, [r7, #68]	; 0x44
 800242c:	f04f 0200 	mov.w	r2, #0
 8002430:	f04f 0300 	mov.w	r3, #0
 8002434:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002438:	4649      	mov	r1, r9
 800243a:	018b      	lsls	r3, r1, #6
 800243c:	4641      	mov	r1, r8
 800243e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002442:	4641      	mov	r1, r8
 8002444:	018a      	lsls	r2, r1, #6
 8002446:	4641      	mov	r1, r8
 8002448:	1a51      	subs	r1, r2, r1
 800244a:	63b9      	str	r1, [r7, #56]	; 0x38
 800244c:	4649      	mov	r1, r9
 800244e:	eb63 0301 	sbc.w	r3, r3, r1
 8002452:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002454:	f04f 0200 	mov.w	r2, #0
 8002458:	f04f 0300 	mov.w	r3, #0
 800245c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002460:	4649      	mov	r1, r9
 8002462:	00cb      	lsls	r3, r1, #3
 8002464:	4641      	mov	r1, r8
 8002466:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800246a:	4641      	mov	r1, r8
 800246c:	00ca      	lsls	r2, r1, #3
 800246e:	4610      	mov	r0, r2
 8002470:	4619      	mov	r1, r3
 8002472:	4603      	mov	r3, r0
 8002474:	4622      	mov	r2, r4
 8002476:	189b      	adds	r3, r3, r2
 8002478:	633b      	str	r3, [r7, #48]	; 0x30
 800247a:	462b      	mov	r3, r5
 800247c:	460a      	mov	r2, r1
 800247e:	eb42 0303 	adc.w	r3, r2, r3
 8002482:	637b      	str	r3, [r7, #52]	; 0x34
 8002484:	f04f 0200 	mov.w	r2, #0
 8002488:	f04f 0300 	mov.w	r3, #0
 800248c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002490:	4629      	mov	r1, r5
 8002492:	024b      	lsls	r3, r1, #9
 8002494:	4621      	mov	r1, r4
 8002496:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800249a:	4621      	mov	r1, r4
 800249c:	024a      	lsls	r2, r1, #9
 800249e:	4610      	mov	r0, r2
 80024a0:	4619      	mov	r1, r3
 80024a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80024a6:	2200      	movs	r2, #0
 80024a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80024ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80024b0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80024b4:	f7fd feae 	bl	8000214 <__aeabi_uldivmod>
 80024b8:	4602      	mov	r2, r0
 80024ba:	460b      	mov	r3, r1
 80024bc:	4613      	mov	r3, r2
 80024be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80024c2:	e067      	b.n	8002594 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024c4:	4b75      	ldr	r3, [pc, #468]	; (800269c <HAL_RCC_GetSysClockFreq+0x354>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	099b      	lsrs	r3, r3, #6
 80024ca:	2200      	movs	r2, #0
 80024cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80024d0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80024d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80024d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80024de:	2300      	movs	r3, #0
 80024e0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80024e2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80024e6:	4622      	mov	r2, r4
 80024e8:	462b      	mov	r3, r5
 80024ea:	f04f 0000 	mov.w	r0, #0
 80024ee:	f04f 0100 	mov.w	r1, #0
 80024f2:	0159      	lsls	r1, r3, #5
 80024f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024f8:	0150      	lsls	r0, r2, #5
 80024fa:	4602      	mov	r2, r0
 80024fc:	460b      	mov	r3, r1
 80024fe:	4621      	mov	r1, r4
 8002500:	1a51      	subs	r1, r2, r1
 8002502:	62b9      	str	r1, [r7, #40]	; 0x28
 8002504:	4629      	mov	r1, r5
 8002506:	eb63 0301 	sbc.w	r3, r3, r1
 800250a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800250c:	f04f 0200 	mov.w	r2, #0
 8002510:	f04f 0300 	mov.w	r3, #0
 8002514:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002518:	4649      	mov	r1, r9
 800251a:	018b      	lsls	r3, r1, #6
 800251c:	4641      	mov	r1, r8
 800251e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002522:	4641      	mov	r1, r8
 8002524:	018a      	lsls	r2, r1, #6
 8002526:	4641      	mov	r1, r8
 8002528:	ebb2 0a01 	subs.w	sl, r2, r1
 800252c:	4649      	mov	r1, r9
 800252e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002532:	f04f 0200 	mov.w	r2, #0
 8002536:	f04f 0300 	mov.w	r3, #0
 800253a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800253e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002542:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002546:	4692      	mov	sl, r2
 8002548:	469b      	mov	fp, r3
 800254a:	4623      	mov	r3, r4
 800254c:	eb1a 0303 	adds.w	r3, sl, r3
 8002550:	623b      	str	r3, [r7, #32]
 8002552:	462b      	mov	r3, r5
 8002554:	eb4b 0303 	adc.w	r3, fp, r3
 8002558:	627b      	str	r3, [r7, #36]	; 0x24
 800255a:	f04f 0200 	mov.w	r2, #0
 800255e:	f04f 0300 	mov.w	r3, #0
 8002562:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002566:	4629      	mov	r1, r5
 8002568:	028b      	lsls	r3, r1, #10
 800256a:	4621      	mov	r1, r4
 800256c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002570:	4621      	mov	r1, r4
 8002572:	028a      	lsls	r2, r1, #10
 8002574:	4610      	mov	r0, r2
 8002576:	4619      	mov	r1, r3
 8002578:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800257c:	2200      	movs	r2, #0
 800257e:	673b      	str	r3, [r7, #112]	; 0x70
 8002580:	677a      	str	r2, [r7, #116]	; 0x74
 8002582:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002586:	f7fd fe45 	bl	8000214 <__aeabi_uldivmod>
 800258a:	4602      	mov	r2, r0
 800258c:	460b      	mov	r3, r1
 800258e:	4613      	mov	r3, r2
 8002590:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002594:	4b41      	ldr	r3, [pc, #260]	; (800269c <HAL_RCC_GetSysClockFreq+0x354>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	0c1b      	lsrs	r3, r3, #16
 800259a:	f003 0303 	and.w	r3, r3, #3
 800259e:	3301      	adds	r3, #1
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80025a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80025aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80025ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80025b6:	e0eb      	b.n	8002790 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025b8:	4b38      	ldr	r3, [pc, #224]	; (800269c <HAL_RCC_GetSysClockFreq+0x354>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025c4:	4b35      	ldr	r3, [pc, #212]	; (800269c <HAL_RCC_GetSysClockFreq+0x354>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d06b      	beq.n	80026a8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025d0:	4b32      	ldr	r3, [pc, #200]	; (800269c <HAL_RCC_GetSysClockFreq+0x354>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	099b      	lsrs	r3, r3, #6
 80025d6:	2200      	movs	r2, #0
 80025d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80025da:	66fa      	str	r2, [r7, #108]	; 0x6c
 80025dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025e2:	663b      	str	r3, [r7, #96]	; 0x60
 80025e4:	2300      	movs	r3, #0
 80025e6:	667b      	str	r3, [r7, #100]	; 0x64
 80025e8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80025ec:	4622      	mov	r2, r4
 80025ee:	462b      	mov	r3, r5
 80025f0:	f04f 0000 	mov.w	r0, #0
 80025f4:	f04f 0100 	mov.w	r1, #0
 80025f8:	0159      	lsls	r1, r3, #5
 80025fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025fe:	0150      	lsls	r0, r2, #5
 8002600:	4602      	mov	r2, r0
 8002602:	460b      	mov	r3, r1
 8002604:	4621      	mov	r1, r4
 8002606:	1a51      	subs	r1, r2, r1
 8002608:	61b9      	str	r1, [r7, #24]
 800260a:	4629      	mov	r1, r5
 800260c:	eb63 0301 	sbc.w	r3, r3, r1
 8002610:	61fb      	str	r3, [r7, #28]
 8002612:	f04f 0200 	mov.w	r2, #0
 8002616:	f04f 0300 	mov.w	r3, #0
 800261a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800261e:	4659      	mov	r1, fp
 8002620:	018b      	lsls	r3, r1, #6
 8002622:	4651      	mov	r1, sl
 8002624:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002628:	4651      	mov	r1, sl
 800262a:	018a      	lsls	r2, r1, #6
 800262c:	4651      	mov	r1, sl
 800262e:	ebb2 0801 	subs.w	r8, r2, r1
 8002632:	4659      	mov	r1, fp
 8002634:	eb63 0901 	sbc.w	r9, r3, r1
 8002638:	f04f 0200 	mov.w	r2, #0
 800263c:	f04f 0300 	mov.w	r3, #0
 8002640:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002644:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002648:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800264c:	4690      	mov	r8, r2
 800264e:	4699      	mov	r9, r3
 8002650:	4623      	mov	r3, r4
 8002652:	eb18 0303 	adds.w	r3, r8, r3
 8002656:	613b      	str	r3, [r7, #16]
 8002658:	462b      	mov	r3, r5
 800265a:	eb49 0303 	adc.w	r3, r9, r3
 800265e:	617b      	str	r3, [r7, #20]
 8002660:	f04f 0200 	mov.w	r2, #0
 8002664:	f04f 0300 	mov.w	r3, #0
 8002668:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800266c:	4629      	mov	r1, r5
 800266e:	024b      	lsls	r3, r1, #9
 8002670:	4621      	mov	r1, r4
 8002672:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002676:	4621      	mov	r1, r4
 8002678:	024a      	lsls	r2, r1, #9
 800267a:	4610      	mov	r0, r2
 800267c:	4619      	mov	r1, r3
 800267e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002682:	2200      	movs	r2, #0
 8002684:	65bb      	str	r3, [r7, #88]	; 0x58
 8002686:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002688:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800268c:	f7fd fdc2 	bl	8000214 <__aeabi_uldivmod>
 8002690:	4602      	mov	r2, r0
 8002692:	460b      	mov	r3, r1
 8002694:	4613      	mov	r3, r2
 8002696:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800269a:	e065      	b.n	8002768 <HAL_RCC_GetSysClockFreq+0x420>
 800269c:	40023800 	.word	0x40023800
 80026a0:	00f42400 	.word	0x00f42400
 80026a4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026a8:	4b3d      	ldr	r3, [pc, #244]	; (80027a0 <HAL_RCC_GetSysClockFreq+0x458>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	099b      	lsrs	r3, r3, #6
 80026ae:	2200      	movs	r2, #0
 80026b0:	4618      	mov	r0, r3
 80026b2:	4611      	mov	r1, r2
 80026b4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80026b8:	653b      	str	r3, [r7, #80]	; 0x50
 80026ba:	2300      	movs	r3, #0
 80026bc:	657b      	str	r3, [r7, #84]	; 0x54
 80026be:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80026c2:	4642      	mov	r2, r8
 80026c4:	464b      	mov	r3, r9
 80026c6:	f04f 0000 	mov.w	r0, #0
 80026ca:	f04f 0100 	mov.w	r1, #0
 80026ce:	0159      	lsls	r1, r3, #5
 80026d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026d4:	0150      	lsls	r0, r2, #5
 80026d6:	4602      	mov	r2, r0
 80026d8:	460b      	mov	r3, r1
 80026da:	4641      	mov	r1, r8
 80026dc:	1a51      	subs	r1, r2, r1
 80026de:	60b9      	str	r1, [r7, #8]
 80026e0:	4649      	mov	r1, r9
 80026e2:	eb63 0301 	sbc.w	r3, r3, r1
 80026e6:	60fb      	str	r3, [r7, #12]
 80026e8:	f04f 0200 	mov.w	r2, #0
 80026ec:	f04f 0300 	mov.w	r3, #0
 80026f0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80026f4:	4659      	mov	r1, fp
 80026f6:	018b      	lsls	r3, r1, #6
 80026f8:	4651      	mov	r1, sl
 80026fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026fe:	4651      	mov	r1, sl
 8002700:	018a      	lsls	r2, r1, #6
 8002702:	4651      	mov	r1, sl
 8002704:	1a54      	subs	r4, r2, r1
 8002706:	4659      	mov	r1, fp
 8002708:	eb63 0501 	sbc.w	r5, r3, r1
 800270c:	f04f 0200 	mov.w	r2, #0
 8002710:	f04f 0300 	mov.w	r3, #0
 8002714:	00eb      	lsls	r3, r5, #3
 8002716:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800271a:	00e2      	lsls	r2, r4, #3
 800271c:	4614      	mov	r4, r2
 800271e:	461d      	mov	r5, r3
 8002720:	4643      	mov	r3, r8
 8002722:	18e3      	adds	r3, r4, r3
 8002724:	603b      	str	r3, [r7, #0]
 8002726:	464b      	mov	r3, r9
 8002728:	eb45 0303 	adc.w	r3, r5, r3
 800272c:	607b      	str	r3, [r7, #4]
 800272e:	f04f 0200 	mov.w	r2, #0
 8002732:	f04f 0300 	mov.w	r3, #0
 8002736:	e9d7 4500 	ldrd	r4, r5, [r7]
 800273a:	4629      	mov	r1, r5
 800273c:	028b      	lsls	r3, r1, #10
 800273e:	4621      	mov	r1, r4
 8002740:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002744:	4621      	mov	r1, r4
 8002746:	028a      	lsls	r2, r1, #10
 8002748:	4610      	mov	r0, r2
 800274a:	4619      	mov	r1, r3
 800274c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002750:	2200      	movs	r2, #0
 8002752:	64bb      	str	r3, [r7, #72]	; 0x48
 8002754:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002756:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800275a:	f7fd fd5b 	bl	8000214 <__aeabi_uldivmod>
 800275e:	4602      	mov	r2, r0
 8002760:	460b      	mov	r3, r1
 8002762:	4613      	mov	r3, r2
 8002764:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002768:	4b0d      	ldr	r3, [pc, #52]	; (80027a0 <HAL_RCC_GetSysClockFreq+0x458>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	0f1b      	lsrs	r3, r3, #28
 800276e:	f003 0307 	and.w	r3, r3, #7
 8002772:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002776:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800277a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800277e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002782:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002786:	e003      	b.n	8002790 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002788:	4b06      	ldr	r3, [pc, #24]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x45c>)
 800278a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800278e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002790:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002794:	4618      	mov	r0, r3
 8002796:	37b8      	adds	r7, #184	; 0xb8
 8002798:	46bd      	mov	sp, r7
 800279a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800279e:	bf00      	nop
 80027a0:	40023800 	.word	0x40023800
 80027a4:	00f42400 	.word	0x00f42400

080027a8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e28d      	b.n	8002cd6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	f000 8083 	beq.w	80028ce <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80027c8:	4b94      	ldr	r3, [pc, #592]	; (8002a1c <HAL_RCC_OscConfig+0x274>)
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f003 030c 	and.w	r3, r3, #12
 80027d0:	2b04      	cmp	r3, #4
 80027d2:	d019      	beq.n	8002808 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80027d4:	4b91      	ldr	r3, [pc, #580]	; (8002a1c <HAL_RCC_OscConfig+0x274>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80027dc:	2b08      	cmp	r3, #8
 80027de:	d106      	bne.n	80027ee <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80027e0:	4b8e      	ldr	r3, [pc, #568]	; (8002a1c <HAL_RCC_OscConfig+0x274>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027ec:	d00c      	beq.n	8002808 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027ee:	4b8b      	ldr	r3, [pc, #556]	; (8002a1c <HAL_RCC_OscConfig+0x274>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80027f6:	2b0c      	cmp	r3, #12
 80027f8:	d112      	bne.n	8002820 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027fa:	4b88      	ldr	r3, [pc, #544]	; (8002a1c <HAL_RCC_OscConfig+0x274>)
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002802:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002806:	d10b      	bne.n	8002820 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002808:	4b84      	ldr	r3, [pc, #528]	; (8002a1c <HAL_RCC_OscConfig+0x274>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d05b      	beq.n	80028cc <HAL_RCC_OscConfig+0x124>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d157      	bne.n	80028cc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e25a      	b.n	8002cd6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002828:	d106      	bne.n	8002838 <HAL_RCC_OscConfig+0x90>
 800282a:	4b7c      	ldr	r3, [pc, #496]	; (8002a1c <HAL_RCC_OscConfig+0x274>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a7b      	ldr	r2, [pc, #492]	; (8002a1c <HAL_RCC_OscConfig+0x274>)
 8002830:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002834:	6013      	str	r3, [r2, #0]
 8002836:	e01d      	b.n	8002874 <HAL_RCC_OscConfig+0xcc>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002840:	d10c      	bne.n	800285c <HAL_RCC_OscConfig+0xb4>
 8002842:	4b76      	ldr	r3, [pc, #472]	; (8002a1c <HAL_RCC_OscConfig+0x274>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a75      	ldr	r2, [pc, #468]	; (8002a1c <HAL_RCC_OscConfig+0x274>)
 8002848:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800284c:	6013      	str	r3, [r2, #0]
 800284e:	4b73      	ldr	r3, [pc, #460]	; (8002a1c <HAL_RCC_OscConfig+0x274>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a72      	ldr	r2, [pc, #456]	; (8002a1c <HAL_RCC_OscConfig+0x274>)
 8002854:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002858:	6013      	str	r3, [r2, #0]
 800285a:	e00b      	b.n	8002874 <HAL_RCC_OscConfig+0xcc>
 800285c:	4b6f      	ldr	r3, [pc, #444]	; (8002a1c <HAL_RCC_OscConfig+0x274>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a6e      	ldr	r2, [pc, #440]	; (8002a1c <HAL_RCC_OscConfig+0x274>)
 8002862:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002866:	6013      	str	r3, [r2, #0]
 8002868:	4b6c      	ldr	r3, [pc, #432]	; (8002a1c <HAL_RCC_OscConfig+0x274>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a6b      	ldr	r2, [pc, #428]	; (8002a1c <HAL_RCC_OscConfig+0x274>)
 800286e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002872:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d013      	beq.n	80028a4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800287c:	f7ff f9aa 	bl	8001bd4 <HAL_GetTick>
 8002880:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002882:	e008      	b.n	8002896 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002884:	f7ff f9a6 	bl	8001bd4 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b64      	cmp	r3, #100	; 0x64
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e21f      	b.n	8002cd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002896:	4b61      	ldr	r3, [pc, #388]	; (8002a1c <HAL_RCC_OscConfig+0x274>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d0f0      	beq.n	8002884 <HAL_RCC_OscConfig+0xdc>
 80028a2:	e014      	b.n	80028ce <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a4:	f7ff f996 	bl	8001bd4 <HAL_GetTick>
 80028a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028aa:	e008      	b.n	80028be <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028ac:	f7ff f992 	bl	8001bd4 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b64      	cmp	r3, #100	; 0x64
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e20b      	b.n	8002cd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028be:	4b57      	ldr	r3, [pc, #348]	; (8002a1c <HAL_RCC_OscConfig+0x274>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d1f0      	bne.n	80028ac <HAL_RCC_OscConfig+0x104>
 80028ca:	e000      	b.n	80028ce <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d06f      	beq.n	80029ba <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80028da:	4b50      	ldr	r3, [pc, #320]	; (8002a1c <HAL_RCC_OscConfig+0x274>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f003 030c 	and.w	r3, r3, #12
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d017      	beq.n	8002916 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80028e6:	4b4d      	ldr	r3, [pc, #308]	; (8002a1c <HAL_RCC_OscConfig+0x274>)
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80028ee:	2b08      	cmp	r3, #8
 80028f0:	d105      	bne.n	80028fe <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80028f2:	4b4a      	ldr	r3, [pc, #296]	; (8002a1c <HAL_RCC_OscConfig+0x274>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00b      	beq.n	8002916 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028fe:	4b47      	ldr	r3, [pc, #284]	; (8002a1c <HAL_RCC_OscConfig+0x274>)
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002906:	2b0c      	cmp	r3, #12
 8002908:	d11c      	bne.n	8002944 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800290a:	4b44      	ldr	r3, [pc, #272]	; (8002a1c <HAL_RCC_OscConfig+0x274>)
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d116      	bne.n	8002944 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002916:	4b41      	ldr	r3, [pc, #260]	; (8002a1c <HAL_RCC_OscConfig+0x274>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d005      	beq.n	800292e <HAL_RCC_OscConfig+0x186>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d001      	beq.n	800292e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e1d3      	b.n	8002cd6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800292e:	4b3b      	ldr	r3, [pc, #236]	; (8002a1c <HAL_RCC_OscConfig+0x274>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	4937      	ldr	r1, [pc, #220]	; (8002a1c <HAL_RCC_OscConfig+0x274>)
 800293e:	4313      	orrs	r3, r2
 8002940:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002942:	e03a      	b.n	80029ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d020      	beq.n	800298e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800294c:	4b34      	ldr	r3, [pc, #208]	; (8002a20 <HAL_RCC_OscConfig+0x278>)
 800294e:	2201      	movs	r2, #1
 8002950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002952:	f7ff f93f 	bl	8001bd4 <HAL_GetTick>
 8002956:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002958:	e008      	b.n	800296c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800295a:	f7ff f93b 	bl	8001bd4 <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	2b02      	cmp	r3, #2
 8002966:	d901      	bls.n	800296c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e1b4      	b.n	8002cd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800296c:	4b2b      	ldr	r3, [pc, #172]	; (8002a1c <HAL_RCC_OscConfig+0x274>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d0f0      	beq.n	800295a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002978:	4b28      	ldr	r3, [pc, #160]	; (8002a1c <HAL_RCC_OscConfig+0x274>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	00db      	lsls	r3, r3, #3
 8002986:	4925      	ldr	r1, [pc, #148]	; (8002a1c <HAL_RCC_OscConfig+0x274>)
 8002988:	4313      	orrs	r3, r2
 800298a:	600b      	str	r3, [r1, #0]
 800298c:	e015      	b.n	80029ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800298e:	4b24      	ldr	r3, [pc, #144]	; (8002a20 <HAL_RCC_OscConfig+0x278>)
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002994:	f7ff f91e 	bl	8001bd4 <HAL_GetTick>
 8002998:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800299a:	e008      	b.n	80029ae <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800299c:	f7ff f91a 	bl	8001bd4 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e193      	b.n	8002cd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ae:	4b1b      	ldr	r3, [pc, #108]	; (8002a1c <HAL_RCC_OscConfig+0x274>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d1f0      	bne.n	800299c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0308 	and.w	r3, r3, #8
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d036      	beq.n	8002a34 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	695b      	ldr	r3, [r3, #20]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d016      	beq.n	80029fc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029ce:	4b15      	ldr	r3, [pc, #84]	; (8002a24 <HAL_RCC_OscConfig+0x27c>)
 80029d0:	2201      	movs	r2, #1
 80029d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d4:	f7ff f8fe 	bl	8001bd4 <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029dc:	f7ff f8fa 	bl	8001bd4 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e173      	b.n	8002cd6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ee:	4b0b      	ldr	r3, [pc, #44]	; (8002a1c <HAL_RCC_OscConfig+0x274>)
 80029f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d0f0      	beq.n	80029dc <HAL_RCC_OscConfig+0x234>
 80029fa:	e01b      	b.n	8002a34 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029fc:	4b09      	ldr	r3, [pc, #36]	; (8002a24 <HAL_RCC_OscConfig+0x27c>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a02:	f7ff f8e7 	bl	8001bd4 <HAL_GetTick>
 8002a06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a08:	e00e      	b.n	8002a28 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a0a:	f7ff f8e3 	bl	8001bd4 <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d907      	bls.n	8002a28 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e15c      	b.n	8002cd6 <HAL_RCC_OscConfig+0x52e>
 8002a1c:	40023800 	.word	0x40023800
 8002a20:	42470000 	.word	0x42470000
 8002a24:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a28:	4b8a      	ldr	r3, [pc, #552]	; (8002c54 <HAL_RCC_OscConfig+0x4ac>)
 8002a2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d1ea      	bne.n	8002a0a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0304 	and.w	r3, r3, #4
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f000 8097 	beq.w	8002b70 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a42:	2300      	movs	r3, #0
 8002a44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a46:	4b83      	ldr	r3, [pc, #524]	; (8002c54 <HAL_RCC_OscConfig+0x4ac>)
 8002a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d10f      	bne.n	8002a72 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a52:	2300      	movs	r3, #0
 8002a54:	60bb      	str	r3, [r7, #8]
 8002a56:	4b7f      	ldr	r3, [pc, #508]	; (8002c54 <HAL_RCC_OscConfig+0x4ac>)
 8002a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5a:	4a7e      	ldr	r2, [pc, #504]	; (8002c54 <HAL_RCC_OscConfig+0x4ac>)
 8002a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a60:	6413      	str	r3, [r2, #64]	; 0x40
 8002a62:	4b7c      	ldr	r3, [pc, #496]	; (8002c54 <HAL_RCC_OscConfig+0x4ac>)
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a6a:	60bb      	str	r3, [r7, #8]
 8002a6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a72:	4b79      	ldr	r3, [pc, #484]	; (8002c58 <HAL_RCC_OscConfig+0x4b0>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d118      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a7e:	4b76      	ldr	r3, [pc, #472]	; (8002c58 <HAL_RCC_OscConfig+0x4b0>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a75      	ldr	r2, [pc, #468]	; (8002c58 <HAL_RCC_OscConfig+0x4b0>)
 8002a84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a8a:	f7ff f8a3 	bl	8001bd4 <HAL_GetTick>
 8002a8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a90:	e008      	b.n	8002aa4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a92:	f7ff f89f 	bl	8001bd4 <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e118      	b.n	8002cd6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa4:	4b6c      	ldr	r3, [pc, #432]	; (8002c58 <HAL_RCC_OscConfig+0x4b0>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d0f0      	beq.n	8002a92 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d106      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x31e>
 8002ab8:	4b66      	ldr	r3, [pc, #408]	; (8002c54 <HAL_RCC_OscConfig+0x4ac>)
 8002aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002abc:	4a65      	ldr	r2, [pc, #404]	; (8002c54 <HAL_RCC_OscConfig+0x4ac>)
 8002abe:	f043 0301 	orr.w	r3, r3, #1
 8002ac2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ac4:	e01c      	b.n	8002b00 <HAL_RCC_OscConfig+0x358>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	2b05      	cmp	r3, #5
 8002acc:	d10c      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x340>
 8002ace:	4b61      	ldr	r3, [pc, #388]	; (8002c54 <HAL_RCC_OscConfig+0x4ac>)
 8002ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad2:	4a60      	ldr	r2, [pc, #384]	; (8002c54 <HAL_RCC_OscConfig+0x4ac>)
 8002ad4:	f043 0304 	orr.w	r3, r3, #4
 8002ad8:	6713      	str	r3, [r2, #112]	; 0x70
 8002ada:	4b5e      	ldr	r3, [pc, #376]	; (8002c54 <HAL_RCC_OscConfig+0x4ac>)
 8002adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ade:	4a5d      	ldr	r2, [pc, #372]	; (8002c54 <HAL_RCC_OscConfig+0x4ac>)
 8002ae0:	f043 0301 	orr.w	r3, r3, #1
 8002ae4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ae6:	e00b      	b.n	8002b00 <HAL_RCC_OscConfig+0x358>
 8002ae8:	4b5a      	ldr	r3, [pc, #360]	; (8002c54 <HAL_RCC_OscConfig+0x4ac>)
 8002aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aec:	4a59      	ldr	r2, [pc, #356]	; (8002c54 <HAL_RCC_OscConfig+0x4ac>)
 8002aee:	f023 0301 	bic.w	r3, r3, #1
 8002af2:	6713      	str	r3, [r2, #112]	; 0x70
 8002af4:	4b57      	ldr	r3, [pc, #348]	; (8002c54 <HAL_RCC_OscConfig+0x4ac>)
 8002af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af8:	4a56      	ldr	r2, [pc, #344]	; (8002c54 <HAL_RCC_OscConfig+0x4ac>)
 8002afa:	f023 0304 	bic.w	r3, r3, #4
 8002afe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d015      	beq.n	8002b34 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b08:	f7ff f864 	bl	8001bd4 <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b0e:	e00a      	b.n	8002b26 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b10:	f7ff f860 	bl	8001bd4 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e0d7      	b.n	8002cd6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b26:	4b4b      	ldr	r3, [pc, #300]	; (8002c54 <HAL_RCC_OscConfig+0x4ac>)
 8002b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d0ee      	beq.n	8002b10 <HAL_RCC_OscConfig+0x368>
 8002b32:	e014      	b.n	8002b5e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b34:	f7ff f84e 	bl	8001bd4 <HAL_GetTick>
 8002b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b3a:	e00a      	b.n	8002b52 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b3c:	f7ff f84a 	bl	8001bd4 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e0c1      	b.n	8002cd6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b52:	4b40      	ldr	r3, [pc, #256]	; (8002c54 <HAL_RCC_OscConfig+0x4ac>)
 8002b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d1ee      	bne.n	8002b3c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b5e:	7dfb      	ldrb	r3, [r7, #23]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d105      	bne.n	8002b70 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b64:	4b3b      	ldr	r3, [pc, #236]	; (8002c54 <HAL_RCC_OscConfig+0x4ac>)
 8002b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b68:	4a3a      	ldr	r2, [pc, #232]	; (8002c54 <HAL_RCC_OscConfig+0x4ac>)
 8002b6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b6e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	699b      	ldr	r3, [r3, #24]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f000 80ad 	beq.w	8002cd4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b7a:	4b36      	ldr	r3, [pc, #216]	; (8002c54 <HAL_RCC_OscConfig+0x4ac>)
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f003 030c 	and.w	r3, r3, #12
 8002b82:	2b08      	cmp	r3, #8
 8002b84:	d060      	beq.n	8002c48 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d145      	bne.n	8002c1a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b8e:	4b33      	ldr	r3, [pc, #204]	; (8002c5c <HAL_RCC_OscConfig+0x4b4>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b94:	f7ff f81e 	bl	8001bd4 <HAL_GetTick>
 8002b98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b9a:	e008      	b.n	8002bae <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b9c:	f7ff f81a 	bl	8001bd4 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e093      	b.n	8002cd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bae:	4b29      	ldr	r3, [pc, #164]	; (8002c54 <HAL_RCC_OscConfig+0x4ac>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1f0      	bne.n	8002b9c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	69da      	ldr	r2, [r3, #28]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a1b      	ldr	r3, [r3, #32]
 8002bc2:	431a      	orrs	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc8:	019b      	lsls	r3, r3, #6
 8002bca:	431a      	orrs	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd0:	085b      	lsrs	r3, r3, #1
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	041b      	lsls	r3, r3, #16
 8002bd6:	431a      	orrs	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bdc:	061b      	lsls	r3, r3, #24
 8002bde:	431a      	orrs	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be4:	071b      	lsls	r3, r3, #28
 8002be6:	491b      	ldr	r1, [pc, #108]	; (8002c54 <HAL_RCC_OscConfig+0x4ac>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bec:	4b1b      	ldr	r3, [pc, #108]	; (8002c5c <HAL_RCC_OscConfig+0x4b4>)
 8002bee:	2201      	movs	r2, #1
 8002bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf2:	f7fe ffef 	bl	8001bd4 <HAL_GetTick>
 8002bf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bf8:	e008      	b.n	8002c0c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bfa:	f7fe ffeb 	bl	8001bd4 <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d901      	bls.n	8002c0c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e064      	b.n	8002cd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c0c:	4b11      	ldr	r3, [pc, #68]	; (8002c54 <HAL_RCC_OscConfig+0x4ac>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d0f0      	beq.n	8002bfa <HAL_RCC_OscConfig+0x452>
 8002c18:	e05c      	b.n	8002cd4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c1a:	4b10      	ldr	r3, [pc, #64]	; (8002c5c <HAL_RCC_OscConfig+0x4b4>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c20:	f7fe ffd8 	bl	8001bd4 <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c28:	f7fe ffd4 	bl	8001bd4 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e04d      	b.n	8002cd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c3a:	4b06      	ldr	r3, [pc, #24]	; (8002c54 <HAL_RCC_OscConfig+0x4ac>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1f0      	bne.n	8002c28 <HAL_RCC_OscConfig+0x480>
 8002c46:	e045      	b.n	8002cd4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d107      	bne.n	8002c60 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e040      	b.n	8002cd6 <HAL_RCC_OscConfig+0x52e>
 8002c54:	40023800 	.word	0x40023800
 8002c58:	40007000 	.word	0x40007000
 8002c5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c60:	4b1f      	ldr	r3, [pc, #124]	; (8002ce0 <HAL_RCC_OscConfig+0x538>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d030      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d129      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d122      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c90:	4013      	ands	r3, r2
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d119      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca6:	085b      	lsrs	r3, r3, #1
 8002ca8:	3b01      	subs	r3, #1
 8002caa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d10f      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d107      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cca:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d001      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e000      	b.n	8002cd6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3718      	adds	r7, #24
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	40023800 	.word	0x40023800

08002ce4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e041      	b.n	8002d7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d106      	bne.n	8002d10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f7fe fe3e 	bl	800198c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2202      	movs	r2, #2
 8002d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	3304      	adds	r3, #4
 8002d20:	4619      	mov	r1, r3
 8002d22:	4610      	mov	r0, r2
 8002d24:	f000 f8be 	bl	8002ea4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3708      	adds	r7, #8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
	...

08002d84 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b085      	sub	sp, #20
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d001      	beq.n	8002d9c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e046      	b.n	8002e2a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2202      	movs	r2, #2
 8002da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a23      	ldr	r2, [pc, #140]	; (8002e38 <HAL_TIM_Base_Start+0xb4>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d022      	beq.n	8002df4 <HAL_TIM_Base_Start+0x70>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002db6:	d01d      	beq.n	8002df4 <HAL_TIM_Base_Start+0x70>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a1f      	ldr	r2, [pc, #124]	; (8002e3c <HAL_TIM_Base_Start+0xb8>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d018      	beq.n	8002df4 <HAL_TIM_Base_Start+0x70>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a1e      	ldr	r2, [pc, #120]	; (8002e40 <HAL_TIM_Base_Start+0xbc>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d013      	beq.n	8002df4 <HAL_TIM_Base_Start+0x70>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a1c      	ldr	r2, [pc, #112]	; (8002e44 <HAL_TIM_Base_Start+0xc0>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d00e      	beq.n	8002df4 <HAL_TIM_Base_Start+0x70>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a1b      	ldr	r2, [pc, #108]	; (8002e48 <HAL_TIM_Base_Start+0xc4>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d009      	beq.n	8002df4 <HAL_TIM_Base_Start+0x70>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a19      	ldr	r2, [pc, #100]	; (8002e4c <HAL_TIM_Base_Start+0xc8>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d004      	beq.n	8002df4 <HAL_TIM_Base_Start+0x70>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a18      	ldr	r2, [pc, #96]	; (8002e50 <HAL_TIM_Base_Start+0xcc>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d111      	bne.n	8002e18 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f003 0307 	and.w	r3, r3, #7
 8002dfe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2b06      	cmp	r3, #6
 8002e04:	d010      	beq.n	8002e28 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f042 0201 	orr.w	r2, r2, #1
 8002e14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e16:	e007      	b.n	8002e28 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f042 0201 	orr.w	r2, r2, #1
 8002e26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3714      	adds	r7, #20
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	40010000 	.word	0x40010000
 8002e3c:	40000400 	.word	0x40000400
 8002e40:	40000800 	.word	0x40000800
 8002e44:	40000c00 	.word	0x40000c00
 8002e48:	40010400 	.word	0x40010400
 8002e4c:	40014000 	.word	0x40014000
 8002e50:	40001800 	.word	0x40001800

08002e54 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	6a1a      	ldr	r2, [r3, #32]
 8002e62:	f241 1311 	movw	r3, #4369	; 0x1111
 8002e66:	4013      	ands	r3, r2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d10f      	bne.n	8002e8c <HAL_TIM_Base_Stop+0x38>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	6a1a      	ldr	r2, [r3, #32]
 8002e72:	f240 4344 	movw	r3, #1092	; 0x444
 8002e76:	4013      	ands	r3, r2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d107      	bne.n	8002e8c <HAL_TIM_Base_Stop+0x38>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f022 0201 	bic.w	r2, r2, #1
 8002e8a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	370c      	adds	r7, #12
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
	...

08002ea4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b085      	sub	sp, #20
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4a40      	ldr	r2, [pc, #256]	; (8002fb8 <TIM_Base_SetConfig+0x114>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d013      	beq.n	8002ee4 <TIM_Base_SetConfig+0x40>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ec2:	d00f      	beq.n	8002ee4 <TIM_Base_SetConfig+0x40>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4a3d      	ldr	r2, [pc, #244]	; (8002fbc <TIM_Base_SetConfig+0x118>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d00b      	beq.n	8002ee4 <TIM_Base_SetConfig+0x40>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4a3c      	ldr	r2, [pc, #240]	; (8002fc0 <TIM_Base_SetConfig+0x11c>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d007      	beq.n	8002ee4 <TIM_Base_SetConfig+0x40>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a3b      	ldr	r2, [pc, #236]	; (8002fc4 <TIM_Base_SetConfig+0x120>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d003      	beq.n	8002ee4 <TIM_Base_SetConfig+0x40>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a3a      	ldr	r2, [pc, #232]	; (8002fc8 <TIM_Base_SetConfig+0x124>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d108      	bne.n	8002ef6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	68fa      	ldr	r2, [r7, #12]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a2f      	ldr	r2, [pc, #188]	; (8002fb8 <TIM_Base_SetConfig+0x114>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d02b      	beq.n	8002f56 <TIM_Base_SetConfig+0xb2>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f04:	d027      	beq.n	8002f56 <TIM_Base_SetConfig+0xb2>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a2c      	ldr	r2, [pc, #176]	; (8002fbc <TIM_Base_SetConfig+0x118>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d023      	beq.n	8002f56 <TIM_Base_SetConfig+0xb2>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a2b      	ldr	r2, [pc, #172]	; (8002fc0 <TIM_Base_SetConfig+0x11c>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d01f      	beq.n	8002f56 <TIM_Base_SetConfig+0xb2>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a2a      	ldr	r2, [pc, #168]	; (8002fc4 <TIM_Base_SetConfig+0x120>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d01b      	beq.n	8002f56 <TIM_Base_SetConfig+0xb2>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a29      	ldr	r2, [pc, #164]	; (8002fc8 <TIM_Base_SetConfig+0x124>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d017      	beq.n	8002f56 <TIM_Base_SetConfig+0xb2>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a28      	ldr	r2, [pc, #160]	; (8002fcc <TIM_Base_SetConfig+0x128>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d013      	beq.n	8002f56 <TIM_Base_SetConfig+0xb2>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a27      	ldr	r2, [pc, #156]	; (8002fd0 <TIM_Base_SetConfig+0x12c>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d00f      	beq.n	8002f56 <TIM_Base_SetConfig+0xb2>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a26      	ldr	r2, [pc, #152]	; (8002fd4 <TIM_Base_SetConfig+0x130>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d00b      	beq.n	8002f56 <TIM_Base_SetConfig+0xb2>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a25      	ldr	r2, [pc, #148]	; (8002fd8 <TIM_Base_SetConfig+0x134>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d007      	beq.n	8002f56 <TIM_Base_SetConfig+0xb2>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a24      	ldr	r2, [pc, #144]	; (8002fdc <TIM_Base_SetConfig+0x138>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d003      	beq.n	8002f56 <TIM_Base_SetConfig+0xb2>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a23      	ldr	r2, [pc, #140]	; (8002fe0 <TIM_Base_SetConfig+0x13c>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d108      	bne.n	8002f68 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	68fa      	ldr	r2, [r7, #12]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	68fa      	ldr	r2, [r7, #12]
 8002f7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	689a      	ldr	r2, [r3, #8]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a0a      	ldr	r2, [pc, #40]	; (8002fb8 <TIM_Base_SetConfig+0x114>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d003      	beq.n	8002f9c <TIM_Base_SetConfig+0xf8>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4a0c      	ldr	r2, [pc, #48]	; (8002fc8 <TIM_Base_SetConfig+0x124>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d103      	bne.n	8002fa4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	691a      	ldr	r2, [r3, #16]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	615a      	str	r2, [r3, #20]
}
 8002faa:	bf00      	nop
 8002fac:	3714      	adds	r7, #20
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	40010000 	.word	0x40010000
 8002fbc:	40000400 	.word	0x40000400
 8002fc0:	40000800 	.word	0x40000800
 8002fc4:	40000c00 	.word	0x40000c00
 8002fc8:	40010400 	.word	0x40010400
 8002fcc:	40014000 	.word	0x40014000
 8002fd0:	40014400 	.word	0x40014400
 8002fd4:	40014800 	.word	0x40014800
 8002fd8:	40001800 	.word	0x40001800
 8002fdc:	40001c00 	.word	0x40001c00
 8002fe0:	40002000 	.word	0x40002000

08002fe4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d101      	bne.n	8002ffc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	e05a      	b.n	80030b2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2202      	movs	r2, #2
 8003008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003022:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	4313      	orrs	r3, r2
 800302c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a21      	ldr	r2, [pc, #132]	; (80030c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d022      	beq.n	8003086 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003048:	d01d      	beq.n	8003086 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a1d      	ldr	r2, [pc, #116]	; (80030c4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d018      	beq.n	8003086 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a1b      	ldr	r2, [pc, #108]	; (80030c8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d013      	beq.n	8003086 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a1a      	ldr	r2, [pc, #104]	; (80030cc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d00e      	beq.n	8003086 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a18      	ldr	r2, [pc, #96]	; (80030d0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d009      	beq.n	8003086 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a17      	ldr	r2, [pc, #92]	; (80030d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d004      	beq.n	8003086 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a15      	ldr	r2, [pc, #84]	; (80030d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d10c      	bne.n	80030a0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800308c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	68ba      	ldr	r2, [r7, #8]
 8003094:	4313      	orrs	r3, r2
 8003096:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68ba      	ldr	r2, [r7, #8]
 800309e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3714      	adds	r7, #20
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	40010000 	.word	0x40010000
 80030c4:	40000400 	.word	0x40000400
 80030c8:	40000800 	.word	0x40000800
 80030cc:	40000c00 	.word	0x40000c00
 80030d0:	40010400 	.word	0x40010400
 80030d4:	40014000 	.word	0x40014000
 80030d8:	40001800 	.word	0x40001800

080030dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e03f      	b.n	800316e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d106      	bne.n	8003108 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f7fe fc8e 	bl	8001a24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2224      	movs	r2, #36	; 0x24
 800310c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	68da      	ldr	r2, [r3, #12]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800311e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f000 f929 	bl	8003378 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	691a      	ldr	r2, [r3, #16]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003134:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	695a      	ldr	r2, [r3, #20]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003144:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68da      	ldr	r2, [r3, #12]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003154:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2220      	movs	r2, #32
 8003160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2220      	movs	r2, #32
 8003168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003176:	b580      	push	{r7, lr}
 8003178:	b08a      	sub	sp, #40	; 0x28
 800317a:	af02      	add	r7, sp, #8
 800317c:	60f8      	str	r0, [r7, #12]
 800317e:	60b9      	str	r1, [r7, #8]
 8003180:	603b      	str	r3, [r7, #0]
 8003182:	4613      	mov	r3, r2
 8003184:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003186:	2300      	movs	r3, #0
 8003188:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b20      	cmp	r3, #32
 8003194:	d17c      	bne.n	8003290 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d002      	beq.n	80031a2 <HAL_UART_Transmit+0x2c>
 800319c:	88fb      	ldrh	r3, [r7, #6]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e075      	b.n	8003292 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d101      	bne.n	80031b4 <HAL_UART_Transmit+0x3e>
 80031b0:	2302      	movs	r3, #2
 80031b2:	e06e      	b.n	8003292 <HAL_UART_Transmit+0x11c>
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2200      	movs	r2, #0
 80031c0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2221      	movs	r2, #33	; 0x21
 80031c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031ca:	f7fe fd03 	bl	8001bd4 <HAL_GetTick>
 80031ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	88fa      	ldrh	r2, [r7, #6]
 80031d4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	88fa      	ldrh	r2, [r7, #6]
 80031da:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031e4:	d108      	bne.n	80031f8 <HAL_UART_Transmit+0x82>
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d104      	bne.n	80031f8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80031ee:	2300      	movs	r3, #0
 80031f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	61bb      	str	r3, [r7, #24]
 80031f6:	e003      	b.n	8003200 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031fc:	2300      	movs	r3, #0
 80031fe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003208:	e02a      	b.n	8003260 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	9300      	str	r3, [sp, #0]
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	2200      	movs	r2, #0
 8003212:	2180      	movs	r1, #128	; 0x80
 8003214:	68f8      	ldr	r0, [r7, #12]
 8003216:	f000 f840 	bl	800329a <UART_WaitOnFlagUntilTimeout>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d001      	beq.n	8003224 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e036      	b.n	8003292 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d10b      	bne.n	8003242 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	881b      	ldrh	r3, [r3, #0]
 800322e:	461a      	mov	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003238:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	3302      	adds	r3, #2
 800323e:	61bb      	str	r3, [r7, #24]
 8003240:	e007      	b.n	8003252 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	781a      	ldrb	r2, [r3, #0]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	3301      	adds	r3, #1
 8003250:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003256:	b29b      	uxth	r3, r3
 8003258:	3b01      	subs	r3, #1
 800325a:	b29a      	uxth	r2, r3
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003264:	b29b      	uxth	r3, r3
 8003266:	2b00      	cmp	r3, #0
 8003268:	d1cf      	bne.n	800320a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	9300      	str	r3, [sp, #0]
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	2200      	movs	r2, #0
 8003272:	2140      	movs	r1, #64	; 0x40
 8003274:	68f8      	ldr	r0, [r7, #12]
 8003276:	f000 f810 	bl	800329a <UART_WaitOnFlagUntilTimeout>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d001      	beq.n	8003284 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e006      	b.n	8003292 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2220      	movs	r2, #32
 8003288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800328c:	2300      	movs	r3, #0
 800328e:	e000      	b.n	8003292 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003290:	2302      	movs	r3, #2
  }
}
 8003292:	4618      	mov	r0, r3
 8003294:	3720      	adds	r7, #32
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800329a:	b580      	push	{r7, lr}
 800329c:	b090      	sub	sp, #64	; 0x40
 800329e:	af00      	add	r7, sp, #0
 80032a0:	60f8      	str	r0, [r7, #12]
 80032a2:	60b9      	str	r1, [r7, #8]
 80032a4:	603b      	str	r3, [r7, #0]
 80032a6:	4613      	mov	r3, r2
 80032a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032aa:	e050      	b.n	800334e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032b2:	d04c      	beq.n	800334e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80032b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d007      	beq.n	80032ca <UART_WaitOnFlagUntilTimeout+0x30>
 80032ba:	f7fe fc8b 	bl	8001bd4 <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d241      	bcs.n	800334e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	330c      	adds	r3, #12
 80032d0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d4:	e853 3f00 	ldrex	r3, [r3]
 80032d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80032da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80032e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	330c      	adds	r3, #12
 80032e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80032ea:	637a      	str	r2, [r7, #52]	; 0x34
 80032ec:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80032f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032f2:	e841 2300 	strex	r3, r2, [r1]
 80032f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80032f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d1e5      	bne.n	80032ca <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	3314      	adds	r3, #20
 8003304:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	e853 3f00 	ldrex	r3, [r3]
 800330c:	613b      	str	r3, [r7, #16]
   return(result);
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	f023 0301 	bic.w	r3, r3, #1
 8003314:	63bb      	str	r3, [r7, #56]	; 0x38
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	3314      	adds	r3, #20
 800331c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800331e:	623a      	str	r2, [r7, #32]
 8003320:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003322:	69f9      	ldr	r1, [r7, #28]
 8003324:	6a3a      	ldr	r2, [r7, #32]
 8003326:	e841 2300 	strex	r3, r2, [r1]
 800332a:	61bb      	str	r3, [r7, #24]
   return(result);
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1e5      	bne.n	80032fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2220      	movs	r2, #32
 8003336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2220      	movs	r2, #32
 800333e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e00f      	b.n	800336e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	4013      	ands	r3, r2
 8003358:	68ba      	ldr	r2, [r7, #8]
 800335a:	429a      	cmp	r2, r3
 800335c:	bf0c      	ite	eq
 800335e:	2301      	moveq	r3, #1
 8003360:	2300      	movne	r3, #0
 8003362:	b2db      	uxtb	r3, r3
 8003364:	461a      	mov	r2, r3
 8003366:	79fb      	ldrb	r3, [r7, #7]
 8003368:	429a      	cmp	r2, r3
 800336a:	d09f      	beq.n	80032ac <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3740      	adds	r7, #64	; 0x40
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
	...

08003378 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003378:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800337c:	b0c0      	sub	sp, #256	; 0x100
 800337e:	af00      	add	r7, sp, #0
 8003380:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003394:	68d9      	ldr	r1, [r3, #12]
 8003396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	ea40 0301 	orr.w	r3, r0, r1
 80033a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80033a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033a6:	689a      	ldr	r2, [r3, #8]
 80033a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	431a      	orrs	r2, r3
 80033b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	431a      	orrs	r2, r3
 80033b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033bc:	69db      	ldr	r3, [r3, #28]
 80033be:	4313      	orrs	r3, r2
 80033c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80033c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80033d0:	f021 010c 	bic.w	r1, r1, #12
 80033d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80033de:	430b      	orrs	r3, r1
 80033e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80033ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033f2:	6999      	ldr	r1, [r3, #24]
 80033f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	ea40 0301 	orr.w	r3, r0, r1
 80033fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	4b8f      	ldr	r3, [pc, #572]	; (8003644 <UART_SetConfig+0x2cc>)
 8003408:	429a      	cmp	r2, r3
 800340a:	d005      	beq.n	8003418 <UART_SetConfig+0xa0>
 800340c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	4b8d      	ldr	r3, [pc, #564]	; (8003648 <UART_SetConfig+0x2d0>)
 8003414:	429a      	cmp	r2, r3
 8003416:	d104      	bne.n	8003422 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003418:	f7fe ff82 	bl	8002320 <HAL_RCC_GetPCLK2Freq>
 800341c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003420:	e003      	b.n	800342a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003422:	f7fe ff69 	bl	80022f8 <HAL_RCC_GetPCLK1Freq>
 8003426:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800342a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800342e:	69db      	ldr	r3, [r3, #28]
 8003430:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003434:	f040 810c 	bne.w	8003650 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003438:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800343c:	2200      	movs	r2, #0
 800343e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003442:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003446:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800344a:	4622      	mov	r2, r4
 800344c:	462b      	mov	r3, r5
 800344e:	1891      	adds	r1, r2, r2
 8003450:	65b9      	str	r1, [r7, #88]	; 0x58
 8003452:	415b      	adcs	r3, r3
 8003454:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003456:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800345a:	4621      	mov	r1, r4
 800345c:	eb12 0801 	adds.w	r8, r2, r1
 8003460:	4629      	mov	r1, r5
 8003462:	eb43 0901 	adc.w	r9, r3, r1
 8003466:	f04f 0200 	mov.w	r2, #0
 800346a:	f04f 0300 	mov.w	r3, #0
 800346e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003472:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003476:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800347a:	4690      	mov	r8, r2
 800347c:	4699      	mov	r9, r3
 800347e:	4623      	mov	r3, r4
 8003480:	eb18 0303 	adds.w	r3, r8, r3
 8003484:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003488:	462b      	mov	r3, r5
 800348a:	eb49 0303 	adc.w	r3, r9, r3
 800348e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800349e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80034a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80034a6:	460b      	mov	r3, r1
 80034a8:	18db      	adds	r3, r3, r3
 80034aa:	653b      	str	r3, [r7, #80]	; 0x50
 80034ac:	4613      	mov	r3, r2
 80034ae:	eb42 0303 	adc.w	r3, r2, r3
 80034b2:	657b      	str	r3, [r7, #84]	; 0x54
 80034b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80034b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80034bc:	f7fc feaa 	bl	8000214 <__aeabi_uldivmod>
 80034c0:	4602      	mov	r2, r0
 80034c2:	460b      	mov	r3, r1
 80034c4:	4b61      	ldr	r3, [pc, #388]	; (800364c <UART_SetConfig+0x2d4>)
 80034c6:	fba3 2302 	umull	r2, r3, r3, r2
 80034ca:	095b      	lsrs	r3, r3, #5
 80034cc:	011c      	lsls	r4, r3, #4
 80034ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034d2:	2200      	movs	r2, #0
 80034d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80034d8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80034dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80034e0:	4642      	mov	r2, r8
 80034e2:	464b      	mov	r3, r9
 80034e4:	1891      	adds	r1, r2, r2
 80034e6:	64b9      	str	r1, [r7, #72]	; 0x48
 80034e8:	415b      	adcs	r3, r3
 80034ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80034f0:	4641      	mov	r1, r8
 80034f2:	eb12 0a01 	adds.w	sl, r2, r1
 80034f6:	4649      	mov	r1, r9
 80034f8:	eb43 0b01 	adc.w	fp, r3, r1
 80034fc:	f04f 0200 	mov.w	r2, #0
 8003500:	f04f 0300 	mov.w	r3, #0
 8003504:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003508:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800350c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003510:	4692      	mov	sl, r2
 8003512:	469b      	mov	fp, r3
 8003514:	4643      	mov	r3, r8
 8003516:	eb1a 0303 	adds.w	r3, sl, r3
 800351a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800351e:	464b      	mov	r3, r9
 8003520:	eb4b 0303 	adc.w	r3, fp, r3
 8003524:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003534:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003538:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800353c:	460b      	mov	r3, r1
 800353e:	18db      	adds	r3, r3, r3
 8003540:	643b      	str	r3, [r7, #64]	; 0x40
 8003542:	4613      	mov	r3, r2
 8003544:	eb42 0303 	adc.w	r3, r2, r3
 8003548:	647b      	str	r3, [r7, #68]	; 0x44
 800354a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800354e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003552:	f7fc fe5f 	bl	8000214 <__aeabi_uldivmod>
 8003556:	4602      	mov	r2, r0
 8003558:	460b      	mov	r3, r1
 800355a:	4611      	mov	r1, r2
 800355c:	4b3b      	ldr	r3, [pc, #236]	; (800364c <UART_SetConfig+0x2d4>)
 800355e:	fba3 2301 	umull	r2, r3, r3, r1
 8003562:	095b      	lsrs	r3, r3, #5
 8003564:	2264      	movs	r2, #100	; 0x64
 8003566:	fb02 f303 	mul.w	r3, r2, r3
 800356a:	1acb      	subs	r3, r1, r3
 800356c:	00db      	lsls	r3, r3, #3
 800356e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003572:	4b36      	ldr	r3, [pc, #216]	; (800364c <UART_SetConfig+0x2d4>)
 8003574:	fba3 2302 	umull	r2, r3, r3, r2
 8003578:	095b      	lsrs	r3, r3, #5
 800357a:	005b      	lsls	r3, r3, #1
 800357c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003580:	441c      	add	r4, r3
 8003582:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003586:	2200      	movs	r2, #0
 8003588:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800358c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003590:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003594:	4642      	mov	r2, r8
 8003596:	464b      	mov	r3, r9
 8003598:	1891      	adds	r1, r2, r2
 800359a:	63b9      	str	r1, [r7, #56]	; 0x38
 800359c:	415b      	adcs	r3, r3
 800359e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80035a4:	4641      	mov	r1, r8
 80035a6:	1851      	adds	r1, r2, r1
 80035a8:	6339      	str	r1, [r7, #48]	; 0x30
 80035aa:	4649      	mov	r1, r9
 80035ac:	414b      	adcs	r3, r1
 80035ae:	637b      	str	r3, [r7, #52]	; 0x34
 80035b0:	f04f 0200 	mov.w	r2, #0
 80035b4:	f04f 0300 	mov.w	r3, #0
 80035b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80035bc:	4659      	mov	r1, fp
 80035be:	00cb      	lsls	r3, r1, #3
 80035c0:	4651      	mov	r1, sl
 80035c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035c6:	4651      	mov	r1, sl
 80035c8:	00ca      	lsls	r2, r1, #3
 80035ca:	4610      	mov	r0, r2
 80035cc:	4619      	mov	r1, r3
 80035ce:	4603      	mov	r3, r0
 80035d0:	4642      	mov	r2, r8
 80035d2:	189b      	adds	r3, r3, r2
 80035d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80035d8:	464b      	mov	r3, r9
 80035da:	460a      	mov	r2, r1
 80035dc:	eb42 0303 	adc.w	r3, r2, r3
 80035e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80035e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80035f0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80035f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80035f8:	460b      	mov	r3, r1
 80035fa:	18db      	adds	r3, r3, r3
 80035fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80035fe:	4613      	mov	r3, r2
 8003600:	eb42 0303 	adc.w	r3, r2, r3
 8003604:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003606:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800360a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800360e:	f7fc fe01 	bl	8000214 <__aeabi_uldivmod>
 8003612:	4602      	mov	r2, r0
 8003614:	460b      	mov	r3, r1
 8003616:	4b0d      	ldr	r3, [pc, #52]	; (800364c <UART_SetConfig+0x2d4>)
 8003618:	fba3 1302 	umull	r1, r3, r3, r2
 800361c:	095b      	lsrs	r3, r3, #5
 800361e:	2164      	movs	r1, #100	; 0x64
 8003620:	fb01 f303 	mul.w	r3, r1, r3
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	00db      	lsls	r3, r3, #3
 8003628:	3332      	adds	r3, #50	; 0x32
 800362a:	4a08      	ldr	r2, [pc, #32]	; (800364c <UART_SetConfig+0x2d4>)
 800362c:	fba2 2303 	umull	r2, r3, r2, r3
 8003630:	095b      	lsrs	r3, r3, #5
 8003632:	f003 0207 	and.w	r2, r3, #7
 8003636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4422      	add	r2, r4
 800363e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003640:	e105      	b.n	800384e <UART_SetConfig+0x4d6>
 8003642:	bf00      	nop
 8003644:	40011000 	.word	0x40011000
 8003648:	40011400 	.word	0x40011400
 800364c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003650:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003654:	2200      	movs	r2, #0
 8003656:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800365a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800365e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003662:	4642      	mov	r2, r8
 8003664:	464b      	mov	r3, r9
 8003666:	1891      	adds	r1, r2, r2
 8003668:	6239      	str	r1, [r7, #32]
 800366a:	415b      	adcs	r3, r3
 800366c:	627b      	str	r3, [r7, #36]	; 0x24
 800366e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003672:	4641      	mov	r1, r8
 8003674:	1854      	adds	r4, r2, r1
 8003676:	4649      	mov	r1, r9
 8003678:	eb43 0501 	adc.w	r5, r3, r1
 800367c:	f04f 0200 	mov.w	r2, #0
 8003680:	f04f 0300 	mov.w	r3, #0
 8003684:	00eb      	lsls	r3, r5, #3
 8003686:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800368a:	00e2      	lsls	r2, r4, #3
 800368c:	4614      	mov	r4, r2
 800368e:	461d      	mov	r5, r3
 8003690:	4643      	mov	r3, r8
 8003692:	18e3      	adds	r3, r4, r3
 8003694:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003698:	464b      	mov	r3, r9
 800369a:	eb45 0303 	adc.w	r3, r5, r3
 800369e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80036a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80036ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80036b2:	f04f 0200 	mov.w	r2, #0
 80036b6:	f04f 0300 	mov.w	r3, #0
 80036ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80036be:	4629      	mov	r1, r5
 80036c0:	008b      	lsls	r3, r1, #2
 80036c2:	4621      	mov	r1, r4
 80036c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036c8:	4621      	mov	r1, r4
 80036ca:	008a      	lsls	r2, r1, #2
 80036cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80036d0:	f7fc fda0 	bl	8000214 <__aeabi_uldivmod>
 80036d4:	4602      	mov	r2, r0
 80036d6:	460b      	mov	r3, r1
 80036d8:	4b60      	ldr	r3, [pc, #384]	; (800385c <UART_SetConfig+0x4e4>)
 80036da:	fba3 2302 	umull	r2, r3, r3, r2
 80036de:	095b      	lsrs	r3, r3, #5
 80036e0:	011c      	lsls	r4, r3, #4
 80036e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036e6:	2200      	movs	r2, #0
 80036e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80036ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80036f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80036f4:	4642      	mov	r2, r8
 80036f6:	464b      	mov	r3, r9
 80036f8:	1891      	adds	r1, r2, r2
 80036fa:	61b9      	str	r1, [r7, #24]
 80036fc:	415b      	adcs	r3, r3
 80036fe:	61fb      	str	r3, [r7, #28]
 8003700:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003704:	4641      	mov	r1, r8
 8003706:	1851      	adds	r1, r2, r1
 8003708:	6139      	str	r1, [r7, #16]
 800370a:	4649      	mov	r1, r9
 800370c:	414b      	adcs	r3, r1
 800370e:	617b      	str	r3, [r7, #20]
 8003710:	f04f 0200 	mov.w	r2, #0
 8003714:	f04f 0300 	mov.w	r3, #0
 8003718:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800371c:	4659      	mov	r1, fp
 800371e:	00cb      	lsls	r3, r1, #3
 8003720:	4651      	mov	r1, sl
 8003722:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003726:	4651      	mov	r1, sl
 8003728:	00ca      	lsls	r2, r1, #3
 800372a:	4610      	mov	r0, r2
 800372c:	4619      	mov	r1, r3
 800372e:	4603      	mov	r3, r0
 8003730:	4642      	mov	r2, r8
 8003732:	189b      	adds	r3, r3, r2
 8003734:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003738:	464b      	mov	r3, r9
 800373a:	460a      	mov	r2, r1
 800373c:	eb42 0303 	adc.w	r3, r2, r3
 8003740:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	67bb      	str	r3, [r7, #120]	; 0x78
 800374e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003750:	f04f 0200 	mov.w	r2, #0
 8003754:	f04f 0300 	mov.w	r3, #0
 8003758:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800375c:	4649      	mov	r1, r9
 800375e:	008b      	lsls	r3, r1, #2
 8003760:	4641      	mov	r1, r8
 8003762:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003766:	4641      	mov	r1, r8
 8003768:	008a      	lsls	r2, r1, #2
 800376a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800376e:	f7fc fd51 	bl	8000214 <__aeabi_uldivmod>
 8003772:	4602      	mov	r2, r0
 8003774:	460b      	mov	r3, r1
 8003776:	4b39      	ldr	r3, [pc, #228]	; (800385c <UART_SetConfig+0x4e4>)
 8003778:	fba3 1302 	umull	r1, r3, r3, r2
 800377c:	095b      	lsrs	r3, r3, #5
 800377e:	2164      	movs	r1, #100	; 0x64
 8003780:	fb01 f303 	mul.w	r3, r1, r3
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	011b      	lsls	r3, r3, #4
 8003788:	3332      	adds	r3, #50	; 0x32
 800378a:	4a34      	ldr	r2, [pc, #208]	; (800385c <UART_SetConfig+0x4e4>)
 800378c:	fba2 2303 	umull	r2, r3, r2, r3
 8003790:	095b      	lsrs	r3, r3, #5
 8003792:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003796:	441c      	add	r4, r3
 8003798:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800379c:	2200      	movs	r2, #0
 800379e:	673b      	str	r3, [r7, #112]	; 0x70
 80037a0:	677a      	str	r2, [r7, #116]	; 0x74
 80037a2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80037a6:	4642      	mov	r2, r8
 80037a8:	464b      	mov	r3, r9
 80037aa:	1891      	adds	r1, r2, r2
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	415b      	adcs	r3, r3
 80037b0:	60fb      	str	r3, [r7, #12]
 80037b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037b6:	4641      	mov	r1, r8
 80037b8:	1851      	adds	r1, r2, r1
 80037ba:	6039      	str	r1, [r7, #0]
 80037bc:	4649      	mov	r1, r9
 80037be:	414b      	adcs	r3, r1
 80037c0:	607b      	str	r3, [r7, #4]
 80037c2:	f04f 0200 	mov.w	r2, #0
 80037c6:	f04f 0300 	mov.w	r3, #0
 80037ca:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80037ce:	4659      	mov	r1, fp
 80037d0:	00cb      	lsls	r3, r1, #3
 80037d2:	4651      	mov	r1, sl
 80037d4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037d8:	4651      	mov	r1, sl
 80037da:	00ca      	lsls	r2, r1, #3
 80037dc:	4610      	mov	r0, r2
 80037de:	4619      	mov	r1, r3
 80037e0:	4603      	mov	r3, r0
 80037e2:	4642      	mov	r2, r8
 80037e4:	189b      	adds	r3, r3, r2
 80037e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80037e8:	464b      	mov	r3, r9
 80037ea:	460a      	mov	r2, r1
 80037ec:	eb42 0303 	adc.w	r3, r2, r3
 80037f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80037f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	663b      	str	r3, [r7, #96]	; 0x60
 80037fc:	667a      	str	r2, [r7, #100]	; 0x64
 80037fe:	f04f 0200 	mov.w	r2, #0
 8003802:	f04f 0300 	mov.w	r3, #0
 8003806:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800380a:	4649      	mov	r1, r9
 800380c:	008b      	lsls	r3, r1, #2
 800380e:	4641      	mov	r1, r8
 8003810:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003814:	4641      	mov	r1, r8
 8003816:	008a      	lsls	r2, r1, #2
 8003818:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800381c:	f7fc fcfa 	bl	8000214 <__aeabi_uldivmod>
 8003820:	4602      	mov	r2, r0
 8003822:	460b      	mov	r3, r1
 8003824:	4b0d      	ldr	r3, [pc, #52]	; (800385c <UART_SetConfig+0x4e4>)
 8003826:	fba3 1302 	umull	r1, r3, r3, r2
 800382a:	095b      	lsrs	r3, r3, #5
 800382c:	2164      	movs	r1, #100	; 0x64
 800382e:	fb01 f303 	mul.w	r3, r1, r3
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	011b      	lsls	r3, r3, #4
 8003836:	3332      	adds	r3, #50	; 0x32
 8003838:	4a08      	ldr	r2, [pc, #32]	; (800385c <UART_SetConfig+0x4e4>)
 800383a:	fba2 2303 	umull	r2, r3, r2, r3
 800383e:	095b      	lsrs	r3, r3, #5
 8003840:	f003 020f 	and.w	r2, r3, #15
 8003844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4422      	add	r2, r4
 800384c:	609a      	str	r2, [r3, #8]
}
 800384e:	bf00      	nop
 8003850:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003854:	46bd      	mov	sp, r7
 8003856:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800385a:	bf00      	nop
 800385c:	51eb851f 	.word	0x51eb851f

08003860 <__libc_init_array>:
 8003860:	b570      	push	{r4, r5, r6, lr}
 8003862:	4d0d      	ldr	r5, [pc, #52]	; (8003898 <__libc_init_array+0x38>)
 8003864:	4c0d      	ldr	r4, [pc, #52]	; (800389c <__libc_init_array+0x3c>)
 8003866:	1b64      	subs	r4, r4, r5
 8003868:	10a4      	asrs	r4, r4, #2
 800386a:	2600      	movs	r6, #0
 800386c:	42a6      	cmp	r6, r4
 800386e:	d109      	bne.n	8003884 <__libc_init_array+0x24>
 8003870:	4d0b      	ldr	r5, [pc, #44]	; (80038a0 <__libc_init_array+0x40>)
 8003872:	4c0c      	ldr	r4, [pc, #48]	; (80038a4 <__libc_init_array+0x44>)
 8003874:	f000 f88c 	bl	8003990 <_init>
 8003878:	1b64      	subs	r4, r4, r5
 800387a:	10a4      	asrs	r4, r4, #2
 800387c:	2600      	movs	r6, #0
 800387e:	42a6      	cmp	r6, r4
 8003880:	d105      	bne.n	800388e <__libc_init_array+0x2e>
 8003882:	bd70      	pop	{r4, r5, r6, pc}
 8003884:	f855 3b04 	ldr.w	r3, [r5], #4
 8003888:	4798      	blx	r3
 800388a:	3601      	adds	r6, #1
 800388c:	e7ee      	b.n	800386c <__libc_init_array+0xc>
 800388e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003892:	4798      	blx	r3
 8003894:	3601      	adds	r6, #1
 8003896:	e7f2      	b.n	800387e <__libc_init_array+0x1e>
 8003898:	08004ca0 	.word	0x08004ca0
 800389c:	08004ca0 	.word	0x08004ca0
 80038a0:	08004ca0 	.word	0x08004ca0
 80038a4:	08004ca4 	.word	0x08004ca4

080038a8 <__itoa>:
 80038a8:	1e93      	subs	r3, r2, #2
 80038aa:	2b22      	cmp	r3, #34	; 0x22
 80038ac:	b510      	push	{r4, lr}
 80038ae:	460c      	mov	r4, r1
 80038b0:	d904      	bls.n	80038bc <__itoa+0x14>
 80038b2:	2300      	movs	r3, #0
 80038b4:	700b      	strb	r3, [r1, #0]
 80038b6:	461c      	mov	r4, r3
 80038b8:	4620      	mov	r0, r4
 80038ba:	bd10      	pop	{r4, pc}
 80038bc:	2a0a      	cmp	r2, #10
 80038be:	d109      	bne.n	80038d4 <__itoa+0x2c>
 80038c0:	2800      	cmp	r0, #0
 80038c2:	da07      	bge.n	80038d4 <__itoa+0x2c>
 80038c4:	232d      	movs	r3, #45	; 0x2d
 80038c6:	700b      	strb	r3, [r1, #0]
 80038c8:	4240      	negs	r0, r0
 80038ca:	2101      	movs	r1, #1
 80038cc:	4421      	add	r1, r4
 80038ce:	f000 f81d 	bl	800390c <__utoa>
 80038d2:	e7f1      	b.n	80038b8 <__itoa+0x10>
 80038d4:	2100      	movs	r1, #0
 80038d6:	e7f9      	b.n	80038cc <__itoa+0x24>

080038d8 <itoa>:
 80038d8:	f7ff bfe6 	b.w	80038a8 <__itoa>

080038dc <memcmp>:
 80038dc:	b510      	push	{r4, lr}
 80038de:	3901      	subs	r1, #1
 80038e0:	4402      	add	r2, r0
 80038e2:	4290      	cmp	r0, r2
 80038e4:	d101      	bne.n	80038ea <memcmp+0xe>
 80038e6:	2000      	movs	r0, #0
 80038e8:	e005      	b.n	80038f6 <memcmp+0x1a>
 80038ea:	7803      	ldrb	r3, [r0, #0]
 80038ec:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80038f0:	42a3      	cmp	r3, r4
 80038f2:	d001      	beq.n	80038f8 <memcmp+0x1c>
 80038f4:	1b18      	subs	r0, r3, r4
 80038f6:	bd10      	pop	{r4, pc}
 80038f8:	3001      	adds	r0, #1
 80038fa:	e7f2      	b.n	80038e2 <memcmp+0x6>

080038fc <memset>:
 80038fc:	4402      	add	r2, r0
 80038fe:	4603      	mov	r3, r0
 8003900:	4293      	cmp	r3, r2
 8003902:	d100      	bne.n	8003906 <memset+0xa>
 8003904:	4770      	bx	lr
 8003906:	f803 1b01 	strb.w	r1, [r3], #1
 800390a:	e7f9      	b.n	8003900 <memset+0x4>

0800390c <__utoa>:
 800390c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800390e:	4c1f      	ldr	r4, [pc, #124]	; (800398c <__utoa+0x80>)
 8003910:	b08b      	sub	sp, #44	; 0x2c
 8003912:	4605      	mov	r5, r0
 8003914:	460b      	mov	r3, r1
 8003916:	466e      	mov	r6, sp
 8003918:	f104 0c20 	add.w	ip, r4, #32
 800391c:	6820      	ldr	r0, [r4, #0]
 800391e:	6861      	ldr	r1, [r4, #4]
 8003920:	4637      	mov	r7, r6
 8003922:	c703      	stmia	r7!, {r0, r1}
 8003924:	3408      	adds	r4, #8
 8003926:	4564      	cmp	r4, ip
 8003928:	463e      	mov	r6, r7
 800392a:	d1f7      	bne.n	800391c <__utoa+0x10>
 800392c:	7921      	ldrb	r1, [r4, #4]
 800392e:	7139      	strb	r1, [r7, #4]
 8003930:	1e91      	subs	r1, r2, #2
 8003932:	6820      	ldr	r0, [r4, #0]
 8003934:	6038      	str	r0, [r7, #0]
 8003936:	2922      	cmp	r1, #34	; 0x22
 8003938:	f04f 0100 	mov.w	r1, #0
 800393c:	d904      	bls.n	8003948 <__utoa+0x3c>
 800393e:	7019      	strb	r1, [r3, #0]
 8003940:	460b      	mov	r3, r1
 8003942:	4618      	mov	r0, r3
 8003944:	b00b      	add	sp, #44	; 0x2c
 8003946:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003948:	1e58      	subs	r0, r3, #1
 800394a:	4684      	mov	ip, r0
 800394c:	fbb5 f7f2 	udiv	r7, r5, r2
 8003950:	fb02 5617 	mls	r6, r2, r7, r5
 8003954:	3628      	adds	r6, #40	; 0x28
 8003956:	446e      	add	r6, sp
 8003958:	460c      	mov	r4, r1
 800395a:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800395e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8003962:	462e      	mov	r6, r5
 8003964:	42b2      	cmp	r2, r6
 8003966:	f101 0101 	add.w	r1, r1, #1
 800396a:	463d      	mov	r5, r7
 800396c:	d9ee      	bls.n	800394c <__utoa+0x40>
 800396e:	2200      	movs	r2, #0
 8003970:	545a      	strb	r2, [r3, r1]
 8003972:	1919      	adds	r1, r3, r4
 8003974:	1aa5      	subs	r5, r4, r2
 8003976:	42aa      	cmp	r2, r5
 8003978:	dae3      	bge.n	8003942 <__utoa+0x36>
 800397a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800397e:	780e      	ldrb	r6, [r1, #0]
 8003980:	7006      	strb	r6, [r0, #0]
 8003982:	3201      	adds	r2, #1
 8003984:	f801 5901 	strb.w	r5, [r1], #-1
 8003988:	e7f4      	b.n	8003974 <__utoa+0x68>
 800398a:	bf00      	nop
 800398c:	08004c70 	.word	0x08004c70

08003990 <_init>:
 8003990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003992:	bf00      	nop
 8003994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003996:	bc08      	pop	{r3}
 8003998:	469e      	mov	lr, r3
 800399a:	4770      	bx	lr

0800399c <_fini>:
 800399c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800399e:	bf00      	nop
 80039a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039a2:	bc08      	pop	{r3}
 80039a4:	469e      	mov	lr, r3
 80039a6:	4770      	bx	lr
